/*
 * FactSet Ownership API
 *
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetOwnership.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetOwnership.Model
{
    /// <summary>
    /// fundHolding response object
    /// </summary>
    [DataContract(Name = "fundHolding")]
    public partial class FundHolding : IEquatable<FundHolding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundHolding" /> class.
        /// </summary>
        /// <param name="requestId">Fund Identifier that was used in the request..</param>
        /// <param name="fsymId">FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier..</param>
        /// <param name="date">Date of the reported holding in YYYY-MM-DD format. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262)..</param>
        /// <param name="currency">Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="adjHolding">Adjusted number of shares held. All positions and prices are adjusted for splits and name changes, but they are not adjusted for spinoffs or mergers. If a given company announces a split today, FactSet&#39;s Ownership data will reflect that split either tomorrow or the day after, depending upon the time in which the FactSet Symbology team makes record of the change. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262)..</param>
        /// <param name="adjMarketValue">Adjusted market values of shares held. Market Value. All positions and prices are adjusted for splits and name changes, but they are not adjusted for spinoffs or mergers. If a given company announces a split today, FactSet&#39;s Ownership data will reflect that split either tomorrow or the day after, depending upon the time in which the FactSet Symbology team makes record of the change. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262)..</param>
        /// <param name="weightClose">Closing weight of security in the fund for the requested asset type (percent)..</param>
        /// <param name="issueType">Issue type of held security. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262)..</param>
        /// <param name="fsymSecurityId">Represents the security id for the underlying holding, not the parent holding. Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier..</param>
        /// <param name="fsymRegionalId">FactSet Regional Security identifier of the security held in the fund..</param>
        /// <param name="securityName">Name of held security..</param>
        /// <param name="securityTicker">Ticker of held security..</param>
        public FundHolding(string requestId = default(string), string fsymId = default(string), DateTime? date = default(DateTime?), string currency = default(string), double? adjHolding = default(double?), double? adjMarketValue = default(double?), double? weightClose = default(double?), string issueType = default(string), string fsymSecurityId = default(string), string fsymRegionalId = default(string), string securityName = default(string), string securityTicker = default(string))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Date = date;
            this.Currency = currency;
            this.AdjHolding = adjHolding;
            this.AdjMarketValue = adjMarketValue;
            this.WeightClose = weightClose;
            this.IssueType = issueType;
            this.FsymSecurityId = fsymSecurityId;
            this.FsymRegionalId = fsymRegionalId;
            this.SecurityName = securityName;
            this.SecurityTicker = securityTicker;
        }

        /// <summary>
        /// Fund Identifier that was used in the request.
        /// </summary>
        /// <value>Fund Identifier that was used in the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.
        /// </summary>
        /// <value>FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Date of the reported holding in YYYY-MM-DD format. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).
        /// </summary>
        /// <value>Date of the reported holding in YYYY-MM-DD format. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Adjusted number of shares held. All positions and prices are adjusted for splits and name changes, but they are not adjusted for spinoffs or mergers. If a given company announces a split today, FactSet&#39;s Ownership data will reflect that split either tomorrow or the day after, depending upon the time in which the FactSet Symbology team makes record of the change. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).
        /// </summary>
        /// <value>Adjusted number of shares held. All positions and prices are adjusted for splits and name changes, but they are not adjusted for spinoffs or mergers. If a given company announces a split today, FactSet&#39;s Ownership data will reflect that split either tomorrow or the day after, depending upon the time in which the FactSet Symbology team makes record of the change. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).</value>
        [DataMember(Name = "adjHolding", EmitDefaultValue = true)]
        public double? AdjHolding { get; set; }

        /// <summary>
        /// Adjusted market values of shares held. Market Value. All positions and prices are adjusted for splits and name changes, but they are not adjusted for spinoffs or mergers. If a given company announces a split today, FactSet&#39;s Ownership data will reflect that split either tomorrow or the day after, depending upon the time in which the FactSet Symbology team makes record of the change. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).
        /// </summary>
        /// <value>Adjusted market values of shares held. Market Value. All positions and prices are adjusted for splits and name changes, but they are not adjusted for spinoffs or mergers. If a given company announces a split today, FactSet&#39;s Ownership data will reflect that split either tomorrow or the day after, depending upon the time in which the FactSet Symbology team makes record of the change. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).</value>
        [DataMember(Name = "adjMarketValue", EmitDefaultValue = true)]
        public double? AdjMarketValue { get; set; }

        /// <summary>
        /// Closing weight of security in the fund for the requested asset type (percent).
        /// </summary>
        /// <value>Closing weight of security in the fund for the requested asset type (percent).</value>
        [DataMember(Name = "weightClose", EmitDefaultValue = true)]
        public double? WeightClose { get; set; }

        /// <summary>
        /// Issue type of held security. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).
        /// </summary>
        /// <value>Issue type of held security. For more details, visit [Online Assistant Page #11262](https://oa.apps.factset.com/pages/11262).</value>
        [DataMember(Name = "issueType", EmitDefaultValue = true)]
        public string IssueType { get; set; }

        /// <summary>
        /// Represents the security id for the underlying holding, not the parent holding. Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.
        /// </summary>
        /// <value>Represents the security id for the underlying holding, not the parent holding. Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.</value>
        [DataMember(Name = "fsymSecurityId", EmitDefaultValue = true)]
        public string FsymSecurityId { get; set; }

        /// <summary>
        /// FactSet Regional Security identifier of the security held in the fund.
        /// </summary>
        /// <value>FactSet Regional Security identifier of the security held in the fund.</value>
        [DataMember(Name = "fsymRegionalId", EmitDefaultValue = true)]
        public string FsymRegionalId { get; set; }

        /// <summary>
        /// Name of held security.
        /// </summary>
        /// <value>Name of held security.</value>
        [DataMember(Name = "securityName", EmitDefaultValue = true)]
        public string SecurityName { get; set; }

        /// <summary>
        /// Ticker of held security.
        /// </summary>
        /// <value>Ticker of held security.</value>
        [DataMember(Name = "securityTicker", EmitDefaultValue = true)]
        public string SecurityTicker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundHolding {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  AdjHolding: ").Append(AdjHolding).Append("\n");
            sb.Append("  AdjMarketValue: ").Append(AdjMarketValue).Append("\n");
            sb.Append("  WeightClose: ").Append(WeightClose).Append("\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  FsymSecurityId: ").Append(FsymSecurityId).Append("\n");
            sb.Append("  FsymRegionalId: ").Append(FsymRegionalId).Append("\n");
            sb.Append("  SecurityName: ").Append(SecurityName).Append("\n");
            sb.Append("  SecurityTicker: ").Append(SecurityTicker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundHolding);
        }

        /// <summary>
        /// Returns true if FundHolding instances are equal
        /// </summary>
        /// <param name="input">Instance of FundHolding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundHolding input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.AdjHolding == input.AdjHolding ||
                    (this.AdjHolding != null &&
                    this.AdjHolding.Equals(input.AdjHolding))
                ) && 
                (
                    this.AdjMarketValue == input.AdjMarketValue ||
                    (this.AdjMarketValue != null &&
                    this.AdjMarketValue.Equals(input.AdjMarketValue))
                ) && 
                (
                    this.WeightClose == input.WeightClose ||
                    (this.WeightClose != null &&
                    this.WeightClose.Equals(input.WeightClose))
                ) && 
                (
                    this.IssueType == input.IssueType ||
                    (this.IssueType != null &&
                    this.IssueType.Equals(input.IssueType))
                ) && 
                (
                    this.FsymSecurityId == input.FsymSecurityId ||
                    (this.FsymSecurityId != null &&
                    this.FsymSecurityId.Equals(input.FsymSecurityId))
                ) && 
                (
                    this.FsymRegionalId == input.FsymRegionalId ||
                    (this.FsymRegionalId != null &&
                    this.FsymRegionalId.Equals(input.FsymRegionalId))
                ) && 
                (
                    this.SecurityName == input.SecurityName ||
                    (this.SecurityName != null &&
                    this.SecurityName.Equals(input.SecurityName))
                ) && 
                (
                    this.SecurityTicker == input.SecurityTicker ||
                    (this.SecurityTicker != null &&
                    this.SecurityTicker.Equals(input.SecurityTicker))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.AdjHolding != null)
                {
                    hashCode = (hashCode * 59) + this.AdjHolding.GetHashCode();
                }
                if (this.AdjMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.AdjMarketValue.GetHashCode();
                }
                if (this.WeightClose != null)
                {
                    hashCode = (hashCode * 59) + this.WeightClose.GetHashCode();
                }
                if (this.IssueType != null)
                {
                    hashCode = (hashCode * 59) + this.IssueType.GetHashCode();
                }
                if (this.FsymSecurityId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymSecurityId.GetHashCode();
                }
                if (this.FsymRegionalId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymRegionalId.GetHashCode();
                }
                if (this.SecurityName != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityName.GetHashCode();
                }
                if (this.SecurityTicker != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityTicker.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
