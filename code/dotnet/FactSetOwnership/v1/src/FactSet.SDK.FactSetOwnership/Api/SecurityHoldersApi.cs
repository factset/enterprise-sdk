/*
 * FactSet Ownership API
 *
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetOwnership.Client;
using FactSet.SDK.FactSetOwnership.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetOwnership.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityHoldersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get security ownership data for requested security identifers.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>SecurityHoldersResponse</returns>
        SecurityHoldersResponse GetSecurityHolders(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string));

        /// <summary>
        /// Get security ownership data for requested security identifers.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of SecurityHoldersResponse</returns>
        ApiResponse<SecurityHoldersResponse> GetSecurityHoldersWithHttpInfo(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string));
        /// <summary>
        /// Get security ownership data for a list of requested securities.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <returns>SecurityHoldersResponse</returns>
        SecurityHoldersResponse PostSecurityHolders(SecurityHoldersRequest securityHoldersRequest);

        /// <summary>
        /// Get security ownership data for a list of requested securities.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <returns>ApiResponse of SecurityHoldersResponse</returns>
        ApiResponse<SecurityHoldersResponse> PostSecurityHoldersWithHttpInfo(SecurityHoldersRequest securityHoldersRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityHoldersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get security ownership data for requested security identifers.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityHoldersResponse</returns>
        System.Threading.Tasks.Task<SecurityHoldersResponse> GetSecurityHoldersAsync(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get security ownership data for requested security identifers.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityHoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityHoldersResponse>> GetSecurityHoldersWithHttpInfoAsync(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get security ownership data for a list of requested securities.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityHoldersResponse</returns>
        System.Threading.Tasks.Task<SecurityHoldersResponse> PostSecurityHoldersAsync(SecurityHoldersRequest securityHoldersRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get security ownership data for a list of requested securities.
        /// </summary>
        /// <remarks>
        /// Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityHoldersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityHoldersResponse>> PostSecurityHoldersWithHttpInfoAsync(SecurityHoldersRequest securityHoldersRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityHoldersApi : ISecurityHoldersApiSync, ISecurityHoldersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityHoldersApi : ISecurityHoldersApi
    {
        private FactSet.SDK.FactSetOwnership.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetSecurityHoldersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SecurityHoldersResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostSecurityHoldersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SecurityHoldersResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityHoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityHoldersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityHoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityHoldersApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetOwnership.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnership.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetOwnership.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityHoldersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityHoldersApi(FactSet.SDK.FactSetOwnership.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetOwnership.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnership.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityHoldersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SecurityHoldersApi(FactSet.SDK.FactSetOwnership.Client.ISynchronousClient client, FactSet.SDK.FactSetOwnership.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetOwnership.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetOwnership.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get security ownership data for requested security identifers. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>SecurityHoldersResponse</returns>
        public SecurityHoldersResponse GetSecurityHolders(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string))
        {
            var localVarResponse = GetSecurityHoldersWithHttpInfo(ids, holderType, topn, date, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get security ownership data for requested security identifers. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of SecurityHoldersResponse</returns>
        public ApiResponse<SecurityHoldersResponse> GetSecurityHoldersWithHttpInfo(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling SecurityHoldersApi->GetSecurityHolders");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "holderType", holderType));
            }
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSecurityHoldersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SecurityHoldersResponse>("/factset-ownership/v1/security-holders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecurityHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get security ownership data for requested security identifers. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityHoldersResponse</returns>
        public async System.Threading.Tasks.Task<SecurityHoldersResponse>GetSecurityHoldersAsync(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSecurityHoldersWithHttpInfoAsync(ids, holderType, topn, date, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get security ownership data for requested security identifers. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  1 per request*&lt;/p&gt;.</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityHoldersResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SecurityHoldersResponse>> GetSecurityHoldersWithHttpInfoAsync(List<string> ids, string holderType = default(string), string topn = default(string), string date = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling SecurityHoldersApi->GetSecurityHolders");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "holderType", holderType));
            }
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSecurityHoldersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SecurityHoldersResponse>("/factset-ownership/v1/security-holders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecurityHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get security ownership data for a list of requested securities. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <returns>SecurityHoldersResponse</returns>
        public SecurityHoldersResponse PostSecurityHolders(SecurityHoldersRequest securityHoldersRequest)
        {
            var localVarResponse = PostSecurityHoldersWithHttpInfo(securityHoldersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get security ownership data for a list of requested securities. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <returns>ApiResponse of SecurityHoldersResponse</returns>
        public ApiResponse<SecurityHoldersResponse> PostSecurityHoldersWithHttpInfo(SecurityHoldersRequest securityHoldersRequest)
        {
            // verify the required parameter 'securityHoldersRequest' is set
            if (securityHoldersRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'securityHoldersRequest' when calling SecurityHoldersApi->PostSecurityHolders");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = securityHoldersRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostSecurityHoldersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            SecurityHoldersResponse>("/factset-ownership/v1/security-holders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecurityHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get security ownership data for a list of requested securities. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityHoldersResponse</returns>
        public async System.Threading.Tasks.Task<SecurityHoldersResponse>PostSecurityHoldersAsync(SecurityHoldersRequest securityHoldersRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostSecurityHoldersWithHttpInfoAsync(securityHoldersRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get security ownership data for a list of requested securities. Gets security ownership details and activity for the requested security identifiers. The services allows filtering by \&quot;Topn\&quot; holders and by holder \&quot;type\&quot;, such as Institutions, Insiders, and Stakeholders. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityHoldersRequest">Requesting Security Holders for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityHoldersResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SecurityHoldersResponse>> PostSecurityHoldersWithHttpInfoAsync(SecurityHoldersRequest securityHoldersRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'securityHoldersRequest' is set
            if (securityHoldersRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'securityHoldersRequest' when calling SecurityHoldersApi->PostSecurityHolders");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = securityHoldersRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostSecurityHoldersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SecurityHoldersResponse>("/factset-ownership/v1/security-holders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSecurityHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
