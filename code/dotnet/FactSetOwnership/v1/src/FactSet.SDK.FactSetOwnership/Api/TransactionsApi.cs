/*
 * FactSet Ownership API
 *
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetOwnership.Client;
using FactSet.SDK.FactSetOwnership.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetOwnership.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>InsiderTransactionsResponse</returns>
        InsiderTransactionsResponse GetOwnershipInsiderTransactions(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string));

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of InsiderTransactionsResponse</returns>
        ApiResponse<InsiderTransactionsResponse> GetOwnershipInsiderTransactionsWithHttpInfo(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string));
        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Get institutional transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <returns>InstitutionalTransactionsResponse</returns>
        InstitutionalTransactionsResponse GetOwnershipInstitutionalTransactions(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string));

        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Get institutional transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <returns>ApiResponse of InstitutionalTransactionsResponse</returns>
        ApiResponse<InstitutionalTransactionsResponse> GetOwnershipInstitutionalTransactionsWithHttpInfo(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string));
        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <returns>InsiderTransactionsResponse</returns>
        InsiderTransactionsResponse PostOwnershipInsiderTransactions(InsiderTransactionsRequest insiderTransactionsRequest);

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <returns>ApiResponse of InsiderTransactionsResponse</returns>
        ApiResponse<InsiderTransactionsResponse> PostOwnershipInsiderTransactionsWithHttpInfo(InsiderTransactionsRequest insiderTransactionsRequest);
        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <returns>InstitutionalTransactionsResponse</returns>
        InstitutionalTransactionsResponse PostOwnershipInstituionalTransactions(InstitutionalTransactionsRequest institutionalTransactionsRequest);

        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <returns>ApiResponse of InstitutionalTransactionsResponse</returns>
        ApiResponse<InstitutionalTransactionsResponse> PostOwnershipInstituionalTransactionsWithHttpInfo(InstitutionalTransactionsRequest institutionalTransactionsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsiderTransactionsResponse</returns>
        System.Threading.Tasks.Task<InsiderTransactionsResponse> GetOwnershipInsiderTransactionsAsync(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsiderTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsiderTransactionsResponse>> GetOwnershipInsiderTransactionsWithHttpInfoAsync(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Get institutional transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionalTransactionsResponse</returns>
        System.Threading.Tasks.Task<InstitutionalTransactionsResponse> GetOwnershipInstitutionalTransactionsAsync(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Get institutional transaction details for a list of requested identifiers. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionalTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionalTransactionsResponse>> GetOwnershipInstitutionalTransactionsWithHttpInfoAsync(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsiderTransactionsResponse</returns>
        System.Threading.Tasks.Task<InsiderTransactionsResponse> PostOwnershipInsiderTransactionsAsync(InsiderTransactionsRequest insiderTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets insider transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsiderTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsiderTransactionsResponse>> PostOwnershipInsiderTransactionsWithHttpInfoAsync(InsiderTransactionsRequest insiderTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionalTransactionsResponse</returns>
        System.Threading.Tasks.Task<InstitutionalTransactionsResponse> PostOwnershipInstituionalTransactionsAsync(InstitutionalTransactionsRequest institutionalTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <remarks>
        /// Gets institutional transaction details for a list of requested identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionalTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstitutionalTransactionsResponse>> PostOwnershipInstituionalTransactionsWithHttpInfoAsync(InstitutionalTransactionsRequest institutionalTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionsApi : ITransactionsApiSync, ITransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionsApi : ITransactionsApi
    {
        private FactSet.SDK.FactSetOwnership.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOwnershipInsiderTransactionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InsiderTransactionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOwnershipInstitutionalTransactionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InstitutionalTransactionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostOwnershipInsiderTransactionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InsiderTransactionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostOwnershipInstituionalTransactionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InstitutionalTransactionsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetOwnership.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnership.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetOwnership.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionsApi(FactSet.SDK.FactSetOwnership.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetOwnership.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnership.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionsApi(FactSet.SDK.FactSetOwnership.Client.ISynchronousClient client, FactSet.SDK.FactSetOwnership.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetOwnership.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetOwnership.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>InsiderTransactionsResponse</returns>
        public InsiderTransactionsResponse GetOwnershipInsiderTransactions(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string))
        {
            var localVarResponse = GetOwnershipInsiderTransactionsWithHttpInfo(ids, startDate, endDate, transactionType, rowExclusion, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of InsiderTransactionsResponse</returns>
        public ApiResponse<InsiderTransactionsResponse> GetOwnershipInsiderTransactionsWithHttpInfo(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling TransactionsApi->GetOwnershipInsiderTransactions");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "transactionType", transactionType));
            }
            if (rowExclusion != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "rowExclusion", rowExclusion));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipInsiderTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InsiderTransactionsResponse>("/factset-ownership/v1/transactions/insider", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipInsiderTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsiderTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<InsiderTransactionsResponse>GetOwnershipInsiderTransactionsAsync(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOwnershipInsiderTransactionsWithHttpInfoAsync(ids, startDate, endDate, transactionType, rowExclusion, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="transactionType">Controls the Transaction Type of the data returned. By default, the service will return All Transaction Types.   * **A** &#x3D; All Transaction Types - returns all available transaction types.   * **P** &#x3D; Open Market Purchases - shares on the open market.   * **S** &#x3D;  Open Market Sales - selling shares on the open market.   * **PS** &#x3D; Open Market Purchases &amp; Sales - buying and selling shares on the open market.   * **O** &#x3D; Options Exercised - executing stock options to acquire shares.   * **M** &#x3D; Other Transactions - any other types of equity-related actions not covered above.  (optional, default to A)</param>
        /// <param name="rowExclusion">Controls the exlcusion of specific transaction rows from the data returned. By default, the service will exclude Derivative and Blank Transaction Types.   * **DB** &#x3D;  Derivative and Blank Transaction Types - excludes both derivative and blank transaction types.   * **B** &#x3D; Blank Transaction Types - excludes only blank transaction types.   * **N** &#x3D;   None - includes all transaction types without exclusion.  (optional, default to DB)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsiderTransactionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InsiderTransactionsResponse>> GetOwnershipInsiderTransactionsWithHttpInfoAsync(List<string> ids, DateTime startDate, DateTime endDate, string transactionType = default(string), string rowExclusion = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling TransactionsApi->GetOwnershipInsiderTransactions");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            if (transactionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "transactionType", transactionType));
            }
            if (rowExclusion != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "rowExclusion", rowExclusion));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipInsiderTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsiderTransactionsResponse>("/factset-ownership/v1/transactions/insider", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipInsiderTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers. Get institutional transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <returns>InstitutionalTransactionsResponse</returns>
        public InstitutionalTransactionsResponse GetOwnershipInstitutionalTransactions(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string))
        {
            var localVarResponse = GetOwnershipInstitutionalTransactionsWithHttpInfo(ids, startDate, endDate, currency, frequency, topNHolders, holderType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers. Get institutional transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <returns>ApiResponse of InstitutionalTransactionsResponse</returns>
        public ApiResponse<InstitutionalTransactionsResponse> GetOwnershipInstitutionalTransactionsWithHttpInfo(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling TransactionsApi->GetOwnershipInstitutionalTransactions");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (topNHolders != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "topNHolders", topNHolders));
            }
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "holderType", holderType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipInstitutionalTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InstitutionalTransactionsResponse>("/factset-ownership/v1/transactions/institutional", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipInstitutionalTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers. Get institutional transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionalTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<InstitutionalTransactionsResponse>GetOwnershipInstitutionalTransactionsAsync(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOwnershipInstitutionalTransactionsWithHttpInfoAsync(ids, startDate, endDate, currency, frequency, topNHolders, holderType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get institutional transaction details for a list of requested identifiers. Get institutional transaction details for a list of requested identifiers. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Requested list of security identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p  &gt;.</param>
        /// <param name="startDate">The start date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="endDate">The end date requested for a given date range in **YYYY-MM-DD** format. Future dates (T+1) are not accepted in this endpoint. </param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="frequency">Controls the display frequency of the data returned.   * **M** &#x3D; Monthly, based on the last trading day of the month.   * **MTD** &#x3D; Month-to-date   * **CQ** &#x3D; Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **CQTD** &#x3D;  Calendar quarter-to-date   * **CY** &#x3D; Calendar Annual, based on the last trading day of the calendar year.   * **CYTD** &#x3D; Calendar Year-to-date.  (optional, default to M)</param>
        /// <param name="topNHolders">Specifies the number of top holders whose data is returned.   * **ALL** &#x3D; All holders   * **5** &#x3D; Top 5 Institutional Holders   * **10** &#x3D; Top 10 Institutional Holders   * **25** &#x3D; Top 25 Institutional Holders   * **50** &#x3D; Top 50 Institutional Holders   * **100** &#x3D; Top 100 Institutional Holders  (optional, default to 25)</param>
        /// <param name="holderType">Controls the Holder Type of the data returned. By default, the service will return Institutional Holders. Requesting All Holders is not currently supported. Only a single Holder Type is allowed per request.   * **F** &#x3D; Institutions   * **M** &#x3D; Mutual Funds   * **S** &#x3D;  Insiders/Stakeholders   * **FS** &#x3D; Institutions/Insiders   * **B** &#x3D; Beneficial Owners  (optional, default to F)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionalTransactionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InstitutionalTransactionsResponse>> GetOwnershipInstitutionalTransactionsWithHttpInfoAsync(List<string> ids, DateTime startDate, DateTime endDate, string currency = default(string), string frequency = default(string), string topNHolders = default(string), string holderType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling TransactionsApi->GetOwnershipInstitutionalTransactions");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "frequency", frequency));
            }
            if (topNHolders != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "topNHolders", topNHolders));
            }
            if (holderType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "holderType", holderType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipInstitutionalTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InstitutionalTransactionsResponse>("/factset-ownership/v1/transactions/institutional", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipInstitutionalTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <returns>InsiderTransactionsResponse</returns>
        public InsiderTransactionsResponse PostOwnershipInsiderTransactions(InsiderTransactionsRequest insiderTransactionsRequest)
        {
            var localVarResponse = PostOwnershipInsiderTransactionsWithHttpInfo(insiderTransactionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <returns>ApiResponse of InsiderTransactionsResponse</returns>
        public ApiResponse<InsiderTransactionsResponse> PostOwnershipInsiderTransactionsWithHttpInfo(InsiderTransactionsRequest insiderTransactionsRequest)
        {
            // verify the required parameter 'insiderTransactionsRequest' is set
            if (insiderTransactionsRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'insiderTransactionsRequest' when calling TransactionsApi->PostOwnershipInsiderTransactions");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insiderTransactionsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostOwnershipInsiderTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InsiderTransactionsResponse>("/factset-ownership/v1/transactions/insider", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOwnershipInsiderTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsiderTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<InsiderTransactionsResponse>PostOwnershipInsiderTransactionsAsync(InsiderTransactionsRequest insiderTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostOwnershipInsiderTransactionsWithHttpInfoAsync(insiderTransactionsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get insider transactions details for a list of requested identifiers. Gets insider transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insiderTransactionsRequest">Requesting Insider Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsiderTransactionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InsiderTransactionsResponse>> PostOwnershipInsiderTransactionsWithHttpInfoAsync(InsiderTransactionsRequest insiderTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'insiderTransactionsRequest' is set
            if (insiderTransactionsRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'insiderTransactionsRequest' when calling TransactionsApi->PostOwnershipInsiderTransactions");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insiderTransactionsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostOwnershipInsiderTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InsiderTransactionsResponse>("/factset-ownership/v1/transactions/insider", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOwnershipInsiderTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers. Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <returns>InstitutionalTransactionsResponse</returns>
        public InstitutionalTransactionsResponse PostOwnershipInstituionalTransactions(InstitutionalTransactionsRequest institutionalTransactionsRequest)
        {
            var localVarResponse = PostOwnershipInstituionalTransactionsWithHttpInfo(institutionalTransactionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers. Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <returns>ApiResponse of InstitutionalTransactionsResponse</returns>
        public ApiResponse<InstitutionalTransactionsResponse> PostOwnershipInstituionalTransactionsWithHttpInfo(InstitutionalTransactionsRequest institutionalTransactionsRequest)
        {
            // verify the required parameter 'institutionalTransactionsRequest' is set
            if (institutionalTransactionsRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'institutionalTransactionsRequest' when calling TransactionsApi->PostOwnershipInstituionalTransactions");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionalTransactionsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostOwnershipInstituionalTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InstitutionalTransactionsResponse>("/factset-ownership/v1/transactions/institutional", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOwnershipInstituionalTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers. Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstitutionalTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<InstitutionalTransactionsResponse>PostOwnershipInstituionalTransactionsAsync(InstitutionalTransactionsRequest institutionalTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostOwnershipInstituionalTransactionsWithHttpInfoAsync(institutionalTransactionsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets institutional transaction details for a list of requested identifiers. Gets institutional transaction details for a list of requested identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionalTransactionsRequest">Requesting Institutional Transaction Details</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstitutionalTransactionsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InstitutionalTransactionsResponse>> PostOwnershipInstituionalTransactionsWithHttpInfoAsync(InstitutionalTransactionsRequest institutionalTransactionsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'institutionalTransactionsRequest' is set
            if (institutionalTransactionsRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'institutionalTransactionsRequest' when calling TransactionsApi->PostOwnershipInstituionalTransactions");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = institutionalTransactionsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostOwnershipInstituionalTransactionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InstitutionalTransactionsResponse>("/factset-ownership/v1/transactions/institutional", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOwnershipInstituionalTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
