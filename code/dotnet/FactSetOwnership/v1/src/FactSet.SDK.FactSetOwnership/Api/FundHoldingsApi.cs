/*
 * FactSet Ownership API
 *
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetOwnership.Client;
using FactSet.SDK.FactSetOwnership.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetOwnership.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundHoldingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get underlying holdings information for a requested fund identifer.
        /// </summary>
        /// <remarks>
        /// Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>FundHoldingsResponse</returns>
        FundHoldingsResponse GetOwnershipHoldings(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string));

        /// <summary>
        /// Get underlying holdings information for a requested fund identifer.
        /// </summary>
        /// <remarks>
        /// Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of FundHoldingsResponse</returns>
        ApiResponse<FundHoldingsResponse> GetOwnershipHoldingsWithHttpInfo(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string));
        /// <summary>
        /// Get holdings for a list of funds.
        /// </summary>
        /// <remarks>
        /// Gets Holding information for a long list of Fund objects.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <returns>FundHoldingsResponse</returns>
        FundHoldingsResponse PostOwnershipHoldings(FundHoldingsRequest fundHoldingsRequest);

        /// <summary>
        /// Get holdings for a list of funds.
        /// </summary>
        /// <remarks>
        /// Gets Holding information for a long list of Fund objects.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <returns>ApiResponse of FundHoldingsResponse</returns>
        ApiResponse<FundHoldingsResponse> PostOwnershipHoldingsWithHttpInfo(FundHoldingsRequest fundHoldingsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundHoldingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get underlying holdings information for a requested fund identifer.
        /// </summary>
        /// <remarks>
        /// Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FundHoldingsResponse</returns>
        System.Threading.Tasks.Task<FundHoldingsResponse> GetOwnershipHoldingsAsync(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get underlying holdings information for a requested fund identifer.
        /// </summary>
        /// <remarks>
        /// Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FundHoldingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FundHoldingsResponse>> GetOwnershipHoldingsWithHttpInfoAsync(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get holdings for a list of funds.
        /// </summary>
        /// <remarks>
        /// Gets Holding information for a long list of Fund objects.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FundHoldingsResponse</returns>
        System.Threading.Tasks.Task<FundHoldingsResponse> PostOwnershipHoldingsAsync(FundHoldingsRequest fundHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get holdings for a list of funds.
        /// </summary>
        /// <remarks>
        /// Gets Holding information for a long list of Fund objects.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FundHoldingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FundHoldingsResponse>> PostOwnershipHoldingsWithHttpInfoAsync(FundHoldingsRequest fundHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundHoldingsApi : IFundHoldingsApiSync, IFundHoldingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FundHoldingsApi : IFundHoldingsApi
    {
        private FactSet.SDK.FactSetOwnership.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOwnershipHoldingsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FundHoldingsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostOwnershipHoldingsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FundHoldingsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FundHoldingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FundHoldingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundHoldingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FundHoldingsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetOwnership.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnership.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetOwnership.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundHoldingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FundHoldingsApi(FactSet.SDK.FactSetOwnership.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetOwnership.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetOwnership.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetOwnership.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundHoldingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FundHoldingsApi(FactSet.SDK.FactSetOwnership.Client.ISynchronousClient client, FactSet.SDK.FactSetOwnership.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetOwnership.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetOwnership.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetOwnership.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetOwnership.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get underlying holdings information for a requested fund identifer. Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>FundHoldingsResponse</returns>
        public FundHoldingsResponse GetOwnershipHoldings(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string))
        {
            var localVarResponse = GetOwnershipHoldingsWithHttpInfo(ids, date, topn, assetType, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get underlying holdings information for a requested fund identifer. Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <returns>ApiResponse of FundHoldingsResponse</returns>
        public ApiResponse<FundHoldingsResponse> GetOwnershipHoldingsWithHttpInfo(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling FundHoldingsApi->GetOwnershipHoldings");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "assetType", assetType));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipHoldingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FundHoldingsResponse>("/factset-ownership/v1/fund-holdings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get underlying holdings information for a requested fund identifer. Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FundHoldingsResponse</returns>
        public async System.Threading.Tasks.Task<FundHoldingsResponse>GetOwnershipHoldingsAsync(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOwnershipHoldingsWithHttpInfoAsync(ids, date, topn, assetType, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get underlying holdings information for a requested fund identifer. Gets holdings information for list of fund identifiers. The service allows you to filter by the TopN holdings and Asset Type. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of requested fund identifiers. &lt;p&gt;***ids limit** &#x3D;  10 per request*&lt;/p&gt;</param>
        /// <param name="date">Date of holdings expressed in YYYY-MM-DD format. The fund-holdings endpoint will default to latest month-end close. (optional)</param>
        /// <param name="topn">Limits number of holdings or holders displayed by the top *n* securities based on positions Market Value. Default is ALL, otherwise use number to limit number. (optional, default to &quot;ALL&quot;)</param>
        /// <param name="assetType">Filter holdings by the following major asset classes -   * **EQ**  &#x3D; Equity   * **FI** &#x3D; Fixed Income   * **ALL** &#x3D; ALL  (optional, default to EQ)</param>
        /// <param name="currency">Currency code for adjusting prices. Default is Local. For a list of currency ISO codes, visit [Online Assistant Page 1470](https://oa.apps.factset.com/pages/1470). (optional, default to &quot;LOCAL&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FundHoldingsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FundHoldingsResponse>> GetOwnershipHoldingsWithHttpInfoAsync(List<string> ids, string date = default(string), string topn = default(string), string assetType = default(string), string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'ids' when calling FundHoldingsApi->GetOwnershipHoldings");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (topn != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "topn", topn));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "assetType", assetType));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetOwnership.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOwnershipHoldingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FundHoldingsResponse>("/factset-ownership/v1/fund-holdings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnershipHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get holdings for a list of funds. Gets Holding information for a long list of Fund objects.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <returns>FundHoldingsResponse</returns>
        public FundHoldingsResponse PostOwnershipHoldings(FundHoldingsRequest fundHoldingsRequest)
        {
            var localVarResponse = PostOwnershipHoldingsWithHttpInfo(fundHoldingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get holdings for a list of funds. Gets Holding information for a long list of Fund objects.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <returns>ApiResponse of FundHoldingsResponse</returns>
        public ApiResponse<FundHoldingsResponse> PostOwnershipHoldingsWithHttpInfo(FundHoldingsRequest fundHoldingsRequest)
        {
            // verify the required parameter 'fundHoldingsRequest' is set
            if (fundHoldingsRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'fundHoldingsRequest' when calling FundHoldingsApi->PostOwnershipHoldings");
            }

            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fundHoldingsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostOwnershipHoldingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            FundHoldingsResponse>("/factset-ownership/v1/fund-holdings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOwnershipHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get holdings for a list of funds. Gets Holding information for a long list of Fund objects.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FundHoldingsResponse</returns>
        public async System.Threading.Tasks.Task<FundHoldingsResponse>PostOwnershipHoldingsAsync(FundHoldingsRequest fundHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostOwnershipHoldingsWithHttpInfoAsync(fundHoldingsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get holdings for a list of funds. Gets Holding information for a long list of Fund objects.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetOwnership.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundHoldingsRequest">Requesting Underlying Holdings for a list of Fund Identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FundHoldingsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FundHoldingsResponse>> PostOwnershipHoldingsWithHttpInfoAsync(FundHoldingsRequest fundHoldingsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fundHoldingsRequest' is set
            if (fundHoldingsRequest == null)
            {
                throw new FactSet.SDK.FactSetOwnership.Client.ApiException(400, "Missing required parameter 'fundHoldingsRequest' when calling FundHoldingsApi->PostOwnershipHoldings");
            }


            FactSet.SDK.FactSetOwnership.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetOwnership.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetOwnership.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fundHoldingsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetOwnership.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostOwnershipHoldingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FundHoldingsResponse>("/factset-ownership/v1/fund-holdings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOwnershipHoldings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
