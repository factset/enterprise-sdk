/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Details of an individual task generation log.
    /// </summary>
    [DataContract(Name = "ScheduleGenerationLog")]
    public partial class ScheduleGenerationLog : IEquatable<ScheduleGenerationLog>, IValidatableObject
    {
        /// <summary>
        /// Type of log entry.
        /// </summary>
        /// <value>Type of log entry.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum INFO for value: INFO
            /// </summary>
            [EnumMember(Value = "INFO")]
            INFO = 1,

            /// <summary>
            /// Enum WARN for value: WARN
            /// </summary>
            [EnumMember(Value = "WARN")]
            WARN = 2,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 3,

            /// <summary>
            /// Enum DEBUG for value: DEBUG
            /// </summary>
            [EnumMember(Value = "DEBUG")]
            DEBUG = 4

        }


        /// <summary>
        /// Type of log entry.
        /// </summary>
        /// <value>Type of log entry.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleGenerationLog" /> class.
        /// </summary>
        /// <param name="sequenceNumber">The sequence number of the log entry..</param>
        /// <param name="message">A detailed message describing the log event or error..</param>
        /// <param name="type">Type of log entry..</param>
        /// <param name="logSet">Identifier for the set of logs this entry belongs to..</param>
        /// <param name="lastUpdated">The timestamp of the most recent update in epoch format for a specific Task Generation log.</param>
        public ScheduleGenerationLog(int sequenceNumber = default(int), string message = default(string), TypeEnum? type = default(TypeEnum?), int logSet = default(int), string lastUpdated = default(string))
        {
            this.SequenceNumber = sequenceNumber;
            this.Message = message;
            this.Type = type;
            this.LogSet = logSet;
            this.LastUpdated = lastUpdated;
        }

        /// <summary>
        /// The sequence number of the log entry.
        /// </summary>
        /// <value>The sequence number of the log entry.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// A detailed message describing the log event or error.
        /// </summary>
        /// <value>A detailed message describing the log event or error.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Identifier for the set of logs this entry belongs to.
        /// </summary>
        /// <value>Identifier for the set of logs this entry belongs to.</value>
        [DataMember(Name = "logSet", EmitDefaultValue = false)]
        public int LogSet { get; set; }

        /// <summary>
        /// The timestamp of the most recent update in epoch format for a specific Task Generation log
        /// </summary>
        /// <value>The timestamp of the most recent update in epoch format for a specific Task Generation log</value>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleGenerationLog {\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LogSet: ").Append(LogSet).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleGenerationLog);
        }

        /// <summary>
        /// Returns true if ScheduleGenerationLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleGenerationLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleGenerationLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.LogSet == input.LogSet ||
                    this.LogSet.Equals(input.LogSet)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SequenceNumber.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.LogSet.GetHashCode();
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
