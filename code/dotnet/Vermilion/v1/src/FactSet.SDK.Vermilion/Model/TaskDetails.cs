/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Contains all details about the task.
    /// </summary>
    [DataContract(Name = "TaskDetails")]
    public partial class TaskDetails : IEquatable<TaskDetails>, IValidatableObject
    {
        /// <summary>
        /// Type of the task.
        /// </summary>
        /// <value>Type of the task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaskTypeEnum
        {
            /// <summary>
            /// Enum WAITFORDATA for value: WAIT_FOR_DATA
            /// </summary>
            [EnumMember(Value = "WAIT_FOR_DATA")]
            WAITFORDATA = 1,

            /// <summary>
            /// Enum CUSTOMDATA for value: CUSTOM_DATA
            /// </summary>
            [EnumMember(Value = "CUSTOM_DATA")]
            CUSTOMDATA = 2,

            /// <summary>
            /// Enum CREATEMANUALDATA for value: CREATE_MANUAL_DATA
            /// </summary>
            [EnumMember(Value = "CREATE_MANUAL_DATA")]
            CREATEMANUALDATA = 3,

            /// <summary>
            /// Enum CREATEFILTEREDDATA for value: CREATE_FILTERED_DATA
            /// </summary>
            [EnumMember(Value = "CREATE_FILTERED_DATA")]
            CREATEFILTEREDDATA = 4,

            /// <summary>
            /// Enum GETDATA for value: GET_DATA
            /// </summary>
            [EnumMember(Value = "GET_DATA")]
            GETDATA = 5,

            /// <summary>
            /// Enum GENERATEPREVIEW for value: GENERATE_PREVIEW
            /// </summary>
            [EnumMember(Value = "GENERATE_PREVIEW")]
            GENERATEPREVIEW = 6,

            /// <summary>
            /// Enum SIGNOFFDATA for value: SIGNOFF_DATA
            /// </summary>
            [EnumMember(Value = "SIGNOFF_DATA")]
            SIGNOFFDATA = 7,

            /// <summary>
            /// Enum CUSTOMGENERATE for value: CUSTOM_GENERATE
            /// </summary>
            [EnumMember(Value = "CUSTOM_GENERATE")]
            CUSTOMGENERATE = 8,

            /// <summary>
            /// Enum GENERATEREPORT for value: GENERATE_REPORT
            /// </summary>
            [EnumMember(Value = "GENERATE_REPORT")]
            GENERATEREPORT = 9,

            /// <summary>
            /// Enum SIGNOFFREPORT for value: SIGNOFF_REPORT
            /// </summary>
            [EnumMember(Value = "SIGNOFF_REPORT")]
            SIGNOFFREPORT = 10,

            /// <summary>
            /// Enum CUSTOMDELIVERY for value: CUSTOM_DELIVERY
            /// </summary>
            [EnumMember(Value = "CUSTOM_DELIVERY")]
            CUSTOMDELIVERY = 11,

            /// <summary>
            /// Enum EMAILREPORT for value: EMAIL_REPORT
            /// </summary>
            [EnumMember(Value = "EMAIL_REPORT")]
            EMAILREPORT = 12,

            /// <summary>
            /// Enum POSTREPORT for value: POST_REPORT
            /// </summary>
            [EnumMember(Value = "POST_REPORT")]
            POSTREPORT = 13,

            /// <summary>
            /// Enum FTPREPORT for value: FTP_REPORT
            /// </summary>
            [EnumMember(Value = "FTP_REPORT")]
            FTPREPORT = 14,

            /// <summary>
            /// Enum CUSTOMOTHER for value: CUSTOM_OTHER
            /// </summary>
            [EnumMember(Value = "CUSTOM_OTHER")]
            CUSTOMOTHER = 15,

            /// <summary>
            /// Enum COPYREPORTFILE for value: COPY_REPORT_FILE
            /// </summary>
            [EnumMember(Value = "COPY_REPORT_FILE")]
            COPYREPORTFILE = 16,

            /// <summary>
            /// Enum PACKAGEREPORTS for value: PACKAGE_REPORTS
            /// </summary>
            [EnumMember(Value = "PACKAGE_REPORTS")]
            PACKAGEREPORTS = 17

        }


        /// <summary>
        /// Type of the task.
        /// </summary>
        /// <value>Type of the task.</value>
        [DataMember(Name = "taskType", EmitDefaultValue = false)]
        public TaskTypeEnum? TaskType { get; set; }
        /// <summary>
        /// Status of the task.
        /// </summary>
        /// <value>Status of the task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 1,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 2,

            /// <summary>
            /// Enum AWAITINGCORRECTION for value: AWAITING_CORRECTION
            /// </summary>
            [EnumMember(Value = "AWAITING_CORRECTION")]
            AWAITINGCORRECTION = 3,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 4,

            /// <summary>
            /// Enum SKIPPED for value: SKIPPED
            /// </summary>
            [EnumMember(Value = "SKIPPED")]
            SKIPPED = 5,

            /// <summary>
            /// Enum FAILEDREJECTED for value: FAILED_REJECTED
            /// </summary>
            [EnumMember(Value = "FAILED_REJECTED")]
            FAILEDREJECTED = 6

        }


        /// <summary>
        /// Status of the task.
        /// </summary>
        /// <value>Status of the task.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskDetails" /> class.
        /// </summary>
        /// <param name="lastUpdatedBy">Indicates the username of the person who last updated task.</param>
        /// <param name="description">Task description..</param>
        /// <param name="taskType">Type of the task..</param>
        /// <param name="status">Status of the task..</param>
        /// <param name="expectedStartDate">Expected start date of the task..</param>
        /// <param name="expectedEndDate">Expected end date of the task..</param>
        /// <param name="actualStartDate">Actual start date of the task..</param>
        /// <param name="notes">Notes for the task..</param>
        /// <param name="immediate">Boolean flag to indicate whether the task is an immediate task..</param>
        /// <param name="reason">Reason for the task action..</param>
        /// <param name="outputFormat">Output Format for thet task..</param>
        /// <param name="scheduleName">Name of the schedule to which this task belongs to..</param>
        /// <param name="mandatoryTaskApproveNotes">The flag if task approve notes are mandatory for the task.</param>
        /// <param name="lastUpdated">The timestamp of the most recent update in epoch format for a specific task.</param>
        /// <param name="role">Role associated with the task..</param>
        /// <param name="action">Indicates if a task is actionable by the user..</param>
        /// <param name="user">User associated with the task..</param>
        public TaskDetails(string lastUpdatedBy = default(string), string description = default(string), TaskTypeEnum? taskType = default(TaskTypeEnum?), StatusEnum? status = default(StatusEnum?), string expectedStartDate = default(string), string expectedEndDate = default(string), string actualStartDate = default(string), string notes = default(string), bool immediate = default(bool), string reason = default(string), string outputFormat = default(string), string scheduleName = default(string), bool mandatoryTaskApproveNotes = default(bool), string lastUpdated = default(string), string role = default(string), bool action = default(bool), string user = default(string))
        {
            this.LastUpdatedBy = lastUpdatedBy;
            this.Description = description;
            this.TaskType = taskType;
            this.Status = status;
            this.ExpectedStartDate = expectedStartDate;
            this.ExpectedEndDate = expectedEndDate;
            this.ActualStartDate = actualStartDate;
            this.Notes = notes;
            this.Immediate = immediate;
            this.Reason = reason;
            this.OutputFormat = outputFormat;
            this.ScheduleName = scheduleName;
            this.MandatoryTaskApproveNotes = mandatoryTaskApproveNotes;
            this.LastUpdated = lastUpdated;
            this.Role = role;
            this.Action = action;
            this.User = user;
        }

        /// <summary>
        /// Indicates the username of the person who last updated task
        /// </summary>
        /// <value>Indicates the username of the person who last updated task</value>
        [DataMember(Name = "lastUpdatedBy", EmitDefaultValue = false)]
        public string LastUpdatedBy { get; set; }

        /// <summary>
        /// Task description.
        /// </summary>
        /// <value>Task description.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Expected start date of the task.
        /// </summary>
        /// <value>Expected start date of the task.</value>
        [DataMember(Name = "expectedStartDate", EmitDefaultValue = false)]
        public string ExpectedStartDate { get; set; }

        /// <summary>
        /// Expected end date of the task.
        /// </summary>
        /// <value>Expected end date of the task.</value>
        [DataMember(Name = "expectedEndDate", EmitDefaultValue = false)]
        public string ExpectedEndDate { get; set; }

        /// <summary>
        /// Actual start date of the task.
        /// </summary>
        /// <value>Actual start date of the task.</value>
        [DataMember(Name = "actualStartDate", EmitDefaultValue = false)]
        public string ActualStartDate { get; set; }

        /// <summary>
        /// Notes for the task.
        /// </summary>
        /// <value>Notes for the task.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Boolean flag to indicate whether the task is an immediate task.
        /// </summary>
        /// <value>Boolean flag to indicate whether the task is an immediate task.</value>
        [DataMember(Name = "immediate", EmitDefaultValue = true)]
        public bool Immediate { get; set; }

        /// <summary>
        /// Reason for the task action.
        /// </summary>
        /// <value>Reason for the task action.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Output Format for thet task.
        /// </summary>
        /// <value>Output Format for thet task.</value>
        [DataMember(Name = "outputFormat", EmitDefaultValue = false)]
        public string OutputFormat { get; set; }

        /// <summary>
        /// Name of the schedule to which this task belongs to.
        /// </summary>
        /// <value>Name of the schedule to which this task belongs to.</value>
        [DataMember(Name = "scheduleName", EmitDefaultValue = false)]
        public string ScheduleName { get; set; }

        /// <summary>
        /// The flag if task approve notes are mandatory for the task
        /// </summary>
        /// <value>The flag if task approve notes are mandatory for the task</value>
        [DataMember(Name = "mandatoryTaskApproveNotes", EmitDefaultValue = true)]
        public bool MandatoryTaskApproveNotes { get; set; }

        /// <summary>
        /// The timestamp of the most recent update in epoch format for a specific task
        /// </summary>
        /// <value>The timestamp of the most recent update in epoch format for a specific task</value>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Role associated with the task.
        /// </summary>
        /// <value>Role associated with the task.</value>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public string Role { get; set; }

        /// <summary>
        /// Indicates if a task is actionable by the user.
        /// </summary>
        /// <value>Indicates if a task is actionable by the user.</value>
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public bool Action { get; set; }

        /// <summary>
        /// User associated with the task.
        /// </summary>
        /// <value>User associated with the task.</value>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskDetails {\n");
            sb.Append("  LastUpdatedBy: ").Append(LastUpdatedBy).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpectedStartDate: ").Append(ExpectedStartDate).Append("\n");
            sb.Append("  ExpectedEndDate: ").Append(ExpectedEndDate).Append("\n");
            sb.Append("  ActualStartDate: ").Append(ActualStartDate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Immediate: ").Append(Immediate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  ScheduleName: ").Append(ScheduleName).Append("\n");
            sb.Append("  MandatoryTaskApproveNotes: ").Append(MandatoryTaskApproveNotes).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskDetails);
        }

        /// <summary>
        /// Returns true if TaskDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LastUpdatedBy == input.LastUpdatedBy ||
                    (this.LastUpdatedBy != null &&
                    this.LastUpdatedBy.Equals(input.LastUpdatedBy))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TaskType == input.TaskType ||
                    this.TaskType.Equals(input.TaskType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ExpectedStartDate == input.ExpectedStartDate ||
                    (this.ExpectedStartDate != null &&
                    this.ExpectedStartDate.Equals(input.ExpectedStartDate))
                ) && 
                (
                    this.ExpectedEndDate == input.ExpectedEndDate ||
                    (this.ExpectedEndDate != null &&
                    this.ExpectedEndDate.Equals(input.ExpectedEndDate))
                ) && 
                (
                    this.ActualStartDate == input.ActualStartDate ||
                    (this.ActualStartDate != null &&
                    this.ActualStartDate.Equals(input.ActualStartDate))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Immediate == input.Immediate ||
                    this.Immediate.Equals(input.Immediate)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    (this.OutputFormat != null &&
                    this.OutputFormat.Equals(input.OutputFormat))
                ) && 
                (
                    this.ScheduleName == input.ScheduleName ||
                    (this.ScheduleName != null &&
                    this.ScheduleName.Equals(input.ScheduleName))
                ) && 
                (
                    this.MandatoryTaskApproveNotes == input.MandatoryTaskApproveNotes ||
                    this.MandatoryTaskApproveNotes.Equals(input.MandatoryTaskApproveNotes)
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastUpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedBy.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TaskType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ExpectedStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedStartDate.GetHashCode();
                }
                if (this.ExpectedEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedEndDate.GetHashCode();
                }
                if (this.ActualStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActualStartDate.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Immediate.GetHashCode();
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.OutputFormat != null)
                {
                    hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                }
                if (this.ScheduleName != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MandatoryTaskApproveNotes.GetHashCode();
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
