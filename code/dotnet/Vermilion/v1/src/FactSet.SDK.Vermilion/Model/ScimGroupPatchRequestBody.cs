/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Defines the request payload for updating a group&#39;s attributes in SCIM. This patch operation allows for specific modifications to a group&#39;s properties.
    /// </summary>
    [DataContract(Name = "ScimGroupPatchRequestBody")]
    public partial class ScimGroupPatchRequestBody : IEquatable<ScimGroupPatchRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimGroupPatchRequestBody" /> class.
        /// </summary>
        /// <param name="schemas">An array of URIs representing the schema namespaces applied to this request..</param>
        /// <param name="operations">A list of operations specifying the actions to perform on the group&#39;s attributes, such as adding, removing, or updating members..</param>
        public ScimGroupPatchRequestBody(List<string> schemas = default(List<string>), List<ScimGroupPatchOperation> operations = default(List<ScimGroupPatchOperation>))
        {
            this.Schemas = schemas;
            this.Operations = operations;
        }

        /// <summary>
        /// An array of URIs representing the schema namespaces applied to this request.
        /// </summary>
        /// <value>An array of URIs representing the schema namespaces applied to this request.</value>
        [DataMember(Name = "schemas", EmitDefaultValue = false)]
        public List<string> Schemas { get; set; }

        /// <summary>
        /// A list of operations specifying the actions to perform on the group&#39;s attributes, such as adding, removing, or updating members.
        /// </summary>
        /// <value>A list of operations specifying the actions to perform on the group&#39;s attributes, such as adding, removing, or updating members.</value>
        [DataMember(Name = "Operations", EmitDefaultValue = false)]
        public List<ScimGroupPatchOperation> Operations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScimGroupPatchRequestBody {\n");
            sb.Append("  Schemas: ").Append(Schemas).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScimGroupPatchRequestBody);
        }

        /// <summary>
        /// Returns true if ScimGroupPatchRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ScimGroupPatchRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScimGroupPatchRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Schemas == input.Schemas ||
                    this.Schemas != null &&
                    input.Schemas != null &&
                    this.Schemas.SequenceEqual(input.Schemas)
                ) && 
                (
                    this.Operations == input.Operations ||
                    this.Operations != null &&
                    input.Operations != null &&
                    this.Operations.SequenceEqual(input.Operations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Schemas != null)
                {
                    hashCode = (hashCode * 59) + this.Schemas.GetHashCode();
                }
                if (this.Operations != null)
                {
                    hashCode = (hashCode * 59) + this.Operations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
