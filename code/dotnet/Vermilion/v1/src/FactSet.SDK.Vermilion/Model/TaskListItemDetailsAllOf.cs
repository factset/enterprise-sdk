/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// TaskListItemDetailsAllOf
    /// </summary>
    [DataContract(Name = "TaskListItemDetails_allOf")]
    public partial class TaskListItemDetailsAllOf : IEquatable<TaskListItemDetailsAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskListItemDetailsAllOf" /> class.
        /// </summary>
        /// <param name="taskId">Unique identifier of the Task..</param>
        /// <param name="escalationLevel">The escalation level of the task..</param>
        /// <param name="order">The order of the task..</param>
        public TaskListItemDetailsAllOf(int taskId = default(int), int escalationLevel = default(int), int order = default(int))
        {
            this.TaskId = taskId;
            this.EscalationLevel = escalationLevel;
            this.Order = order;
        }

        /// <summary>
        /// Unique identifier of the Task.
        /// </summary>
        /// <value>Unique identifier of the Task.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public int TaskId { get; set; }

        /// <summary>
        /// The escalation level of the task.
        /// </summary>
        /// <value>The escalation level of the task.</value>
        [DataMember(Name = "escalationLevel", EmitDefaultValue = false)]
        public int EscalationLevel { get; set; }

        /// <summary>
        /// The order of the task.
        /// </summary>
        /// <value>The order of the task.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskListItemDetailsAllOf {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  EscalationLevel: ").Append(EscalationLevel).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskListItemDetailsAllOf);
        }

        /// <summary>
        /// Returns true if TaskListItemDetailsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskListItemDetailsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskListItemDetailsAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaskId == input.TaskId ||
                    this.TaskId.Equals(input.TaskId)
                ) && 
                (
                    this.EscalationLevel == input.EscalationLevel ||
                    this.EscalationLevel.Equals(input.EscalationLevel)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TaskId.GetHashCode();
                hashCode = (hashCode * 59) + this.EscalationLevel.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
