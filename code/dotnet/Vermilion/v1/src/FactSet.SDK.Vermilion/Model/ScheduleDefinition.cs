/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// ScheduleDefinition
    /// </summary>
    [DataContract(Name = "ScheduleDefinition")]
    public partial class ScheduleDefinition : IEquatable<ScheduleDefinition>, IValidatableObject
    {
        /// <summary>
        /// Defines ScheduleType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScheduleTypeEnum
        {
            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 1,

            /// <summary>
            /// Enum REPEATING for value: REPEATING
            /// </summary>
            [EnumMember(Value = "REPEATING")]
            REPEATING = 2,

            /// <summary>
            /// Enum TEMPLATE for value: TEMPLATE
            /// </summary>
            [EnumMember(Value = "TEMPLATE")]
            TEMPLATE = 3,

            /// <summary>
            /// Enum ADHOC for value: ADHOC
            /// </summary>
            [EnumMember(Value = "ADHOC")]
            ADHOC = 4

        }


        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>
        [DataMember(Name = "scheduleType", EmitDefaultValue = false)]
        public ScheduleTypeEnum? ScheduleType { get; set; }
        /// <summary>
        /// Defines ReportDate
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportDateEnum
        {
            /// <summary>
            /// Enum LASTDAYOFPREVMONTH for value: LAST_DAY_OF_PREV_MONTH
            /// </summary>
            [EnumMember(Value = "LAST_DAY_OF_PREV_MONTH")]
            LASTDAYOFPREVMONTH = 1,

            /// <summary>
            /// Enum LASTBUSINESSDAYOFPREVMONTH for value: LAST_BUSINESS_DAY_OF_PREV_MONTH
            /// </summary>
            [EnumMember(Value = "LAST_BUSINESS_DAY_OF_PREV_MONTH")]
            LASTBUSINESSDAYOFPREVMONTH = 2,

            /// <summary>
            /// Enum CREATIONDATE for value: CREATION_DATE
            /// </summary>
            [EnumMember(Value = "CREATION_DATE")]
            CREATIONDATE = 3,

            /// <summary>
            /// Enum DAYBEFORECREATIONDATE for value: DAY_BEFORE_CREATION_DATE
            /// </summary>
            [EnumMember(Value = "DAY_BEFORE_CREATION_DATE")]
            DAYBEFORECREATIONDATE = 4,

            /// <summary>
            /// Enum BUSINESSDAYBEFORECREATIONDATE for value: BUSINESS_DAY_BEFORE_CREATION_DATE
            /// </summary>
            [EnumMember(Value = "BUSINESS_DAY_BEFORE_CREATION_DATE")]
            BUSINESSDAYBEFORECREATIONDATE = 5,

            /// <summary>
            /// Enum LASTDAYOFMONTHSCHEDULECREATED for value: LAST_DAY_OF_MONTH_SCHEDULE_CREATED
            /// </summary>
            [EnumMember(Value = "LAST_DAY_OF_MONTH_SCHEDULE_CREATED")]
            LASTDAYOFMONTHSCHEDULECREATED = 6,

            /// <summary>
            /// Enum LASTBUSINESSDAYOFMONTHSCHEDULECREATED for value: LAST_BUSINESS_DAY_OF_MONTH_SCHEDULE_CREATED
            /// </summary>
            [EnumMember(Value = "LAST_BUSINESS_DAY_OF_MONTH_SCHEDULE_CREATED")]
            LASTBUSINESSDAYOFMONTHSCHEDULECREATED = 7,

            /// <summary>
            /// Enum LASTBUSINESSDAYOFPREVIOUSWEEKSCHEDULECREATED for value: LAST_BUSINESS_DAY_OF_PREVIOUS_WEEK_SCHEDULE_CREATED
            /// </summary>
            [EnumMember(Value = "LAST_BUSINESS_DAY_OF_PREVIOUS_WEEK_SCHEDULE_CREATED")]
            LASTBUSINESSDAYOFPREVIOUSWEEKSCHEDULECREATED = 8,

            /// <summary>
            /// Enum LASTBUSINESSDAYOFWEEKSCHEDULECREATED for value: LAST_BUSINESS_DAY_OF_WEEK_SCHEDULE_CREATED
            /// </summary>
            [EnumMember(Value = "LAST_BUSINESS_DAY_OF_WEEK_SCHEDULE_CREATED")]
            LASTBUSINESSDAYOFWEEKSCHEDULECREATED = 9,

            /// <summary>
            /// Enum TWOBUSINESSDAYSBEFORESCHEDULECREATED for value: TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED
            /// </summary>
            [EnumMember(Value = "TWO_BUSINESS_DAYS_BEFORE_SCHEDULE_CREATED")]
            TWOBUSINESSDAYSBEFORESCHEDULECREATED = 10

        }


        /// <summary>
        /// Gets or Sets ReportDate
        /// </summary>
        [DataMember(Name = "reportDate", EmitDefaultValue = false)]
        public ReportDateEnum? ReportDate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleDefinition" /> class.
        /// </summary>
        /// <param name="scheduleDefinitionId">scheduleDefinitionId.</param>
        /// <param name="name">name.</param>
        /// <param name="code">code.</param>
        /// <param name="scheduleType">scheduleType.</param>
        /// <param name="scheduleGroup">scheduleGroup.</param>
        /// <param name="reportDate">reportDate.</param>
        /// <param name="numberOfObligations">numberOfObligations.</param>
        /// <param name="businessCalendar">businessCalendar.</param>
        /// <param name="deleteScheduleAfterDays">deleteScheduleAfterDays.</param>
        /// <param name="numberOfPackages">numberOfPackages.</param>
        /// <param name="entities">entities.</param>
        /// <param name="ownerRole">ownerRole.</param>
        /// <param name="notes">notes.</param>
        /// <param name="lastUpdatedBy">lastUpdatedBy.</param>
        /// <param name="lastUpdated">lastUpdated.</param>
        public ScheduleDefinition(int scheduleDefinitionId = default(int), string name = default(string), string code = default(string), ScheduleTypeEnum? scheduleType = default(ScheduleTypeEnum?), string scheduleGroup = default(string), ReportDateEnum? reportDate = default(ReportDateEnum?), int numberOfObligations = default(int), string businessCalendar = default(string), int deleteScheduleAfterDays = default(int), int numberOfPackages = default(int), List<EntityDTO> entities = default(List<EntityDTO>), ScheduleDefinitionOwnerRole ownerRole = default(ScheduleDefinitionOwnerRole), string notes = default(string), string lastUpdatedBy = default(string), string lastUpdated = default(string))
        {
            this.ScheduleDefinitionId = scheduleDefinitionId;
            this.Name = name;
            this.Code = code;
            this.ScheduleType = scheduleType;
            this.ScheduleGroup = scheduleGroup;
            this.ReportDate = reportDate;
            this.NumberOfObligations = numberOfObligations;
            this.BusinessCalendar = businessCalendar;
            this.DeleteScheduleAfterDays = deleteScheduleAfterDays;
            this.NumberOfPackages = numberOfPackages;
            this.Entities = entities;
            this.OwnerRole = ownerRole;
            this.Notes = notes;
            this.LastUpdatedBy = lastUpdatedBy;
            this.LastUpdated = lastUpdated;
        }

        /// <summary>
        /// Gets or Sets ScheduleDefinitionId
        /// </summary>
        [DataMember(Name = "scheduleDefinitionId", EmitDefaultValue = false)]
        public int ScheduleDefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleGroup
        /// </summary>
        [DataMember(Name = "scheduleGroup", EmitDefaultValue = false)]
        public string ScheduleGroup { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfObligations
        /// </summary>
        [DataMember(Name = "numberOfObligations", EmitDefaultValue = false)]
        public int NumberOfObligations { get; set; }

        /// <summary>
        /// Gets or Sets BusinessCalendar
        /// </summary>
        [DataMember(Name = "businessCalendar", EmitDefaultValue = false)]
        public string BusinessCalendar { get; set; }

        /// <summary>
        /// Gets or Sets DeleteScheduleAfterDays
        /// </summary>
        [DataMember(Name = "deleteScheduleAfterDays", EmitDefaultValue = false)]
        public int DeleteScheduleAfterDays { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPackages
        /// </summary>
        [DataMember(Name = "numberOfPackages", EmitDefaultValue = false)]
        public int NumberOfPackages { get; set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<EntityDTO> Entities { get; set; }

        /// <summary>
        /// Gets or Sets OwnerRole
        /// </summary>
        [DataMember(Name = "ownerRole", EmitDefaultValue = false)]
        public ScheduleDefinitionOwnerRole OwnerRole { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatedBy
        /// </summary>
        [DataMember(Name = "lastUpdatedBy", EmitDefaultValue = false)]
        public string LastUpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleDefinition {\n");
            sb.Append("  ScheduleDefinitionId: ").Append(ScheduleDefinitionId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  ScheduleGroup: ").Append(ScheduleGroup).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  NumberOfObligations: ").Append(NumberOfObligations).Append("\n");
            sb.Append("  BusinessCalendar: ").Append(BusinessCalendar).Append("\n");
            sb.Append("  DeleteScheduleAfterDays: ").Append(DeleteScheduleAfterDays).Append("\n");
            sb.Append("  NumberOfPackages: ").Append(NumberOfPackages).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  OwnerRole: ").Append(OwnerRole).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  LastUpdatedBy: ").Append(LastUpdatedBy).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleDefinition);
        }

        /// <summary>
        /// Returns true if ScheduleDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScheduleDefinitionId == input.ScheduleDefinitionId ||
                    this.ScheduleDefinitionId.Equals(input.ScheduleDefinitionId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ScheduleType == input.ScheduleType ||
                    this.ScheduleType.Equals(input.ScheduleType)
                ) && 
                (
                    this.ScheduleGroup == input.ScheduleGroup ||
                    (this.ScheduleGroup != null &&
                    this.ScheduleGroup.Equals(input.ScheduleGroup))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    this.ReportDate.Equals(input.ReportDate)
                ) && 
                (
                    this.NumberOfObligations == input.NumberOfObligations ||
                    this.NumberOfObligations.Equals(input.NumberOfObligations)
                ) && 
                (
                    this.BusinessCalendar == input.BusinessCalendar ||
                    (this.BusinessCalendar != null &&
                    this.BusinessCalendar.Equals(input.BusinessCalendar))
                ) && 
                (
                    this.DeleteScheduleAfterDays == input.DeleteScheduleAfterDays ||
                    this.DeleteScheduleAfterDays.Equals(input.DeleteScheduleAfterDays)
                ) && 
                (
                    this.NumberOfPackages == input.NumberOfPackages ||
                    this.NumberOfPackages.Equals(input.NumberOfPackages)
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.OwnerRole == input.OwnerRole ||
                    (this.OwnerRole != null &&
                    this.OwnerRole.Equals(input.OwnerRole))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.LastUpdatedBy == input.LastUpdatedBy ||
                    (this.LastUpdatedBy != null &&
                    this.LastUpdatedBy.Equals(input.LastUpdatedBy))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ScheduleDefinitionId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScheduleType.GetHashCode();
                if (this.ScheduleGroup != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfObligations.GetHashCode();
                if (this.BusinessCalendar != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessCalendar.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeleteScheduleAfterDays.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfPackages.GetHashCode();
                if (this.Entities != null)
                {
                    hashCode = (hashCode * 59) + this.Entities.GetHashCode();
                }
                if (this.OwnerRole != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerRole.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.LastUpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedBy.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
