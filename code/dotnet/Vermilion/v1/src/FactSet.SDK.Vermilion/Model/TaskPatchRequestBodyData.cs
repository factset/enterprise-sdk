/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Task data object.
    /// </summary>
    [DataContract(Name = "TaskPatchRequestBody_data")]
    public partial class TaskPatchRequestBodyData : IEquatable<TaskPatchRequestBodyData>, IValidatableObject
    {
        /// <summary>
        /// Status of the task, status cannot be changed to IN_PROGRESS. It is case-sensitive and should be in upper case.
        /// </summary>
        /// <value>Status of the task, status cannot be changed to IN_PROGRESS. It is case-sensitive and should be in upper case.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 1,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 2,

            /// <summary>
            /// Enum AWAITINGCORRECTION for value: AWAITING_CORRECTION
            /// </summary>
            [EnumMember(Value = "AWAITING_CORRECTION")]
            AWAITINGCORRECTION = 3,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 4,

            /// <summary>
            /// Enum SKIPPED for value: SKIPPED
            /// </summary>
            [EnumMember(Value = "SKIPPED")]
            SKIPPED = 5,

            /// <summary>
            /// Enum FAILEDREJECTED for value: FAILED_REJECTED
            /// </summary>
            [EnumMember(Value = "FAILED_REJECTED")]
            FAILEDREJECTED = 6

        }


        /// <summary>
        /// Status of the task, status cannot be changed to IN_PROGRESS. It is case-sensitive and should be in upper case.
        /// </summary>
        /// <value>Status of the task, status cannot be changed to IN_PROGRESS. It is case-sensitive and should be in upper case.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskPatchRequestBodyData" /> class.
        /// </summary>
        /// <param name="status">Status of the task, status cannot be changed to IN_PROGRESS. It is case-sensitive and should be in upper case..</param>
        /// <param name="expectedStartDate">Expected start date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone..</param>
        /// <param name="expectedEndDate">Expected end date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone..</param>
        /// <param name="actualStartDate">Actual start date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone..</param>
        /// <param name="notes">Notes for the task..</param>
        /// <param name="role">Role assigned to the task, It can&#39;t be null or empty..</param>
        /// <param name="user">User name assigned to the task..</param>
        /// <param name="action">task action to be performed, Approve and Reject are the possible values..</param>
        /// <param name="reason">Reason code for rejection or approval, It will be validated against values from VRSReasonCodes.properties..</param>
        public TaskPatchRequestBodyData(StatusEnum? status = default(StatusEnum?), string expectedStartDate = default(string), string expectedEndDate = default(string), string actualStartDate = default(string), string notes = default(string), string role = default(string), string user = default(string), string action = default(string), string reason = default(string))
        {
            this.Status = status;
            this.ExpectedStartDate = expectedStartDate;
            this.ExpectedEndDate = expectedEndDate;
            this.ActualStartDate = actualStartDate;
            this.Notes = notes;
            this.Role = role;
            this.User = user;
            this.Action = action;
            this.Reason = reason;
        }

        /// <summary>
        /// Expected start date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone.
        /// </summary>
        /// <value>Expected start date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone.</value>
        [DataMember(Name = "expectedStartDate", EmitDefaultValue = false)]
        public string ExpectedStartDate { get; set; }

        /// <summary>
        /// Expected end date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone.
        /// </summary>
        /// <value>Expected end date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone.</value>
        [DataMember(Name = "expectedEndDate", EmitDefaultValue = false)]
        public string ExpectedEndDate { get; set; }

        /// <summary>
        /// Actual start date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone.
        /// </summary>
        /// <value>Actual start date of task, date format should be &#39;d MMMMM yyyy HH:mm:ss&#39; and will be converted to server time zone.</value>
        [DataMember(Name = "actualStartDate", EmitDefaultValue = false)]
        public string ActualStartDate { get; set; }

        /// <summary>
        /// Notes for the task.
        /// </summary>
        /// <value>Notes for the task.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Role assigned to the task, It can&#39;t be null or empty.
        /// </summary>
        /// <value>Role assigned to the task, It can&#39;t be null or empty.</value>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public string Role { get; set; }

        /// <summary>
        /// User name assigned to the task.
        /// </summary>
        /// <value>User name assigned to the task.</value>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// task action to be performed, Approve and Reject are the possible values.
        /// </summary>
        /// <value>task action to be performed, Approve and Reject are the possible values.</value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public string Action { get; set; }

        /// <summary>
        /// Reason code for rejection or approval, It will be validated against values from VRSReasonCodes.properties.
        /// </summary>
        /// <value>Reason code for rejection or approval, It will be validated against values from VRSReasonCodes.properties.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskPatchRequestBodyData {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExpectedStartDate: ").Append(ExpectedStartDate).Append("\n");
            sb.Append("  ExpectedEndDate: ").Append(ExpectedEndDate).Append("\n");
            sb.Append("  ActualStartDate: ").Append(ActualStartDate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskPatchRequestBodyData);
        }

        /// <summary>
        /// Returns true if TaskPatchRequestBodyData instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskPatchRequestBodyData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskPatchRequestBodyData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ExpectedStartDate == input.ExpectedStartDate ||
                    (this.ExpectedStartDate != null &&
                    this.ExpectedStartDate.Equals(input.ExpectedStartDate))
                ) && 
                (
                    this.ExpectedEndDate == input.ExpectedEndDate ||
                    (this.ExpectedEndDate != null &&
                    this.ExpectedEndDate.Equals(input.ExpectedEndDate))
                ) && 
                (
                    this.ActualStartDate == input.ActualStartDate ||
                    (this.ActualStartDate != null &&
                    this.ActualStartDate.Equals(input.ActualStartDate))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ExpectedStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedStartDate.GetHashCode();
                }
                if (this.ExpectedEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpectedEndDate.GetHashCode();
                }
                if (this.ActualStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.ActualStartDate.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
