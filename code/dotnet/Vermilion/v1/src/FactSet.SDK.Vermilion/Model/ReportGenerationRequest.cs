/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// details needed to request the generation of a report.
    /// </summary>
    [DataContract(Name = "ReportGenerationRequest")]
    public partial class ReportGenerationRequest : IEquatable<ReportGenerationRequest>, IValidatableObject
    {
        /// <summary>
        /// The desired output format for the generated report.
        /// </summary>
        /// <value>The desired output format for the generated report.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputFormatEnum
        {
            /// <summary>
            /// Enum WORD for value: WORD
            /// </summary>
            [EnumMember(Value = "WORD")]
            WORD = 1,

            /// <summary>
            /// Enum WORD2010 for value: WORD2010
            /// </summary>
            [EnumMember(Value = "WORD2010")]
            WORD2010 = 2,

            /// <summary>
            /// Enum EXCEL for value: EXCEL
            /// </summary>
            [EnumMember(Value = "EXCEL")]
            EXCEL = 3,

            /// <summary>
            /// Enum EXCEL2010 for value: EXCEL2010
            /// </summary>
            [EnumMember(Value = "EXCEL2010")]
            EXCEL2010 = 4,

            /// <summary>
            /// Enum PPT for value: PPT
            /// </summary>
            [EnumMember(Value = "PPT")]
            PPT = 5,

            /// <summary>
            /// Enum PPT2010 for value: PPT2010
            /// </summary>
            [EnumMember(Value = "PPT2010")]
            PPT2010 = 6,

            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 7,

            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 8,

            /// <summary>
            /// Enum XML for value: XML
            /// </summary>
            [EnumMember(Value = "XML")]
            XML = 9,

            /// <summary>
            /// Enum VXML for value: VXML
            /// </summary>
            [EnumMember(Value = "VXML")]
            VXML = 10,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")]
            HTML = 11,

            /// <summary>
            /// Enum PS for value: PS
            /// </summary>
            [EnumMember(Value = "PS")]
            PS = 12

        }


        /// <summary>
        /// The desired output format for the generated report.
        /// </summary>
        /// <value>The desired output format for the generated report.</value>
        [DataMember(Name = "outputFormat", EmitDefaultValue = false)]
        public OutputFormatEnum? OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportGenerationRequest" /> class.
        /// </summary>
        /// <param name="report">The Report definition code..</param>
        /// <param name="tenancy">The tenancy code in which the report generation occurs..</param>
        /// <param name="outputFormat">The desired output format for the generated report..</param>
        /// <param name="sectionFilter">Section filter that has to be used in the report generation process..</param>
        /// <param name="priority">The priority level assigned to the report generation request..</param>
        /// <param name="startDate">The scheduled start date for generating the report..</param>
        /// <param name="entitySelection">Specifies the Entity selections for the report generation..</param>
        public ReportGenerationRequest(string report = default(string), string tenancy = default(string), OutputFormatEnum? outputFormat = default(OutputFormatEnum?), string sectionFilter = default(string), string priority = default(string), string startDate = default(string), Dictionary<string, EntitySelection> entitySelection = default(Dictionary<string, EntitySelection>))
        {
            this.Report = report;
            this.Tenancy = tenancy;
            this.OutputFormat = outputFormat;
            this.SectionFilter = sectionFilter;
            this.Priority = priority;
            this.StartDate = startDate;
            this.EntitySelection = entitySelection;
        }

        /// <summary>
        /// The Report definition code.
        /// </summary>
        /// <value>The Report definition code.</value>
        [DataMember(Name = "report", EmitDefaultValue = false)]
        public string Report { get; set; }

        /// <summary>
        /// The tenancy code in which the report generation occurs.
        /// </summary>
        /// <value>The tenancy code in which the report generation occurs.</value>
        [DataMember(Name = "tenancy", EmitDefaultValue = false)]
        public string Tenancy { get; set; }

        /// <summary>
        /// Section filter that has to be used in the report generation process.
        /// </summary>
        /// <value>Section filter that has to be used in the report generation process.</value>
        [DataMember(Name = "sectionFilter", EmitDefaultValue = false)]
        public string SectionFilter { get; set; }

        /// <summary>
        /// The priority level assigned to the report generation request.
        /// </summary>
        /// <value>The priority level assigned to the report generation request.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public string Priority { get; set; }

        /// <summary>
        /// The scheduled start date for generating the report.
        /// </summary>
        /// <value>The scheduled start date for generating the report.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Specifies the Entity selections for the report generation.
        /// </summary>
        /// <value>Specifies the Entity selections for the report generation.</value>
        [DataMember(Name = "entitySelection", EmitDefaultValue = false)]
        public Dictionary<string, EntitySelection> EntitySelection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportGenerationRequest {\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  Tenancy: ").Append(Tenancy).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  SectionFilter: ").Append(SectionFilter).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EntitySelection: ").Append(EntitySelection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportGenerationRequest);
        }

        /// <summary>
        /// Returns true if ReportGenerationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportGenerationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportGenerationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                ) && 
                (
                    this.Tenancy == input.Tenancy ||
                    (this.Tenancy != null &&
                    this.Tenancy.Equals(input.Tenancy))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    this.OutputFormat.Equals(input.OutputFormat)
                ) && 
                (
                    this.SectionFilter == input.SectionFilter ||
                    (this.SectionFilter != null &&
                    this.SectionFilter.Equals(input.SectionFilter))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EntitySelection == input.EntitySelection ||
                    this.EntitySelection != null &&
                    input.EntitySelection != null &&
                    this.EntitySelection.SequenceEqual(input.EntitySelection)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Report != null)
                {
                    hashCode = (hashCode * 59) + this.Report.GetHashCode();
                }
                if (this.Tenancy != null)
                {
                    hashCode = (hashCode * 59) + this.Tenancy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                if (this.SectionFilter != null)
                {
                    hashCode = (hashCode * 59) + this.SectionFilter.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EntitySelection != null)
                {
                    hashCode = (hashCode * 59) + this.EntitySelection.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
