/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// ScheduleData
    /// </summary>
    [DataContract(Name = "ScheduleData")]
    public partial class ScheduleData : IEquatable<ScheduleData>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum INITIALISED for value: INITIALISED
            /// </summary>
            [EnumMember(Value = "INITIALISED")]
            INITIALISED = 1,

            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 2,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 3,

            /// <summary>
            /// Enum SUSPENDED for value: SUSPENDED
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDED = 4,

            /// <summary>
            /// Enum FINISHED for value: FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED = 5,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 6,

            /// <summary>
            /// Enum GENERATINGTASKS for value: GENERATING_TASKS
            /// </summary>
            [EnumMember(Value = "GENERATING_TASKS")]
            GENERATINGTASKS = 7

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleData" /> class.
        /// </summary>
        /// <param name="scheduleId">scheduleId.</param>
        /// <param name="name">name.</param>
        /// <param name="definitionName">definitionName.</param>
        /// <param name="status">status.</param>
        /// <param name="group">group.</param>
        /// <param name="reportDate">reportDate.</param>
        /// <param name="noOfTasks">noOfTasks.</param>
        /// <param name="businessCalendar">businessCalendar.</param>
        /// <param name="owner">owner.</param>
        /// <param name="notes">notes.</param>
        /// <param name="finishDate">finishDate.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="lastUpdatedBy">lastUpdatedBy.</param>
        /// <param name="lastUpdated">lastUpdated.</param>
        public ScheduleData(int scheduleId = default(int), string name = default(string), string definitionName = default(string), StatusEnum? status = default(StatusEnum?), string group = default(string), string reportDate = default(string), int noOfTasks = default(int), string businessCalendar = default(string), string owner = default(string), string notes = default(string), string finishDate = default(string), string startDate = default(string), string lastUpdatedBy = default(string), string lastUpdated = default(string))
        {
            this.ScheduleId = scheduleId;
            this.Name = name;
            this.DefinitionName = definitionName;
            this.Status = status;
            this.Group = group;
            this.ReportDate = reportDate;
            this.NoOfTasks = noOfTasks;
            this.BusinessCalendar = businessCalendar;
            this.Owner = owner;
            this.Notes = notes;
            this.FinishDate = finishDate;
            this.StartDate = startDate;
            this.LastUpdatedBy = lastUpdatedBy;
            this.LastUpdated = lastUpdated;
        }

        /// <summary>
        /// Gets or Sets ScheduleId
        /// </summary>
        [DataMember(Name = "scheduleId", EmitDefaultValue = false)]
        public int ScheduleId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DefinitionName
        /// </summary>
        [DataMember(Name = "definitionName", EmitDefaultValue = false)]
        public string DefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets ReportDate
        /// </summary>
        [DataMember(Name = "reportDate", EmitDefaultValue = false)]
        public string ReportDate { get; set; }

        /// <summary>
        /// Gets or Sets NoOfTasks
        /// </summary>
        [DataMember(Name = "noOfTasks", EmitDefaultValue = false)]
        public int NoOfTasks { get; set; }

        /// <summary>
        /// Gets or Sets BusinessCalendar
        /// </summary>
        [DataMember(Name = "businessCalendar", EmitDefaultValue = false)]
        public string BusinessCalendar { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets FinishDate
        /// </summary>
        [DataMember(Name = "finishDate", EmitDefaultValue = false)]
        public string FinishDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatedBy
        /// </summary>
        [DataMember(Name = "lastUpdatedBy", EmitDefaultValue = false)]
        public string LastUpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleData {\n");
            sb.Append("  ScheduleId: ").Append(ScheduleId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DefinitionName: ").Append(DefinitionName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  NoOfTasks: ").Append(NoOfTasks).Append("\n");
            sb.Append("  BusinessCalendar: ").Append(BusinessCalendar).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  FinishDate: ").Append(FinishDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  LastUpdatedBy: ").Append(LastUpdatedBy).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleData);
        }

        /// <summary>
        /// Returns true if ScheduleData instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScheduleId == input.ScheduleId ||
                    this.ScheduleId.Equals(input.ScheduleId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DefinitionName == input.DefinitionName ||
                    (this.DefinitionName != null &&
                    this.DefinitionName.Equals(input.DefinitionName))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                ) && 
                (
                    this.NoOfTasks == input.NoOfTasks ||
                    this.NoOfTasks.Equals(input.NoOfTasks)
                ) && 
                (
                    this.BusinessCalendar == input.BusinessCalendar ||
                    (this.BusinessCalendar != null &&
                    this.BusinessCalendar.Equals(input.BusinessCalendar))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.FinishDate == input.FinishDate ||
                    (this.FinishDate != null &&
                    this.FinishDate.Equals(input.FinishDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.LastUpdatedBy == input.LastUpdatedBy ||
                    (this.LastUpdatedBy != null &&
                    this.LastUpdatedBy.Equals(input.LastUpdatedBy))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ScheduleId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DefinitionName != null)
                {
                    hashCode = (hashCode * 59) + this.DefinitionName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Group != null)
                {
                    hashCode = (hashCode * 59) + this.Group.GetHashCode();
                }
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NoOfTasks.GetHashCode();
                if (this.BusinessCalendar != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessCalendar.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.FinishDate != null)
                {
                    hashCode = (hashCode * 59) + this.FinishDate.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.LastUpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedBy.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
