/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Contains details about the Report revision.
    /// </summary>
    [DataContract(Name = "ReportRevisionDTO")]
    public partial class ReportRevisionDTO : IEquatable<ReportRevisionDTO>, IValidatableObject
    {
        /// <summary>
        /// The current status of the Report generation process.
        /// </summary>
        /// <value>The current status of the Report generation process.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportStatusEnum
        {
            /// <summary>
            /// Enum WAITING for value: WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING = 1,

            /// <summary>
            /// Enum STARTING for value: STARTING
            /// </summary>
            [EnumMember(Value = "STARTING")]
            STARTING = 2,

            /// <summary>
            /// Enum RETRIEVINGREQUEST for value: RETRIEVING_REQUEST
            /// </summary>
            [EnumMember(Value = "RETRIEVING_REQUEST")]
            RETRIEVINGREQUEST = 3,

            /// <summary>
            /// Enum CONTENTFILTER for value: CONTENT_FILTER
            /// </summary>
            [EnumMember(Value = "CONTENT_FILTER")]
            CONTENTFILTER = 4,

            /// <summary>
            /// Enum STYLEPROCESSING for value: STYLE_PROCESSING
            /// </summary>
            [EnumMember(Value = "STYLE_PROCESSING")]
            STYLEPROCESSING = 5,

            /// <summary>
            /// Enum STYLEPREPROCESSING for value: STYLE_PREPROCESSING
            /// </summary>
            [EnumMember(Value = "STYLE_PREPROCESSING")]
            STYLEPREPROCESSING = 6,

            /// <summary>
            /// Enum RULEPROCESSING for value: RULE_PROCESSING
            /// </summary>
            [EnumMember(Value = "RULE_PROCESSING")]
            RULEPROCESSING = 7,

            /// <summary>
            /// Enum GETTINGDATA for value: GETTING_DATA
            /// </summary>
            [EnumMember(Value = "GETTING_DATA")]
            GETTINGDATA = 8,

            /// <summary>
            /// Enum RIPROCESSING for value: RI_PROCESSING
            /// </summary>
            [EnumMember(Value = "RI_PROCESSING")]
            RIPROCESSING = 9,

            /// <summary>
            /// Enum COMPILE for value: COMPILE
            /// </summary>
            [EnumMember(Value = "COMPILE")]
            COMPILE = 10,

            /// <summary>
            /// Enum SUBSTITUTION for value: SUBSTITUTION
            /// </summary>
            [EnumMember(Value = "SUBSTITUTION")]
            SUBSTITUTION = 11,

            /// <summary>
            /// Enum TRANSLATION for value: TRANSLATION
            /// </summary>
            [EnumMember(Value = "TRANSLATION")]
            TRANSLATION = 12,

            /// <summary>
            /// Enum GRIDPROCESSING for value: GRID_PROCESSING
            /// </summary>
            [EnumMember(Value = "GRID_PROCESSING")]
            GRIDPROCESSING = 13,

            /// <summary>
            /// Enum CHARTPROCESSING for value: CHART_PROCESSING
            /// </summary>
            [EnumMember(Value = "CHART_PROCESSING")]
            CHARTPROCESSING = 14,

            /// <summary>
            /// Enum IMPORTEDFILEPROCESSING for value: IMPORTED_FILE_PROCESSING
            /// </summary>
            [EnumMember(Value = "IMPORTED_FILE_PROCESSING")]
            IMPORTEDFILEPROCESSING = 15,

            /// <summary>
            /// Enum TEXTPROCESSINGSTATUS for value: TEXT_PROCESSING_STATUS
            /// </summary>
            [EnumMember(Value = "TEXT_PROCESSING_STATUS")]
            TEXTPROCESSINGSTATUS = 16,

            /// <summary>
            /// Enum TOCPROCESSINGSTATUS for value: TOC_PROCESSING_STATUS
            /// </summary>
            [EnumMember(Value = "TOC_PROCESSING_STATUS")]
            TOCPROCESSINGSTATUS = 17,

            /// <summary>
            /// Enum COMPONENTPROCESSING for value: COMPONENT_PROCESSING
            /// </summary>
            [EnumMember(Value = "COMPONENT_PROCESSING")]
            COMPONENTPROCESSING = 18,

            /// <summary>
            /// Enum POSTPROCESSING for value: POST_PROCESSING
            /// </summary>
            [EnumMember(Value = "POST_PROCESSING")]
            POSTPROCESSING = 19,

            /// <summary>
            /// Enum POSTINGTOWRS for value: POSTING_TO_WRS
            /// </summary>
            [EnumMember(Value = "POSTING_TO_WRS")]
            POSTINGTOWRS = 20,

            /// <summary>
            /// Enum POSTEDTOWRS for value: POSTED_TO_WRS
            /// </summary>
            [EnumMember(Value = "POSTED_TO_WRS")]
            POSTEDTOWRS = 21,

            /// <summary>
            /// Enum RENDERING for value: RENDERING
            /// </summary>
            [EnumMember(Value = "RENDERING")]
            RENDERING = 22,

            /// <summary>
            /// Enum DOCCREATION for value: DOC_CREATION
            /// </summary>
            [EnumMember(Value = "DOC_CREATION")]
            DOCCREATION = 23,

            /// <summary>
            /// Enum PDFCONVERSION for value: PDF_CONVERSION
            /// </summary>
            [EnumMember(Value = "PDF_CONVERSION")]
            PDFCONVERSION = 24,

            /// <summary>
            /// Enum ABORTED for value: ABORTED
            /// </summary>
            [EnumMember(Value = "ABORTED")]
            ABORTED = 25,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 26,

            /// <summary>
            /// Enum COMPLETEDCAUTIONS for value: COMPLETED_CAUTIONS
            /// </summary>
            [EnumMember(Value = "COMPLETED_CAUTIONS")]
            COMPLETEDCAUTIONS = 27,

            /// <summary>
            /// Enum COMPLETEDERROR for value: COMPLETED_ERROR
            /// </summary>
            [EnumMember(Value = "COMPLETED_ERROR")]
            COMPLETEDERROR = 28,

            /// <summary>
            /// Enum COMPLETEDMODIFYING for value: COMPLETED_MODIFYING
            /// </summary>
            [EnumMember(Value = "COMPLETED_MODIFYING")]
            COMPLETEDMODIFYING = 29,

            /// <summary>
            /// Enum COMPLETEDCHANGED for value: COMPLETED_CHANGED
            /// </summary>
            [EnumMember(Value = "COMPLETED_CHANGED")]
            COMPLETEDCHANGED = 30,

            /// <summary>
            /// Enum DELETING for value: DELETING
            /// </summary>
            [EnumMember(Value = "DELETING")]
            DELETING = 31,

            /// <summary>
            /// Enum REPORTORIGINALGENERATION for value: REPORT_ORIGINAL_GENERATION
            /// </summary>
            [EnumMember(Value = "REPORT_ORIGINAL_GENERATION")]
            REPORTORIGINALGENERATION = 32,

            /// <summary>
            /// Enum REPORTPREVIOUSREVISION for value: REPORT_PREVIOUS_REVISION
            /// </summary>
            [EnumMember(Value = "REPORT_PREVIOUS_REVISION")]
            REPORTPREVIOUSREVISION = 33,

            /// <summary>
            /// Enum GENERATING for value: GENERATING
            /// </summary>
            [EnumMember(Value = "GENERATING")]
            GENERATING = 34

        }


        /// <summary>
        /// The current status of the Report generation process.
        /// </summary>
        /// <value>The current status of the Report generation process.</value>
        [DataMember(Name = "reportStatus", EmitDefaultValue = false)]
        public ReportStatusEnum? ReportStatus { get; set; }
        /// <summary>
        /// Sign-off status of the Report.
        /// </summary>
        /// <value>Sign-off status of the Report.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SignOffStatusEnum
        {
            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 1,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 2,

            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 3

        }


        /// <summary>
        /// Sign-off status of the Report.
        /// </summary>
        /// <value>Sign-off status of the Report.</value>
        [DataMember(Name = "signOffStatus", EmitDefaultValue = false)]
        public SignOffStatusEnum? SignOffStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportRevisionDTO" /> class.
        /// </summary>
        /// <param name="reportStatus">The current status of the Report generation process..</param>
        /// <param name="startDate">Start date of the Report generation process..</param>
        /// <param name="finishDate">Completion date of the Report generation process..</param>
        /// <param name="signOffStatus">Sign-off status of the Report..</param>
        /// <param name="signOffNotes">Additional notes related to the sign-off process..</param>
        /// <param name="reportReasonCd">Reason code for generating the Report..</param>
        /// <param name="description">Description of the Report revision..</param>
        /// <param name="languageCode">Language code of the Report..</param>
        /// <param name="outputFormat">Output format of the Report..</param>
        /// <param name="percentageComplete">Percentage of completion for the Report generation..</param>
        public ReportRevisionDTO(ReportStatusEnum? reportStatus = default(ReportStatusEnum?), string startDate = default(string), string finishDate = default(string), SignOffStatusEnum? signOffStatus = default(SignOffStatusEnum?), string signOffNotes = default(string), string reportReasonCd = default(string), string description = default(string), string languageCode = default(string), string outputFormat = default(string), decimal percentageComplete = default(decimal))
        {
            this.ReportStatus = reportStatus;
            this.StartDate = startDate;
            this.FinishDate = finishDate;
            this.SignOffStatus = signOffStatus;
            this.SignOffNotes = signOffNotes;
            this.ReportReasonCd = reportReasonCd;
            this.Description = description;
            this.LanguageCode = languageCode;
            this.OutputFormat = outputFormat;
            this.PercentageComplete = percentageComplete;
        }

        /// <summary>
        /// Start date of the Report generation process.
        /// </summary>
        /// <value>Start date of the Report generation process.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Completion date of the Report generation process.
        /// </summary>
        /// <value>Completion date of the Report generation process.</value>
        [DataMember(Name = "finishDate", EmitDefaultValue = false)]
        public string FinishDate { get; set; }

        /// <summary>
        /// Additional notes related to the sign-off process.
        /// </summary>
        /// <value>Additional notes related to the sign-off process.</value>
        [DataMember(Name = "signOffNotes", EmitDefaultValue = false)]
        public string SignOffNotes { get; set; }

        /// <summary>
        /// Reason code for generating the Report.
        /// </summary>
        /// <value>Reason code for generating the Report.</value>
        [DataMember(Name = "reportReasonCd", EmitDefaultValue = false)]
        public string ReportReasonCd { get; set; }

        /// <summary>
        /// Description of the Report revision.
        /// </summary>
        /// <value>Description of the Report revision.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Language code of the Report.
        /// </summary>
        /// <value>Language code of the Report.</value>
        [DataMember(Name = "languageCode", EmitDefaultValue = false)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Output format of the Report.
        /// </summary>
        /// <value>Output format of the Report.</value>
        [DataMember(Name = "outputFormat", EmitDefaultValue = false)]
        public string OutputFormat { get; set; }

        /// <summary>
        /// Percentage of completion for the Report generation.
        /// </summary>
        /// <value>Percentage of completion for the Report generation.</value>
        [DataMember(Name = "percentageComplete", EmitDefaultValue = false)]
        public decimal PercentageComplete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportRevisionDTO {\n");
            sb.Append("  ReportStatus: ").Append(ReportStatus).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  FinishDate: ").Append(FinishDate).Append("\n");
            sb.Append("  SignOffStatus: ").Append(SignOffStatus).Append("\n");
            sb.Append("  SignOffNotes: ").Append(SignOffNotes).Append("\n");
            sb.Append("  ReportReasonCd: ").Append(ReportReasonCd).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  PercentageComplete: ").Append(PercentageComplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportRevisionDTO);
        }

        /// <summary>
        /// Returns true if ReportRevisionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportRevisionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportRevisionDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReportStatus == input.ReportStatus ||
                    this.ReportStatus.Equals(input.ReportStatus)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.FinishDate == input.FinishDate ||
                    (this.FinishDate != null &&
                    this.FinishDate.Equals(input.FinishDate))
                ) && 
                (
                    this.SignOffStatus == input.SignOffStatus ||
                    this.SignOffStatus.Equals(input.SignOffStatus)
                ) && 
                (
                    this.SignOffNotes == input.SignOffNotes ||
                    (this.SignOffNotes != null &&
                    this.SignOffNotes.Equals(input.SignOffNotes))
                ) && 
                (
                    this.ReportReasonCd == input.ReportReasonCd ||
                    (this.ReportReasonCd != null &&
                    this.ReportReasonCd.Equals(input.ReportReasonCd))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    (this.OutputFormat != null &&
                    this.OutputFormat.Equals(input.OutputFormat))
                ) && 
                (
                    this.PercentageComplete == input.PercentageComplete ||
                    this.PercentageComplete.Equals(input.PercentageComplete)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReportStatus.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.FinishDate != null)
                {
                    hashCode = (hashCode * 59) + this.FinishDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SignOffStatus.GetHashCode();
                if (this.SignOffNotes != null)
                {
                    hashCode = (hashCode * 59) + this.SignOffNotes.GetHashCode();
                }
                if (this.ReportReasonCd != null)
                {
                    hashCode = (hashCode * 59) + this.ReportReasonCd.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.LanguageCode != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageCode.GetHashCode();
                }
                if (this.OutputFormat != null)
                {
                    hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PercentageComplete.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
