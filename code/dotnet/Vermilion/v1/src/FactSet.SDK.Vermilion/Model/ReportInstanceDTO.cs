/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Details of the Report instance.
    /// </summary>
    [DataContract(Name = "ReportInstanceDTO")]
    public partial class ReportInstanceDTO : IEquatable<ReportInstanceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceDTO" /> class.
        /// </summary>
        /// <param name="reportInstanceId">Unique Identifier of the Report instance..</param>
        /// <param name="reportDefinitionId">Unique Identifier for the associated Report definition..</param>
        /// <param name="reportDefinitionName">Name of the Report definition..</param>
        /// <param name="reportName">Name of the generated Report..</param>
        /// <param name="userFriendlyReportName">A user-friendly display name for the generated report file..</param>
        /// <param name="extension">File extension for the report output..</param>
        /// <param name="reportRevision">reportRevision.</param>
        /// <param name="name">Display name for the generated report file..</param>
        public ReportInstanceDTO(int reportInstanceId = default(int), int reportDefinitionId = default(int), string reportDefinitionName = default(string), string reportName = default(string), string userFriendlyReportName = default(string), string extension = default(string), ReportRevisionDTO reportRevision = default(ReportRevisionDTO), string name = default(string))
        {
            this.ReportInstanceId = reportInstanceId;
            this.ReportDefinitionId = reportDefinitionId;
            this.ReportDefinitionName = reportDefinitionName;
            this.ReportName = reportName;
            this.UserFriendlyReportName = userFriendlyReportName;
            this.Extension = extension;
            this.ReportRevision = reportRevision;
            this.Name = name;
        }

        /// <summary>
        /// Unique Identifier of the Report instance.
        /// </summary>
        /// <value>Unique Identifier of the Report instance.</value>
        [DataMember(Name = "reportInstanceId", EmitDefaultValue = false)]
        public int ReportInstanceId { get; set; }

        /// <summary>
        /// Unique Identifier for the associated Report definition.
        /// </summary>
        /// <value>Unique Identifier for the associated Report definition.</value>
        [DataMember(Name = "reportDefinitionId", EmitDefaultValue = false)]
        public int ReportDefinitionId { get; set; }

        /// <summary>
        /// Name of the Report definition.
        /// </summary>
        /// <value>Name of the Report definition.</value>
        [DataMember(Name = "reportDefinitionName", EmitDefaultValue = false)]
        public string ReportDefinitionName { get; set; }

        /// <summary>
        /// Name of the generated Report.
        /// </summary>
        /// <value>Name of the generated Report.</value>
        [DataMember(Name = "reportName", EmitDefaultValue = false)]
        public string ReportName { get; set; }

        /// <summary>
        /// A user-friendly display name for the generated report file.
        /// </summary>
        /// <value>A user-friendly display name for the generated report file.</value>
        [DataMember(Name = "userFriendlyReportName", EmitDefaultValue = false)]
        public string UserFriendlyReportName { get; set; }

        /// <summary>
        /// File extension for the report output.
        /// </summary>
        /// <value>File extension for the report output.</value>
        [DataMember(Name = "extension", EmitDefaultValue = false)]
        public string Extension { get; set; }

        /// <summary>
        /// Gets or Sets ReportRevision
        /// </summary>
        [DataMember(Name = "reportRevision", EmitDefaultValue = false)]
        public ReportRevisionDTO ReportRevision { get; set; }

        /// <summary>
        /// Display name for the generated report file.
        /// </summary>
        /// <value>Display name for the generated report file.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportInstanceDTO {\n");
            sb.Append("  ReportInstanceId: ").Append(ReportInstanceId).Append("\n");
            sb.Append("  ReportDefinitionId: ").Append(ReportDefinitionId).Append("\n");
            sb.Append("  ReportDefinitionName: ").Append(ReportDefinitionName).Append("\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  UserFriendlyReportName: ").Append(UserFriendlyReportName).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  ReportRevision: ").Append(ReportRevision).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportInstanceDTO);
        }

        /// <summary>
        /// Returns true if ReportInstanceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportInstanceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportInstanceDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReportInstanceId == input.ReportInstanceId ||
                    this.ReportInstanceId.Equals(input.ReportInstanceId)
                ) && 
                (
                    this.ReportDefinitionId == input.ReportDefinitionId ||
                    this.ReportDefinitionId.Equals(input.ReportDefinitionId)
                ) && 
                (
                    this.ReportDefinitionName == input.ReportDefinitionName ||
                    (this.ReportDefinitionName != null &&
                    this.ReportDefinitionName.Equals(input.ReportDefinitionName))
                ) && 
                (
                    this.ReportName == input.ReportName ||
                    (this.ReportName != null &&
                    this.ReportName.Equals(input.ReportName))
                ) && 
                (
                    this.UserFriendlyReportName == input.UserFriendlyReportName ||
                    (this.UserFriendlyReportName != null &&
                    this.UserFriendlyReportName.Equals(input.UserFriendlyReportName))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.ReportRevision == input.ReportRevision ||
                    (this.ReportRevision != null &&
                    this.ReportRevision.Equals(input.ReportRevision))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReportInstanceId.GetHashCode();
                hashCode = (hashCode * 59) + this.ReportDefinitionId.GetHashCode();
                if (this.ReportDefinitionName != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDefinitionName.GetHashCode();
                }
                if (this.ReportName != null)
                {
                    hashCode = (hashCode * 59) + this.ReportName.GetHashCode();
                }
                if (this.UserFriendlyReportName != null)
                {
                    hashCode = (hashCode * 59) + this.UserFriendlyReportName.GetHashCode();
                }
                if (this.Extension != null)
                {
                    hashCode = (hashCode * 59) + this.Extension.GetHashCode();
                }
                if (this.ReportRevision != null)
                {
                    hashCode = (hashCode * 59) + this.ReportRevision.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
