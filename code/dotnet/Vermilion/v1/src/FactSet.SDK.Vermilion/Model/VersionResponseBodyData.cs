/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Version details of VRS and WRS systems.
    /// </summary>
    [DataContract(Name = "VersionResponseBody_data")]
    public partial class VersionResponseBodyData : IEquatable<VersionResponseBodyData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionResponseBodyData" /> class.
        /// </summary>
        /// <param name="vrsVersion">VRS version.</param>
        /// <param name="wrsVersion">WRS version.</param>
        /// <param name="dbServer">DB version.</param>
        public VersionResponseBodyData(string vrsVersion = default(string), string wrsVersion = default(string), string dbServer = default(string))
        {
            this.VrsVersion = vrsVersion;
            this.WrsVersion = wrsVersion;
            this.DbServer = dbServer;
        }

        /// <summary>
        /// VRS version
        /// </summary>
        /// <value>VRS version</value>
        [DataMember(Name = "vrsVersion", EmitDefaultValue = false)]
        public string VrsVersion { get; set; }

        /// <summary>
        /// WRS version
        /// </summary>
        /// <value>WRS version</value>
        [DataMember(Name = "wrsVersion", EmitDefaultValue = false)]
        public string WrsVersion { get; set; }

        /// <summary>
        /// DB version
        /// </summary>
        /// <value>DB version</value>
        [DataMember(Name = "dbServer", EmitDefaultValue = false)]
        public string DbServer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionResponseBodyData {\n");
            sb.Append("  VrsVersion: ").Append(VrsVersion).Append("\n");
            sb.Append("  WrsVersion: ").Append(WrsVersion).Append("\n");
            sb.Append("  DbServer: ").Append(DbServer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionResponseBodyData);
        }

        /// <summary>
        /// Returns true if VersionResponseBodyData instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionResponseBodyData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionResponseBodyData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VrsVersion == input.VrsVersion ||
                    (this.VrsVersion != null &&
                    this.VrsVersion.Equals(input.VrsVersion))
                ) && 
                (
                    this.WrsVersion == input.WrsVersion ||
                    (this.WrsVersion != null &&
                    this.WrsVersion.Equals(input.WrsVersion))
                ) && 
                (
                    this.DbServer == input.DbServer ||
                    (this.DbServer != null &&
                    this.DbServer.Equals(input.DbServer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VrsVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VrsVersion.GetHashCode();
                }
                if (this.WrsVersion != null)
                {
                    hashCode = (hashCode * 59) + this.WrsVersion.GetHashCode();
                }
                if (this.DbServer != null)
                {
                    hashCode = (hashCode * 59) + this.DbServer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
