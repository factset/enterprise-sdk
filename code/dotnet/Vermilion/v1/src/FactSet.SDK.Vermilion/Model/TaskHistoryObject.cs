/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Details of an individual task history event.
    /// </summary>
    [DataContract(Name = "TaskHistoryObject")]
    public partial class TaskHistoryObject : IEquatable<TaskHistoryObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskHistoryObject" /> class.
        /// </summary>
        /// <param name="taskType">The task type of the task..</param>
        /// <param name="description">A description of the task..</param>
        /// <param name="dateAndTime">The timestamp of the task history event in epoch format.</param>
        /// <param name="actionType">The action type of the task history event..</param>
        /// <param name="notes">The notes associated with the task history event..</param>
        /// <param name="reasonCode">The reason code associated with the task history event..</param>
        /// <param name="details">The details associated with the action of the task history event..</param>
        public TaskHistoryObject(string taskType = default(string), string description = default(string), string dateAndTime = default(string), string actionType = default(string), string notes = default(string), string reasonCode = default(string), string details = default(string))
        {
            this.TaskType = taskType;
            this.Description = description;
            this.DateAndTime = dateAndTime;
            this.ActionType = actionType;
            this.Notes = notes;
            this.ReasonCode = reasonCode;
            this.Details = details;
        }

        /// <summary>
        /// The task type of the task.
        /// </summary>
        /// <value>The task type of the task.</value>
        [DataMember(Name = "taskType", EmitDefaultValue = false)]
        public string TaskType { get; set; }

        /// <summary>
        /// A description of the task.
        /// </summary>
        /// <value>A description of the task.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The timestamp of the task history event in epoch format
        /// </summary>
        /// <value>The timestamp of the task history event in epoch format</value>
        [DataMember(Name = "dateAndTime", EmitDefaultValue = false)]
        public string DateAndTime { get; set; }

        /// <summary>
        /// The action type of the task history event.
        /// </summary>
        /// <value>The action type of the task history event.</value>
        [DataMember(Name = "actionType", EmitDefaultValue = false)]
        public string ActionType { get; set; }

        /// <summary>
        /// The notes associated with the task history event.
        /// </summary>
        /// <value>The notes associated with the task history event.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// The reason code associated with the task history event.
        /// </summary>
        /// <value>The reason code associated with the task history event.</value>
        [DataMember(Name = "reasonCode", EmitDefaultValue = false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The details associated with the action of the task history event.
        /// </summary>
        /// <value>The details associated with the action of the task history event.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskHistoryObject {\n");
            sb.Append("  TaskType: ").Append(TaskType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateAndTime: ").Append(DateAndTime).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskHistoryObject);
        }

        /// <summary>
        /// Returns true if TaskHistoryObject instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskHistoryObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskHistoryObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TaskType == input.TaskType ||
                    (this.TaskType != null &&
                    this.TaskType.Equals(input.TaskType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DateAndTime == input.DateAndTime ||
                    (this.DateAndTime != null &&
                    this.DateAndTime.Equals(input.DateAndTime))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskType != null)
                {
                    hashCode = (hashCode * 59) + this.TaskType.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DateAndTime != null)
                {
                    hashCode = (hashCode * 59) + this.DateAndTime.GetHashCode();
                }
                if (this.ActionType != null)
                {
                    hashCode = (hashCode * 59) + this.ActionType.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.ReasonCode != null)
                {
                    hashCode = (hashCode * 59) + this.ReasonCode.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
