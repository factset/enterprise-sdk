/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Defines the properties and attributes of a record set field.
    /// </summary>
    [DataContract(Name = "RecordSetFields")]
    public partial class RecordSetFields : IEquatable<RecordSetFields>, IValidatableObject
    {
        /// <summary>
        /// The type of the field indicating the kind of data it holds.
        /// </summary>
        /// <value>The type of the field indicating the kind of data it holds.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldTypeEnum
        {
            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 1,

            /// <summary>
            /// Enum COLOUR for value: COLOUR
            /// </summary>
            [EnumMember(Value = "COLOUR")]
            COLOUR = 2,

            /// <summary>
            /// Enum DATETIME for value: DATETIME
            /// </summary>
            [EnumMember(Value = "DATETIME")]
            DATETIME = 3,

            /// <summary>
            /// Enum DECIMAL for value: DECIMAL
            /// </summary>
            [EnumMember(Value = "DECIMAL")]
            DECIMAL = 4,

            /// <summary>
            /// Enum FONT for value: FONT
            /// </summary>
            [EnumMember(Value = "FONT")]
            FONT = 5,

            /// <summary>
            /// Enum FONTSIZE for value: FONTSIZE
            /// </summary>
            [EnumMember(Value = "FONTSIZE")]
            FONTSIZE = 6,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")]
            HTML = 7,

            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGER = 8,

            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 9

        }


        /// <summary>
        /// The type of the field indicating the kind of data it holds.
        /// </summary>
        /// <value>The type of the field indicating the kind of data it holds.</value>
        [DataMember(Name = "fieldType", EmitDefaultValue = false)]
        public FieldTypeEnum? FieldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordSetFields" /> class.
        /// </summary>
        /// <param name="fieldType">The type of the field indicating the kind of data it holds..</param>
        /// <param name="format">The format applied to the field&#39;s value..</param>
        /// <param name="id">Unique identifier for the field..</param>
        /// <param name="hide">Indicates whether the field is hidden..</param>
        /// <param name="name">The name of the field..</param>
        /// <param name="order">The ordering of the record set field..</param>
        public RecordSetFields(FieldTypeEnum? fieldType = default(FieldTypeEnum?), string format = default(string), int id = default(int), string hide = default(string), string name = default(string), int order = default(int))
        {
            this.FieldType = fieldType;
            this.Format = format;
            this.Id = id;
            this.Hide = hide;
            this.Name = name;
            this.Order = order;
        }

        /// <summary>
        /// The format applied to the field&#39;s value.
        /// </summary>
        /// <value>The format applied to the field&#39;s value.</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Unique identifier for the field.
        /// </summary>
        /// <value>Unique identifier for the field.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Indicates whether the field is hidden.
        /// </summary>
        /// <value>Indicates whether the field is hidden.</value>
        [DataMember(Name = "hide", EmitDefaultValue = false)]
        public string Hide { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        /// <value>The name of the field.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The ordering of the record set field.
        /// </summary>
        /// <value>The ordering of the record set field.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordSetFields {\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Hide: ").Append(Hide).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordSetFields);
        }

        /// <summary>
        /// Returns true if RecordSetFields instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordSetFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordSetFields input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldType == input.FieldType ||
                    this.FieldType.Equals(input.FieldType)
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Hide == input.Hide ||
                    (this.Hide != null &&
                    this.Hide.Equals(input.Hide))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FieldType.GetHashCode();
                if (this.Format != null)
                {
                    hashCode = (hashCode * 59) + this.Format.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Hide != null)
                {
                    hashCode = (hashCode * 59) + this.Hide.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
