/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Defines the details of the Report definition.
    /// </summary>
    [DataContract(Name = "ReportDefinitionDTO")]
    public partial class ReportDefinitionDTO : IEquatable<ReportDefinitionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDefinitionDTO" /> class.
        /// </summary>
        /// <param name="name">Name of the Report definition..</param>
        /// <param name="code">Code of the Report definition..</param>
        /// <param name="releaseTag">Release tag associated with the Report definition..</param>
        /// <param name="entities">A list of entities associated with the Report definition..</param>
        public ReportDefinitionDTO(string name = default(string), string code = default(string), string releaseTag = default(string), List<EntityDTO> entities = default(List<EntityDTO>))
        {
            this.Name = name;
            this.Code = code;
            this.ReleaseTag = releaseTag;
            this.Entities = entities;
        }

        /// <summary>
        /// Name of the Report definition.
        /// </summary>
        /// <value>Name of the Report definition.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Code of the Report definition.
        /// </summary>
        /// <value>Code of the Report definition.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Release tag associated with the Report definition.
        /// </summary>
        /// <value>Release tag associated with the Report definition.</value>
        [DataMember(Name = "releaseTag", EmitDefaultValue = false)]
        public string ReleaseTag { get; set; }

        /// <summary>
        /// A list of entities associated with the Report definition.
        /// </summary>
        /// <value>A list of entities associated with the Report definition.</value>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<EntityDTO> Entities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportDefinitionDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ReleaseTag: ").Append(ReleaseTag).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportDefinitionDTO);
        }

        /// <summary>
        /// Returns true if ReportDefinitionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportDefinitionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportDefinitionDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ReleaseTag == input.ReleaseTag ||
                    (this.ReleaseTag != null &&
                    this.ReleaseTag.Equals(input.ReleaseTag))
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.ReleaseTag != null)
                {
                    hashCode = (hashCode * 59) + this.ReleaseTag.GetHashCode();
                }
                if (this.Entities != null)
                {
                    hashCode = (hashCode * 59) + this.Entities.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
