/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Vermilion.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Vermilion.Model
{
    /// <summary>
    /// Details of an individual schedule instance.
    /// </summary>
    [DataContract(Name = "ScheduleInstanceData")]
    public partial class ScheduleInstanceData : IEquatable<ScheduleInstanceData>, IValidatableObject
    {
        /// <summary>
        /// Current status of the schedule instance.
        /// </summary>
        /// <value>Current status of the schedule instance.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum INITIALISED for value: INITIALISED
            /// </summary>
            [EnumMember(Value = "INITIALISED")]
            INITIALISED = 1,

            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 2,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 3,

            /// <summary>
            /// Enum SUSPENDED for value: SUSPENDED
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDED = 4,

            /// <summary>
            /// Enum FINISHED for value: FINISHED
            /// </summary>
            [EnumMember(Value = "FINISHED")]
            FINISHED = 5,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 6,

            /// <summary>
            /// Enum GENERATINGTASKS for value: GENERATING_TASKS
            /// </summary>
            [EnumMember(Value = "GENERATING_TASKS")]
            GENERATINGTASKS = 7

        }


        /// <summary>
        /// Current status of the schedule instance.
        /// </summary>
        /// <value>Current status of the schedule instance.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleInstanceData" /> class.
        /// </summary>
        /// <param name="scheduleInstanceId">Unique identifier of the schedule instance..</param>
        /// <param name="status">Current status of the schedule instance..</param>
        public ScheduleInstanceData(int scheduleInstanceId = default(int), StatusEnum? status = default(StatusEnum?))
        {
            this.ScheduleInstanceId = scheduleInstanceId;
            this.Status = status;
        }

        /// <summary>
        /// Unique identifier of the schedule instance.
        /// </summary>
        /// <value>Unique identifier of the schedule instance.</value>
        [DataMember(Name = "scheduleInstanceId", EmitDefaultValue = false)]
        public int ScheduleInstanceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleInstanceData {\n");
            sb.Append("  ScheduleInstanceId: ").Append(ScheduleInstanceId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleInstanceData);
        }

        /// <summary>
        /// Returns true if ScheduleInstanceData instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleInstanceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleInstanceData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScheduleInstanceId == input.ScheduleInstanceId ||
                    this.ScheduleInstanceId.Equals(input.ScheduleInstanceId)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ScheduleInstanceId.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
