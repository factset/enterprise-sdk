/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Vermilion.Client;
using FactSet.SDK.Vermilion.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Vermilion.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the entity values
        /// </summary>
        /// <remarks>
        /// Gets the entity values for the specified entity
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <returns>EntityFieldValueDTO</returns>
        EntityFieldValueDTO GetEntityValuesByCode(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?));

        /// <summary>
        /// Gets the entity values
        /// </summary>
        /// <remarks>
        /// Gets the entity values for the specified entity
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <returns>ApiResponse of EntityFieldValueDTO</returns>
        ApiResponse<EntityFieldValueDTO> GetEntityValuesByCodeWithHttpInfo(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Gets the entity values
        /// </summary>
        /// <remarks>
        /// Gets the entity values for the specified entity
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityFieldValueDTO</returns>
        System.Threading.Tasks.Task<EntityFieldValueDTO> GetEntityValuesByCodeAsync(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the entity values
        /// </summary>
        /// <remarks>
        /// Gets the entity values for the specified entity
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityFieldValueDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityFieldValueDTO>> GetEntityValuesByCodeWithHttpInfoAsync(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityApi : IEntityApiSync, IEntityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityApi : IEntityApi
    {
        private FactSet.SDK.Vermilion.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetEntityValuesByCodeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EntityFieldValueDTO) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)404, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
            { (HttpStatusCode)500, typeof(ErrorList) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Vermilion.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityApi(FactSet.SDK.Vermilion.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EntityApi(FactSet.SDK.Vermilion.Client.ISynchronousClient client, FactSet.SDK.Vermilion.Client.IAsynchronousClient asyncClient, FactSet.SDK.Vermilion.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Vermilion.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the entity values Gets the entity values for the specified entity
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <returns>EntityFieldValueDTO</returns>
        public EntityFieldValueDTO GetEntityValuesByCode(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?))
        {
            var localVarResponse = GetEntityValuesByCodeWithHttpInfo(tenant, entityCode, sort, paginationLimit, paginationOffset, showAll);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the entity values Gets the entity values for the specified entity
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <returns>ApiResponse of EntityFieldValueDTO</returns>
        public ApiResponse<EntityFieldValueDTO> GetEntityValuesByCodeWithHttpInfo(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling EntityApi->GetEntityValuesByCode");
            }

            // verify the required parameter 'entityCode' is set
            if (entityCode == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'entityCode' when calling EntityApi->GetEntityValuesByCode");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityCode", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(entityCode)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (showAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "showAll", showAll));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEntityValuesByCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EntityFieldValueDTO>("/v1/{tenant}/entities/{entityCode}/values", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityValuesByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets the entity values Gets the entity values for the specified entity
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EntityFieldValueDTO</returns>
        public async System.Threading.Tasks.Task<EntityFieldValueDTO>GetEntityValuesByCodeAsync(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEntityValuesByCodeWithHttpInfoAsync(tenant, entityCode, sort, paginationLimit, paginationOffset, showAll, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the entity values Gets the entity values for the specified entity
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="entityCode">The code of the entity</param>
        /// <param name="sort">The entity field to sort on. Can only be sorted on entity key, description or secondary key fields. Append \&quot;-\&quot; to sort in descending order. If no parameter given, it will be sorted by key field in ascending order by default (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. Default is 25 (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip. Default is 0 (optional, default to 0)</param>
        /// <param name="showAll">Whether to show all field values for each entity row. Value should either be 1 or 0. Default is 0 (false). Otherwise, show all field values in a JSON array named \&quot;fieldsWithValues\&quot;, with each array value being a string in the format of \&quot;**&lt;FIELD_NAME&gt; : &lt;FIELD_VALUE&gt;**\&quot;. Both key and description field values will be included in this JSON array too. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EntityFieldValueDTO)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EntityFieldValueDTO>> GetEntityValuesByCodeWithHttpInfoAsync(string tenant, string entityCode, List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), int? showAll = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling EntityApi->GetEntityValuesByCode");
            }

            // verify the required parameter 'entityCode' is set
            if (entityCode == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'entityCode' when calling EntityApi->GetEntityValuesByCode");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("entityCode", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(entityCode)); // path parameter
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (showAll != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "showAll", showAll));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEntityValuesByCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EntityFieldValueDTO>("/v1/{tenant}/entities/{entityCode}/values", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEntityValuesByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
