/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Vermilion.Client;
using FactSet.SDK.Vermilion.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Vermilion.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportInstanceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns>void</returns>
        void CancelReportGeneration(string tenant, string reportInstanceId);

        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelReportGenerationWithHttpInfo(string tenant, string reportInstanceId);
        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadReportFile(string tenant, string reportInstanceId, string reportFileName);

        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadReportFileWithHttpInfo(string tenant, string reportInstanceId, string reportFileName);
        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ReportInstanceList</returns>
        ReportInstanceList GetAllReportInstances(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ReportInstanceList</returns>
        ApiResponse<ReportInstanceList> GetAllReportInstancesWithHttpInfo(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ReportInstanceLogList</returns>
        ReportInstanceLogList GetReportGenerationLogs(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ReportInstanceLogList</returns>
        ApiResponse<ReportInstanceLogList> GetReportGenerationLogsWithHttpInfo(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns>ReportInstanceData</returns>
        ReportInstanceData GetReportInstanceById(string reportInstanceId, string tenant);

        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns>ApiResponse of ReportInstanceData</returns>
        ApiResponse<ReportInstanceData> GetReportInstanceByIdWithHttpInfo(string reportInstanceId, string tenant);
        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <returns>ReportInstanceDataResponse</returns>
        ReportInstanceDataResponse StartReportGeneration(ReportGenerationRequestBody reportGenerationRequestBody);

        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <returns>ApiResponse of ReportInstanceDataResponse</returns>
        ApiResponse<ReportInstanceDataResponse> StartReportGenerationWithHttpInfo(ReportGenerationRequestBody reportGenerationRequestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportInstanceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelReportGenerationAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels a report generation
        /// </summary>
        /// <remarks>
        /// Sends a request to cancel a report generation based on the report instance id passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelReportGenerationWithHttpInfoAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadReportFileAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the generated file
        /// </summary>
        /// <remarks>
        /// Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadReportFileWithHttpInfoAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceList</returns>
        System.Threading.Tasks.Task<ReportInstanceList> GetAllReportInstancesAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of report instances
        /// </summary>
        /// <remarks>
        /// Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportInstanceList>> GetAllReportInstancesWithHttpInfoAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceLogList</returns>
        System.Threading.Tasks.Task<ReportInstanceLogList> GetReportGenerationLogsAsync(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of logs for the report instance generation
        /// </summary>
        /// <remarks>
        /// Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceLogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportInstanceLogList>> GetReportGenerationLogsWithHttpInfoAsync(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceData</returns>
        System.Threading.Tasks.Task<ReportInstanceData> GetReportInstanceByIdAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a report instance based on the ID
        /// </summary>
        /// <remarks>
        /// Gets a report instance object based on the ID passed
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportInstanceData>> GetReportInstanceByIdWithHttpInfoAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceDataResponse</returns>
        System.Threading.Tasks.Task<ReportInstanceDataResponse> StartReportGenerationAsync(ReportGenerationRequestBody reportGenerationRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generates a report
        /// </summary>
        /// <remarks>
        /// Generates a report using the specified ID and the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportInstanceDataResponse>> StartReportGenerationWithHttpInfoAsync(ReportGenerationRequestBody reportGenerationRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportInstanceApi : IReportInstanceApiSync, IReportInstanceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportInstanceApi : IReportInstanceApi
    {
        private FactSet.SDK.Vermilion.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CancelReportGenerationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DownloadReportFileResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetAllReportInstancesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ReportInstanceList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetReportGenerationLogsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ReportInstanceLogList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)404, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetReportInstanceByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ReportInstanceData) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)404, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> StartReportGenerationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(ReportInstanceDataResponse) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)404, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportInstanceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportInstanceApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Vermilion.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportInstanceApi(FactSet.SDK.Vermilion.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInstanceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReportInstanceApi(FactSet.SDK.Vermilion.Client.ISynchronousClient client, FactSet.SDK.Vermilion.Client.IAsynchronousClient asyncClient, FactSet.SDK.Vermilion.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Vermilion.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns>void</returns>
        public void CancelReportGeneration(string tenant, string reportInstanceId)
        {
            CancelReportGenerationWithHttpInfo(tenant, reportInstanceId);
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelReportGenerationWithHttpInfo(string tenant, string reportInstanceId)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->CancelReportGeneration");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->CancelReportGeneration");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CancelReportGenerationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelReportGeneration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelReportGenerationAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelReportGenerationWithHttpInfoAsync(tenant, reportInstanceId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancels a report generation Sends a request to cancel a report generation based on the report instance id passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">The id of the report instance</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelReportGenerationWithHttpInfoAsync(string tenant, string reportInstanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->CancelReportGeneration");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->CancelReportGeneration");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CancelReportGenerationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelReportGeneration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadReportFile(string tenant, string reportInstanceId, string reportFileName)
        {
            var localVarResponse = DownloadReportFileWithHttpInfo(tenant, reportInstanceId, reportFileName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DownloadReportFileWithHttpInfo(string tenant, string reportInstanceId, string reportFileName)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->DownloadReportFile");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->DownloadReportFile");
            }

            // verify the required parameter 'reportFileName' is set
            if (reportFileName == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportFileName' when calling ReportInstanceApi->DownloadReportFile");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "application/vnd.ms-powerpoint",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/msword",
                "application/postscript",
                "text/csv",
                "text/html",
                "application/xml",
                "application/zip",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportFileName", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportFileName)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DownloadReportFileResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            System.IO.Stream>("/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadReportFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream>DownloadReportFileAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await DownloadReportFileWithHttpInfoAsync(tenant, reportInstanceId, reportFileName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the generated file Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- -| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="reportFileName">The report file name that has to be retrieved. report file name. E.g: xyz.pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadReportFileWithHttpInfoAsync(string tenant, string reportInstanceId, string reportFileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->DownloadReportFile");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->DownloadReportFile");
            }

            // verify the required parameter 'reportFileName' is set
            if (reportFileName == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportFileName' when calling ReportInstanceApi->DownloadReportFile");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "application/vnd.ms-powerpoint",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/vnd.ms-excel",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/msword",
                "application/postscript",
                "text/csv",
                "text/html",
                "application/xml",
                "application/zip",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportFileName", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportFileName)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DownloadReportFileResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadReportFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ReportInstanceList</returns>
        public ReportInstanceList GetAllReportInstances(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetAllReportInstancesWithHttpInfo(tenant, reportDefinitionCode, entityCodes, entityKeys, sectionFilter, outputFormat, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ReportInstanceList</returns>
        public ApiResponse<ReportInstanceList> GetAllReportInstancesWithHttpInfo(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->GetAllReportInstances");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (reportDefinitionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "reportDefinitionCode", reportDefinitionCode));
            }
            if (entityCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityCodes", entityCodes));
            }
            if (entityKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityKeys", entityKeys));
            }
            if (sectionFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "sectionFilter", sectionFilter));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "outputFormat", outputFormat));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAllReportInstancesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ReportInstanceList>("/v1/{tenant}/report-instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReportInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceList</returns>
        public async System.Threading.Tasks.Task<ReportInstanceList>GetAllReportInstancesAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAllReportInstancesWithHttpInfoAsync(tenant, reportDefinitionCode, entityCodes, entityKeys, sectionFilter, outputFormat, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of report instances Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportDefinitionCode">Acts as a filter for the retrieval process. Filters the report instances that match the report definition code (optional)</param>
        /// <param name="entityCodes">A series of query parameters used to filter the report instances by entity code. E.g: entityCode&#x3D;DATE&amp;entityCode&#x3D;SYSTEM_LANG (optional)</param>
        /// <param name="entityKeys">A series of query parameters used to filter the report instances by entity keys. E.g: entityKey&#x3D;en-gb (optional)</param>
        /// <param name="sectionFilter">Acts as a filter for the retrieval process. Filters the report instances that match the section filter (optional)</param>
        /// <param name="outputFormat">Acts as a filter for the retrieval process. Filters the report instances that match the output format (optional)</param>
        /// <param name="sort">The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceList)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ReportInstanceList>> GetAllReportInstancesWithHttpInfoAsync(string tenant, string reportDefinitionCode = default(string), string entityCodes = default(string), string entityKeys = default(string), string sectionFilter = default(string), string outputFormat = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->GetAllReportInstances");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (reportDefinitionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "reportDefinitionCode", reportDefinitionCode));
            }
            if (entityCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityCodes", entityCodes));
            }
            if (entityKeys != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "entityKeys", entityKeys));
            }
            if (sectionFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "sectionFilter", sectionFilter));
            }
            if (outputFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "outputFormat", outputFormat));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAllReportInstancesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportInstanceList>("/v1/{tenant}/report-instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReportInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ReportInstanceLogList</returns>
        public ReportInstanceLogList GetReportGenerationLogs(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetReportGenerationLogsWithHttpInfo(tenant, reportInstanceId, errorsOnly, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ReportInstanceLogList</returns>
        public ApiResponse<ReportInstanceLogList> GetReportGenerationLogsWithHttpInfo(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->GetReportGenerationLogs");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->GetReportGenerationLogs");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            if (errorsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "errorsOnly", errorsOnly));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetReportGenerationLogsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ReportInstanceLogList>("/v1/{tenant}/report-instances/{reportInstanceId}/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportGenerationLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceLogList</returns>
        public async System.Threading.Tasks.Task<ReportInstanceLogList>GetReportGenerationLogsAsync(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetReportGenerationLogsWithHttpInfoAsync(tenant, reportInstanceId, errorsOnly, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of logs for the report instance generation Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors &amp; warnings&#39;
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="reportInstanceId">Used to validate that report file name belongs to the report instance passed</param>
        /// <param name="errorsOnly">If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly&#x3D;true (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceLogList)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ReportInstanceLogList>> GetReportGenerationLogsWithHttpInfoAsync(string tenant, string reportInstanceId, string errorsOnly = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->GetReportGenerationLogs");
            }

            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->GetReportGenerationLogs");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            if (errorsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "errorsOnly", errorsOnly));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetReportGenerationLogsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportInstanceLogList>("/v1/{tenant}/report-instances/{reportInstanceId}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportGenerationLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns>ReportInstanceData</returns>
        public ReportInstanceData GetReportInstanceById(string reportInstanceId, string tenant)
        {
            var localVarResponse = GetReportInstanceByIdWithHttpInfo(reportInstanceId, tenant);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <returns>ApiResponse of ReportInstanceData</returns>
        public ApiResponse<ReportInstanceData> GetReportInstanceByIdWithHttpInfo(string reportInstanceId, string tenant)
        {
            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->GetReportInstanceById");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->GetReportInstanceById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetReportInstanceByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ReportInstanceData>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportInstanceById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceData</returns>
        public async System.Threading.Tasks.Task<ReportInstanceData>GetReportInstanceByIdAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetReportInstanceByIdWithHttpInfoAsync(reportInstanceId, tenant, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a report instance based on the ID Gets a report instance object based on the ID passed
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportInstanceId">The ID of the report instance</param>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceData)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ReportInstanceData>> GetReportInstanceByIdWithHttpInfoAsync(string reportInstanceId, string tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reportInstanceId' is set
            if (reportInstanceId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportInstanceId' when calling ReportInstanceApi->GetReportInstanceById");
            }

            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling ReportInstanceApi->GetReportInstanceById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("reportInstanceId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(reportInstanceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetReportInstanceByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportInstanceData>("/v1/{tenant}/report-instances/{reportInstanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReportInstanceById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <returns>ReportInstanceDataResponse</returns>
        public ReportInstanceDataResponse StartReportGeneration(ReportGenerationRequestBody reportGenerationRequestBody)
        {
            var localVarResponse = StartReportGenerationWithHttpInfo(reportGenerationRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <returns>ApiResponse of ReportInstanceDataResponse</returns>
        public ApiResponse<ReportInstanceDataResponse> StartReportGenerationWithHttpInfo(ReportGenerationRequestBody reportGenerationRequestBody)
        {
            // verify the required parameter 'reportGenerationRequestBody' is set
            if (reportGenerationRequestBody == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportGenerationRequestBody' when calling ReportInstanceApi->StartReportGeneration");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reportGenerationRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = StartReportGenerationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            ReportInstanceDataResponse>("/v1/report-instances/generate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartReportGeneration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportInstanceDataResponse</returns>
        public async System.Threading.Tasks.Task<ReportInstanceDataResponse>StartReportGenerationAsync(ReportGenerationRequestBody reportGenerationRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await StartReportGenerationWithHttpInfoAsync(reportGenerationRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a report Generates a report using the specified ID and the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportGenerationRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportInstanceDataResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ReportInstanceDataResponse>> StartReportGenerationWithHttpInfoAsync(ReportGenerationRequestBody reportGenerationRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'reportGenerationRequestBody' is set
            if (reportGenerationRequestBody == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'reportGenerationRequestBody' when calling ReportInstanceApi->StartReportGeneration");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reportGenerationRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = StartReportGenerationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReportInstanceDataResponse>("/v1/report-instances/generate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartReportGeneration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
