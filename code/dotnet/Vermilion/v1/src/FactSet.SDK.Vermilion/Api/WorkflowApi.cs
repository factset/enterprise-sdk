/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Vermilion.Client;
using FactSet.SDK.Vermilion.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Vermilion.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates schedule for the specified schedule definition
        /// </summary>
        /// <remarks>
        /// Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <returns>GenerateScheduleResponse</returns>
        GenerateScheduleResponse GenerateSchedule(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?));

        /// <summary>
        /// Creates schedule for the specified schedule definition
        /// </summary>
        /// <remarks>
        /// Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <returns>ApiResponse of GenerateScheduleResponse</returns>
        ApiResponse<GenerateScheduleResponse> GenerateScheduleWithHttpInfo(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?));
        /// <summary>
        /// Retrieves a list of all schedule definitions
        /// </summary>
        /// <remarks>
        /// Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ScheduleDefinitionsList</returns>
        ScheduleDefinitionsList GetScheduleDefinitions(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Retrieves a list of all schedule definitions
        /// </summary>
        /// <remarks>
        /// Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ScheduleDefinitionsList</returns>
        ApiResponse<ScheduleDefinitionsList> GetScheduleDefinitionsWithHttpInfo(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Gets the generation logs for a specific schedule
        /// </summary>
        /// <remarks>
        /// Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ScheduleGenerationLogList</returns>
        ScheduleGenerationLogList GetScheduleGenerationLogs(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Gets the generation logs for a specific schedule
        /// </summary>
        /// <remarks>
        /// Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ScheduleGenerationLogList</returns>
        ApiResponse<ScheduleGenerationLogList> GetScheduleGenerationLogsWithHttpInfo(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Retrieves a list of all schedules
        /// </summary>
        /// <remarks>
        /// Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>SchedulesList</returns>
        SchedulesList GetSchedules(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Retrieves a list of all schedules
        /// </summary>
        /// <remarks>
        /// Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of SchedulesList</returns>
        ApiResponse<SchedulesList> GetSchedulesWithHttpInfo(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Update schedule status for specified schedule
        /// </summary>
        /// <remarks>
        /// Updated the schedule status for the specified schedule id based on the given status
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <returns>ScheduleStatusUpdateResponse</returns>
        ScheduleStatusUpdateResponse UpdateScheduleStatus(string tenant, string scheduleId, string status);

        /// <summary>
        /// Update schedule status for specified schedule
        /// </summary>
        /// <remarks>
        /// Updated the schedule status for the specified schedule id based on the given status
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <returns>ApiResponse of ScheduleStatusUpdateResponse</returns>
        ApiResponse<ScheduleStatusUpdateResponse> UpdateScheduleStatusWithHttpInfo(string tenant, string scheduleId, string status);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates schedule for the specified schedule definition
        /// </summary>
        /// <remarks>
        /// Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateScheduleResponse</returns>
        System.Threading.Tasks.Task<GenerateScheduleResponse> GenerateScheduleAsync(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates schedule for the specified schedule definition
        /// </summary>
        /// <remarks>
        /// Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateScheduleResponse>> GenerateScheduleWithHttpInfoAsync(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of all schedule definitions
        /// </summary>
        /// <remarks>
        /// Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinitionsList</returns>
        System.Threading.Tasks.Task<ScheduleDefinitionsList> GetScheduleDefinitionsAsync(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of all schedule definitions
        /// </summary>
        /// <remarks>
        /// Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinitionsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleDefinitionsList>> GetScheduleDefinitionsWithHttpInfoAsync(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the generation logs for a specific schedule
        /// </summary>
        /// <remarks>
        /// Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleGenerationLogList</returns>
        System.Threading.Tasks.Task<ScheduleGenerationLogList> GetScheduleGenerationLogsAsync(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the generation logs for a specific schedule
        /// </summary>
        /// <remarks>
        /// Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleGenerationLogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleGenerationLogList>> GetScheduleGenerationLogsWithHttpInfoAsync(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of all schedules
        /// </summary>
        /// <remarks>
        /// Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulesList</returns>
        System.Threading.Tasks.Task<SchedulesList> GetSchedulesAsync(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of all schedules
        /// </summary>
        /// <remarks>
        /// Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulesList>> GetSchedulesWithHttpInfoAsync(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update schedule status for specified schedule
        /// </summary>
        /// <remarks>
        /// Updated the schedule status for the specified schedule id based on the given status
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleStatusUpdateResponse</returns>
        System.Threading.Tasks.Task<ScheduleStatusUpdateResponse> UpdateScheduleStatusAsync(string tenant, string scheduleId, string status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update schedule status for specified schedule
        /// </summary>
        /// <remarks>
        /// Updated the schedule status for the specified schedule id based on the given status
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleStatusUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleStatusUpdateResponse>> UpdateScheduleStatusWithHttpInfoAsync(string tenant, string scheduleId, string status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowApi : IWorkflowApiSync, IWorkflowApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowApi : IWorkflowApi
    {
        private FactSet.SDK.Vermilion.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GenerateScheduleResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(GenerateScheduleResponse) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)404, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetScheduleDefinitionsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScheduleDefinitionsList) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetScheduleGenerationLogsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScheduleGenerationLogList) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSchedulesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SchedulesList) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UpdateScheduleStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScheduleStatusUpdateResponse) },
            { (HttpStatusCode)400, typeof(ErrorList) },
            { (HttpStatusCode)401, typeof(ErrorList) },
            { (HttpStatusCode)403, typeof(ErrorList) },
            { (HttpStatusCode)404, typeof(ErrorList) },
            { (HttpStatusCode)406, typeof(ErrorList) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Vermilion.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowApi(FactSet.SDK.Vermilion.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkflowApi(FactSet.SDK.Vermilion.Client.ISynchronousClient client, FactSet.SDK.Vermilion.Client.IAsynchronousClient asyncClient, FactSet.SDK.Vermilion.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Vermilion.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates schedule for the specified schedule definition Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <returns>GenerateScheduleResponse</returns>
        public GenerateScheduleResponse GenerateSchedule(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?))
        {
            var localVarResponse = GenerateScheduleWithHttpInfo(tenant, scheduleDefinitionCode, setToRunning);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates schedule for the specified schedule definition Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <returns>ApiResponse of GenerateScheduleResponse</returns>
        public ApiResponse<GenerateScheduleResponse> GenerateScheduleWithHttpInfo(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GenerateSchedule");
            }

            // verify the required parameter 'scheduleDefinitionCode' is set
            if (scheduleDefinitionCode == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scheduleDefinitionCode' when calling WorkflowApi->GenerateSchedule");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("scheduleDefinitionCode", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(scheduleDefinitionCode)); // path parameter
            if (setToRunning != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "setToRunning", setToRunning));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GenerateScheduleResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            GenerateScheduleResponse>("/v1/{tenant}/schedules/{scheduleDefinitionCode}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Creates schedule for the specified schedule definition Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateScheduleResponse</returns>
        public async System.Threading.Tasks.Task<GenerateScheduleResponse>GenerateScheduleAsync(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GenerateScheduleWithHttpInfoAsync(tenant, scheduleDefinitionCode, setToRunning, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates schedule for the specified schedule definition Creates schedule for the specified Schedule Definition code and sets to running based on the param in the JSON in the request body
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleDefinitionCode">The schedule definition code for which to generate the schedule</param>
        /// <param name="setToRunning">This parameter is used to set the generated schedule&#39;s status to Running.If parameter is set to true, the generated schedule will be set to Running. If no value is provided, the schedule will remain in Initialised status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateScheduleResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GenerateScheduleResponse>> GenerateScheduleWithHttpInfoAsync(string tenant, string scheduleDefinitionCode, bool? setToRunning = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GenerateSchedule");
            }

            // verify the required parameter 'scheduleDefinitionCode' is set
            if (scheduleDefinitionCode == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scheduleDefinitionCode' when calling WorkflowApi->GenerateSchedule");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("scheduleDefinitionCode", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(scheduleDefinitionCode)); // path parameter
            if (setToRunning != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "setToRunning", setToRunning));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GenerateScheduleResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateScheduleResponse>("/v1/{tenant}/schedules/{scheduleDefinitionCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of all schedule definitions Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ScheduleDefinitionsList</returns>
        public ScheduleDefinitionsList GetScheduleDefinitions(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetScheduleDefinitionsWithHttpInfo(tenant, scheduleType, reportDate, lastUpdatedBy, startDate, endDate, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all schedule definitions Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ScheduleDefinitionsList</returns>
        public ApiResponse<ScheduleDefinitionsList> GetScheduleDefinitionsWithHttpInfo(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GetScheduleDefinitions");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (scheduleType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "scheduleType", scheduleType));
            }
            if (reportDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "reportDate", reportDate));
            }
            if (lastUpdatedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "lastUpdatedBy", lastUpdatedBy));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetScheduleDefinitionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ScheduleDefinitionsList>("/v1/{tenant}/schedule-definitions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleDefinitions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of all schedule definitions Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinitionsList</returns>
        public async System.Threading.Tasks.Task<ScheduleDefinitionsList>GetScheduleDefinitionsAsync(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetScheduleDefinitionsWithHttpInfoAsync(tenant, scheduleType, reportDate, lastUpdatedBy, startDate, endDate, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all schedule definitions Retrieves all schedule definitions the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleType">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule type. Accepts multiple values separated by a comma, e.g. ?scheduleType&#x3D;REPEATING,TEMPLATE (optional)</param>
        /// <param name="reportDate">Acts as a filter for the retrieval process. Filters the schedule definitions that match the given schedule report date.  Accepts multiple values separated by a comma, e.g. ?reportDate&#x3D;LAST_DAY_OF_PREV_MONTH,CREATION_DATE (optional)</param>
        /// <param name="lastUpdatedBy">Acts as a filter for the retrieval process. Filters the schedule definitions where the provided parameter value matches or is a substring of the last updated by value of the schedule definitions (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedule definitions based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinitionsList)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScheduleDefinitionsList>> GetScheduleDefinitionsWithHttpInfoAsync(string tenant, string scheduleType = default(string), string reportDate = default(string), string lastUpdatedBy = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GetScheduleDefinitions");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (scheduleType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "scheduleType", scheduleType));
            }
            if (reportDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "reportDate", reportDate));
            }
            if (lastUpdatedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "lastUpdatedBy", lastUpdatedBy));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetScheduleDefinitionsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduleDefinitionsList>("/v1/{tenant}/schedule-definitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleDefinitions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the generation logs for a specific schedule Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ScheduleGenerationLogList</returns>
        public ScheduleGenerationLogList GetScheduleGenerationLogs(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetScheduleGenerationLogsWithHttpInfo(tenant, scheduleId, type, message, logSet, startDate, endDate, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the generation logs for a specific schedule Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ScheduleGenerationLogList</returns>
        public ApiResponse<ScheduleGenerationLogList> GetScheduleGenerationLogsWithHttpInfo(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GetScheduleGenerationLogs");
            }

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling WorkflowApi->GetScheduleGenerationLogs");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("scheduleId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (message != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "message", message));
            }
            if (logSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "logSet", logSet));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetScheduleGenerationLogsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ScheduleGenerationLogList>("/v1/{tenant}/schedules/{scheduleId}/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleGenerationLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Gets the generation logs for a specific schedule Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleGenerationLogList</returns>
        public async System.Threading.Tasks.Task<ScheduleGenerationLogList>GetScheduleGenerationLogsAsync(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetScheduleGenerationLogsWithHttpInfoAsync(tenant, scheduleId, type, message, logSet, startDate, endDate, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the generation logs for a specific schedule Gets the generation logs for a specific schedule based on the Schedule ID. Allows the user to sort and filter logs.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The scheduleId for which the logs are requested</param>
        /// <param name="type">Acts as a filter for the retrieval process. Filters the log instances that match the input type (optional)</param>
        /// <param name="message">Acts as a filter for the retrieval process. Filters the log instances that match the input message (optional)</param>
        /// <param name="logSet">Acts as a filter for the retrieval process. Filters the log instances that match the input logset (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the log instances based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add - to sort (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleGenerationLogList)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScheduleGenerationLogList>> GetScheduleGenerationLogsWithHttpInfoAsync(string tenant, string scheduleId, string type = default(string), string message = default(string), string logSet = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GetScheduleGenerationLogs");
            }

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling WorkflowApi->GetScheduleGenerationLogs");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("scheduleId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (message != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "message", message));
            }
            if (logSet != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "logSet", logSet));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetScheduleGenerationLogsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduleGenerationLogList>("/v1/{tenant}/schedules/{scheduleId}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleGenerationLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of all schedules Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>SchedulesList</returns>
        public SchedulesList GetSchedules(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetSchedulesWithHttpInfo(tenant, status, startDate, endDate, sort, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all schedules Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of SchedulesList</returns>
        public ApiResponse<SchedulesList> GetSchedulesWithHttpInfo(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GetSchedules");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSchedulesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SchedulesList>("/v1/{tenant}/schedules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of all schedules Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SchedulesList</returns>
        public async System.Threading.Tasks.Task<SchedulesList>GetSchedulesAsync(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSchedulesWithHttpInfoAsync(tenant, status, startDate, endDate, sort, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all schedules Retrieves all schedules the user has permissions for. User has sort and filter parameters available to use.
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="status">Acts as a filter for the retrieval process. Filters the schedules that match the given status. Accepts multiple values separated by a comma, e.g. ?status&#x3D;INITIALISED,RUNNING (optional)</param>
        /// <param name="startDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="endDate">Acts as a filter for the retrieval process. Filters the schedules based on their last updated date, the input date must be of the date format (d MMMMM yyyy 00:00:00). (optional)</param>
        /// <param name="sort">The column to sort on. Can add &#39;-&#39; to the start of the parameter value to sort in descending order. (optional)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return (optional, default to 25)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SchedulesList)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SchedulesList>> GetSchedulesWithHttpInfoAsync(string tenant, string status = default(string), string startDate = default(string), string endDate = default(string), List<string> sort = default(List<string>), int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->GetSchedules");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSchedulesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SchedulesList>("/v1/{tenant}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update schedule status for specified schedule Updated the schedule status for the specified schedule id based on the given status
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <returns>ScheduleStatusUpdateResponse</returns>
        public ScheduleStatusUpdateResponse UpdateScheduleStatus(string tenant, string scheduleId, string status)
        {
            var localVarResponse = UpdateScheduleStatusWithHttpInfo(tenant, scheduleId, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update schedule status for specified schedule Updated the schedule status for the specified schedule id based on the given status
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <returns>ApiResponse of ScheduleStatusUpdateResponse</returns>
        public ApiResponse<ScheduleStatusUpdateResponse> UpdateScheduleStatusWithHttpInfo(string tenant, string scheduleId, string status)
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->UpdateScheduleStatus");
            }

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling WorkflowApi->UpdateScheduleStatus");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'status' when calling WorkflowApi->UpdateScheduleStatus");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("scheduleId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(status)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UpdateScheduleStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            ScheduleStatusUpdateResponse>("/v1/{tenant}/schedules/{scheduleId}/{status}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateScheduleStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Update schedule status for specified schedule Updated the schedule status for the specified schedule id based on the given status
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleStatusUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ScheduleStatusUpdateResponse>UpdateScheduleStatusAsync(string tenant, string scheduleId, string status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UpdateScheduleStatusWithHttpInfoAsync(tenant, scheduleId, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update schedule status for specified schedule Updated the schedule status for the specified schedule id based on the given status
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenant">The code of the tenancy</param>
        /// <param name="scheduleId">The schedule id for which to update the status</param>
        /// <param name="status">The schedule status that needs to be updated only if the transition is valid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleStatusUpdateResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScheduleStatusUpdateResponse>> UpdateScheduleStatusWithHttpInfoAsync(string tenant, string scheduleId, string status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenant' is set
            if (tenant == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'tenant' when calling WorkflowApi->UpdateScheduleStatus");
            }

            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling WorkflowApi->UpdateScheduleStatus");
            }

            // verify the required parameter 'status' is set
            if (status == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'status' when calling WorkflowApi->UpdateScheduleStatus");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(tenant)); // path parameter
            localVarRequestOptions.PathParameters.Add("scheduleId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("status", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(status)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UpdateScheduleStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScheduleStatusUpdateResponse>("/v1/{tenant}/schedules/{scheduleId}/{status}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateScheduleStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
