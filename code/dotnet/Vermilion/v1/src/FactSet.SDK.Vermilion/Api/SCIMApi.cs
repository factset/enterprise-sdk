/*
 * VRS API documentation
 *
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Vermilion.Client;
using FactSet.SDK.Vermilion.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Vermilion.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISCIMApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a role
        /// </summary>
        /// <remarks>
        /// Creates a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        ScimGroup CreateGroup(ScimGroup scimGroup);

        /// <summary>
        /// Creates a role
        /// </summary>
        /// <remarks>
        /// Creates a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> CreateGroupWithHttpInfo(ScimGroup scimGroup);
        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Creates a VRS user
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <returns>CreatedScimUserJSONResponse</returns>
        CreatedScimUserJSONResponse CreateUser(CreateScimUserJSONRequest createScimUserJSONRequest);

        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Creates a VRS user
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <returns>ApiResponse of CreatedScimUserJSONResponse</returns>
        ApiResponse<CreatedScimUserJSONResponse> CreateUserWithHttpInfo(CreateScimUserJSONRequest createScimUserJSONRequest);
        /// <summary>
        /// Deletes a VRS role
        /// </summary>
        /// <remarks>
        /// Deletes a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <returns>void</returns>
        void DeleteGroupById(string groupId);

        /// <summary>
        /// Deletes a VRS role
        /// </summary>
        /// <remarks>
        /// Deletes a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupByIdWithHttpInfo(string groupId);
        /// <summary>
        /// Deletes a VRS user
        /// </summary>
        /// <remarks>
        /// Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>void</returns>
        void DeleteUserById(string userId);

        /// <summary>
        /// Deletes a VRS user
        /// </summary>
        /// <remarks>
        /// Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserByIdWithHttpInfo(string userId);
        /// <summary>
        /// Retrieves a list of VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves VRS roles
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <returns>ScimGroupListResponse</returns>
        ScimGroupListResponse GetAllGroups(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>));

        /// <summary>
        /// Retrieves a list of VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves VRS roles
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <returns>ApiResponse of ScimGroupListResponse</returns>
        ApiResponse<ScimGroupListResponse> GetAllGroupsWithHttpInfo(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>));
        /// <summary>
        /// Retrieves a list of VRS users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of VRS users
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <returns>ScimUserListResponse</returns>
        ScimUserListResponse GetAllUsers(int? count = default(int?), int? startIndex = default(int?));

        /// <summary>
        /// Retrieves a list of VRS users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of VRS users
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <returns>ApiResponse of ScimUserListResponse</returns>
        ApiResponse<ScimUserListResponse> GetAllUsersWithHttpInfo(int? count = default(int?), int? startIndex = default(int?));
        /// <summary>
        /// Retrieves a VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS role based on the ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <returns>ScimGroup</returns>
        ScimGroup GetGroupById(string groupId);

        /// <summary>
        /// Retrieves a VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS role based on the ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> GetGroupByIdWithHttpInfo(string groupId);
        /// <summary>
        /// Retrieves a VRS User
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS user based on their ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>ScimUser</returns>
        ScimUser GetUserById(string userId);

        /// <summary>
        /// Retrieves a VRS User
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS user based on their ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>ApiResponse of ScimUser</returns>
        ApiResponse<ScimUser> GetUserByIdWithHttpInfo(string userId);
        /// <summary>
        /// Add or remove a user to/from a group
        /// </summary>
        /// <remarks>
        /// Adds or removes a VRS user to/from a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <returns>ScimGroup</returns>
        ScimGroup PatchGroupById(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody);

        /// <summary>
        /// Add or remove a user to/from a group
        /// </summary>
        /// <remarks>
        /// Adds or removes a VRS user to/from a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> PatchGroupByIdWithHttpInfo(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody);
        /// <summary>
        /// Add or remove VRS user attributes
        /// </summary>
        /// <remarks>
        /// Adds or removes VRS user attributes based on the JSON properties
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <returns>ScimUser</returns>
        ScimUser PatchUserById(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody);

        /// <summary>
        /// Add or remove VRS user attributes
        /// </summary>
        /// <remarks>
        /// Adds or removes VRS user attributes based on the JSON properties
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <returns>ApiResponse of ScimUser</returns>
        ApiResponse<ScimUser> PatchUserByIdWithHttpInfo(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody);
        /// <summary>
        /// Updates a VRS Group
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS Group with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        ScimGroup UpdateGroupById(string groupId, ScimGroup scimGroup);

        /// <summary>
        /// Updates a VRS Group
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS Group with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> UpdateGroupByIdWithHttpInfo(string groupId, ScimGroup scimGroup);
        /// <summary>
        /// Updates a VRS user
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS user with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <returns>ScimUser</returns>
        ScimUser UpdateUserById(string userId, ScimUser scimUser);

        /// <summary>
        /// Updates a VRS user
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS user with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <returns>ApiResponse of ScimUser</returns>
        ApiResponse<ScimUser> UpdateUserByIdWithHttpInfo(string userId, ScimUser scimUser);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISCIMApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a role
        /// </summary>
        /// <remarks>
        /// Creates a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> CreateGroupAsync(ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a role
        /// </summary>
        /// <remarks>
        /// Creates a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> CreateGroupWithHttpInfoAsync(ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Creates a VRS user
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedScimUserJSONResponse</returns>
        System.Threading.Tasks.Task<CreatedScimUserJSONResponse> CreateUserAsync(CreateScimUserJSONRequest createScimUserJSONRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a user
        /// </summary>
        /// <remarks>
        /// Creates a VRS user
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedScimUserJSONResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedScimUserJSONResponse>> CreateUserWithHttpInfoAsync(CreateScimUserJSONRequest createScimUserJSONRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a VRS role
        /// </summary>
        /// <remarks>
        /// Deletes a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupByIdAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a VRS role
        /// </summary>
        /// <remarks>
        /// Deletes a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupByIdWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a VRS user
        /// </summary>
        /// <remarks>
        /// Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserByIdAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a VRS user
        /// </summary>
        /// <remarks>
        /// Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves VRS roles
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroupListResponse</returns>
        System.Threading.Tasks.Task<ScimGroupListResponse> GetAllGroupsAsync(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves VRS roles
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroupListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroupListResponse>> GetAllGroupsWithHttpInfoAsync(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of VRS users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of VRS users
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUserListResponse</returns>
        System.Threading.Tasks.Task<ScimUserListResponse> GetAllUsersAsync(int? count = default(int?), int? startIndex = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of VRS users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of VRS users
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUserListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUserListResponse>> GetAllUsersWithHttpInfoAsync(int? count = default(int?), int? startIndex = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS role based on the ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> GetGroupByIdAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a VRS role
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS role based on the ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GetGroupByIdWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a VRS User
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS user based on their ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUser</returns>
        System.Threading.Tasks.Task<ScimUser> GetUserByIdAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a VRS User
        /// </summary>
        /// <remarks>
        /// Retrieves a VRS user based on their ID
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUser>> GetUserByIdWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or remove a user to/from a group
        /// </summary>
        /// <remarks>
        /// Adds or removes a VRS user to/from a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> PatchGroupByIdAsync(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or remove a user to/from a group
        /// </summary>
        /// <remarks>
        /// Adds or removes a VRS user to/from a VRS role
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> PatchGroupByIdWithHttpInfoAsync(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add or remove VRS user attributes
        /// </summary>
        /// <remarks>
        /// Adds or removes VRS user attributes based on the JSON properties
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUser</returns>
        System.Threading.Tasks.Task<ScimUser> PatchUserByIdAsync(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add or remove VRS user attributes
        /// </summary>
        /// <remarks>
        /// Adds or removes VRS user attributes based on the JSON properties
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUser>> PatchUserByIdWithHttpInfoAsync(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a VRS Group
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS Group with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> UpdateGroupByIdAsync(string groupId, ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a VRS Group
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS Group with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> UpdateGroupByIdWithHttpInfoAsync(string groupId, ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a VRS user
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS user with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUser</returns>
        System.Threading.Tasks.Task<ScimUser> UpdateUserByIdAsync(string userId, ScimUser scimUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a VRS user
        /// </summary>
        /// <remarks>
        /// Updates (replaces) a VRS user with the properties in the JSON
        /// </remarks>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimUser>> UpdateUserByIdWithHttpInfoAsync(string userId, ScimUser scimUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISCIMApi : ISCIMApiSync, ISCIMApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SCIMApi : ISCIMApi
    {
        private FactSet.SDK.Vermilion.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateGroupResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(ScimGroup) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)409, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> CreateUserResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CreatedScimUserJSONResponse) },
            { (HttpStatusCode)400, typeof(ScimError) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)409, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteGroupByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteUserByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetAllGroupsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimGroupListResponse) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetAllUsersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimUserListResponse) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetGroupByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimGroup) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)404, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetUserByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimUser) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)404, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PatchGroupByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimGroup) },
            { (HttpStatusCode)400, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PatchUserByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimUser) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)404, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UpdateGroupByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimGroup) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)404, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UpdateUserByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ScimUser) },
            { (HttpStatusCode)403, typeof(ScimError) },
            { (HttpStatusCode)404, typeof(ScimError) },
            { (HttpStatusCode)500, typeof(ScimError) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SCIMApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SCIMApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SCIMApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SCIMApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Vermilion.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SCIMApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SCIMApi(FactSet.SDK.Vermilion.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Vermilion.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Vermilion.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Vermilion.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SCIMApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SCIMApi(FactSet.SDK.Vermilion.Client.ISynchronousClient client, FactSet.SDK.Vermilion.Client.IAsynchronousClient asyncClient, FactSet.SDK.Vermilion.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Vermilion.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Vermilion.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Vermilion.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a role Creates a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        public ScimGroup CreateGroup(ScimGroup scimGroup)
        {
            var localVarResponse = CreateGroupWithHttpInfo(scimGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a role Creates a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> CreateGroupWithHttpInfo(ScimGroup scimGroup)
        {
            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimGroup' when calling SCIMApi->CreateGroup");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = scimGroup;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateGroupResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            ScimGroup>("/scim/v2/Groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Creates a role Creates a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup>CreateGroupAsync(ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateGroupWithHttpInfoAsync(scimGroup, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a role Creates a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> CreateGroupWithHttpInfoAsync(ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimGroup' when calling SCIMApi->CreateGroup");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = scimGroup;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateGroupResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScimGroup>("/scim/v2/Groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a user Creates a VRS user
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <returns>CreatedScimUserJSONResponse</returns>
        public CreatedScimUserJSONResponse CreateUser(CreateScimUserJSONRequest createScimUserJSONRequest)
        {
            var localVarResponse = CreateUserWithHttpInfo(createScimUserJSONRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a user Creates a VRS user
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <returns>ApiResponse of CreatedScimUserJSONResponse</returns>
        public ApiResponse<CreatedScimUserJSONResponse> CreateUserWithHttpInfo(CreateScimUserJSONRequest createScimUserJSONRequest)
        {
            // verify the required parameter 'createScimUserJSONRequest' is set
            if (createScimUserJSONRequest == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'createScimUserJSONRequest' when calling SCIMApi->CreateUser");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createScimUserJSONRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateUserResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CreatedScimUserJSONResponse>("/scim/v2/Users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Creates a user Creates a VRS user
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatedScimUserJSONResponse</returns>
        public async System.Threading.Tasks.Task<CreatedScimUserJSONResponse>CreateUserAsync(CreateScimUserJSONRequest createScimUserJSONRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateUserWithHttpInfoAsync(createScimUserJSONRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a user Creates a VRS user
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScimUserJSONRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatedScimUserJSONResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CreatedScimUserJSONResponse>> CreateUserWithHttpInfoAsync(CreateScimUserJSONRequest createScimUserJSONRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createScimUserJSONRequest' is set
            if (createScimUserJSONRequest == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'createScimUserJSONRequest' when calling SCIMApi->CreateUser");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createScimUserJSONRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateUserResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatedScimUserJSONResponse>("/scim/v2/Users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a VRS role Deletes a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <returns>void</returns>
        public void DeleteGroupById(string groupId)
        {
            DeleteGroupByIdWithHttpInfo(groupId);
        }

        /// <summary>
        /// Deletes a VRS role Deletes a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGroupByIdWithHttpInfo(string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->DeleteGroupById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a VRS role Deletes a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupByIdAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteGroupByIdWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a VRS role Deletes a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupByIdWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->DeleteGroupById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a VRS user Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>void</returns>
        public void DeleteUserById(string userId)
        {
            DeleteUserByIdWithHttpInfo(userId);
        }

        /// <summary>
        /// Deletes a VRS user Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserByIdWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->DeleteUserById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Deletes a VRS user Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserByIdAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserByIdWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a VRS user Deletes a VRS user (this marks them as &#39;Deleted&#39; in the database)
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->DeleteUserById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of VRS role Retrieves VRS roles
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <returns>ScimGroupListResponse</returns>
        public ScimGroupListResponse GetAllGroups(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>))
        {
            var localVarResponse = GetAllGroupsWithHttpInfo(count, startIndex, filter, sortBy, sortOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of VRS role Retrieves VRS roles
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <returns>ApiResponse of ScimGroupListResponse</returns>
        public ApiResponse<ScimGroupListResponse> GetAllGroupsWithHttpInfo(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>))
        {
            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "sortOrder", sortOrder));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAllGroupsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ScimGroupListResponse>("/scim/v2/Groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of VRS role Retrieves VRS roles
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroupListResponse</returns>
        public async System.Threading.Tasks.Task<ScimGroupListResponse>GetAllGroupsAsync(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAllGroupsWithHttpInfoAsync(count, startIndex, filter, sortBy, sortOrder, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of VRS role Retrieves VRS roles
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="filter">Acts as a filter for the retrieval process. if filter&#x3D;tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter&#x3D;tenant eq MASTER,DEMO (optional)</param>
        /// <param name="sortBy">The column to sort on. If parameter is not given, no sorting will be done (optional)</param>
        /// <param name="sortOrder">The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroupListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimGroupListResponse>> GetAllGroupsWithHttpInfoAsync(int? count = default(int?), int? startIndex = default(int?), string filter = default(string), List<string> sortBy = default(List<string>), List<string> sortOrder = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("csv", "sortOrder", sortOrder));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAllGroupsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimGroupListResponse>("/scim/v2/Groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of VRS users Retrieves a list of VRS users
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <returns>ScimUserListResponse</returns>
        public ScimUserListResponse GetAllUsers(int? count = default(int?), int? startIndex = default(int?))
        {
            var localVarResponse = GetAllUsersWithHttpInfo(count, startIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of VRS users Retrieves a list of VRS users
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <returns>ApiResponse of ScimUserListResponse</returns>
        public ApiResponse<ScimUserListResponse> GetAllUsersWithHttpInfo(int? count = default(int?), int? startIndex = default(int?))
        {
            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAllUsersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ScimUserListResponse>("/scim/v2/Users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of VRS users Retrieves a list of VRS users
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUserListResponse</returns>
        public async System.Threading.Tasks.Task<ScimUserListResponse>GetAllUsersAsync(int? count = default(int?), int? startIndex = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAllUsersWithHttpInfoAsync(count, startIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of VRS users Retrieves a list of VRS users
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">Non-negative maximum number of entries to return (optional)</param>
        /// <param name="startIndex">The 1-based index of the first query result (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUserListResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimUserListResponse>> GetAllUsersWithHttpInfoAsync(int? count = default(int?), int? startIndex = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (startIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToMultiMap("", "startIndex", startIndex));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAllUsersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimUserListResponse>("/scim/v2/Users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a VRS role Retrieves a VRS role based on the ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <returns>ScimGroup</returns>
        public ScimGroup GetGroupById(string groupId)
        {
            var localVarResponse = GetGroupByIdWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a VRS role Retrieves a VRS role based on the ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> GetGroupByIdWithHttpInfo(string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->GetGroupById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ScimGroup>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a VRS role Retrieves a VRS role based on the ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup>GetGroupByIdAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetGroupByIdWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a VRS role Retrieves a VRS role based on the ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GetGroupByIdWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->GetGroupById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimGroup>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a VRS User Retrieves a VRS user based on their ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>ScimUser</returns>
        public ScimUser GetUserById(string userId)
        {
            var localVarResponse = GetUserByIdWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a VRS User Retrieves a VRS user based on their ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <returns>ApiResponse of ScimUser</returns>
        public ApiResponse<ScimUser> GetUserByIdWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->GetUserById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ScimUser>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a VRS User Retrieves a VRS user based on their ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUser</returns>
        public async System.Threading.Tasks.Task<ScimUser>GetUserByIdAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetUserByIdWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a VRS User Retrieves a VRS user based on their ID
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimUser>> GetUserByIdWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->GetUserById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScimUser>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or remove a user to/from a group Adds or removes a VRS user to/from a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <returns>ScimGroup</returns>
        public ScimGroup PatchGroupById(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody)
        {
            var localVarResponse = PatchGroupByIdWithHttpInfo(groupId, scimGroupPatchRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or remove a user to/from a group Adds or removes a VRS user to/from a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> PatchGroupByIdWithHttpInfo(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->PatchGroupById");
            }

            // verify the required parameter 'scimGroupPatchRequestBody' is set
            if (scimGroupPatchRequestBody == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimGroupPatchRequestBody' when calling SCIMApi->PatchGroupById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = scimGroupPatchRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PatchGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            ScimGroup>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Add or remove a user to/from a group Adds or removes a VRS user to/from a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup>PatchGroupByIdAsync(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PatchGroupByIdWithHttpInfoAsync(groupId, scimGroupPatchRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or remove a user to/from a group Adds or removes a VRS user to/from a VRS role
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the role</param>
        /// <param name="scimGroupPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> PatchGroupByIdWithHttpInfoAsync(string groupId, ScimGroupPatchRequestBody scimGroupPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->PatchGroupById");
            }

            // verify the required parameter 'scimGroupPatchRequestBody' is set
            if (scimGroupPatchRequestBody == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimGroupPatchRequestBody' when calling SCIMApi->PatchGroupById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = scimGroupPatchRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PatchGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScimGroup>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add or remove VRS user attributes Adds or removes VRS user attributes based on the JSON properties
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <returns>ScimUser</returns>
        public ScimUser PatchUserById(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody)
        {
            var localVarResponse = PatchUserByIdWithHttpInfo(userId, scimUserPatchRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or remove VRS user attributes Adds or removes VRS user attributes based on the JSON properties
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <returns>ApiResponse of ScimUser</returns>
        public ApiResponse<ScimUser> PatchUserByIdWithHttpInfo(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->PatchUserById");
            }

            // verify the required parameter 'scimUserPatchRequestBody' is set
            if (scimUserPatchRequestBody == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimUserPatchRequestBody' when calling SCIMApi->PatchUserById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = scimUserPatchRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PatchUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            ScimUser>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Add or remove VRS user attributes Adds or removes VRS user attributes based on the JSON properties
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUser</returns>
        public async System.Threading.Tasks.Task<ScimUser>PatchUserByIdAsync(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PatchUserByIdWithHttpInfoAsync(userId, scimUserPatchRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add or remove VRS user attributes Adds or removes VRS user attributes based on the JSON properties
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUserPatchRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimUser>> PatchUserByIdWithHttpInfoAsync(string userId, ScimUserPatchRequestBody scimUserPatchRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->PatchUserById");
            }

            // verify the required parameter 'scimUserPatchRequestBody' is set
            if (scimUserPatchRequestBody == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimUserPatchRequestBody' when calling SCIMApi->PatchUserById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = scimUserPatchRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PatchUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ScimUser>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a VRS Group Updates (replaces) a VRS Group with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        public ScimGroup UpdateGroupById(string groupId, ScimGroup scimGroup)
        {
            var localVarResponse = UpdateGroupByIdWithHttpInfo(groupId, scimGroup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a VRS Group Updates (replaces) a VRS Group with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> UpdateGroupByIdWithHttpInfo(string groupId, ScimGroup scimGroup)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->UpdateGroupById");
            }

            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimGroup' when calling SCIMApi->UpdateGroupById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = scimGroup;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UpdateGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            ScimGroup>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Updates a VRS Group Updates (replaces) a VRS Group with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup>UpdateGroupByIdAsync(string groupId, ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UpdateGroupByIdWithHttpInfoAsync(groupId, scimGroup, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a VRS Group Updates (replaces) a VRS Group with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The ID of the group</param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> UpdateGroupByIdWithHttpInfoAsync(string groupId, ScimGroup scimGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'groupId' when calling SCIMApi->UpdateGroupById");
            }

            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimGroup' when calling SCIMApi->UpdateGroupById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("groupId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = scimGroup;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UpdateGroupByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ScimGroup>("/scim/v2/Groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a VRS user Updates (replaces) a VRS user with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <returns>ScimUser</returns>
        public ScimUser UpdateUserById(string userId, ScimUser scimUser)
        {
            var localVarResponse = UpdateUserByIdWithHttpInfo(userId, scimUser);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a VRS user Updates (replaces) a VRS user with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <returns>ApiResponse of ScimUser</returns>
        public ApiResponse<ScimUser> UpdateUserByIdWithHttpInfo(string userId, ScimUser scimUser)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->UpdateUserById");
            }

            // verify the required parameter 'scimUser' is set
            if (scimUser == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimUser' when calling SCIMApi->UpdateUserById");
            }

            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = scimUser;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UpdateUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            ScimUser>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Updates a VRS user Updates (replaces) a VRS user with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScimUser</returns>
        public async System.Threading.Tasks.Task<ScimUser>UpdateUserByIdAsync(string userId, ScimUser scimUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await UpdateUserByIdWithHttpInfoAsync(userId, scimUser, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a VRS user Updates (replaces) a VRS user with the properties in the JSON
        /// </summary>
        /// <exception cref="FactSet.SDK.Vermilion.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user</param>
        /// <param name="scimUser"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScimUser)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ScimUser>> UpdateUserByIdWithHttpInfoAsync(string userId, ScimUser scimUser, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'userId' when calling SCIMApi->UpdateUserById");
            }

            // verify the required parameter 'scimUser' is set
            if (scimUser == null)
            {
                throw new FactSet.SDK.Vermilion.Client.ApiException(400, "Missing required parameter 'scimUser' when calling SCIMApi->UpdateUserById");
            }


            FactSet.SDK.Vermilion.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Vermilion.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/scim+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/scim+json"
            };

            var localVarContentType = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Vermilion.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", FactSet.SDK.Vermilion.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = scimUser;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Vermilion.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UpdateUserByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ScimUser>("/scim/v2/Users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
