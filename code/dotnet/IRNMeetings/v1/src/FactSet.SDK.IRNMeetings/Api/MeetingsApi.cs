/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNMeetings.Client;
using FactSet.SDK.IRNMeetings.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNMeetings.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeetingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a meeting
        /// </summary>
        /// <remarks>
        /// Create a meeting with the given details like date, time, location, attendees, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>NewItemDto</returns>
        NewItemDto CreateMeeting(CreateMeetingDto createMeetingDto = default(CreateMeetingDto));

        /// <summary>
        /// Create a meeting
        /// </summary>
        /// <remarks>
        /// Create a meeting with the given details like date, time, location, attendees, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        ApiResponse<NewItemDto> CreateMeetingWithHttpInfo(CreateMeetingDto createMeetingDto = default(CreateMeetingDto));
        /// <summary>
        /// Delete a Meeting
        /// </summary>
        /// <remarks>
        /// Delete a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>void</returns>
        void DeleteMeeting(Guid meetingId);

        /// <summary>
        /// Delete a Meeting
        /// </summary>
        /// <remarks>
        /// Delete a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMeetingWithHttpInfo(Guid meetingId);
        /// <summary>
        /// Get details of a meeting
        /// </summary>
        /// <remarks>
        /// Get details of a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>MeetingDto</returns>
        MeetingDto GetMeeting(Guid meetingId);

        /// <summary>
        /// Get details of a meeting
        /// </summary>
        /// <remarks>
        /// Get details of a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>ApiResponse of MeetingDto</returns>
        ApiResponse<MeetingDto> GetMeetingWithHttpInfo(Guid meetingId);
        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers
        /// </summary>
        /// <remarks>
        /// Get all the meetings in the specified date range filtered on the given identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <returns>List<MeetingSummaryDto></returns>
        List<MeetingSummaryDto> GetMeetings(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?));

        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers
        /// </summary>
        /// <remarks>
        /// Get all the meetings in the specified date range filtered on the given identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <returns>ApiResponse of List<MeetingSummaryDto></returns>
        ApiResponse<List<MeetingSummaryDto>> GetMeetingsWithHttpInfo(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?));
        /// <summary>
        /// Update meeting
        /// </summary>
        /// <remarks>
        /// Update the details of a meeting by providing the meeting id based on the given details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>void</returns>
        void UpdateMeeting(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto));

        /// <summary>
        /// Update meeting
        /// </summary>
        /// <remarks>
        /// Update the details of a meeting by providing the meeting id based on the given details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMeetingWithHttpInfo(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeetingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a meeting
        /// </summary>
        /// <remarks>
        /// Create a meeting with the given details like date, time, location, attendees, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        System.Threading.Tasks.Task<NewItemDto> CreateMeetingAsync(CreateMeetingDto createMeetingDto = default(CreateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a meeting
        /// </summary>
        /// <remarks>
        /// Create a meeting with the given details like date, time, location, attendees, etc.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateMeetingWithHttpInfoAsync(CreateMeetingDto createMeetingDto = default(CreateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Meeting
        /// </summary>
        /// <remarks>
        /// Delete a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMeetingAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Meeting
        /// </summary>
        /// <remarks>
        /// Delete a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeetingWithHttpInfoAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details of a meeting
        /// </summary>
        /// <remarks>
        /// Get details of a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeetingDto</returns>
        System.Threading.Tasks.Task<MeetingDto> GetMeetingAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of a meeting
        /// </summary>
        /// <remarks>
        /// Get details of a meeting by providing the meeting id.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeetingDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeetingDto>> GetMeetingWithHttpInfoAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers
        /// </summary>
        /// <remarks>
        /// Get all the meetings in the specified date range filtered on the given identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MeetingSummaryDto&gt;</returns>
        System.Threading.Tasks.Task<List<MeetingSummaryDto>> GetMeetingsAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers
        /// </summary>
        /// <remarks>
        /// Get all the meetings in the specified date range filtered on the given identifiers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<MeetingSummaryDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MeetingSummaryDto>>> GetMeetingsWithHttpInfoAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update meeting
        /// </summary>
        /// <remarks>
        /// Update the details of a meeting by providing the meeting id based on the given details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMeetingAsync(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update meeting
        /// </summary>
        /// <remarks>
        /// Update the details of a meeting by providing the meeting id based on the given details.
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMeetingWithHttpInfoAsync(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeetingsApi : IMeetingsApiSync, IMeetingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeetingsApi : IMeetingsApi
    {
        private FactSet.SDK.IRNMeetings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateMeetingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(NewItemDto) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteMeetingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetMeetingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(MeetingDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetMeetingsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<MeetingSummaryDto>) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UpdateMeetingResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeetingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeetingsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNMeetings.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNMeetings.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNMeetings.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNMeetings.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNMeetings.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNMeetings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeetingsApi(FactSet.SDK.IRNMeetings.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNMeetings.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNMeetings.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNMeetings.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNMeetings.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNMeetings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeetingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MeetingsApi(FactSet.SDK.IRNMeetings.Client.ISynchronousClient client, FactSet.SDK.IRNMeetings.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNMeetings.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNMeetings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNMeetings.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNMeetings.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNMeetings.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNMeetings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a meeting Create a meeting with the given details like date, time, location, attendees, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>NewItemDto</returns>
        public NewItemDto CreateMeeting(CreateMeetingDto createMeetingDto = default(CreateMeetingDto))
        {
            var localVarResponse = CreateMeetingWithHttpInfo(createMeetingDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a meeting Create a meeting with the given details like date, time, location, attendees, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        public ApiResponse<NewItemDto> CreateMeetingWithHttpInfo(CreateMeetingDto createMeetingDto = default(CreateMeetingDto))
        {
            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMeetingDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NewItemDto>("/meetings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a meeting Create a meeting with the given details like date, time, location, attendees, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        public async System.Threading.Tasks.Task<NewItemDto>CreateMeetingAsync(CreateMeetingDto createMeetingDto = default(CreateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateMeetingWithHttpInfoAsync(createMeetingDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a meeting Create a meeting with the given details like date, time, location, attendees, etc.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMeetingDto">Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateMeetingWithHttpInfoAsync(CreateMeetingDto createMeetingDto = default(CreateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMeetingDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewItemDto>("/meetings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Meeting Delete a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>void</returns>
        public void DeleteMeeting(Guid meetingId)
        {
            DeleteMeetingWithHttpInfo(meetingId);
        }

        /// <summary>
        /// Delete a Meeting Delete a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMeetingWithHttpInfo(Guid meetingId)
        {
            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("meetingId", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(meetingId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/meetings/{meetingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a Meeting Delete a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMeetingAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeetingWithHttpInfoAsync(meetingId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Meeting Delete a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeetingWithHttpInfoAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("meetingId", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(meetingId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/meetings/{meetingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a meeting Get details of a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>MeetingDto</returns>
        public MeetingDto GetMeeting(Guid meetingId)
        {
            var localVarResponse = GetMeetingWithHttpInfo(meetingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a meeting Get details of a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <returns>ApiResponse of MeetingDto</returns>
        public ApiResponse<MeetingDto> GetMeetingWithHttpInfo(Guid meetingId)
        {
            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("meetingId", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(meetingId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            MeetingDto>("/meetings/{meetingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get details of a meeting Get details of a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeetingDto</returns>
        public async System.Threading.Tasks.Task<MeetingDto>GetMeetingAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetMeetingWithHttpInfoAsync(meetingId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a meeting Get details of a meeting by providing the meeting id.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeetingDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<MeetingDto>> GetMeetingWithHttpInfoAsync(Guid meetingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("meetingId", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(meetingId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeetingDto>("/meetings/{meetingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers Get all the meetings in the specified date range filtered on the given identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <returns>List<MeetingSummaryDto></returns>
        public List<MeetingSummaryDto> GetMeetings(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?))
        {
            var localVarResponse = GetMeetingsWithHttpInfo(start, end, identifiers, limit, modifiedSince, includeRelatedEntities, xIRNIncludeDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers Get all the meetings in the specified date range filtered on the given identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;MeetingSummaryDto&gt;</returns>
        public ApiResponse<List<MeetingSummaryDto>> GetMeetingsWithHttpInfo(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?))
        {
            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (identifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("multi", "identifiers", identifiers));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (modifiedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "modifiedSince", modifiedSince));
            }
            if (includeRelatedEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "includeRelatedEntities", includeRelatedEntities));
            }
            if (xIRNIncludeDeleted != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Include-Deleted", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(xIRNIncludeDeleted)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetMeetingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<MeetingSummaryDto>>("/meetings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeetings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers Get all the meetings in the specified date range filtered on the given identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MeetingSummaryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<MeetingSummaryDto>>GetMeetingsAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetMeetingsWithHttpInfoAsync(start, end, identifiers, limit, modifiedSince, includeRelatedEntities, xIRNIncludeDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the meetings in the specified date range filtered on the given identifiers Get all the meetings in the specified date range filtered on the given identifiers.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="limit">Limit on the number of meetings retrieved (optional)</param>
        /// <param name="modifiedSince">Only return meetings which have been modified or created since a particular time (optional)</param>
        /// <param name="includeRelatedEntities">When set to true fetches meetings tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted">Includes deleted meetings in results when set to true (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MeetingSummaryDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<MeetingSummaryDto>>> GetMeetingsWithHttpInfoAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), int? limit = default(int?), string modifiedSince = default(string), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (identifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("multi", "identifiers", identifiers));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (modifiedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "modifiedSince", modifiedSince));
            }
            if (includeRelatedEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToMultiMap("", "includeRelatedEntities", includeRelatedEntities));
            }
            if (xIRNIncludeDeleted != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Include-Deleted", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(xIRNIncludeDeleted)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetMeetingsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MeetingSummaryDto>>("/meetings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeetings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update meeting Update the details of a meeting by providing the meeting id based on the given details.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>void</returns>
        public void UpdateMeeting(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto))
        {
            UpdateMeetingWithHttpInfo(meetingId, updateMeetingDto);
        }

        /// <summary>
        /// Update meeting Update the details of a meeting by providing the meeting id based on the given details.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateMeetingWithHttpInfo(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto))
        {
            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("meetingId", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(meetingId)); // path parameter
            localVarRequestOptions.Data = updateMeetingDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UpdateMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            Object>("/meetings/{meetingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Update meeting Update the details of a meeting by providing the meeting id based on the given details.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMeetingAsync(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateMeetingWithHttpInfoAsync(meetingId, updateMeetingDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update meeting Update the details of a meeting by providing the meeting id based on the given details.
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNMeetings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meetingId">Meeting Id</param>
        /// <param name="updateMeetingDto">Meeting details to update. Note: The organizer property is deprecated in favor of organizerId (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMeetingWithHttpInfoAsync(Guid meetingId, UpdateMeetingDto updateMeetingDto = default(UpdateMeetingDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNMeetings.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNMeetings.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNMeetings.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("meetingId", FactSet.SDK.IRNMeetings.Client.ClientUtils.ParameterToString(meetingId)); // path parameter
            localVarRequestOptions.Data = updateMeetingDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNMeetings.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UpdateMeetingResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/meetings/{meetingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
