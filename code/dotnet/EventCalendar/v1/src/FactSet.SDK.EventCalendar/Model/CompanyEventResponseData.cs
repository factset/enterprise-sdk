/*
 * Event Calendar API
 *
 * Retrieves events for companies
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.EventCalendar.Client.OpenAPIDateConverter;

namespace FactSet.SDK.EventCalendar.Model
{
    /// <summary>
    /// CompanyEventResponseData
    /// </summary>
    [DataContract(Name = "companyEventResponse_data")]
    public partial class CompanyEventResponseData : IEquatable<CompanyEventResponseData>, IValidatableObject
    {
        /// <summary>
        /// Defines EventType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventTypeEnum
        {
            /// <summary>
            /// Enum Earnings for value: Earnings
            /// </summary>
            [EnumMember(Value = "Earnings")]
            Earnings = 1,

            /// <summary>
            /// Enum SalesRevenueCall for value: SalesRevenueCall
            /// </summary>
            [EnumMember(Value = "SalesRevenueCall")]
            SalesRevenueCall = 2,

            /// <summary>
            /// Enum GuidanceCall for value: GuidanceCall
            /// </summary>
            [EnumMember(Value = "GuidanceCall")]
            GuidanceCall = 3,

            /// <summary>
            /// Enum AnalystsInvestorsMeeting for value: AnalystsInvestorsMeeting
            /// </summary>
            [EnumMember(Value = "AnalystsInvestorsMeeting")]
            AnalystsInvestorsMeeting = 4,

            /// <summary>
            /// Enum ShareholdersMeeting for value: ShareholdersMeeting
            /// </summary>
            [EnumMember(Value = "ShareholdersMeeting")]
            ShareholdersMeeting = 5,

            /// <summary>
            /// Enum SpecialSituation for value: SpecialSituation
            /// </summary>
            [EnumMember(Value = "SpecialSituation")]
            SpecialSituation = 6,

            /// <summary>
            /// Enum Conference for value: Conference
            /// </summary>
            [EnumMember(Value = "Conference")]
            Conference = 7,

            /// <summary>
            /// Enum ConfirmedEarningsRelease for value: ConfirmedEarningsRelease
            /// </summary>
            [EnumMember(Value = "ConfirmedEarningsRelease")]
            ConfirmedEarningsRelease = 8,

            /// <summary>
            /// Enum ProjectedEarningsRelease for value: ProjectedEarningsRelease
            /// </summary>
            [EnumMember(Value = "ProjectedEarningsRelease")]
            ProjectedEarningsRelease = 9,

            /// <summary>
            /// Enum SalesRevenueRelease for value: SalesRevenueRelease
            /// </summary>
            [EnumMember(Value = "SalesRevenueRelease")]
            SalesRevenueRelease = 10,

            /// <summary>
            /// Enum Split for value: Split
            /// </summary>
            [EnumMember(Value = "Split")]
            Split = 11,

            /// <summary>
            /// Enum Dividend for value: Dividend
            /// </summary>
            [EnumMember(Value = "Dividend")]
            Dividend = 12

        }


        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", EmitDefaultValue = false)]
        public EventTypeEnum? EventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyEventResponseData" /> class.
        /// </summary>
        /// <param name="ticker">ticker.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="description">description.</param>
        /// <param name="eventDateTime">eventDateTime.</param>
        /// <param name="marketTimeCode">marketTimeCode.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="eventId">eventId.</param>
        /// <param name="webcastLink">webcastLink.</param>
        /// <param name="irLink">irLink.</param>
        /// <param name="fiscalYear">fiscalYear.</param>
        /// <param name="fiscalPeriod">fiscalPeriod.</param>
        /// <param name="contactEmail">contactEmail.</param>
        /// <param name="contactPhone">contactPhone.</param>
        /// <param name="contactName">contactName.</param>
        public CompanyEventResponseData(string ticker = default(string), string companyName = default(string), string description = default(string), DateTime eventDateTime = default(DateTime), string marketTimeCode = default(string), EventTypeEnum? eventType = default(EventTypeEnum?), string eventId = default(string), string webcastLink = default(string), string irLink = default(string), string fiscalYear = default(string), string fiscalPeriod = default(string), string contactEmail = default(string), string contactPhone = default(string), string contactName = default(string))
        {
            this.Ticker = ticker;
            this.CompanyName = companyName;
            this.Description = description;
            this.EventDateTime = eventDateTime;
            this.MarketTimeCode = marketTimeCode;
            this.EventType = eventType;
            this.EventId = eventId;
            this.WebcastLink = webcastLink;
            this.IrLink = irLink;
            this.FiscalYear = fiscalYear;
            this.FiscalPeriod = fiscalPeriod;
            this.ContactEmail = contactEmail;
            this.ContactPhone = contactPhone;
            this.ContactName = contactName;
        }

        /// <summary>
        /// Gets or Sets Ticker
        /// </summary>
        [DataMember(Name = "ticker", EmitDefaultValue = false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EventDateTime
        /// </summary>
        [DataMember(Name = "eventDateTime", EmitDefaultValue = false)]
        public DateTime EventDateTime { get; set; }

        /// <summary>
        /// Gets or Sets MarketTimeCode
        /// </summary>
        [DataMember(Name = "marketTimeCode", EmitDefaultValue = false)]
        public string MarketTimeCode { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets WebcastLink
        /// </summary>
        [DataMember(Name = "webcastLink", EmitDefaultValue = false)]
        public string WebcastLink { get; set; }

        /// <summary>
        /// Gets or Sets IrLink
        /// </summary>
        [DataMember(Name = "irLink", EmitDefaultValue = false)]
        public string IrLink { get; set; }

        /// <summary>
        /// Gets or Sets FiscalYear
        /// </summary>
        [DataMember(Name = "fiscalYear", EmitDefaultValue = false)]
        public string FiscalYear { get; set; }

        /// <summary>
        /// Gets or Sets FiscalPeriod
        /// </summary>
        [DataMember(Name = "fiscalPeriod", EmitDefaultValue = false)]
        public string FiscalPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [DataMember(Name = "contactEmail", EmitDefaultValue = false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhone
        /// </summary>
        [DataMember(Name = "contactPhone", EmitDefaultValue = false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name = "contactName", EmitDefaultValue = false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyEventResponseData {\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventDateTime: ").Append(EventDateTime).Append("\n");
            sb.Append("  MarketTimeCode: ").Append(MarketTimeCode).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  WebcastLink: ").Append(WebcastLink).Append("\n");
            sb.Append("  IrLink: ").Append(IrLink).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  FiscalPeriod: ").Append(FiscalPeriod).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyEventResponseData);
        }

        /// <summary>
        /// Returns true if CompanyEventResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyEventResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyEventResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EventDateTime == input.EventDateTime ||
                    (this.EventDateTime != null &&
                    this.EventDateTime.Equals(input.EventDateTime))
                ) && 
                (
                    this.MarketTimeCode == input.MarketTimeCode ||
                    (this.MarketTimeCode != null &&
                    this.MarketTimeCode.Equals(input.MarketTimeCode))
                ) && 
                (
                    this.EventType == input.EventType ||
                    this.EventType.Equals(input.EventType)
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.WebcastLink == input.WebcastLink ||
                    (this.WebcastLink != null &&
                    this.WebcastLink.Equals(input.WebcastLink))
                ) && 
                (
                    this.IrLink == input.IrLink ||
                    (this.IrLink != null &&
                    this.IrLink.Equals(input.IrLink))
                ) && 
                (
                    this.FiscalYear == input.FiscalYear ||
                    (this.FiscalYear != null &&
                    this.FiscalYear.Equals(input.FiscalYear))
                ) && 
                (
                    this.FiscalPeriod == input.FiscalPeriod ||
                    (this.FiscalPeriod != null &&
                    this.FiscalPeriod.Equals(input.FiscalPeriod))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactPhone == input.ContactPhone ||
                    (this.ContactPhone != null &&
                    this.ContactPhone.Equals(input.ContactPhone))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.EventDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.EventDateTime.GetHashCode();
                }
                if (this.MarketTimeCode != null)
                {
                    hashCode = (hashCode * 59) + this.MarketTimeCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                if (this.EventId != null)
                {
                    hashCode = (hashCode * 59) + this.EventId.GetHashCode();
                }
                if (this.WebcastLink != null)
                {
                    hashCode = (hashCode * 59) + this.WebcastLink.GetHashCode();
                }
                if (this.IrLink != null)
                {
                    hashCode = (hashCode * 59) + this.IrLink.GetHashCode();
                }
                if (this.FiscalYear != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYear.GetHashCode();
                }
                if (this.FiscalPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalPeriod.GetHashCode();
                }
                if (this.ContactEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmail.GetHashCode();
                }
                if (this.ContactPhone != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPhone.GetHashCode();
                }
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
