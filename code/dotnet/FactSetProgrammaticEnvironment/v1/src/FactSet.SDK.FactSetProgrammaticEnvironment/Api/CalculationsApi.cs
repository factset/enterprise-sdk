/*
 * FPE API
 *
 * FactSet Programmatic Environment (FPE) API is an API for users to interact with FPE programmatically, streamlining path from research to production.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetProgrammaticEnvironment.Client;
using FactSet.SDK.FactSetProgrammaticEnvironment.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetProgrammaticEnvironment.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Starts a new script calculation
        /// </summary>
        /// <remarks>
        /// This endpoint takes a python script and starts executing it within FPE
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <returns>CalculationStatus</returns>
        CalculationStatus CreateCalculations(Calculation calculation = default(Calculation));

        /// <summary>
        /// Starts a new script calculation
        /// </summary>
        /// <remarks>
        /// This endpoint takes a python script and starts executing it within FPE
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <returns>ApiResponse of CalculationStatus</returns>
        ApiResponse<CalculationStatus> CreateCalculationsWithHttpInfo(Calculation calculation = default(Calculation));
        /// <summary>
        /// Get calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previous calculation request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>CalculationStatus</returns>
        CalculationStatus GetCalculations(string id);

        /// <summary>
        /// Get calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previous calculation request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>ApiResponse of CalculationStatus</returns>
        ApiResponse<CalculationStatus> GetCalculationsWithHttpInfo(string id);
        /// <summary>
        /// Get calculation log for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the log from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCalculationsLog(string id);

        /// <summary>
        /// Get calculation log for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the log from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCalculationsLogWithHttpInfo(string id);
        /// <summary>
        /// Get calculation output for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified output from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCalculationsOutput(string id);

        /// <summary>
        /// Get calculation output for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified output from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCalculationsOutputWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Starts a new script calculation
        /// </summary>
        /// <remarks>
        /// This endpoint takes a python script and starts executing it within FPE
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatus</returns>
        System.Threading.Tasks.Task<CalculationStatus> CreateCalculationsAsync(Calculation calculation = default(Calculation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts a new script calculation
        /// </summary>
        /// <remarks>
        /// This endpoint takes a python script and starts executing it within FPE
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculationStatus>> CreateCalculationsWithHttpInfoAsync(Calculation calculation = default(Calculation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previous calculation request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatus</returns>
        System.Threading.Tasks.Task<CalculationStatus> GetCalculationsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previous calculation request.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculationStatus>> GetCalculationsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get calculation log for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the log from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCalculationsLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get calculation log for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the log from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCalculationsLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get calculation output for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified output from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCalculationsOutputAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get calculation output for a specific calculation
        /// </summary>
        /// <remarks>
        /// This endpoint returns the specified output from the calculation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCalculationsOutputWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalculationsApi : ICalculationsApiSync, ICalculationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalculationsApi : ICalculationsApi
    {
        private FactSet.SDK.FactSetProgrammaticEnvironment.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateCalculationsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(CalculationStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCalculationsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CalculationStatus) },
            { (HttpStatusCode)202, typeof(CalculationStatus) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCalculationsLogResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCalculationsOutputResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalculationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalculationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetProgrammaticEnvironment.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetProgrammaticEnvironment.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetProgrammaticEnvironment.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetProgrammaticEnvironment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalculationsApi(FactSet.SDK.FactSetProgrammaticEnvironment.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetProgrammaticEnvironment.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetProgrammaticEnvironment.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetProgrammaticEnvironment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CalculationsApi(FactSet.SDK.FactSetProgrammaticEnvironment.Client.ISynchronousClient client, FactSet.SDK.FactSetProgrammaticEnvironment.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetProgrammaticEnvironment.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetProgrammaticEnvironment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetProgrammaticEnvironment.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetProgrammaticEnvironment.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetProgrammaticEnvironment.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetProgrammaticEnvironment.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Starts a new script calculation This endpoint takes a python script and starts executing it within FPE
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <returns>CalculationStatus</returns>
        public CalculationStatus CreateCalculations(Calculation calculation = default(Calculation))
        {
            var localVarResponse = CreateCalculationsWithHttpInfo(calculation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a new script calculation This endpoint takes a python script and starts executing it within FPE
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <returns>ApiResponse of CalculationStatus</returns>
        public ApiResponse<CalculationStatus> CreateCalculationsWithHttpInfo(Calculation calculation = default(Calculation))
        {
            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = calculation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateCalculationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CalculationStatus>("/calculations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCalculations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Starts a new script calculation This endpoint takes a python script and starts executing it within FPE
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatus</returns>
        public async System.Threading.Tasks.Task<CalculationStatus>CreateCalculationsAsync(Calculation calculation = default(Calculation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateCalculationsWithHttpInfoAsync(calculation, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a new script calculation This endpoint takes a python script and starts executing it within FPE
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatus)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CalculationStatus>> CreateCalculationsWithHttpInfoAsync(Calculation calculation = default(Calculation), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = calculation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateCalculationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CalculationStatus>("/calculations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCalculations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get calculation status by id This is the endpoint to check on the progress of a previous calculation request.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>CalculationStatus</returns>
        public CalculationStatus GetCalculations(string id)
        {
            var localVarResponse = GetCalculationsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculation status by id This is the endpoint to check on the progress of a previous calculation request.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>ApiResponse of CalculationStatus</returns>
        public ApiResponse<CalculationStatus> GetCalculationsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException(400, "Missing required parameter 'id' when calling CalculationsApi->GetCalculations");
            }

            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCalculationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CalculationStatus>("/calculations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get calculation status by id This is the endpoint to check on the progress of a previous calculation request.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatus</returns>
        public async System.Threading.Tasks.Task<CalculationStatus>GetCalculationsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCalculationsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculation status by id This is the endpoint to check on the progress of a previous calculation request.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatus)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CalculationStatus>> GetCalculationsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException(400, "Missing required parameter 'id' when calling CalculationsApi->GetCalculations");
            }


            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCalculationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CalculationStatus>("/calculations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get calculation log for a specific calculation This endpoint returns the log from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCalculationsLog(string id)
        {
            var localVarResponse = GetCalculationsLogWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculation log for a specific calculation This endpoint returns the log from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetCalculationsLogWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException(400, "Missing required parameter 'id' when calling CalculationsApi->GetCalculationsLog");
            }

            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCalculationsLogResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            System.IO.Stream>("/calculations/{id}/log", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculationsLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get calculation log for a specific calculation This endpoint returns the log from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream>GetCalculationsLogAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCalculationsLogWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculation log for a specific calculation This endpoint returns the log from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCalculationsLogWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException(400, "Missing required parameter 'id' when calling CalculationsApi->GetCalculationsLog");
            }


            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCalculationsLogResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/calculations/{id}/log", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculationsLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get calculation output for a specific calculation This endpoint returns the specified output from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCalculationsOutput(string id)
        {
            var localVarResponse = GetCalculationsOutputWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculation output for a specific calculation This endpoint returns the specified output from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetCalculationsOutputWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException(400, "Missing required parameter 'id' when calling CalculationsApi->GetCalculationsOutput");
            }

            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCalculationsOutputResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            System.IO.Stream>("/calculations/{id}/output", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculationsOutput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get calculation output for a specific calculation This endpoint returns the specified output from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream>GetCalculationsOutputAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCalculationsOutputWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get calculation output for a specific calculation This endpoint returns the specified output from the calculation.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">From url, provided by location header or response body in the calculation start endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCalculationsOutputWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.FactSetProgrammaticEnvironment.Client.ApiException(400, "Missing required parameter 'id' when calling CalculationsApi->GetCalculationsOutput");
            }


            FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetProgrammaticEnvironment.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*"
            };

            var localVarContentType = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetProgrammaticEnvironment.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCalculationsOutputResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/calculations/{id}/output", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCalculationsOutput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
