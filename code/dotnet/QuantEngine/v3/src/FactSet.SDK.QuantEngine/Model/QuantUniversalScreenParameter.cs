/*
 * Quant API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.12.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuantEngine.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuantEngine.Model
{
    /// <summary>
    /// QuantUniversalScreenParameter
    /// </summary>
    [DataContract(Name = "QuantUniversalScreenParameter")]
    public partial class QuantUniversalScreenParameter : IEquatable<QuantUniversalScreenParameter>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum ScreeningExpression for value: ScreeningExpression
            /// </summary>
            [EnumMember(Value = "ScreeningExpression")]
            ScreeningExpression = 1,

            /// <summary>
            /// Enum FqlExpression for value: FqlExpression
            /// </summary>
            [EnumMember(Value = "FqlExpression")]
            FqlExpression = 2,

            /// <summary>
            /// Enum UniversalScreenParameter for value: UniversalScreenParameter
            /// </summary>
            [EnumMember(Value = "UniversalScreenParameter")]
            UniversalScreenParameter = 3,

            /// <summary>
            /// Enum AllUniversalScreenParameters for value: AllUniversalScreenParameters
            /// </summary>
            [EnumMember(Value = "AllUniversalScreenParameters")]
            AllUniversalScreenParameters = 4

        }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantUniversalScreenParameter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuantUniversalScreenParameter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantUniversalScreenParameter" /> class.
        /// </summary>
        /// <param name="referenceName">referenceName (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="source">source (required).</param>
        public QuantUniversalScreenParameter(string referenceName, string name, SourceEnum source)
        {
            // to ensure "referenceName" is required (not null)
            if (referenceName == null) {
                throw new ArgumentNullException("referenceName is a required property for QuantUniversalScreenParameter and cannot be null");
            }
            this.ReferenceName = referenceName;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for QuantUniversalScreenParameter and cannot be null");
            }
            this.Name = name;
            this.Source = source;
        }

        /// <summary>
        /// Gets or Sets ReferenceName
        /// </summary>
        [DataMember(Name = "referenceName", IsRequired = true, EmitDefaultValue = false)]
        public string ReferenceName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuantUniversalScreenParameter {\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuantUniversalScreenParameter);
        }

        /// <summary>
        /// Returns true if QuantUniversalScreenParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of QuantUniversalScreenParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuantUniversalScreenParameter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReferenceName == input.ReferenceName ||
                    (this.ReferenceName != null &&
                    this.ReferenceName.Equals(input.ReferenceName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceName != null)
                {
                    hashCode = (hashCode * 59) + this.ReferenceName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
