/*
 * Quant API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.12.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.QuantEngine.Client.OpenAPIDateConverter;

namespace FactSet.SDK.QuantEngine.Model
{
    /// <summary>
    /// QuantIdentifierUniverse
    /// </summary>
    [DataContract(Name = "QuantIdentifierUniverse")]
    public partial class QuantIdentifierUniverse : IEquatable<QuantIdentifierUniverse>, IValidatableObject
    {
        /// <summary>
        /// Defines UniverseType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UniverseTypeEnum
        {
            /// <summary>
            /// Enum Equity for value: Equity
            /// </summary>
            [EnumMember(Value = "Equity")]
            Equity = 1,

            /// <summary>
            /// Enum Debt for value: Debt
            /// </summary>
            [EnumMember(Value = "Debt")]
            Debt = 2

        }


        /// <summary>
        /// Gets or Sets UniverseType
        /// </summary>
        [DataMember(Name = "universeType", IsRequired = true, EmitDefaultValue = false)]
        public UniverseTypeEnum UniverseType { get; set; }
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum ScreeningExpressionUniverse for value: ScreeningExpressionUniverse
            /// </summary>
            [EnumMember(Value = "ScreeningExpressionUniverse")]
            ScreeningExpressionUniverse = 1,

            /// <summary>
            /// Enum UniversalScreenUniverse for value: UniversalScreenUniverse
            /// </summary>
            [EnumMember(Value = "UniversalScreenUniverse")]
            UniversalScreenUniverse = 2,

            /// <summary>
            /// Enum IdentifierUniverse for value: IdentifierUniverse
            /// </summary>
            [EnumMember(Value = "IdentifierUniverse")]
            IdentifierUniverse = 3

        }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantIdentifierUniverse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuantIdentifierUniverse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuantIdentifierUniverse" /> class.
        /// </summary>
        /// <param name="universeType">universeType (required).</param>
        /// <param name="identifiers">identifiers (required).</param>
        /// <param name="source">source (required).</param>
        public QuantIdentifierUniverse(UniverseTypeEnum universeType, List<string> identifiers, SourceEnum source)
        {
            this.UniverseType = universeType;
            // to ensure "identifiers" is required (not null)
            if (identifiers == null) {
                throw new ArgumentNullException("identifiers is a required property for QuantIdentifierUniverse and cannot be null");
            }
            this.Identifiers = identifiers;
            this.Source = source;
        }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Identifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuantIdentifierUniverse {\n");
            sb.Append("  UniverseType: ").Append(UniverseType).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuantIdentifierUniverse);
        }

        /// <summary>
        /// Returns true if QuantIdentifierUniverse instances are equal
        /// </summary>
        /// <param name="input">Instance of QuantIdentifierUniverse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuantIdentifierUniverse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UniverseType == input.UniverseType ||
                    this.UniverseType.Equals(input.UniverseType)
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UniverseType.GetHashCode();
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
