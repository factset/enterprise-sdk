/*
 * FactSet Debt Capital Structure API
 *
 * The FactSet Debt Capital Structure API offers insights into public and private company debt financing for 69,000+ entities globally. Analyze at the individual-instrument level through summary and detailed information of the debt structure with history available back through 2006. Instrument types covered include Revolving Credit, Term Loans, Notes, and Bonds.   **How to Programmatically Download API Specification file:**  Please use the below link to download the FactSet Debt Capital Structure API Specification file in .yaml. You must be authorized for this API to extract. This specification can then be used for Codegen to create your own SDKs. You can also access by selecting the \"Download Spec\" button to the right of the version below.  [https://api.factset.com/content/factset-dcs/v1/spec/swagger.yaml](https://api.factset.com/content/factset-dcs/v1/spec/swagger.yaml)  This API is rate-limited to 10 requests per second and 10 concurrent requests per user. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetDebtCapitalStructure.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetDebtCapitalStructure.Model
{
    /// <summary>
    /// Detail
    /// </summary>
    [DataContract(Name = "Detail")]
    public partial class Detail : IEquatable<Detail>, IValidatableObject
    {
        /// <summary>
        /// Type of debt instrument.
        /// </summary>
        /// <value>Type of debt instrument.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InstrumentTypeEnum
        {
            /// <summary>
            /// Enum RevolvingCredit for value: Revolving Credit
            /// </summary>
            [EnumMember(Value = "Revolving Credit")]
            RevolvingCredit = 1,

            /// <summary>
            /// Enum TermLoans for value: Term Loans
            /// </summary>
            [EnumMember(Value = "Term Loans")]
            TermLoans = 2,

            /// <summary>
            /// Enum STDebtTotal for value: ST Debt Total
            /// </summary>
            [EnumMember(Value = "ST Debt Total")]
            STDebtTotal = 3,

            /// <summary>
            /// Enum NotesBonds for value: Notes/Bonds
            /// </summary>
            [EnumMember(Value = "Notes/Bonds")]
            NotesBonds = 4,

            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 5

        }


        /// <summary>
        /// Type of debt instrument.
        /// </summary>
        /// <value>Type of debt instrument.</value>
        [DataMember(Name = "instrumentType", EmitDefaultValue = true)]
        public InstrumentTypeEnum? InstrumentType { get; set; }
        /// <summary>
        /// Textual description of the instrument seniority type: * **Senior Unsecured** * **Senior Secured** * **Senior Subordinated** * **Collateralized** * **Subordinated** * **Junior** * **Junior Subordinated** * **Senior Conv.** &#x3D; Senior Convertible * **Senior Sub. Conv.** &#x3D; Senior Subordinated Convertible * **Sub. Conv.** &#x3D; Subordinated Convertible * **Junior Conv.** &#x3D; Junior Convertible * **Junior Sub. Conv.** &#x3D; Junior Subordinated Convertible * **Preferred** * **Other** 
        /// </summary>
        /// <value>Textual description of the instrument seniority type: * **Senior Unsecured** * **Senior Secured** * **Senior Subordinated** * **Collateralized** * **Subordinated** * **Junior** * **Junior Subordinated** * **Senior Conv.** &#x3D; Senior Convertible * **Senior Sub. Conv.** &#x3D; Senior Subordinated Convertible * **Sub. Conv.** &#x3D; Subordinated Convertible * **Junior Conv.** &#x3D; Junior Convertible * **Junior Sub. Conv.** &#x3D; Junior Subordinated Convertible * **Preferred** * **Other** </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeniorityEnum
        {
            /// <summary>
            /// Enum SeniorUnsecured for value: Senior Unsecured
            /// </summary>
            [EnumMember(Value = "Senior Unsecured")]
            SeniorUnsecured = 1,

            /// <summary>
            /// Enum SeniorSecured for value: Senior Secured
            /// </summary>
            [EnumMember(Value = "Senior Secured")]
            SeniorSecured = 2,

            /// <summary>
            /// Enum SeniorSubordinated for value: Senior Subordinated
            /// </summary>
            [EnumMember(Value = "Senior Subordinated")]
            SeniorSubordinated = 3,

            /// <summary>
            /// Enum Collateralized for value: Collateralized
            /// </summary>
            [EnumMember(Value = "Collateralized")]
            Collateralized = 4,

            /// <summary>
            /// Enum Subordinated for value: Subordinated
            /// </summary>
            [EnumMember(Value = "Subordinated")]
            Subordinated = 5,

            /// <summary>
            /// Enum Junior for value: Junior
            /// </summary>
            [EnumMember(Value = "Junior")]
            Junior = 6,

            /// <summary>
            /// Enum JunionSubordinated for value: Junion Subordinated
            /// </summary>
            [EnumMember(Value = "Junion Subordinated")]
            JunionSubordinated = 7,

            /// <summary>
            /// Enum SeniorConv for value: Senior Conv.
            /// </summary>
            [EnumMember(Value = "Senior Conv.")]
            SeniorConv = 8,

            /// <summary>
            /// Enum SeniorSubConv for value: Senior Sub. Conv.
            /// </summary>
            [EnumMember(Value = "Senior Sub. Conv.")]
            SeniorSubConv = 9,

            /// <summary>
            /// Enum SubConv for value: Sub. Conv.
            /// </summary>
            [EnumMember(Value = "Sub. Conv.")]
            SubConv = 10,

            /// <summary>
            /// Enum JuniorConv for value: Junior Conv.
            /// </summary>
            [EnumMember(Value = "Junior Conv.")]
            JuniorConv = 11,

            /// <summary>
            /// Enum JunionSubConv for value: Junion Sub. Conv.
            /// </summary>
            [EnumMember(Value = "Junion Sub. Conv.")]
            JunionSubConv = 12,

            /// <summary>
            /// Enum Preferred for value: Preferred
            /// </summary>
            [EnumMember(Value = "Preferred")]
            Preferred = 13,

            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 14

        }


        /// <summary>
        /// Textual description of the instrument seniority type: * **Senior Unsecured** * **Senior Secured** * **Senior Subordinated** * **Collateralized** * **Subordinated** * **Junior** * **Junior Subordinated** * **Senior Conv.** &#x3D; Senior Convertible * **Senior Sub. Conv.** &#x3D; Senior Subordinated Convertible * **Sub. Conv.** &#x3D; Subordinated Convertible * **Junior Conv.** &#x3D; Junior Convertible * **Junior Sub. Conv.** &#x3D; Junior Subordinated Convertible * **Preferred** * **Other** 
        /// </summary>
        /// <value>Textual description of the instrument seniority type: * **Senior Unsecured** * **Senior Secured** * **Senior Subordinated** * **Collateralized** * **Subordinated** * **Junior** * **Junior Subordinated** * **Senior Conv.** &#x3D; Senior Convertible * **Senior Sub. Conv.** &#x3D; Senior Subordinated Convertible * **Sub. Conv.** &#x3D; Subordinated Convertible * **Junior Conv.** &#x3D; Junior Convertible * **Junior Sub. Conv.** &#x3D; Junior Subordinated Convertible * **Preferred** * **Other** </value>
        [DataMember(Name = "seniority", EmitDefaultValue = true)]
        public SeniorityEnum? Seniority { get; set; }
        /// <summary>
        /// Type of debt instrument.
        /// </summary>
        /// <value>Type of debt instrument.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CouponTypeEnum
        {
            /// <summary>
            /// Enum Variable for value: Variable
            /// </summary>
            [EnumMember(Value = "Variable")]
            Variable = 1,

            /// <summary>
            /// Enum Fixed for value: Fixed
            /// </summary>
            [EnumMember(Value = "Fixed")]
            Fixed = 2,

            /// <summary>
            /// Enum Cond for value: Cond
            /// </summary>
            [EnumMember(Value = "Cond")]
            Cond = 3,

            /// <summary>
            /// Enum Zero for value: Zero
            /// </summary>
            [EnumMember(Value = "Zero")]
            Zero = 4

        }


        /// <summary>
        /// Type of debt instrument.
        /// </summary>
        /// <value>Type of debt instrument.</value>
        [DataMember(Name = "couponType", EmitDefaultValue = true)]
        public CouponTypeEnum? CouponType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Detail" /> class.
        /// </summary>
        /// <param name="instrumentId">Identifier for the debt instrument..</param>
        /// <param name="instrumentType">Type of debt instrument..</param>
        /// <param name="description">Desription of the debt instrument..</param>
        /// <param name="seniority">Textual description of the instrument seniority type: * **Senior Unsecured** * **Senior Secured** * **Senior Subordinated** * **Collateralized** * **Subordinated** * **Junior** * **Junior Subordinated** * **Senior Conv.** &#x3D; Senior Convertible * **Senior Sub. Conv.** &#x3D; Senior Subordinated Convertible * **Sub. Conv.** &#x3D; Subordinated Convertible * **Junior Conv.** &#x3D; Junior Convertible * **Junior Sub. Conv.** &#x3D; Junior Subordinated Convertible * **Preferred** * **Other** .</param>
        /// <param name="amountOutstanding">Balance sheet amount outstanding..</param>
        /// <param name="currency">Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="couponRate">Coupon rate for the debt instrument..</param>
        /// <param name="couponType">Type of debt instrument..</param>
        /// <param name="yieldToWorst">Most recent annual yield to worst value for the debt instrument..</param>
        /// <param name="issueDate">Issue date for the debt instrument..</param>
        /// <param name="reportDate">Reporting date for the debt instrument..</param>
        /// <param name="maturityDate">Maturity date for the debt instrument..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        public Detail(string instrumentId = default(string), InstrumentTypeEnum? instrumentType = default(InstrumentTypeEnum?), string description = default(string), SeniorityEnum? seniority = default(SeniorityEnum?), decimal? amountOutstanding = default(decimal?), string currency = default(string), decimal? couponRate = default(decimal?), CouponTypeEnum? couponType = default(CouponTypeEnum?), decimal? yieldToWorst = default(decimal?), DateTime? issueDate = default(DateTime?), DateTime? reportDate = default(DateTime?), DateTime? maturityDate = default(DateTime?), string requestId = default(string))
        {
            this.InstrumentId = instrumentId;
            this.InstrumentType = instrumentType;
            this.Description = description;
            this.Seniority = seniority;
            this.AmountOutstanding = amountOutstanding;
            this.Currency = currency;
            this.CouponRate = couponRate;
            this.CouponType = couponType;
            this.YieldToWorst = yieldToWorst;
            this.IssueDate = issueDate;
            this.ReportDate = reportDate;
            this.MaturityDate = maturityDate;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Identifier for the debt instrument.
        /// </summary>
        /// <value>Identifier for the debt instrument.</value>
        [DataMember(Name = "instrumentId", EmitDefaultValue = true)]
        public string InstrumentId { get; set; }

        /// <summary>
        /// Desription of the debt instrument.
        /// </summary>
        /// <value>Desription of the debt instrument.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Balance sheet amount outstanding.
        /// </summary>
        /// <value>Balance sheet amount outstanding.</value>
        [DataMember(Name = "amountOutstanding", EmitDefaultValue = true)]
        public decimal? AmountOutstanding { get; set; }

        /// <summary>
        /// Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Coupon rate for the debt instrument.
        /// </summary>
        /// <value>Coupon rate for the debt instrument.</value>
        [DataMember(Name = "couponRate", EmitDefaultValue = true)]
        public decimal? CouponRate { get; set; }

        /// <summary>
        /// Most recent annual yield to worst value for the debt instrument.
        /// </summary>
        /// <value>Most recent annual yield to worst value for the debt instrument.</value>
        [DataMember(Name = "yieldToWorst", EmitDefaultValue = true)]
        public decimal? YieldToWorst { get; set; }

        /// <summary>
        /// Issue date for the debt instrument.
        /// </summary>
        /// <value>Issue date for the debt instrument.</value>
        [DataMember(Name = "issueDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// Reporting date for the debt instrument.
        /// </summary>
        /// <value>Reporting date for the debt instrument.</value>
        [DataMember(Name = "reportDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ReportDate { get; set; }

        /// <summary>
        /// Maturity date for the debt instrument.
        /// </summary>
        /// <value>Maturity date for the debt instrument.</value>
        [DataMember(Name = "maturityDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Detail {\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Seniority: ").Append(Seniority).Append("\n");
            sb.Append("  AmountOutstanding: ").Append(AmountOutstanding).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CouponRate: ").Append(CouponRate).Append("\n");
            sb.Append("  CouponType: ").Append(CouponType).Append("\n");
            sb.Append("  YieldToWorst: ").Append(YieldToWorst).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Detail);
        }

        /// <summary>
        /// Returns true if Detail instances are equal
        /// </summary>
        /// <param name="input">Instance of Detail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Detail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentId == input.InstrumentId ||
                    (this.InstrumentId != null &&
                    this.InstrumentId.Equals(input.InstrumentId))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    this.InstrumentType.Equals(input.InstrumentType)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Seniority == input.Seniority ||
                    this.Seniority.Equals(input.Seniority)
                ) && 
                (
                    this.AmountOutstanding == input.AmountOutstanding ||
                    (this.AmountOutstanding != null &&
                    this.AmountOutstanding.Equals(input.AmountOutstanding))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CouponRate == input.CouponRate ||
                    (this.CouponRate != null &&
                    this.CouponRate.Equals(input.CouponRate))
                ) && 
                (
                    this.CouponType == input.CouponType ||
                    this.CouponType.Equals(input.CouponType)
                ) && 
                (
                    this.YieldToWorst == input.YieldToWorst ||
                    (this.YieldToWorst != null &&
                    this.YieldToWorst.Equals(input.YieldToWorst))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.ReportDate == input.ReportDate ||
                    (this.ReportDate != null &&
                    this.ReportDate.Equals(input.ReportDate))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstrumentType.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Seniority.GetHashCode();
                if (this.AmountOutstanding != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOutstanding.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.CouponRate != null)
                {
                    hashCode = (hashCode * 59) + this.CouponRate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CouponType.GetHashCode();
                if (this.YieldToWorst != null)
                {
                    hashCode = (hashCode * 59) + this.YieldToWorst.GetHashCode();
                }
                if (this.IssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDate.GetHashCode();
                }
                if (this.ReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportDate.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
