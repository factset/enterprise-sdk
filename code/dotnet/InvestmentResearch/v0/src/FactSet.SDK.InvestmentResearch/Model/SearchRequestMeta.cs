/*
 * Investment Research API
 *
 *  The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.    
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.InvestmentResearch.Client.OpenAPIDateConverter;

namespace FactSet.SDK.InvestmentResearch.Model
{
    /// <summary>
    /// meta object
    /// </summary>
    [DataContract(Name = "SearchRequest_meta")]
    public partial class SearchRequestMeta : IEquatable<SearchRequestMeta>, IValidatableObject
    {
        /// <summary>
        /// Defines Sort
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortEnum
        {
            /// <summary>
            /// Enum StoryDateTime for value: storyDateTime
            /// </summary>
            [EnumMember(Value = "storyDateTime")]
            StoryDateTime = 1,

            /// <summary>
            /// Enum MINUS_StoryDateTime for value: -storyDateTime
            /// </summary>
            [EnumMember(Value = "-storyDateTime")]
            MINUS_StoryDateTime = 2

        }



        /// <summary>
        /// Sorting the results in chronological (oldest to newest) or reverse chronological (newest to oldest) order.    *  &#x60;-storyDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query.       *  &#x60; storyDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.        type: array 
        /// </summary>
        /// <value>Sorting the results in chronological (oldest to newest) or reverse chronological (newest to oldest) order.    *  &#x60;-storyDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query.       *  &#x60; storyDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.        type: array </value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public List<SortEnum> Sort { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequestMeta" /> class.
        /// </summary>
        /// <param name="pagination">pagination.</param>
        /// <param name="sort">Sorting the results in chronological (oldest to newest) or reverse chronological (newest to oldest) order.    *  &#x60;-storyDateTime&#x60; - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn&#39;t used in the query.       *  &#x60; storyDateTime&#x60; - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.        type: array .</param>
        public SearchRequestMeta(SearchRequestMetaPagination pagination = default(SearchRequestMetaPagination), List<SortEnum> sort = default(List<SortEnum>))
        {
            this.Pagination = pagination;
            this.Sort = sort;
        }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public SearchRequestMetaPagination Pagination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchRequestMeta {\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchRequestMeta);
        }

        /// <summary>
        /// Returns true if SearchRequestMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchRequestMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchRequestMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.SequenceEqual(input.Sort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pagination != null)
                {
                    hashCode = (hashCode * 59) + this.Pagination.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
