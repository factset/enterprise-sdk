/*
 * Investment Research API
 *
 *  The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.    
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.InvestmentResearch.Client.OpenAPIDateConverter;

namespace FactSet.SDK.InvestmentResearch.Model
{
    /// <summary>
    /// Response
    /// </summary>
    [DataContract(Name = "Document")]
    public partial class Document : IEquatable<Document>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="headline">Concise title or summary of the research story or document..</param>
        /// <param name="source">Provides source of the document.  • FRC – FactSet Research Connect   • AMR – Aftermarket Research.</param>
        /// <param name="primaryIds">Refers to the main company a particular document refers to..</param>
        /// <param name="allIds">Refers to all companies mentioned in the document. This could also include the primary company id as well..</param>
        /// <param name="categories">Provides the category of the document, list is provided by the &#x60;/meta/categories&#x60; endpoint..</param>
        /// <param name="storyDateTime">Publish date and time of the latest version, in RFC 3339 format (a subset of ISO 8601), e.g., 2024-07-03T14:00:00Z (UTC)..</param>
        /// <param name="link">The link to download the document..</param>
        /// <param name="contributorName">Research specific metadata providing the name of the research contributor..</param>
        /// <param name="contributorId">Research specific metadata providing the ID of the research contributor..</param>
        /// <param name="analystName">Research specific metadata providing the name of the analyst(s) who wrote the research..</param>
        /// <param name="analystId">Research specific metadata providing the ID of the analyst(s) who wrote the research..</param>
        /// <param name="pages">Total number of pages in the document..</param>
        /// <param name="documentId">Unique identifier for a document..</param>
        /// <param name="reportFoci">One or more classification codes indicating the primary focus of the document..</param>
        /// <param name="assetClasses">One or more codes indicating asset classes covered in the document..</param>
        /// <param name="assetTypes">One or more codes indicating asset types..</param>
        /// <param name="coverageActions">One or more codes indicating coverage actions..</param>
        /// <param name="compilationIndicators">An indication of whether the document contains new material or is a compilation/summary of separately published material..</param>
        /// <param name="disciplines">One or more codes indicating the disciplines reflected in the document..</param>
        /// <param name="issuerTypes">One or more codes indicating issuer types covered in the document..</param>
        /// <param name="periodicities">One or more codes indicating the fixed time interval at which the document is published..</param>
        /// <param name="purposes">One or more codes indicating the report purpose of the document..</param>
        /// <param name="ratingActions">One or more codes indicating rating actions discussed in the document..</param>
        /// <param name="researchApproaches">One or more codes indicating the research perspective provided in the document..</param>
        /// <param name="securityTypes">One or more codes indicating security types..</param>
        /// <param name="targetActions">One or more codes indicating target price actions discussed in the document..</param>
        /// <param name="weightingActions">One or more codes indicating weighting actions discussed in the document..</param>
        public Document(string headline = default(string), string source = default(string), List<string> primaryIds = default(List<string>), List<string> allIds = default(List<string>), List<string> categories = default(List<string>), DateTime storyDateTime = default(DateTime), string link = default(string), string contributorName = default(string), int contributorId = default(int), List<string> analystName = default(List<string>), List<int> analystId = default(List<int>), int pages = default(int), string documentId = default(string), List<string> reportFoci = default(List<string>), List<string> assetClasses = default(List<string>), List<string> assetTypes = default(List<string>), List<string> coverageActions = default(List<string>), bool compilationIndicators = default(bool), List<string> disciplines = default(List<string>), List<string> issuerTypes = default(List<string>), List<string> periodicities = default(List<string>), List<string> purposes = default(List<string>), List<string> ratingActions = default(List<string>), List<string> researchApproaches = default(List<string>), List<string> securityTypes = default(List<string>), List<string> targetActions = default(List<string>), List<string> weightingActions = default(List<string>))
        {
            this.Headline = headline;
            this.Source = source;
            this.PrimaryIds = primaryIds;
            this.AllIds = allIds;
            this.Categories = categories;
            this.StoryDateTime = storyDateTime;
            this.Link = link;
            this.ContributorName = contributorName;
            this.ContributorId = contributorId;
            this.AnalystName = analystName;
            this.AnalystId = analystId;
            this.Pages = pages;
            this.DocumentId = documentId;
            this.ReportFoci = reportFoci;
            this.AssetClasses = assetClasses;
            this.AssetTypes = assetTypes;
            this.CoverageActions = coverageActions;
            this.CompilationIndicators = compilationIndicators;
            this.Disciplines = disciplines;
            this.IssuerTypes = issuerTypes;
            this.Periodicities = periodicities;
            this.Purposes = purposes;
            this.RatingActions = ratingActions;
            this.ResearchApproaches = researchApproaches;
            this.SecurityTypes = securityTypes;
            this.TargetActions = targetActions;
            this.WeightingActions = weightingActions;
        }

        /// <summary>
        /// Concise title or summary of the research story or document.
        /// </summary>
        /// <value>Concise title or summary of the research story or document.</value>
        [DataMember(Name = "headline", EmitDefaultValue = false)]
        public string Headline { get; set; }

        /// <summary>
        /// Provides source of the document.  • FRC – FactSet Research Connect   • AMR – Aftermarket Research
        /// </summary>
        /// <value>Provides source of the document.  • FRC – FactSet Research Connect   • AMR – Aftermarket Research</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Refers to the main company a particular document refers to.
        /// </summary>
        /// <value>Refers to the main company a particular document refers to.</value>
        [DataMember(Name = "primaryIds", EmitDefaultValue = false)]
        public List<string> PrimaryIds { get; set; }

        /// <summary>
        /// Refers to all companies mentioned in the document. This could also include the primary company id as well.
        /// </summary>
        /// <value>Refers to all companies mentioned in the document. This could also include the primary company id as well.</value>
        [DataMember(Name = "allIds", EmitDefaultValue = false)]
        public List<string> AllIds { get; set; }

        /// <summary>
        /// Provides the category of the document, list is provided by the &#x60;/meta/categories&#x60; endpoint.
        /// </summary>
        /// <value>Provides the category of the document, list is provided by the &#x60;/meta/categories&#x60; endpoint.</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Publish date and time of the latest version, in RFC 3339 format (a subset of ISO 8601), e.g., 2024-07-03T14:00:00Z (UTC).
        /// </summary>
        /// <value>Publish date and time of the latest version, in RFC 3339 format (a subset of ISO 8601), e.g., 2024-07-03T14:00:00Z (UTC).</value>
        [DataMember(Name = "storyDateTime", EmitDefaultValue = false)]
        public DateTime StoryDateTime { get; set; }

        /// <summary>
        /// The link to download the document.
        /// </summary>
        /// <value>The link to download the document.</value>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Research specific metadata providing the name of the research contributor.
        /// </summary>
        /// <value>Research specific metadata providing the name of the research contributor.</value>
        [DataMember(Name = "contributorName", EmitDefaultValue = false)]
        public string ContributorName { get; set; }

        /// <summary>
        /// Research specific metadata providing the ID of the research contributor.
        /// </summary>
        /// <value>Research specific metadata providing the ID of the research contributor.</value>
        [DataMember(Name = "contributorId", EmitDefaultValue = false)]
        public int ContributorId { get; set; }

        /// <summary>
        /// Research specific metadata providing the name of the analyst(s) who wrote the research.
        /// </summary>
        /// <value>Research specific metadata providing the name of the analyst(s) who wrote the research.</value>
        [DataMember(Name = "analystName", EmitDefaultValue = false)]
        public List<string> AnalystName { get; set; }

        /// <summary>
        /// Research specific metadata providing the ID of the analyst(s) who wrote the research.
        /// </summary>
        /// <value>Research specific metadata providing the ID of the analyst(s) who wrote the research.</value>
        [DataMember(Name = "analystId", EmitDefaultValue = false)]
        public List<int> AnalystId { get; set; }

        /// <summary>
        /// Total number of pages in the document.
        /// </summary>
        /// <value>Total number of pages in the document.</value>
        [DataMember(Name = "pages", EmitDefaultValue = false)]
        public int Pages { get; set; }

        /// <summary>
        /// Unique identifier for a document.
        /// </summary>
        /// <value>Unique identifier for a document.</value>
        [DataMember(Name = "documentId", EmitDefaultValue = false)]
        public string DocumentId { get; set; }

        /// <summary>
        /// One or more classification codes indicating the primary focus of the document.
        /// </summary>
        /// <value>One or more classification codes indicating the primary focus of the document.</value>
        [DataMember(Name = "reportFoci", EmitDefaultValue = false)]
        public List<string> ReportFoci { get; set; }

        /// <summary>
        /// One or more codes indicating asset classes covered in the document.
        /// </summary>
        /// <value>One or more codes indicating asset classes covered in the document.</value>
        [DataMember(Name = "assetClasses", EmitDefaultValue = false)]
        public List<string> AssetClasses { get; set; }

        /// <summary>
        /// One or more codes indicating asset types.
        /// </summary>
        /// <value>One or more codes indicating asset types.</value>
        [DataMember(Name = "assetTypes", EmitDefaultValue = false)]
        public List<string> AssetTypes { get; set; }

        /// <summary>
        /// One or more codes indicating coverage actions.
        /// </summary>
        /// <value>One or more codes indicating coverage actions.</value>
        [DataMember(Name = "coverageActions", EmitDefaultValue = false)]
        public List<string> CoverageActions { get; set; }

        /// <summary>
        /// An indication of whether the document contains new material or is a compilation/summary of separately published material.
        /// </summary>
        /// <value>An indication of whether the document contains new material or is a compilation/summary of separately published material.</value>
        [DataMember(Name = "compilationIndicators", EmitDefaultValue = true)]
        public bool CompilationIndicators { get; set; }

        /// <summary>
        /// One or more codes indicating the disciplines reflected in the document.
        /// </summary>
        /// <value>One or more codes indicating the disciplines reflected in the document.</value>
        [DataMember(Name = "disciplines", EmitDefaultValue = false)]
        public List<string> Disciplines { get; set; }

        /// <summary>
        /// One or more codes indicating issuer types covered in the document.
        /// </summary>
        /// <value>One or more codes indicating issuer types covered in the document.</value>
        [DataMember(Name = "issuerTypes", EmitDefaultValue = false)]
        public List<string> IssuerTypes { get; set; }

        /// <summary>
        /// One or more codes indicating the fixed time interval at which the document is published.
        /// </summary>
        /// <value>One or more codes indicating the fixed time interval at which the document is published.</value>
        [DataMember(Name = "periodicities", EmitDefaultValue = false)]
        public List<string> Periodicities { get; set; }

        /// <summary>
        /// One or more codes indicating the report purpose of the document.
        /// </summary>
        /// <value>One or more codes indicating the report purpose of the document.</value>
        [DataMember(Name = "purposes", EmitDefaultValue = false)]
        public List<string> Purposes { get; set; }

        /// <summary>
        /// One or more codes indicating rating actions discussed in the document.
        /// </summary>
        /// <value>One or more codes indicating rating actions discussed in the document.</value>
        [DataMember(Name = "ratingActions", EmitDefaultValue = false)]
        public List<string> RatingActions { get; set; }

        /// <summary>
        /// One or more codes indicating the research perspective provided in the document.
        /// </summary>
        /// <value>One or more codes indicating the research perspective provided in the document.</value>
        [DataMember(Name = "researchApproaches", EmitDefaultValue = false)]
        public List<string> ResearchApproaches { get; set; }

        /// <summary>
        /// One or more codes indicating security types.
        /// </summary>
        /// <value>One or more codes indicating security types.</value>
        [DataMember(Name = "securityTypes", EmitDefaultValue = false)]
        public List<string> SecurityTypes { get; set; }

        /// <summary>
        /// One or more codes indicating target price actions discussed in the document.
        /// </summary>
        /// <value>One or more codes indicating target price actions discussed in the document.</value>
        [DataMember(Name = "targetActions", EmitDefaultValue = false)]
        public List<string> TargetActions { get; set; }

        /// <summary>
        /// One or more codes indicating weighting actions discussed in the document.
        /// </summary>
        /// <value>One or more codes indicating weighting actions discussed in the document.</value>
        [DataMember(Name = "weightingActions", EmitDefaultValue = false)]
        public List<string> WeightingActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  PrimaryIds: ").Append(PrimaryIds).Append("\n");
            sb.Append("  AllIds: ").Append(AllIds).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  StoryDateTime: ").Append(StoryDateTime).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  ContributorName: ").Append(ContributorName).Append("\n");
            sb.Append("  ContributorId: ").Append(ContributorId).Append("\n");
            sb.Append("  AnalystName: ").Append(AnalystName).Append("\n");
            sb.Append("  AnalystId: ").Append(AnalystId).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  ReportFoci: ").Append(ReportFoci).Append("\n");
            sb.Append("  AssetClasses: ").Append(AssetClasses).Append("\n");
            sb.Append("  AssetTypes: ").Append(AssetTypes).Append("\n");
            sb.Append("  CoverageActions: ").Append(CoverageActions).Append("\n");
            sb.Append("  CompilationIndicators: ").Append(CompilationIndicators).Append("\n");
            sb.Append("  Disciplines: ").Append(Disciplines).Append("\n");
            sb.Append("  IssuerTypes: ").Append(IssuerTypes).Append("\n");
            sb.Append("  Periodicities: ").Append(Periodicities).Append("\n");
            sb.Append("  Purposes: ").Append(Purposes).Append("\n");
            sb.Append("  RatingActions: ").Append(RatingActions).Append("\n");
            sb.Append("  ResearchApproaches: ").Append(ResearchApproaches).Append("\n");
            sb.Append("  SecurityTypes: ").Append(SecurityTypes).Append("\n");
            sb.Append("  TargetActions: ").Append(TargetActions).Append("\n");
            sb.Append("  WeightingActions: ").Append(WeightingActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Document);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="input">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Headline == input.Headline ||
                    (this.Headline != null &&
                    this.Headline.Equals(input.Headline))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.PrimaryIds == input.PrimaryIds ||
                    this.PrimaryIds != null &&
                    input.PrimaryIds != null &&
                    this.PrimaryIds.SequenceEqual(input.PrimaryIds)
                ) && 
                (
                    this.AllIds == input.AllIds ||
                    this.AllIds != null &&
                    input.AllIds != null &&
                    this.AllIds.SequenceEqual(input.AllIds)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.StoryDateTime == input.StoryDateTime ||
                    (this.StoryDateTime != null &&
                    this.StoryDateTime.Equals(input.StoryDateTime))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.ContributorName == input.ContributorName ||
                    (this.ContributorName != null &&
                    this.ContributorName.Equals(input.ContributorName))
                ) && 
                (
                    this.ContributorId == input.ContributorId ||
                    this.ContributorId.Equals(input.ContributorId)
                ) && 
                (
                    this.AnalystName == input.AnalystName ||
                    this.AnalystName != null &&
                    input.AnalystName != null &&
                    this.AnalystName.SequenceEqual(input.AnalystName)
                ) && 
                (
                    this.AnalystId == input.AnalystId ||
                    this.AnalystId != null &&
                    input.AnalystId != null &&
                    this.AnalystId.SequenceEqual(input.AnalystId)
                ) && 
                (
                    this.Pages == input.Pages ||
                    this.Pages.Equals(input.Pages)
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.ReportFoci == input.ReportFoci ||
                    this.ReportFoci != null &&
                    input.ReportFoci != null &&
                    this.ReportFoci.SequenceEqual(input.ReportFoci)
                ) && 
                (
                    this.AssetClasses == input.AssetClasses ||
                    this.AssetClasses != null &&
                    input.AssetClasses != null &&
                    this.AssetClasses.SequenceEqual(input.AssetClasses)
                ) && 
                (
                    this.AssetTypes == input.AssetTypes ||
                    this.AssetTypes != null &&
                    input.AssetTypes != null &&
                    this.AssetTypes.SequenceEqual(input.AssetTypes)
                ) && 
                (
                    this.CoverageActions == input.CoverageActions ||
                    this.CoverageActions != null &&
                    input.CoverageActions != null &&
                    this.CoverageActions.SequenceEqual(input.CoverageActions)
                ) && 
                (
                    this.CompilationIndicators == input.CompilationIndicators ||
                    this.CompilationIndicators.Equals(input.CompilationIndicators)
                ) && 
                (
                    this.Disciplines == input.Disciplines ||
                    this.Disciplines != null &&
                    input.Disciplines != null &&
                    this.Disciplines.SequenceEqual(input.Disciplines)
                ) && 
                (
                    this.IssuerTypes == input.IssuerTypes ||
                    this.IssuerTypes != null &&
                    input.IssuerTypes != null &&
                    this.IssuerTypes.SequenceEqual(input.IssuerTypes)
                ) && 
                (
                    this.Periodicities == input.Periodicities ||
                    this.Periodicities != null &&
                    input.Periodicities != null &&
                    this.Periodicities.SequenceEqual(input.Periodicities)
                ) && 
                (
                    this.Purposes == input.Purposes ||
                    this.Purposes != null &&
                    input.Purposes != null &&
                    this.Purposes.SequenceEqual(input.Purposes)
                ) && 
                (
                    this.RatingActions == input.RatingActions ||
                    this.RatingActions != null &&
                    input.RatingActions != null &&
                    this.RatingActions.SequenceEqual(input.RatingActions)
                ) && 
                (
                    this.ResearchApproaches == input.ResearchApproaches ||
                    this.ResearchApproaches != null &&
                    input.ResearchApproaches != null &&
                    this.ResearchApproaches.SequenceEqual(input.ResearchApproaches)
                ) && 
                (
                    this.SecurityTypes == input.SecurityTypes ||
                    this.SecurityTypes != null &&
                    input.SecurityTypes != null &&
                    this.SecurityTypes.SequenceEqual(input.SecurityTypes)
                ) && 
                (
                    this.TargetActions == input.TargetActions ||
                    this.TargetActions != null &&
                    input.TargetActions != null &&
                    this.TargetActions.SequenceEqual(input.TargetActions)
                ) && 
                (
                    this.WeightingActions == input.WeightingActions ||
                    this.WeightingActions != null &&
                    input.WeightingActions != null &&
                    this.WeightingActions.SequenceEqual(input.WeightingActions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Headline != null)
                {
                    hashCode = (hashCode * 59) + this.Headline.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.PrimaryIds != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryIds.GetHashCode();
                }
                if (this.AllIds != null)
                {
                    hashCode = (hashCode * 59) + this.AllIds.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.StoryDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StoryDateTime.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                if (this.ContributorName != null)
                {
                    hashCode = (hashCode * 59) + this.ContributorName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContributorId.GetHashCode();
                if (this.AnalystName != null)
                {
                    hashCode = (hashCode * 59) + this.AnalystName.GetHashCode();
                }
                if (this.AnalystId != null)
                {
                    hashCode = (hashCode * 59) + this.AnalystId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Pages.GetHashCode();
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                if (this.ReportFoci != null)
                {
                    hashCode = (hashCode * 59) + this.ReportFoci.GetHashCode();
                }
                if (this.AssetClasses != null)
                {
                    hashCode = (hashCode * 59) + this.AssetClasses.GetHashCode();
                }
                if (this.AssetTypes != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTypes.GetHashCode();
                }
                if (this.CoverageActions != null)
                {
                    hashCode = (hashCode * 59) + this.CoverageActions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompilationIndicators.GetHashCode();
                if (this.Disciplines != null)
                {
                    hashCode = (hashCode * 59) + this.Disciplines.GetHashCode();
                }
                if (this.IssuerTypes != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerTypes.GetHashCode();
                }
                if (this.Periodicities != null)
                {
                    hashCode = (hashCode * 59) + this.Periodicities.GetHashCode();
                }
                if (this.Purposes != null)
                {
                    hashCode = (hashCode * 59) + this.Purposes.GetHashCode();
                }
                if (this.RatingActions != null)
                {
                    hashCode = (hashCode * 59) + this.RatingActions.GetHashCode();
                }
                if (this.ResearchApproaches != null)
                {
                    hashCode = (hashCode * 59) + this.ResearchApproaches.GetHashCode();
                }
                if (this.SecurityTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SecurityTypes.GetHashCode();
                }
                if (this.TargetActions != null)
                {
                    hashCode = (hashCode * 59) + this.TargetActions.GetHashCode();
                }
                if (this.WeightingActions != null)
                {
                    hashCode = (hashCode * 59) + this.WeightingActions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
