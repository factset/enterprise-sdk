/*
 * Investment Research API
 *
 *  The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.    
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.InvestmentResearch.Client;
using FactSet.SDK.InvestmentResearch.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.InvestmentResearch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the count of documents for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <returns>CountResponse</returns>
        CountResponse GetCount(CountRequest countRequest);

        /// <summary>
        /// Returns the count of documents for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <returns>ApiResponse of CountResponse</returns>
        ApiResponse<CountResponse> GetCountWithHttpInfo(CountRequest countRequest);
        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>InvestmentResearchResponse</returns>
        InvestmentResearchResponse GetInvestmentResearchData(SearchRequest searchRequest);

        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>ApiResponse of InvestmentResearchResponse</returns>
        ApiResponse<InvestmentResearchResponse> GetInvestmentResearchDataWithHttpInfo(SearchRequest searchRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the count of documents for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResponse</returns>
        System.Threading.Tasks.Task<CountResponse> GetCountAsync(CountRequest countRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the count of documents for specified source.
        /// </summary>
        /// <remarks>
        /// Returns the count of documents along with other response fields.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResponse>> GetCountWithHttpInfoAsync(CountRequest countRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentResearchResponse</returns>
        System.Threading.Tasks.Task<InvestmentResearchResponse> GetInvestmentResearchDataAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage.
        /// </summary>
        /// <remarks>
        /// The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentResearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvestmentResearchResponse>> GetInvestmentResearchDataWithHttpInfoAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResearchApi : IResearchApiSync, IResearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResearchApi : IResearchApi
    {
        private FactSet.SDK.InvestmentResearch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCountResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CountResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetInvestmentResearchDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InvestmentResearchResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ResearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResearchApi(string basePath)
        {
            this.Configuration = FactSet.SDK.InvestmentResearch.Client.Configuration.MergeConfigurations(
                FactSet.SDK.InvestmentResearch.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.InvestmentResearch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.InvestmentResearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResearchApi(FactSet.SDK.InvestmentResearch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.InvestmentResearch.Client.Configuration.MergeConfigurations(
                FactSet.SDK.InvestmentResearch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.InvestmentResearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ResearchApi(FactSet.SDK.InvestmentResearch.Client.ISynchronousClient client, FactSet.SDK.InvestmentResearch.Client.IAsynchronousClient asyncClient, FactSet.SDK.InvestmentResearch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.InvestmentResearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.InvestmentResearch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.InvestmentResearch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.InvestmentResearch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.InvestmentResearch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the count of documents for specified source. Returns the count of documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <returns>CountResponse</returns>
        public CountResponse GetCount(CountRequest countRequest)
        {
            var localVarResponse = GetCountWithHttpInfo(countRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the count of documents for specified source. Returns the count of documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <returns>ApiResponse of CountResponse</returns>
        public ApiResponse<CountResponse> GetCountWithHttpInfo(CountRequest countRequest)
        {
            // verify the required parameter 'countRequest' is set
            if (countRequest == null)
            {
                throw new FactSet.SDK.InvestmentResearch.Client.ApiException(400, "Missing required parameter 'countRequest' when calling ResearchApi->GetCount");
            }

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = countRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CountResponse>("/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the count of documents for specified source. Returns the count of documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResponse</returns>
        public async System.Threading.Tasks.Task<CountResponse>GetCountAsync(CountRequest countRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCountWithHttpInfoAsync(countRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the count of documents for specified source. Returns the count of documents along with other response fields.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CountResponse>> GetCountWithHttpInfoAsync(CountRequest countRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'countRequest' is set
            if (countRequest == null)
            {
                throw new FactSet.SDK.InvestmentResearch.Client.ApiException(400, "Missing required parameter 'countRequest' when calling ResearchApi->GetCount");
            }


            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = countRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCountResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CountResponse>("/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage. The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>InvestmentResearchResponse</returns>
        public InvestmentResearchResponse GetInvestmentResearchData(SearchRequest searchRequest)
        {
            var localVarResponse = GetInvestmentResearchDataWithHttpInfo(searchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage. The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>ApiResponse of InvestmentResearchResponse</returns>
        public ApiResponse<InvestmentResearchResponse> GetInvestmentResearchDataWithHttpInfo(SearchRequest searchRequest)
        {
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
            {
                throw new FactSet.SDK.InvestmentResearch.Client.ApiException(400, "Missing required parameter 'searchRequest' when calling ResearchApi->GetInvestmentResearchData");
            }

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = searchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetInvestmentResearchDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InvestmentResearchResponse>("/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvestmentResearchData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage. The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvestmentResearchResponse</returns>
        public async System.Threading.Tasks.Task<InvestmentResearchResponse>GetInvestmentResearchDataAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetInvestmentResearchDataWithHttpInfoAsync(searchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve investment research documents and related metadata within FactSet coverage. The /search endpoint returns the details about research documents, including headline, source, contributors, analyst information, categories, document links, relevant IDs and publication date.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvestmentResearchResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InvestmentResearchResponse>> GetInvestmentResearchDataWithHttpInfoAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
            {
                throw new FactSet.SDK.InvestmentResearch.Client.ApiException(400, "Missing required parameter 'searchRequest' when calling ResearchApi->GetInvestmentResearchData");
            }


            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = searchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetInvestmentResearchDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InvestmentResearchResponse>("/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvestmentResearchData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
