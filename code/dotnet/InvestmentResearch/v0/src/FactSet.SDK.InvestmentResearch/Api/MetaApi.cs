/*
 * Investment Research API
 *
 *  The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.    
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.InvestmentResearch.Client;
using FactSet.SDK.InvestmentResearch.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.InvestmentResearch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the codes indicating asset types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AssetTypesResponse</returns>
        AssetTypesResponse GetAssetTypes();

        /// <summary>
        /// Returns the codes indicating asset types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AssetTypesResponse</returns>
        ApiResponse<AssetTypesResponse> GetAssetTypesWithHttpInfo();
        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CategoriesResponse</returns>
        CategoriesResponse GetCategories();

        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CategoriesResponse</returns>
        ApiResponse<CategoriesResponse> GetCategoriesWithHttpInfo();
        /// <summary>
        /// Returns the research analysts&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <returns>ResearchAnalystResponse</returns>
        ResearchAnalystResponse GetResearchAnalyst(int contributorId);

        /// <summary>
        /// Returns the research analysts&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <returns>ApiResponse of ResearchAnalystResponse</returns>
        ApiResponse<ResearchAnalystResponse> GetResearchAnalystWithHttpInfo(int contributorId);
        /// <summary>
        /// Returns the research contributors&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResearchContributorResponse</returns>
        ResearchContributorResponse GetResearchContributor();

        /// <summary>
        /// Returns the research contributors&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResearchContributorResponse</returns>
        ApiResponse<ResearchContributorResponse> GetResearchContributorWithHttpInfo();
        /// <summary>
        /// Returns the codes indicating security types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityTypesResponse</returns>
        SecurityTypesResponse GetSecurityTypes();

        /// <summary>
        /// Returns the codes indicating security types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityTypesResponse</returns>
        ApiResponse<SecurityTypesResponse> GetSecurityTypesWithHttpInfo();
        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeZonesResponse</returns>
        TimeZonesResponse GetTimezones();

        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeZonesResponse</returns>
        ApiResponse<TimeZonesResponse> GetTimezonesWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the codes indicating asset types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetTypesResponse</returns>
        System.Threading.Tasks.Task<AssetTypesResponse> GetAssetTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the codes indicating asset types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetTypesResponse>> GetAssetTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponse</returns>
        System.Threading.Tasks.Task<CategoriesResponse> GetCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the categories.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoriesResponse>> GetCategoriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the research analysts&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResearchAnalystResponse</returns>
        System.Threading.Tasks.Task<ResearchAnalystResponse> GetResearchAnalystAsync(int contributorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the research analysts&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResearchAnalystResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResearchAnalystResponse>> GetResearchAnalystWithHttpInfoAsync(int contributorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the research contributors&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResearchContributorResponse</returns>
        System.Threading.Tasks.Task<ResearchContributorResponse> GetResearchContributorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the research contributors&#39; details.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResearchContributorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResearchContributorResponse>> GetResearchContributorWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the codes indicating security types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityTypesResponse</returns>
        System.Threading.Tasks.Task<SecurityTypesResponse> GetSecurityTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the codes indicating security types.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityTypesResponse>> GetSecurityTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeZonesResponse</returns>
        System.Threading.Tasks.Task<TimeZonesResponse> GetTimezonesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the time zones.
        /// </summary>
        /// <remarks>
        /// Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </remarks>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeZonesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeZonesResponse>> GetTimezonesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApi : IMetaApiSync, IMetaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetaApi : IMetaApi
    {
        private FactSet.SDK.InvestmentResearch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAssetTypesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(AssetTypesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoriesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CategoriesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResearchAnalystResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ResearchAnalystResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetResearchContributorResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ResearchContributorResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSecurityTypesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SecurityTypesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTimezonesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TimeZonesResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi(string basePath)
        {
            this.Configuration = FactSet.SDK.InvestmentResearch.Client.Configuration.MergeConfigurations(
                FactSet.SDK.InvestmentResearch.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.InvestmentResearch.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.InvestmentResearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetaApi(FactSet.SDK.InvestmentResearch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.InvestmentResearch.Client.Configuration.MergeConfigurations(
                FactSet.SDK.InvestmentResearch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.InvestmentResearch.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.InvestmentResearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetaApi(FactSet.SDK.InvestmentResearch.Client.ISynchronousClient client, FactSet.SDK.InvestmentResearch.Client.IAsynchronousClient asyncClient, FactSet.SDK.InvestmentResearch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.InvestmentResearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.InvestmentResearch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.InvestmentResearch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.InvestmentResearch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.InvestmentResearch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the codes indicating asset types. Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AssetTypesResponse</returns>
        public AssetTypesResponse GetAssetTypes()
        {
            var localVarResponse = GetAssetTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the codes indicating asset types. Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AssetTypesResponse</returns>
        public ApiResponse<AssetTypesResponse> GetAssetTypesWithHttpInfo()
        {
            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAssetTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            AssetTypesResponse>("/meta/asset-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the codes indicating asset types. Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetTypesResponse</returns>
        public async System.Threading.Tasks.Task<AssetTypesResponse>GetAssetTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAssetTypesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the codes indicating asset types. Retrieves and delivers a comprehensive list all codes indicating asset types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetTypesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<AssetTypesResponse>> GetAssetTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAssetTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssetTypesResponse>("/meta/asset-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CategoriesResponse</returns>
        public CategoriesResponse GetCategories()
        {
            var localVarResponse = GetCategoriesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CategoriesResponse</returns>
        public ApiResponse<CategoriesResponse> GetCategoriesWithHttpInfo()
        {
            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CategoriesResponse>("/meta/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoriesResponse</returns>
        public async System.Threading.Tasks.Task<CategoriesResponse>GetCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoriesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the categories. Retrieves and delivers a comprehensive list of all available &#x60;categories&#x60;.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoriesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CategoriesResponse>> GetCategoriesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoriesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoriesResponse>("/meta/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the research analysts&#39; details. Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <returns>ResearchAnalystResponse</returns>
        public ResearchAnalystResponse GetResearchAnalyst(int contributorId)
        {
            var localVarResponse = GetResearchAnalystWithHttpInfo(contributorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the research analysts&#39; details. Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <returns>ApiResponse of ResearchAnalystResponse</returns>
        public ApiResponse<ResearchAnalystResponse> GetResearchAnalystWithHttpInfo(int contributorId)
        {
            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.InvestmentResearch.Client.ClientUtils.ParameterToMultiMap("", "contributorId", contributorId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResearchAnalystResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResearchAnalystResponse>("/meta/research-analysts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResearchAnalyst", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the research analysts&#39; details. Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResearchAnalystResponse</returns>
        public async System.Threading.Tasks.Task<ResearchAnalystResponse>GetResearchAnalystAsync(int contributorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResearchAnalystWithHttpInfoAsync(contributorId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the research analysts&#39; details. Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contributorId">Contributor id. Use the &#x60;&#x60;&#x60;/meta/research-contributors&#x60;&#x60;&#x60; endpoint to get the list of permissioned contributors.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResearchAnalystResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResearchAnalystResponse>> GetResearchAnalystWithHttpInfoAsync(int contributorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.InvestmentResearch.Client.ClientUtils.ParameterToMultiMap("", "contributorId", contributorId));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResearchAnalystResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResearchAnalystResponse>("/meta/research-analysts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResearchAnalyst", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the research contributors&#39; details. Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResearchContributorResponse</returns>
        public ResearchContributorResponse GetResearchContributor()
        {
            var localVarResponse = GetResearchContributorWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the research contributors&#39; details. Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResearchContributorResponse</returns>
        public ApiResponse<ResearchContributorResponse> GetResearchContributorWithHttpInfo()
        {
            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetResearchContributorResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ResearchContributorResponse>("/meta/research-contributors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResearchContributor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the research contributors&#39; details. Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResearchContributorResponse</returns>
        public async System.Threading.Tasks.Task<ResearchContributorResponse>GetResearchContributorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetResearchContributorWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the research contributors&#39; details. Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResearchContributorResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ResearchContributorResponse>> GetResearchContributorWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetResearchContributorResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResearchContributorResponse>("/meta/research-contributors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResearchContributor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the codes indicating security types. Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityTypesResponse</returns>
        public SecurityTypesResponse GetSecurityTypes()
        {
            var localVarResponse = GetSecurityTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the codes indicating security types. Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityTypesResponse</returns>
        public ApiResponse<SecurityTypesResponse> GetSecurityTypesWithHttpInfo()
        {
            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSecurityTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SecurityTypesResponse>("/meta/security-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecurityTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the codes indicating security types. Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityTypesResponse</returns>
        public async System.Threading.Tasks.Task<SecurityTypesResponse>GetSecurityTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSecurityTypesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the codes indicating security types. Retrieves and delivers a comprehensive list all codes indicating security types.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityTypesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SecurityTypesResponse>> GetSecurityTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSecurityTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SecurityTypesResponse>("/meta/security-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecurityTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TimeZonesResponse</returns>
        public TimeZonesResponse GetTimezones()
        {
            var localVarResponse = GetTimezonesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TimeZonesResponse</returns>
        public ApiResponse<TimeZonesResponse> GetTimezonesWithHttpInfo()
        {
            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTimezonesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TimeZonesResponse>("/meta/time-zones", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimezones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeZonesResponse</returns>
        public async System.Threading.Tasks.Task<TimeZonesResponse>GetTimezonesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTimezonesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the time zones. Retrieves and delivers a comprehensive list of all available &#x60;time-zones&#x60;supported by API.
        /// </summary>
        /// <exception cref="FactSet.SDK.InvestmentResearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeZonesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TimeZonesResponse>> GetTimezonesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.InvestmentResearch.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.InvestmentResearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.InvestmentResearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.InvestmentResearch.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTimezonesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeZonesResponse>("/meta/time-zones", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimezones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
