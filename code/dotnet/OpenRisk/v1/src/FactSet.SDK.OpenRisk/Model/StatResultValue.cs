/*
 * Open:Risk API
 *
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenRisk.Client.OpenAPIDateConverter;
using System.Reflection;

namespace FactSet.SDK.OpenRisk.Model
{
    /// <summary>
    /// Floating point double(s) in a dimension corresponding to the calculation-level. Data is guaranteed to be present and non-empty if the HTTP status code is 200 Success
    /// </summary>
    [JsonConverter(typeof(StatResultValueJsonConverter))]
    [DataContract(Name = "StatResultValue")]
    public partial class StatResultValue : AbstractOpenAPISchema, IEquatable<StatResultValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatResultValue" /> class.
        /// </summary>
        public StatResultValue()
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatResultValue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of double?.</param>
        public StatResultValue(double? actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatResultValue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of List&lt;double?&gt;.</param>
        public StatResultValue(List<double?> actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatResultValue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of List&lt;List&lt;double?&gt;&gt;.</param>
        public StatResultValue(List<List<double?>> actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatResultValue" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StatResultValueSparseMatrix.</param>
        public StatResultValue(StatResultValueSparseMatrix actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value is double?)
                {
                    this._actualInstance = value;
                }
                else if (value is List<double?>)
                {
                    this._actualInstance = value;
                }
                else if (value is List<List<double?>>)
                {
                    this._actualInstance = value;
                }
                else if (value is StatResultValueSparseMatrix)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: double?, List<double?>, List<List<double?>>, StatResultValueSparseMatrix");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `double?`. If the actual instance is not `double?`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of double?</returns>
        public double? GetDouble()
        {
            return (double?)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `List&lt;double?&gt;`. If the actual instance is not `List&lt;double?&gt;`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of List&lt;double?&gt;</returns>
        public List<double?> GetListDouble()
        {
            return (List<double?>)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `List&lt;List&lt;double?&gt;&gt;`. If the actual instance is not `List&lt;List&lt;double?&gt;&gt;`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of List&lt;List&lt;double?&gt;&gt;</returns>
        public List<List<double?>> GetListListDouble()
        {
            return (List<List<double?>>)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StatResultValueSparseMatrix`. If the actual instance is not `StatResultValueSparseMatrix`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StatResultValueSparseMatrix</returns>
        public StatResultValueSparseMatrix GetStatResultValueSparseMatrix()
        {
            return (StatResultValueSparseMatrix)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatResultValue {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, StatResultValue.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of StatResultValue
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of StatResultValue</returns>
        public static StatResultValue FromJson(string jsonString)
        {
            StatResultValue newStatResultValue = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newStatResultValue;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                var parsedValue = JsonConvert.DeserializeObject(jsonString);
                if (parsedValue is double?)
                {
                    newStatResultValue = new StatResultValue((double?)parsedValue);
                    matchedTypes.Add("double?");
                    match++;
                }
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into double?: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var parsedValue = JsonConvert.DeserializeObject<List<double?>>(jsonString, StatResultValue.SerializerSettings);
                newStatResultValue = new StatResultValue(parsedValue);
                matchedTypes.Add("List<double?>");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into List<double?>: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var parsedValue = JsonConvert.DeserializeObject<List<List<double?>>>(jsonString, StatResultValue.SerializerSettings);
                newStatResultValue = new StatResultValue(parsedValue);
                matchedTypes.Add("List<List<double?>>");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into List<List<double?>>: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(StatResultValueSparseMatrix).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<StatResultValueSparseMatrix>(
                    jsonString,
                    hasAdditionalProperties ? StatResultValue.AdditionalPropertiesSerializerSettings : StatResultValue.SerializerSettings
                );
                newStatResultValue = new StatResultValue(parsedValue);
                matchedTypes.Add("StatResultValueSparseMatrix");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StatResultValueSparseMatrix: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newStatResultValue;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatResultValue);
        }

        /// <summary>
        /// Returns true if StatResultValue instances are equal
        /// </summary>
        /// <param name="input">Instance of StatResultValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatResultValue input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for StatResultValue
    /// </summary>
    public class StatResultValueJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(StatResultValue).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return StatResultValue.FromJson(JToken.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
