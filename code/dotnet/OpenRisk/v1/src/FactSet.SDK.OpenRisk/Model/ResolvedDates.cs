/*
 * Open:Risk API
 *
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenRisk.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenRisk.Model
{
    /// <summary>
    /// **(since 1.11.0)** Absolute actual dates used adjusted according to calendar and lagging
    /// </summary>
    [DataContract(Name = "ResolvedDates")]
    public partial class ResolvedDates : IEquatable<ResolvedDates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolvedDates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResolvedDates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolvedDates" /> class.
        /// </summary>
        /// <param name="universeDate">**(since 1.12.0)**  Date format YYYY-MM-DD. (required).</param>
        /// <param name="covarianceDate">**(since 1.12.0)**  Date format YYYY-MM-DD. (required).</param>
        /// <param name="ssrDate">**(since 1.12.0)**  Date format YYYY-MM-DD. (required).</param>
        public ResolvedDates(DateTime universeDate, DateTime covarianceDate, DateTime ssrDate)
        {
            this.UniverseDate = universeDate;
            this.CovarianceDate = covarianceDate;
            this.SsrDate = ssrDate;
        }

        /// <summary>
        /// **(since 1.12.0)**  Date format YYYY-MM-DD.
        /// </summary>
        /// <value>**(since 1.12.0)**  Date format YYYY-MM-DD.</value>
        [DataMember(Name = "universeDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime UniverseDate { get; set; }

        /// <summary>
        /// **(since 1.12.0)**  Date format YYYY-MM-DD.
        /// </summary>
        /// <value>**(since 1.12.0)**  Date format YYYY-MM-DD.</value>
        [DataMember(Name = "covarianceDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime CovarianceDate { get; set; }

        /// <summary>
        /// **(since 1.12.0)**  Date format YYYY-MM-DD.
        /// </summary>
        /// <value>**(since 1.12.0)**  Date format YYYY-MM-DD.</value>
        [DataMember(Name = "ssrDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SsrDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResolvedDates {\n");
            sb.Append("  UniverseDate: ").Append(UniverseDate).Append("\n");
            sb.Append("  CovarianceDate: ").Append(CovarianceDate).Append("\n");
            sb.Append("  SsrDate: ").Append(SsrDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResolvedDates);
        }

        /// <summary>
        /// Returns true if ResolvedDates instances are equal
        /// </summary>
        /// <param name="input">Instance of ResolvedDates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResolvedDates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UniverseDate == input.UniverseDate ||
                    (this.UniverseDate != null &&
                    this.UniverseDate.Equals(input.UniverseDate))
                ) && 
                (
                    this.CovarianceDate == input.CovarianceDate ||
                    (this.CovarianceDate != null &&
                    this.CovarianceDate.Equals(input.CovarianceDate))
                ) && 
                (
                    this.SsrDate == input.SsrDate ||
                    (this.SsrDate != null &&
                    this.SsrDate.Equals(input.SsrDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UniverseDate != null)
                {
                    hashCode = (hashCode * 59) + this.UniverseDate.GetHashCode();
                }
                if (this.CovarianceDate != null)
                {
                    hashCode = (hashCode * 59) + this.CovarianceDate.GetHashCode();
                }
                if (this.SsrDate != null)
                {
                    hashCode = (hashCode * 59) + this.SsrDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
