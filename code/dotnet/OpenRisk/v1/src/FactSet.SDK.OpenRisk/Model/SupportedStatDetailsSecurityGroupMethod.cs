/*
 * Open:Risk API
 *
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenRisk.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenRisk.Model
{
    /// <summary>
    /// If present, describes the calculations specified in common by all of the &#39;derived&#39; stats across all supported &#39;levels&#39; containing &#39;SecurityGroup&#39; in the name. If not present, security group calculations are not available for these stats.
    /// </summary>
    [DataContract(Name = "SupportedStatDetails_securityGroupMethod")]
    public partial class SupportedStatDetailsSecurityGroupMethod : IEquatable<SupportedStatDetailsSecurityGroupMethod>, IValidatableObject
    {
        /// <summary>
        /// Indicates the algorithm used to compute each security group&#39;s value from the  risk statistic values of its member securities. &#39;Sum&#39; takes the sum of all members&#39; values. The weighted average methods indicate &#39;weights&#39; and &#39;weighting&#39;. &#39;WeightedAverage&#39; weights each group&#39;s members&#39; statistic values and takes their average. &#39;WeightedNormalizedAverage&#39; normalizes the corresponding weights belonging within each group, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;WeightedNormalizedAverageFill&#39; normalizes the corresponding weights belonging within each group or applies equal weighting for groups with zero net weight, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;StatSpecific&#39; indicates unique calculations for the supported security group levels (inquire for more information).
        /// </summary>
        /// <value>Indicates the algorithm used to compute each security group&#39;s value from the  risk statistic values of its member securities. &#39;Sum&#39; takes the sum of all members&#39; values. The weighted average methods indicate &#39;weights&#39; and &#39;weighting&#39;. &#39;WeightedAverage&#39; weights each group&#39;s members&#39; statistic values and takes their average. &#39;WeightedNormalizedAverage&#39; normalizes the corresponding weights belonging within each group, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;WeightedNormalizedAverageFill&#39; normalizes the corresponding weights belonging within each group or applies equal weighting for groups with zero net weight, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;StatSpecific&#39; indicates unique calculations for the supported security group levels (inquire for more information).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum StatSpecific for value: StatSpecific
            /// </summary>
            [EnumMember(Value = "StatSpecific")]
            StatSpecific = 1,

            /// <summary>
            /// Enum Sum for value: Sum
            /// </summary>
            [EnumMember(Value = "Sum")]
            Sum = 2,

            /// <summary>
            /// Enum WeightedAverage for value: WeightedAverage
            /// </summary>
            [EnumMember(Value = "WeightedAverage")]
            WeightedAverage = 3,

            /// <summary>
            /// Enum WeightedNormalizedAverage for value: WeightedNormalizedAverage
            /// </summary>
            [EnumMember(Value = "WeightedNormalizedAverage")]
            WeightedNormalizedAverage = 4,

            /// <summary>
            /// Enum WeightedNormalizedAverageFill for value: WeightedNormalizedAverageFill
            /// </summary>
            [EnumMember(Value = "WeightedNormalizedAverageFill")]
            WeightedNormalizedAverageFill = 5

        }


        /// <summary>
        /// Indicates the algorithm used to compute each security group&#39;s value from the  risk statistic values of its member securities. &#39;Sum&#39; takes the sum of all members&#39; values. The weighted average methods indicate &#39;weights&#39; and &#39;weighting&#39;. &#39;WeightedAverage&#39; weights each group&#39;s members&#39; statistic values and takes their average. &#39;WeightedNormalizedAverage&#39; normalizes the corresponding weights belonging within each group, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;WeightedNormalizedAverageFill&#39; normalizes the corresponding weights belonging within each group or applies equal weighting for groups with zero net weight, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;StatSpecific&#39; indicates unique calculations for the supported security group levels (inquire for more information).
        /// </summary>
        /// <value>Indicates the algorithm used to compute each security group&#39;s value from the  risk statistic values of its member securities. &#39;Sum&#39; takes the sum of all members&#39; values. The weighted average methods indicate &#39;weights&#39; and &#39;weighting&#39;. &#39;WeightedAverage&#39; weights each group&#39;s members&#39; statistic values and takes their average. &#39;WeightedNormalizedAverage&#39; normalizes the corresponding weights belonging within each group, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;WeightedNormalizedAverageFill&#39; normalizes the corresponding weights belonging within each group or applies equal weighting for groups with zero net weight, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;StatSpecific&#39; indicates unique calculations for the supported security group levels (inquire for more information).</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public NameEnum Name { get; set; }
        /// <summary>
        /// Indicates the weights stat used to weight the security groups, applicable to weighted average group methods only.
        /// </summary>
        /// <value>Indicates the weights stat used to weight the security groups, applicable to weighted average group methods only.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeightsEnum
        {
            /// <summary>
            /// Enum PortfolioWeights for value: PortfolioWeights
            /// </summary>
            [EnumMember(Value = "PortfolioWeights")]
            PortfolioWeights = 1,

            /// <summary>
            /// Enum BenchmarkWeights for value: BenchmarkWeights
            /// </summary>
            [EnumMember(Value = "BenchmarkWeights")]
            BenchmarkWeights = 2,

            /// <summary>
            /// Enum ActiveWeights for value: ActiveWeights
            /// </summary>
            [EnumMember(Value = "ActiveWeights")]
            ActiveWeights = 3,

            /// <summary>
            /// Enum MarketWeights for value: MarketWeights
            /// </summary>
            [EnumMember(Value = "MarketWeights")]
            MarketWeights = 4

        }


        /// <summary>
        /// Indicates the weights stat used to weight the security groups, applicable to weighted average group methods only.
        /// </summary>
        /// <value>Indicates the weights stat used to weight the security groups, applicable to weighted average group methods only.</value>
        [DataMember(Name = "weights", EmitDefaultValue = false)]
        public WeightsEnum? Weights { get; set; }
        /// <summary>
        /// Indicates the weighting method used when allocating a net-weight position of risk statistics to multiple lots. This is relevant when a portfolio contains multiple lots with different signs such as long/short. For example, the case where a net-weight position is a positive risk contributor and a portfolio contains long and short positions. If this is &#39;AbsoluteValue&#39;, both long/short positions will have positive risk contribution, while &#39;ActualValue&#39; assigns positive risk contribution to a long position and negative risk contribution to a short position. Applicable to weighted average group methods only.
        /// </summary>
        /// <value>Indicates the weighting method used when allocating a net-weight position of risk statistics to multiple lots. This is relevant when a portfolio contains multiple lots with different signs such as long/short. For example, the case where a net-weight position is a positive risk contributor and a portfolio contains long and short positions. If this is &#39;AbsoluteValue&#39;, both long/short positions will have positive risk contribution, while &#39;ActualValue&#39; assigns positive risk contribution to a long position and negative risk contribution to a short position. Applicable to weighted average group methods only.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeightingEnum
        {
            /// <summary>
            /// Enum AbsoluteValue for value: AbsoluteValue
            /// </summary>
            [EnumMember(Value = "AbsoluteValue")]
            AbsoluteValue = 1,

            /// <summary>
            /// Enum ActualValue for value: ActualValue
            /// </summary>
            [EnumMember(Value = "ActualValue")]
            ActualValue = 2

        }


        /// <summary>
        /// Indicates the weighting method used when allocating a net-weight position of risk statistics to multiple lots. This is relevant when a portfolio contains multiple lots with different signs such as long/short. For example, the case where a net-weight position is a positive risk contributor and a portfolio contains long and short positions. If this is &#39;AbsoluteValue&#39;, both long/short positions will have positive risk contribution, while &#39;ActualValue&#39; assigns positive risk contribution to a long position and negative risk contribution to a short position. Applicable to weighted average group methods only.
        /// </summary>
        /// <value>Indicates the weighting method used when allocating a net-weight position of risk statistics to multiple lots. This is relevant when a portfolio contains multiple lots with different signs such as long/short. For example, the case where a net-weight position is a positive risk contributor and a portfolio contains long and short positions. If this is &#39;AbsoluteValue&#39;, both long/short positions will have positive risk contribution, while &#39;ActualValue&#39; assigns positive risk contribution to a long position and negative risk contribution to a short position. Applicable to weighted average group methods only.</value>
        [DataMember(Name = "weighting", EmitDefaultValue = false)]
        public WeightingEnum? Weighting { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedStatDetailsSecurityGroupMethod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupportedStatDetailsSecurityGroupMethod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedStatDetailsSecurityGroupMethod" /> class.
        /// </summary>
        /// <param name="name">Indicates the algorithm used to compute each security group&#39;s value from the  risk statistic values of its member securities. &#39;Sum&#39; takes the sum of all members&#39; values. The weighted average methods indicate &#39;weights&#39; and &#39;weighting&#39;. &#39;WeightedAverage&#39; weights each group&#39;s members&#39; statistic values and takes their average. &#39;WeightedNormalizedAverage&#39; normalizes the corresponding weights belonging within each group, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;WeightedNormalizedAverageFill&#39; normalizes the corresponding weights belonging within each group or applies equal weighting for groups with zero net weight, weights each group&#39;s members&#39; statistic values, then takes the average. &#39;StatSpecific&#39; indicates unique calculations for the supported security group levels (inquire for more information). (required).</param>
        /// <param name="weights">Indicates the weights stat used to weight the security groups, applicable to weighted average group methods only..</param>
        /// <param name="weighting">Indicates the weighting method used when allocating a net-weight position of risk statistics to multiple lots. This is relevant when a portfolio contains multiple lots with different signs such as long/short. For example, the case where a net-weight position is a positive risk contributor and a portfolio contains long and short positions. If this is &#39;AbsoluteValue&#39;, both long/short positions will have positive risk contribution, while &#39;ActualValue&#39; assigns positive risk contribution to a long position and negative risk contribution to a short position. Applicable to weighted average group methods only..</param>
        /// <param name="sqrt">Indicates whether the square root of each security group&#39;s value is taken (or not) as the final step of the calculation after the indicated algorithm to produce the result. (required).</param>
        public SupportedStatDetailsSecurityGroupMethod(NameEnum name, bool sqrt,WeightsEnum? weights = default(WeightsEnum?), WeightingEnum? weighting = default(WeightingEnum?))
        {
            this.Name = name;
            this.Sqrt = sqrt;
            this.Weights = weights;
            this.Weighting = weighting;
        }

        /// <summary>
        /// Indicates whether the square root of each security group&#39;s value is taken (or not) as the final step of the calculation after the indicated algorithm to produce the result.
        /// </summary>
        /// <value>Indicates whether the square root of each security group&#39;s value is taken (or not) as the final step of the calculation after the indicated algorithm to produce the result.</value>
        [DataMember(Name = "sqrt", IsRequired = true, EmitDefaultValue = true)]
        public bool Sqrt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupportedStatDetailsSecurityGroupMethod {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Weights: ").Append(Weights).Append("\n");
            sb.Append("  Weighting: ").Append(Weighting).Append("\n");
            sb.Append("  Sqrt: ").Append(Sqrt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportedStatDetailsSecurityGroupMethod);
        }

        /// <summary>
        /// Returns true if SupportedStatDetailsSecurityGroupMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportedStatDetailsSecurityGroupMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportedStatDetailsSecurityGroupMethod input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    this.Name.Equals(input.Name)
                ) && 
                (
                    this.Weights == input.Weights ||
                    this.Weights.Equals(input.Weights)
                ) && 
                (
                    this.Weighting == input.Weighting ||
                    this.Weighting.Equals(input.Weighting)
                ) && 
                (
                    this.Sqrt == input.Sqrt ||
                    this.Sqrt.Equals(input.Sqrt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Name.GetHashCode();
                hashCode = (hashCode * 59) + this.Weights.GetHashCode();
                hashCode = (hashCode * 59) + this.Weighting.GetHashCode();
                hashCode = (hashCode * 59) + this.Sqrt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
