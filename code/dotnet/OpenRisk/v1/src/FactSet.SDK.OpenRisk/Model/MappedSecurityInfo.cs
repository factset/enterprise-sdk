/*
 * Open:Risk API
 *
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenRisk.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenRisk.Model
{
    /// <summary>
    /// Risk model covered security resolution
    /// </summary>
    [DataContract(Name = "MappedSecurityInfo")]
    public partial class MappedSecurityInfo : IEquatable<MappedSecurityInfo>, IValidatableObject
    {
        /// <summary>
        /// **(since 1.19.0)** Security asset classification according to the risk model, if available and determinable
        /// </summary>
        /// <value>**(since 1.19.0)** Security asset classification according to the risk model, if available and determinable</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModelClassEnum
        {
            /// <summary>
            /// Enum AbsBond for value: AbsBond
            /// </summary>
            [EnumMember(Value = "AbsBond")]
            AbsBond = 1,

            /// <summary>
            /// Enum AbsCmbsBond for value: AbsCmbsBond
            /// </summary>
            [EnumMember(Value = "AbsCmbsBond")]
            AbsCmbsBond = 2,

            /// <summary>
            /// Enum AgencyBond for value: AgencyBond
            /// </summary>
            [EnumMember(Value = "AgencyBond")]
            AgencyBond = 3,

            /// <summary>
            /// Enum AgencyMunicipalMeanBond for value: AgencyMunicipalMeanBond
            /// </summary>
            [EnumMember(Value = "AgencyMunicipalMeanBond")]
            AgencyMunicipalMeanBond = 4,

            /// <summary>
            /// Enum AllOtherBond for value: AllOtherBond
            /// </summary>
            [EnumMember(Value = "AllOtherBond")]
            AllOtherBond = 5,

            /// <summary>
            /// Enum AppendFile for value: AppendFile
            /// </summary>
            [EnumMember(Value = "AppendFile")]
            AppendFile = 6,

            /// <summary>
            /// Enum BankLoan for value: BankLoan
            /// </summary>
            [EnumMember(Value = "BankLoan")]
            BankLoan = 7,

            /// <summary>
            /// Enum BondOption for value: BondOption
            /// </summary>
            [EnumMember(Value = "BondOption")]
            BondOption = 8,

            /// <summary>
            /// Enum BrazilianLft for value: BrazilianLft
            /// </summary>
            [EnumMember(Value = "BrazilianLft")]
            BrazilianLft = 9,

            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 10,

            /// <summary>
            /// Enum CashForward for value: CashForward
            /// </summary>
            [EnumMember(Value = "CashForward")]
            CashForward = 11,

            /// <summary>
            /// Enum CmbsBond for value: CmbsBond
            /// </summary>
            [EnumMember(Value = "CmbsBond")]
            CmbsBond = 12,

            /// <summary>
            /// Enum Commodity for value: Commodity
            /// </summary>
            [EnumMember(Value = "Commodity")]
            Commodity = 13,

            /// <summary>
            /// Enum CommodityFuture for value: CommodityFuture
            /// </summary>
            [EnumMember(Value = "CommodityFuture")]
            CommodityFuture = 14,

            /// <summary>
            /// Enum CommodityFutureOption for value: CommodityFutureOption
            /// </summary>
            [EnumMember(Value = "CommodityFutureOption")]
            CommodityFutureOption = 15,

            /// <summary>
            /// Enum CompositeAsset for value: CompositeAsset
            /// </summary>
            [EnumMember(Value = "CompositeAsset")]
            CompositeAsset = 16,

            /// <summary>
            /// Enum ContractForDifference for value: ContractForDifference
            /// </summary>
            [EnumMember(Value = "ContractForDifference")]
            ContractForDifference = 17,

            /// <summary>
            /// Enum ConvertibleBond for value: ConvertibleBond
            /// </summary>
            [EnumMember(Value = "ConvertibleBond")]
            ConvertibleBond = 18,

            /// <summary>
            /// Enum CorporateBond for value: CorporateBond
            /// </summary>
            [EnumMember(Value = "CorporateBond")]
            CorporateBond = 19,

            /// <summary>
            /// Enum CreditDefaultSwap for value: CreditDefaultSwap
            /// </summary>
            [EnumMember(Value = "CreditDefaultSwap")]
            CreditDefaultSwap = 20,

            /// <summary>
            /// Enum CreditDefaultSwaption for value: CreditDefaultSwaption
            /// </summary>
            [EnumMember(Value = "CreditDefaultSwaption")]
            CreditDefaultSwaption = 21,

            /// <summary>
            /// Enum CreditDefaultSwapIndex for value: CreditDefaultSwapIndex
            /// </summary>
            [EnumMember(Value = "CreditDefaultSwapIndex")]
            CreditDefaultSwapIndex = 22,

            /// <summary>
            /// Enum CurrencyFuture for value: CurrencyFuture
            /// </summary>
            [EnumMember(Value = "CurrencyFuture")]
            CurrencyFuture = 23,

            /// <summary>
            /// Enum CurrencyOption for value: CurrencyOption
            /// </summary>
            [EnumMember(Value = "CurrencyOption")]
            CurrencyOption = 24,

            /// <summary>
            /// Enum DanishMbsBond for value: DanishMbsBond
            /// </summary>
            [EnumMember(Value = "DanishMbsBond")]
            DanishMbsBond = 25,

            /// <summary>
            /// Enum Equity for value: Equity
            /// </summary>
            [EnumMember(Value = "Equity")]
            Equity = 26,

            /// <summary>
            /// Enum EquityDerivative for value: EquityDerivative
            /// </summary>
            [EnumMember(Value = "EquityDerivative")]
            EquityDerivative = 27,

            /// <summary>
            /// Enum EquityIndexFuture for value: EquityIndexFuture
            /// </summary>
            [EnumMember(Value = "EquityIndexFuture")]
            EquityIndexFuture = 28,

            /// <summary>
            /// Enum EquityOption for value: EquityOption
            /// </summary>
            [EnumMember(Value = "EquityOption")]
            EquityOption = 29,

            /// <summary>
            /// Enum EuroSovereignBond for value: EuroSovereignBond
            /// </summary>
            [EnumMember(Value = "EuroSovereignBond")]
            EuroSovereignBond = 30,

            /// <summary>
            /// Enum EuroSovereignGovtBondFuture for value: EuroSovereignGovtBondFuture
            /// </summary>
            [EnumMember(Value = "EuroSovereignGovtBondFuture")]
            EuroSovereignGovtBondFuture = 31,

            /// <summary>
            /// Enum FixedIncome for value: FixedIncome
            /// </summary>
            [EnumMember(Value = "FixedIncome")]
            FixedIncome = 32,

            /// <summary>
            /// Enum FixedIncomeSecurity for value: FixedIncomeSecurity
            /// </summary>
            [EnumMember(Value = "FixedIncomeSecurity")]
            FixedIncomeSecurity = 33,

            /// <summary>
            /// Enum FixedIncomeSecurityNoSpread for value: FixedIncomeSecurityNoSpread
            /// </summary>
            [EnumMember(Value = "FixedIncomeSecurityNoSpread")]
            FixedIncomeSecurityNoSpread = 34,

            /// <summary>
            /// Enum FixedIncomeSecurityWithSpread for value: FixedIncomeSecurityWithSpread
            /// </summary>
            [EnumMember(Value = "FixedIncomeSecurityWithSpread")]
            FixedIncomeSecurityWithSpread = 35,

            /// <summary>
            /// Enum GovernmentBondFuture for value: GovernmentBondFuture
            /// </summary>
            [EnumMember(Value = "GovernmentBondFuture")]
            GovernmentBondFuture = 36,

            /// <summary>
            /// Enum GovernmentBondFutureOption for value: GovernmentBondFutureOption
            /// </summary>
            [EnumMember(Value = "GovernmentBondFutureOption")]
            GovernmentBondFutureOption = 37,

            /// <summary>
            /// Enum GovernmentBondNoSpread for value: GovernmentBondNoSpread
            /// </summary>
            [EnumMember(Value = "GovernmentBondNoSpread")]
            GovernmentBondNoSpread = 38,

            /// <summary>
            /// Enum HardCurrencyBond for value: HardCurrencyBond
            /// </summary>
            [EnumMember(Value = "HardCurrencyBond")]
            HardCurrencyBond = 39,

            /// <summary>
            /// Enum HardCurrencyBondProxy for value: HardCurrencyBondProxy
            /// </summary>
            [EnumMember(Value = "HardCurrencyBondProxy")]
            HardCurrencyBondProxy = 40,

            /// <summary>
            /// Enum IndexProxyBond for value: IndexProxyBond
            /// </summary>
            [EnumMember(Value = "IndexProxyBond")]
            IndexProxyBond = 41,

            /// <summary>
            /// Enum InterestRateCollar for value: InterestRateCollar
            /// </summary>
            [EnumMember(Value = "InterestRateCollar")]
            InterestRateCollar = 42,

            /// <summary>
            /// Enum InterestRateFuture for value: InterestRateFuture
            /// </summary>
            [EnumMember(Value = "InterestRateFuture")]
            InterestRateFuture = 43,

            /// <summary>
            /// Enum InterestRateOption for value: InterestRateOption
            /// </summary>
            [EnumMember(Value = "InterestRateOption")]
            InterestRateOption = 44,

            /// <summary>
            /// Enum InterestRateSwap for value: InterestRateSwap
            /// </summary>
            [EnumMember(Value = "InterestRateSwap")]
            InterestRateSwap = 45,

            /// <summary>
            /// Enum InterestRateCapFloor for value: InterestRateCapFloor
            /// </summary>
            [EnumMember(Value = "InterestRateCapFloor")]
            InterestRateCapFloor = 46,

            /// <summary>
            /// Enum JapaneseMbsBond for value: JapaneseMbsBond
            /// </summary>
            [EnumMember(Value = "JapaneseMbsBond")]
            JapaneseMbsBond = 47,

            /// <summary>
            /// Enum Liability for value: Liability
            /// </summary>
            [EnumMember(Value = "Liability")]
            Liability = 48,

            /// <summary>
            /// Enum MbsBond for value: MbsBond
            /// </summary>
            [EnumMember(Value = "MbsBond")]
            MbsBond = 49,

            /// <summary>
            /// Enum MoneyMarket for value: MoneyMarket
            /// </summary>
            [EnumMember(Value = "MoneyMarket")]
            MoneyMarket = 50,

            /// <summary>
            /// Enum MunicipalUsaBond for value: MunicipalUsaBond
            /// </summary>
            [EnumMember(Value = "MunicipalUsaBond")]
            MunicipalUsaBond = 51,

            /// <summary>
            /// Enum OffsetCash for value: OffsetCash
            /// </summary>
            [EnumMember(Value = "OffsetCash")]
            OffsetCash = 52,

            /// <summary>
            /// Enum PrivateCorporateBondIssuer for value: PrivateCorporateBondIssuer
            /// </summary>
            [EnumMember(Value = "PrivateCorporateBondIssuer")]
            PrivateCorporateBondIssuer = 53,

            /// <summary>
            /// Enum PrivateEuroSovereignBondIssuer for value: PrivateEuroSovereignBondIssuer
            /// </summary>
            [EnumMember(Value = "PrivateEuroSovereignBondIssuer")]
            PrivateEuroSovereignBondIssuer = 54,

            /// <summary>
            /// Enum PrivatePrimarySecurity for value: PrivatePrimarySecurity
            /// </summary>
            [EnumMember(Value = "PrivatePrimarySecurity")]
            PrivatePrimarySecurity = 55,

            /// <summary>
            /// Enum RealGovernmentBondNoSpread for value: RealGovernmentBondNoSpread
            /// </summary>
            [EnumMember(Value = "RealGovernmentBondNoSpread")]
            RealGovernmentBondNoSpread = 56,

            /// <summary>
            /// Enum ReturnsBasedAsset for value: ReturnsBasedAsset
            /// </summary>
            [EnumMember(Value = "ReturnsBasedAsset")]
            ReturnsBasedAsset = 57,

            /// <summary>
            /// Enum SupraNationalAgencyMeanBond for value: SupraNationalAgencyMeanBond
            /// </summary>
            [EnumMember(Value = "SupraNationalAgencyMeanBond")]
            SupraNationalAgencyMeanBond = 58,

            /// <summary>
            /// Enum Swaption for value: Swaption
            /// </summary>
            [EnumMember(Value = "Swaption")]
            Swaption = 59,

            /// <summary>
            /// Enum TipsBond for value: TipsBond
            /// </summary>
            [EnumMember(Value = "TipsBond")]
            TipsBond = 60,

            /// <summary>
            /// Enum TipsMeanBond for value: TipsMeanBond
            /// </summary>
            [EnumMember(Value = "TipsMeanBond")]
            TipsMeanBond = 61,

            /// <summary>
            /// Enum TipsSwap for value: TipsSwap
            /// </summary>
            [EnumMember(Value = "TipsSwap")]
            TipsSwap = 62,

            /// <summary>
            /// Enum TotalReturnSwap for value: TotalReturnSwap
            /// </summary>
            [EnumMember(Value = "TotalReturnSwap")]
            TotalReturnSwap = 63,

            /// <summary>
            /// Enum Unassigned for value: Unassigned
            /// </summary>
            [EnumMember(Value = "Unassigned")]
            Unassigned = 64,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 65,

            /// <summary>
            /// Enum VixFuture for value: VixFuture
            /// </summary>
            [EnumMember(Value = "VixFuture")]
            VixFuture = 66,

            /// <summary>
            /// Enum VixOption for value: VixOption
            /// </summary>
            [EnumMember(Value = "VixOption")]
            VixOption = 67,

            /// <summary>
            /// Enum VixUnderlyingSecurity for value: VixUnderlyingSecurity
            /// </summary>
            [EnumMember(Value = "VixUnderlyingSecurity")]
            VixUnderlyingSecurity = 68,

            /// <summary>
            /// Enum ZeroExposureSecurity for value: ZeroExposureSecurity
            /// </summary>
            [EnumMember(Value = "ZeroExposureSecurity")]
            ZeroExposureSecurity = 69

        }


        /// <summary>
        /// **(since 1.19.0)** Security asset classification according to the risk model, if available and determinable
        /// </summary>
        /// <value>**(since 1.19.0)** Security asset classification according to the risk model, if available and determinable</value>
        [DataMember(Name = "modelClass", IsRequired = true, EmitDefaultValue = false)]
        public ModelClassEnum ModelClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MappedSecurityInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MappedSecurityInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MappedSecurityInfo" /> class.
        /// </summary>
        /// <param name="covered">Coverage flag. The value will always be true to indicate the security is covered. (required).</param>
        /// <param name="id">Risk model canonical security identifier alias if directly covered in the model (required).</param>
        /// <param name="modelClass">**(since 1.19.0)** Security asset classification according to the risk model, if available and determinable (required).</param>
        public MappedSecurityInfo(bool covered, string id, ModelClassEnum modelClass)
        {
            this.Covered = covered;
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for MappedSecurityInfo and cannot be null");
            }
            this.Id = id;
            this.ModelClass = modelClass;
        }

        /// <summary>
        /// Coverage flag. The value will always be true to indicate the security is covered.
        /// </summary>
        /// <value>Coverage flag. The value will always be true to indicate the security is covered.</value>
        [DataMember(Name = "covered", IsRequired = true, EmitDefaultValue = true)]
        public bool Covered { get; set; }

        /// <summary>
        /// Risk model canonical security identifier alias if directly covered in the model
        /// </summary>
        /// <value>Risk model canonical security identifier alias if directly covered in the model</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MappedSecurityInfo {\n");
            sb.Append("  Covered: ").Append(Covered).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModelClass: ").Append(ModelClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MappedSecurityInfo);
        }

        /// <summary>
        /// Returns true if MappedSecurityInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MappedSecurityInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappedSecurityInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Covered == input.Covered ||
                    this.Covered.Equals(input.Covered)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ModelClass == input.ModelClass ||
                    this.ModelClass.Equals(input.ModelClass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Covered.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModelClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            yield break;
        }
    }

}
