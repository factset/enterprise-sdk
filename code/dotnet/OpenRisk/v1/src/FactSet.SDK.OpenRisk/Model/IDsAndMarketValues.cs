/*
 * Open:Risk API
 *
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenRisk.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenRisk.Model
{
    /// <summary>
    /// Security IDs and market values; the arrays must have the same number of items. Public security IDs such as SEDOL, CUSIP, ISIN, and Ticker are supported. If proprietary IDs are provided, they need to be mapped via composite assets. Market values are used to calculate weights and do not have to be normalized, but need to be denominated in the single same currency ISO.
    /// </summary>
    [DataContract(Name = "IDsAndMarketValues")]
    public partial class IDsAndMarketValues : IEquatable<IDsAndMarketValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IDsAndMarketValues" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IDsAndMarketValues() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IDsAndMarketValues" /> class.
        /// </summary>
        /// <param name="ids">Security identifiers (required).</param>
        /// <param name="marketValues">Security market values (required).</param>
        public IDsAndMarketValues(List<string> ids, List<double> marketValues)
        {
            // to ensure "ids" is required (not null)
            if (ids == null) {
                throw new ArgumentNullException("ids is a required property for IDsAndMarketValues and cannot be null");
            }
            this.Ids = ids;
            // to ensure "marketValues" is required (not null)
            if (marketValues == null) {
                throw new ArgumentNullException("marketValues is a required property for IDsAndMarketValues and cannot be null");
            }
            this.MarketValues = marketValues;
        }

        /// <summary>
        /// Security identifiers
        /// </summary>
        /// <value>Security identifiers</value>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Security market values
        /// </summary>
        /// <value>Security market values</value>
        [DataMember(Name = "marketValues", IsRequired = true, EmitDefaultValue = false)]
        public List<double> MarketValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IDsAndMarketValues {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  MarketValues: ").Append(MarketValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IDsAndMarketValues);
        }

        /// <summary>
        /// Returns true if IDsAndMarketValues instances are equal
        /// </summary>
        /// <param name="input">Instance of IDsAndMarketValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IDsAndMarketValues input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.MarketValues == input.MarketValues ||
                    this.MarketValues != null &&
                    input.MarketValues != null &&
                    this.MarketValues.SequenceEqual(input.MarketValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                if (this.MarketValues != null)
                {
                    hashCode = (hashCode * 59) + this.MarketValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
