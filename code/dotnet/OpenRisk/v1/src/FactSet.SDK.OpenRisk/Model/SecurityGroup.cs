/*
 * Open:Risk API
 *
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenRisk.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenRisk.Model
{
    /// <summary>
    /// Security grouping definition to use in calculation and results. Multi-layer security groupings are also suppoted.
    /// </summary>
    [DataContract(Name = "SecurityGroup")]
    public partial class SecurityGroup : IEquatable<SecurityGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityGroup" /> class.
        /// </summary>
        /// <param name="name">Optional name of the group.</param>
        /// <param name="indices">List of 0-based indices into the containing holding&#39;s security IDs array.</param>
        /// <param name="groups">Recursively defined elements; base case array (i.e., lowest security group) contains objects with &#39;indices&#39; only and not &#39;groups&#39;.</param>
        public SecurityGroup(string name = default(string), List<int> indices = default(List<int>), List<SecurityGroup> groups = default(List<SecurityGroup>))
        {
            this.Name = name;
            this.Indices = indices;
            this.Groups = groups;
        }

        /// <summary>
        /// Optional name of the group
        /// </summary>
        /// <value>Optional name of the group</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// List of 0-based indices into the containing holding&#39;s security IDs array
        /// </summary>
        /// <value>List of 0-based indices into the containing holding&#39;s security IDs array</value>
        [DataMember(Name = "indices", EmitDefaultValue = false)]
        public List<int> Indices { get; set; }

        /// <summary>
        /// Recursively defined elements; base case array (i.e., lowest security group) contains objects with &#39;indices&#39; only and not &#39;groups&#39;
        /// </summary>
        /// <value>Recursively defined elements; base case array (i.e., lowest security group) contains objects with &#39;indices&#39; only and not &#39;groups&#39;</value>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<SecurityGroup> Groups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityGroup {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Indices: ").Append(Indices).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityGroup);
        }

        /// <summary>
        /// Returns true if SecurityGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Indices == input.Indices ||
                    this.Indices != null &&
                    input.Indices != null &&
                    this.Indices.SequenceEqual(input.Indices)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Indices != null)
                {
                    hashCode = (hashCode * 59) + this.Indices.GetHashCode();
                }
                if (this.Groups != null)
                {
                    hashCode = (hashCode * 59) + this.Groups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
