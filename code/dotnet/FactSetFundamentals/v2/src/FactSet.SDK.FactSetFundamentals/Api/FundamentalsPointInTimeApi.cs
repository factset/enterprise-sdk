/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetFundamentals.Client;
using FactSet.SDK.FactSetFundamentals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetFundamentals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundamentalsPointInTimeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <returns>BatchStatusResponse</returns>
        BatchStatusResponse PostFundamentalsFiscalPeriods(PeriodsRequest periodsRequest);

        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        ApiResponse<BatchStatusResponse> PostFundamentalsFiscalPeriodsWithHttpInfo(PeriodsRequest periodsRequest);
        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <returns>BatchStatusResponse</returns>
        BatchStatusResponse PostFundamentalsPITData(FundamentalsPITRequest fundamentalsPITRequest);

        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        ApiResponse<BatchStatusResponse> PostFundamentalsPITDataWithHttpInfo(FundamentalsPITRequest fundamentalsPITRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundamentalsPointInTimeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        System.Threading.Tasks.Task<BatchStatusResponse> PostFundamentalsFiscalPeriodsAsync(PeriodsRequest periodsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> PostFundamentalsFiscalPeriodsWithHttpInfoAsync(PeriodsRequest periodsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        System.Threading.Tasks.Task<BatchStatusResponse> PostFundamentalsPITDataAsync(FundamentalsPITRequest fundamentalsPITRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities.
        /// </summary>
        /// <remarks>
        /// This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> PostFundamentalsPITDataWithHttpInfoAsync(FundamentalsPITRequest fundamentalsPITRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundamentalsPointInTimeApi : IFundamentalsPointInTimeApiSync, IFundamentalsPointInTimeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FundamentalsPointInTimeApi : IFundamentalsPointInTimeApi
    {
        private FactSet.SDK.FactSetFundamentals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> PostFundamentalsFiscalPeriodsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
            { (HttpStatusCode)503, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostFundamentalsPITDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(BatchStatusResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
            { (HttpStatusCode)503, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FundamentalsPointInTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FundamentalsPointInTimeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundamentalsPointInTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FundamentalsPointInTimeApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetFundamentals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFundamentals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetFundamentals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetFundamentals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFundamentals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetFundamentals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundamentalsPointInTimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FundamentalsPointInTimeApi(FactSet.SDK.FactSetFundamentals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetFundamentals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetFundamentals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetFundamentals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetFundamentals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetFundamentals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundamentalsPointInTimeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FundamentalsPointInTimeApi(FactSet.SDK.FactSetFundamentals.Client.ISynchronousClient client, FactSet.SDK.FactSetFundamentals.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetFundamentals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetFundamentals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetFundamentals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetFundamentals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetFundamentals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetFundamentals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST. This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <returns>BatchStatusResponse</returns>
        public BatchStatusResponse PostFundamentalsFiscalPeriods(PeriodsRequest periodsRequest)
        {
            var localVarResponse = PostFundamentalsFiscalPeriodsWithHttpInfo(periodsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST. This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        public ApiResponse<BatchStatusResponse> PostFundamentalsFiscalPeriodsWithHttpInfo(PeriodsRequest periodsRequest)
        {
            // verify the required parameter 'periodsRequest' is set
            if (periodsRequest == null)
            {
                throw new FactSet.SDK.FactSetFundamentals.Client.ApiException(400, "Missing required parameter 'periodsRequest' when calling FundamentalsPointInTimeApi->PostFundamentalsFiscalPeriods");
            }

            FactSet.SDK.FactSetFundamentals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = periodsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostFundamentalsFiscalPeriodsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            BatchStatusResponse>("/periods", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFundamentalsFiscalPeriods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST. This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        public async System.Threading.Tasks.Task<BatchStatusResponse>PostFundamentalsFiscalPeriodsAsync(PeriodsRequest periodsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostFundamentalsFiscalPeriodsWithHttpInfoAsync(periodsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fiscal Periods: Retrieve fiscal period details for multiple securities using POST. This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period&#39;s information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="periodsRequest">Request object containing parameters for the fiscal periods request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> PostFundamentalsFiscalPeriodsWithHttpInfoAsync(PeriodsRequest periodsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'periodsRequest' is set
            if (periodsRequest == null)
            {
                throw new FactSet.SDK.FactSetFundamentals.Client.ApiException(400, "Missing required parameter 'periodsRequest' when calling FundamentalsPointInTimeApi->PostFundamentalsFiscalPeriods");
            }


            FactSet.SDK.FactSetFundamentals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = periodsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostFundamentalsFiscalPeriodsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchStatusResponse>("/periods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFundamentalsFiscalPeriods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities. This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <returns>BatchStatusResponse</returns>
        public BatchStatusResponse PostFundamentalsPITData(FundamentalsPITRequest fundamentalsPITRequest)
        {
            var localVarResponse = PostFundamentalsPITDataWithHttpInfo(fundamentalsPITRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities. This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <returns>ApiResponse of BatchStatusResponse</returns>
        public ApiResponse<BatchStatusResponse> PostFundamentalsPITDataWithHttpInfo(FundamentalsPITRequest fundamentalsPITRequest)
        {
            // verify the required parameter 'fundamentalsPITRequest' is set
            if (fundamentalsPITRequest == null)
            {
                throw new FactSet.SDK.FactSetFundamentals.Client.ApiException(400, "Missing required parameter 'fundamentalsPITRequest' when calling FundamentalsPointInTimeApi->PostFundamentalsPITData");
            }

            FactSet.SDK.FactSetFundamentals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fundamentalsPITRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostFundamentalsPITDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            BatchStatusResponse>("/point-in-time", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFundamentalsPITData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities. This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchStatusResponse</returns>
        public async System.Threading.Tasks.Task<BatchStatusResponse>PostFundamentalsPITDataAsync(FundamentalsPITRequest fundamentalsPITRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostFundamentalsPITDataWithHttpInfoAsync(fundamentalsPITRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Point-in-Time data for multiple securities. This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a &#x60;202 Accepted&#x60; response with a &#x60;Location&#x60; header pointing to the &#x60;/batch-status&#x60; endpoint. Use the &#x60;id&#x60; from the status response to check for completion and retrieve the result from the &#x60;/batch-result&#x60; endpoint. **All timestamps are in UTC.** 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetFundamentals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundamentalsPITRequest">Request object containing parameters for the PIT fundamentals request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchStatusResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<BatchStatusResponse>> PostFundamentalsPITDataWithHttpInfoAsync(FundamentalsPITRequest fundamentalsPITRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fundamentalsPITRequest' is set
            if (fundamentalsPITRequest == null)
            {
                throw new FactSet.SDK.FactSetFundamentals.Client.ApiException(400, "Missing required parameter 'fundamentalsPITRequest' when calling FundamentalsPointInTimeApi->PostFundamentalsPITData");
            }


            FactSet.SDK.FactSetFundamentals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetFundamentals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetFundamentals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fundamentalsPITRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetFundamentals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostFundamentalsPITDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchStatusResponse>("/point-in-time", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFundamentalsPITData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
