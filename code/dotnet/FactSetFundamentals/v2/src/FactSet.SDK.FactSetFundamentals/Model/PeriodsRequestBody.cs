/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Parameters for requesting fiscal period information via POST.
    /// </summary>
    [DataContract(Name = "PeriodsRequestBody")]
    public partial class PeriodsRequestBody : IEquatable<PeriodsRequestBody>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Periodicity
        /// </summary>
        [DataMember(Name = "periodicity", EmitDefaultValue = false)]
        public PeriodicityEnum? Periodicity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodsRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PeriodsRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodsRequestBody" /> class.
        /// </summary>
        /// <param name="ids">Array of identifiers supported in async requests to &#x60;/point-in-time&#x60; and &#x60;/periods&#x60; endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers. (required).</param>
        /// <param name="periodicity">periodicity.</param>
        /// <param name="fiscalPeriodStart">Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodEnd&#x60; for a range, or alone for the earliest period. (required).</param>
        /// <param name="fiscalPeriodEnd">Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodStart&#x60; for a range, or alone for the latest period..</param>
        public PeriodsRequestBody(List<string> ids, DateTime fiscalPeriodStart,PeriodicityEnum periodicity = default(PeriodicityEnum), DateTime fiscalPeriodEnd = default(DateTime))
        {
            // to ensure "ids" is required (not null)
            if (ids == null) {
                throw new ArgumentNullException("ids is a required property for PeriodsRequestBody and cannot be null");
            }
            this.Ids = ids;
            this.FiscalPeriodStart = fiscalPeriodStart;
            this.Periodicity = periodicity;
            this.FiscalPeriodEnd = fiscalPeriodEnd;
        }

        /// <summary>
        /// Array of identifiers supported in async requests to &#x60;/point-in-time&#x60; and &#x60;/periods&#x60; endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.
        /// </summary>
        /// <value>Array of identifiers supported in async requests to &#x60;/point-in-time&#x60; and &#x60;/periods&#x60; endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.</value>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodEnd&#x60; for a range, or alone for the earliest period.
        /// </summary>
        /// <value>Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodEnd&#x60; for a range, or alone for the earliest period.</value>
        [DataMember(Name = "fiscalPeriodStart", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FiscalPeriodStart { get; set; }

        /// <summary>
        /// Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodStart&#x60; for a range, or alone for the latest period.
        /// </summary>
        /// <value>Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with &#x60;fiscalPeriodStart&#x60; for a range, or alone for the latest period.</value>
        [DataMember(Name = "fiscalPeriodEnd", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime FiscalPeriodEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodsRequestBody {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  FiscalPeriodStart: ").Append(FiscalPeriodStart).Append("\n");
            sb.Append("  FiscalPeriodEnd: ").Append(FiscalPeriodEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodsRequestBody);
        }

        /// <summary>
        /// Returns true if PeriodsRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodsRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodsRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    this.Periodicity.Equals(input.Periodicity)
                ) && 
                (
                    this.FiscalPeriodStart == input.FiscalPeriodStart ||
                    (this.FiscalPeriodStart != null &&
                    this.FiscalPeriodStart.Equals(input.FiscalPeriodStart))
                ) && 
                (
                    this.FiscalPeriodEnd == input.FiscalPeriodEnd ||
                    (this.FiscalPeriodEnd != null &&
                    this.FiscalPeriodEnd.Equals(input.FiscalPeriodEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Periodicity.GetHashCode();
                if (this.FiscalPeriodStart != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalPeriodStart.GetHashCode();
                }
                if (this.FiscalPeriodEnd != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalPeriodEnd.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
