/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Profile
    /// </summary>
    [DataContract(Name = "Profile")]
    public partial class Profile : IEquatable<Profile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="error">error.</param>
        /// <param name="fsymId">FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="tickerRegion">FactSet Ticker-Region for the requested security..</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="name">Name of the security.</param>
        /// <param name="address">address.</param>
        /// <param name="industry">The industry classification for this security. The industry level 5 RBIC (Revere Business Industry Classification) system is used in classification. For more info, visit: [OA page](https://my.apps.factset.com/oa/pages/17498).</param>
        /// <param name="sector">The sector classification for this security. The sector level 2 RBIC (Revere Business Industry Classification) system is used in classification. For more info, visit: [OA page](https://my.apps.factset.com/oa/pages/17498).</param>
        /// <param name="numberOfEmployees">Number of employees working in the company.</param>
        /// <param name="ceo">A chief executive officer (CEO) is the highest-ranking executive in a company.</param>
        /// <param name="businessSummary">Summary of the security being requested.</param>
        /// <param name="yearFounded">The year this security is founded.</param>
        /// <param name="marketCapitalization">The market capitalization of a company. It is the total value of the company&#39;s outstanding shares of common stock.</param>
        /// <param name="totalMarketCapitalization">The total public shares for the company&#39;s listed equity. This aggregates across all share classes, with including non-traded shares..</param>
        /// <param name="sharesOutstanding">The number of common shares that a company has issued and are held by investors.</param>
        /// <param name="peRatio">The price-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings (EPS).</param>
        public Profile(string requestId = default(string), CompanyReportErrorObject error = default(CompanyReportErrorObject), string fsymId = default(string), string tickerRegion = default(string), Exchange exchange = default(Exchange), string name = default(string), Address address = default(Address), string industry = default(string), string sector = default(string), int? numberOfEmployees = default(int?), string ceo = default(string), string businessSummary = default(string), int? yearFounded = default(int?), long? marketCapitalization = default(long?), long? totalMarketCapitalization = default(long?), long? sharesOutstanding = default(long?), double? peRatio = default(double?))
        {
            this.RequestId = requestId;
            this.Error = error;
            this.FsymId = fsymId;
            this.TickerRegion = tickerRegion;
            this.Exchange = exchange;
            this.Name = name;
            this.Address = address;
            this.Industry = industry;
            this.Sector = sector;
            this.NumberOfEmployees = numberOfEmployees;
            this.Ceo = ceo;
            this.BusinessSummary = businessSummary;
            this.YearFounded = yearFounded;
            this.MarketCapitalization = marketCapitalization;
            this.TotalMarketCapitalization = totalMarketCapitalization;
            this.SharesOutstanding = sharesOutstanding;
            this.PeRatio = peRatio;
        }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public CompanyReportErrorObject Error { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// FactSet Ticker-Region for the requested security.
        /// </summary>
        /// <value>FactSet Ticker-Region for the requested security.</value>
        [DataMember(Name = "tickerRegion", EmitDefaultValue = true)]
        public string TickerRegion { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name = "exchange", EmitDefaultValue = false)]
        public Exchange Exchange { get; set; }

        /// <summary>
        /// Name of the security
        /// </summary>
        /// <value>Name of the security</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// The industry classification for this security. The industry level 5 RBIC (Revere Business Industry Classification) system is used in classification. For more info, visit: [OA page](https://my.apps.factset.com/oa/pages/17498)
        /// </summary>
        /// <value>The industry classification for this security. The industry level 5 RBIC (Revere Business Industry Classification) system is used in classification. For more info, visit: [OA page](https://my.apps.factset.com/oa/pages/17498)</value>
        [DataMember(Name = "industry", EmitDefaultValue = true)]
        public string Industry { get; set; }

        /// <summary>
        /// The sector classification for this security. The sector level 2 RBIC (Revere Business Industry Classification) system is used in classification. For more info, visit: [OA page](https://my.apps.factset.com/oa/pages/17498)
        /// </summary>
        /// <value>The sector classification for this security. The sector level 2 RBIC (Revere Business Industry Classification) system is used in classification. For more info, visit: [OA page](https://my.apps.factset.com/oa/pages/17498)</value>
        [DataMember(Name = "sector", EmitDefaultValue = true)]
        public string Sector { get; set; }

        /// <summary>
        /// Number of employees working in the company
        /// </summary>
        /// <value>Number of employees working in the company</value>
        [DataMember(Name = "numberOfEmployees", EmitDefaultValue = true)]
        public int? NumberOfEmployees { get; set; }

        /// <summary>
        /// A chief executive officer (CEO) is the highest-ranking executive in a company
        /// </summary>
        /// <value>A chief executive officer (CEO) is the highest-ranking executive in a company</value>
        [DataMember(Name = "ceo", EmitDefaultValue = true)]
        public string Ceo { get; set; }

        /// <summary>
        /// Summary of the security being requested
        /// </summary>
        /// <value>Summary of the security being requested</value>
        [DataMember(Name = "businessSummary", EmitDefaultValue = true)]
        public string BusinessSummary { get; set; }

        /// <summary>
        /// The year this security is founded
        /// </summary>
        /// <value>The year this security is founded</value>
        [DataMember(Name = "yearFounded", EmitDefaultValue = true)]
        public int? YearFounded { get; set; }

        /// <summary>
        /// The market capitalization of a company. It is the total value of the company&#39;s outstanding shares of common stock
        /// </summary>
        /// <value>The market capitalization of a company. It is the total value of the company&#39;s outstanding shares of common stock</value>
        [DataMember(Name = "marketCapitalization", EmitDefaultValue = true)]
        public long? MarketCapitalization { get; set; }

        /// <summary>
        /// The total public shares for the company&#39;s listed equity. This aggregates across all share classes, with including non-traded shares.
        /// </summary>
        /// <value>The total public shares for the company&#39;s listed equity. This aggregates across all share classes, with including non-traded shares.</value>
        [DataMember(Name = "totalMarketCapitalization", EmitDefaultValue = true)]
        public long? TotalMarketCapitalization { get; set; }

        /// <summary>
        /// The number of common shares that a company has issued and are held by investors
        /// </summary>
        /// <value>The number of common shares that a company has issued and are held by investors</value>
        [DataMember(Name = "sharesOutstanding", EmitDefaultValue = true)]
        public long? SharesOutstanding { get; set; }

        /// <summary>
        /// The price-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings (EPS)
        /// </summary>
        /// <value>The price-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings (EPS)</value>
        [DataMember(Name = "peRatio", EmitDefaultValue = true)]
        public double? PeRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  TickerRegion: ").Append(TickerRegion).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  NumberOfEmployees: ").Append(NumberOfEmployees).Append("\n");
            sb.Append("  Ceo: ").Append(Ceo).Append("\n");
            sb.Append("  BusinessSummary: ").Append(BusinessSummary).Append("\n");
            sb.Append("  YearFounded: ").Append(YearFounded).Append("\n");
            sb.Append("  MarketCapitalization: ").Append(MarketCapitalization).Append("\n");
            sb.Append("  TotalMarketCapitalization: ").Append(TotalMarketCapitalization).Append("\n");
            sb.Append("  SharesOutstanding: ").Append(SharesOutstanding).Append("\n");
            sb.Append("  PeRatio: ").Append(PeRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Profile);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.TickerRegion == input.TickerRegion ||
                    (this.TickerRegion != null &&
                    this.TickerRegion.Equals(input.TickerRegion))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.NumberOfEmployees == input.NumberOfEmployees ||
                    (this.NumberOfEmployees != null &&
                    this.NumberOfEmployees.Equals(input.NumberOfEmployees))
                ) && 
                (
                    this.Ceo == input.Ceo ||
                    (this.Ceo != null &&
                    this.Ceo.Equals(input.Ceo))
                ) && 
                (
                    this.BusinessSummary == input.BusinessSummary ||
                    (this.BusinessSummary != null &&
                    this.BusinessSummary.Equals(input.BusinessSummary))
                ) && 
                (
                    this.YearFounded == input.YearFounded ||
                    (this.YearFounded != null &&
                    this.YearFounded.Equals(input.YearFounded))
                ) && 
                (
                    this.MarketCapitalization == input.MarketCapitalization ||
                    (this.MarketCapitalization != null &&
                    this.MarketCapitalization.Equals(input.MarketCapitalization))
                ) && 
                (
                    this.TotalMarketCapitalization == input.TotalMarketCapitalization ||
                    (this.TotalMarketCapitalization != null &&
                    this.TotalMarketCapitalization.Equals(input.TotalMarketCapitalization))
                ) && 
                (
                    this.SharesOutstanding == input.SharesOutstanding ||
                    (this.SharesOutstanding != null &&
                    this.SharesOutstanding.Equals(input.SharesOutstanding))
                ) && 
                (
                    this.PeRatio == input.PeRatio ||
                    (this.PeRatio != null &&
                    this.PeRatio.Equals(input.PeRatio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.TickerRegion != null)
                {
                    hashCode = (hashCode * 59) + this.TickerRegion.GetHashCode();
                }
                if (this.Exchange != null)
                {
                    hashCode = (hashCode * 59) + this.Exchange.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Industry != null)
                {
                    hashCode = (hashCode * 59) + this.Industry.GetHashCode();
                }
                if (this.Sector != null)
                {
                    hashCode = (hashCode * 59) + this.Sector.GetHashCode();
                }
                if (this.NumberOfEmployees != null)
                {
                    hashCode = (hashCode * 59) + this.NumberOfEmployees.GetHashCode();
                }
                if (this.Ceo != null)
                {
                    hashCode = (hashCode * 59) + this.Ceo.GetHashCode();
                }
                if (this.BusinessSummary != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessSummary.GetHashCode();
                }
                if (this.YearFounded != null)
                {
                    hashCode = (hashCode * 59) + this.YearFounded.GetHashCode();
                }
                if (this.MarketCapitalization != null)
                {
                    hashCode = (hashCode * 59) + this.MarketCapitalization.GetHashCode();
                }
                if (this.TotalMarketCapitalization != null)
                {
                    hashCode = (hashCode * 59) + this.TotalMarketCapitalization.GetHashCode();
                }
                if (this.SharesOutstanding != null)
                {
                    hashCode = (hashCode * 59) + this.SharesOutstanding.GetHashCode();
                }
                if (this.PeRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PeRatio.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
