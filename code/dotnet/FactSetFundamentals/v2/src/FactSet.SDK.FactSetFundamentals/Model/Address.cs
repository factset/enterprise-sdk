/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="streetLine1">Street line where the company head quarters are located.</param>
        /// <param name="streetLine2">Additional Street line where the company head quarters are located, if available.</param>
        /// <param name="city">City where the company head quarters are located.</param>
        /// <param name="state">State code for which state the company head quarters are located.</param>
        /// <param name="stateName">Full State Name of the state where the company head quarters are located.</param>
        /// <param name="country">Full Country Name of the country where the company head quarters are located.</param>
        /// <param name="zip">Zipcode of the city where the company head quarters are located.</param>
        /// <param name="phoneNumber">Phone number of the company.</param>
        /// <param name="website">Website of the company.</param>
        public Address(string streetLine1 = default(string), string streetLine2 = default(string), string city = default(string), string state = default(string), string stateName = default(string), string country = default(string), string zip = default(string), string phoneNumber = default(string), string website = default(string))
        {
            this.StreetLine1 = streetLine1;
            this.StreetLine2 = streetLine2;
            this.City = city;
            this.State = state;
            this.StateName = stateName;
            this.Country = country;
            this.Zip = zip;
            this.PhoneNumber = phoneNumber;
            this.Website = website;
        }

        /// <summary>
        /// Street line where the company head quarters are located
        /// </summary>
        /// <value>Street line where the company head quarters are located</value>
        [DataMember(Name = "streetLine1", EmitDefaultValue = true)]
        public string StreetLine1 { get; set; }

        /// <summary>
        /// Additional Street line where the company head quarters are located, if available
        /// </summary>
        /// <value>Additional Street line where the company head quarters are located, if available</value>
        [DataMember(Name = "streetLine2", EmitDefaultValue = true)]
        public string StreetLine2 { get; set; }

        /// <summary>
        /// City where the company head quarters are located
        /// </summary>
        /// <value>City where the company head quarters are located</value>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// State code for which state the company head quarters are located
        /// </summary>
        /// <value>State code for which state the company head quarters are located</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Full State Name of the state where the company head quarters are located
        /// </summary>
        /// <value>Full State Name of the state where the company head quarters are located</value>
        [DataMember(Name = "stateName", EmitDefaultValue = true)]
        public string StateName { get; set; }

        /// <summary>
        /// Full Country Name of the country where the company head quarters are located
        /// </summary>
        /// <value>Full Country Name of the country where the company head quarters are located</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Zipcode of the city where the company head quarters are located
        /// </summary>
        /// <value>Zipcode of the city where the company head quarters are located</value>
        [DataMember(Name = "zip", EmitDefaultValue = true)]
        public string Zip { get; set; }

        /// <summary>
        /// Phone number of the company
        /// </summary>
        /// <value>Phone number of the company</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Website of the company
        /// </summary>
        /// <value>Website of the company</value>
        [DataMember(Name = "website", EmitDefaultValue = true)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  StreetLine1: ").Append(StreetLine1).Append("\n");
            sb.Append("  StreetLine2: ").Append(StreetLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StreetLine1 == input.StreetLine1 ||
                    (this.StreetLine1 != null &&
                    this.StreetLine1.Equals(input.StreetLine1))
                ) && 
                (
                    this.StreetLine2 == input.StreetLine2 ||
                    (this.StreetLine2 != null &&
                    this.StreetLine2.Equals(input.StreetLine2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateName == input.StateName ||
                    (this.StateName != null &&
                    this.StateName.Equals(input.StateName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreetLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.StreetLine1.GetHashCode();
                }
                if (this.StreetLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.StreetLine2.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.StateName != null)
                {
                    hashCode = (hashCode * 59) + this.StateName.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Zip != null)
                {
                    hashCode = (hashCode * 59) + this.Zip.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.Website != null)
                {
                    hashCode = (hashCode * 59) + this.Website.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
