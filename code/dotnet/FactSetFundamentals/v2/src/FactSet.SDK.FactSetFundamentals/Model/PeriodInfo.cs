/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Detailed information about a single fiscal period for a security, including its Point-in-Time validity.
    /// </summary>
    [DataContract(Name = "PeriodInfo")]
    public partial class PeriodInfo : IEquatable<PeriodInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodInfo" /> class.
        /// </summary>
        /// <param name="requestId">The identifier provided in the input request that corresponds to this period information..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier representing the specific data series for the requested &#x60;requestId&#x60;..</param>
        /// <param name="fiscalInterimNumber">The sequential number of the interim period within the fiscal year (e.g., 1 for Q1, 2 for Q2)..</param>
        /// <param name="periodicity">Periodicity code for this fiscal period (e.g., &#x60;QTR&#x60;, &#x60;ANN&#x60;)..</param>
        /// <param name="fiscalDate">The specific date used for reporting the period end, which may occasionally differ slightly from the period&#39;s actual calendar end date (YYYY-MM-DD)..</param>
        /// <param name="fyeChange">Flag indicating if a Fiscal Year End (FYE) change occurred during or impacted this specific period (&#x60;true&#x60; if changed, &#x60;false&#x60; otherwise)..</param>
        /// <param name="pitStart">The UTC timestamp for when the fiscal period information was first published and became available..</param>
        /// <param name="pitEnd">The UTC timestamp for when this version of the fiscal period information was superseded by a newer version. A &#x60;null&#x60; value indicates that this is the latest available version..</param>
        public PeriodInfo(string requestId = default(string), string fsymId = default(string), int? fiscalInterimNumber = default(int?), string periodicity = default(string), DateTime? fiscalDate = default(DateTime?), bool? fyeChange = default(bool?), DateTime? pitStart = default(DateTime?), DateTime? pitEnd = default(DateTime?))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.FiscalInterimNumber = fiscalInterimNumber;
            this.Periodicity = periodicity;
            this.FiscalDate = fiscalDate;
            this.FyeChange = fyeChange;
            this.PitStart = pitStart;
            this.PitEnd = pitEnd;
        }

        /// <summary>
        /// The identifier provided in the input request that corresponds to this period information.
        /// </summary>
        /// <value>The identifier provided in the input request that corresponds to this period information.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier representing the specific data series for the requested &#x60;requestId&#x60;.
        /// </summary>
        /// <value>FactSet Regional Security Identifier representing the specific data series for the requested &#x60;requestId&#x60;.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The sequential number of the interim period within the fiscal year (e.g., 1 for Q1, 2 for Q2).
        /// </summary>
        /// <value>The sequential number of the interim period within the fiscal year (e.g., 1 for Q1, 2 for Q2).</value>
        [DataMember(Name = "fiscalInterimNumber", EmitDefaultValue = true)]
        public int? FiscalInterimNumber { get; set; }

        /// <summary>
        /// Periodicity code for this fiscal period (e.g., &#x60;QTR&#x60;, &#x60;ANN&#x60;).
        /// </summary>
        /// <value>Periodicity code for this fiscal period (e.g., &#x60;QTR&#x60;, &#x60;ANN&#x60;).</value>
        [DataMember(Name = "periodicity", EmitDefaultValue = true)]
        public string Periodicity { get; set; }

        /// <summary>
        /// The specific date used for reporting the period end, which may occasionally differ slightly from the period&#39;s actual calendar end date (YYYY-MM-DD).
        /// </summary>
        /// <value>The specific date used for reporting the period end, which may occasionally differ slightly from the period&#39;s actual calendar end date (YYYY-MM-DD).</value>
        [DataMember(Name = "fiscalDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FiscalDate { get; set; }

        /// <summary>
        /// Flag indicating if a Fiscal Year End (FYE) change occurred during or impacted this specific period (&#x60;true&#x60; if changed, &#x60;false&#x60; otherwise).
        /// </summary>
        /// <value>Flag indicating if a Fiscal Year End (FYE) change occurred during or impacted this specific period (&#x60;true&#x60; if changed, &#x60;false&#x60; otherwise).</value>
        [DataMember(Name = "fyeChange", EmitDefaultValue = true)]
        public bool? FyeChange { get; set; }

        /// <summary>
        /// The UTC timestamp for when the fiscal period information was first published and became available.
        /// </summary>
        /// <value>The UTC timestamp for when the fiscal period information was first published and became available.</value>
        [DataMember(Name = "pitStart", EmitDefaultValue = true)]
        public DateTime? PitStart { get; set; }

        /// <summary>
        /// The UTC timestamp for when this version of the fiscal period information was superseded by a newer version. A &#x60;null&#x60; value indicates that this is the latest available version.
        /// </summary>
        /// <value>The UTC timestamp for when this version of the fiscal period information was superseded by a newer version. A &#x60;null&#x60; value indicates that this is the latest available version.</value>
        [DataMember(Name = "pitEnd", EmitDefaultValue = true)]
        public DateTime? PitEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodInfo {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  FiscalInterimNumber: ").Append(FiscalInterimNumber).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  FiscalDate: ").Append(FiscalDate).Append("\n");
            sb.Append("  FyeChange: ").Append(FyeChange).Append("\n");
            sb.Append("  PitStart: ").Append(PitStart).Append("\n");
            sb.Append("  PitEnd: ").Append(PitEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodInfo);
        }

        /// <summary>
        /// Returns true if PeriodInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.FiscalInterimNumber == input.FiscalInterimNumber ||
                    (this.FiscalInterimNumber != null &&
                    this.FiscalInterimNumber.Equals(input.FiscalInterimNumber))
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    (this.Periodicity != null &&
                    this.Periodicity.Equals(input.Periodicity))
                ) && 
                (
                    this.FiscalDate == input.FiscalDate ||
                    (this.FiscalDate != null &&
                    this.FiscalDate.Equals(input.FiscalDate))
                ) && 
                (
                    this.FyeChange == input.FyeChange ||
                    (this.FyeChange != null &&
                    this.FyeChange.Equals(input.FyeChange))
                ) && 
                (
                    this.PitStart == input.PitStart ||
                    (this.PitStart != null &&
                    this.PitStart.Equals(input.PitStart))
                ) && 
                (
                    this.PitEnd == input.PitEnd ||
                    (this.PitEnd != null &&
                    this.PitEnd.Equals(input.PitEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.FiscalInterimNumber != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalInterimNumber.GetHashCode();
                }
                if (this.Periodicity != null)
                {
                    hashCode = (hashCode * 59) + this.Periodicity.GetHashCode();
                }
                if (this.FiscalDate != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalDate.GetHashCode();
                }
                if (this.FyeChange != null)
                {
                    hashCode = (hashCode * 59) + this.FyeChange.GetHashCode();
                }
                if (this.PitStart != null)
                {
                    hashCode = (hashCode * 59) + this.PitStart.GetHashCode();
                }
                if (this.PitEnd != null)
                {
                    hashCode = (hashCode * 59) + this.PitEnd.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
