/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Dividend
    /// </summary>
    [DataContract(Name = "Dividend")]
    public partial class Dividend : IEquatable<Dividend>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dividend" /> class.
        /// </summary>
        /// <param name="annualDividendPerShare">Dividend is the distribution of reward from a portion of company&#39;s earnings, and is paid to a class of its shareholders each year for every share they own..</param>
        /// <param name="distributionFrequency">Distribution frequency is how often a dividend is paid by an individual stock, distribution frequency can vary from monthly to annually..</param>
        /// <param name="dividendPerShare">Dividend is the distribution of reward from a portion of company&#39;s earnings, and is paid to a class of its shareholders for every share they own each time the company distributes dividends, which could be quarterly, semi-annually, or annually depending on the company&#39;s dividend policy..</param>
        /// <param name="exDividendDate">The date on which the dividend eligibility expires is called the ex-dividend date.</param>
        /// <param name="indicativeDividendRate">Indicated dividend Rate projects the annual dividend return of a stock based on its most recent dividend, the number of dividends issued each year, and the current share price.</param>
        /// <param name="payableDate">The company issues the payment of the dividend on the payment date, which is when the money gets credited to investor&#39;s account.</param>
        /// <param name="recordDate">The record date is the cut-off date in order to determine which shareholders are eligible to receive a dividend or distribution.</param>
        /// <param name="yield">Dividend yield is the financial ratio that shows how much a company pays out in dividends each year relative to its stock price.</param>
        public Dividend(double? annualDividendPerShare = default(double?), string distributionFrequency = default(string), double? dividendPerShare = default(double?), DateTime? exDividendDate = default(DateTime?), string indicativeDividendRate = default(string), DateTime? payableDate = default(DateTime?), DateTime? recordDate = default(DateTime?), double? yield = default(double?))
        {
            this.AnnualDividendPerShare = annualDividendPerShare;
            this.DistributionFrequency = distributionFrequency;
            this.DividendPerShare = dividendPerShare;
            this.ExDividendDate = exDividendDate;
            this.IndicativeDividendRate = indicativeDividendRate;
            this.PayableDate = payableDate;
            this.RecordDate = recordDate;
            this.Yield = yield;
        }

        /// <summary>
        /// Dividend is the distribution of reward from a portion of company&#39;s earnings, and is paid to a class of its shareholders each year for every share they own.
        /// </summary>
        /// <value>Dividend is the distribution of reward from a portion of company&#39;s earnings, and is paid to a class of its shareholders each year for every share they own.</value>
        [DataMember(Name = "annualDividendPerShare", EmitDefaultValue = true)]
        public double? AnnualDividendPerShare { get; set; }

        /// <summary>
        /// Distribution frequency is how often a dividend is paid by an individual stock, distribution frequency can vary from monthly to annually.
        /// </summary>
        /// <value>Distribution frequency is how often a dividend is paid by an individual stock, distribution frequency can vary from monthly to annually.</value>
        [DataMember(Name = "distributionFrequency", EmitDefaultValue = true)]
        public string DistributionFrequency { get; set; }

        /// <summary>
        /// Dividend is the distribution of reward from a portion of company&#39;s earnings, and is paid to a class of its shareholders for every share they own each time the company distributes dividends, which could be quarterly, semi-annually, or annually depending on the company&#39;s dividend policy.
        /// </summary>
        /// <value>Dividend is the distribution of reward from a portion of company&#39;s earnings, and is paid to a class of its shareholders for every share they own each time the company distributes dividends, which could be quarterly, semi-annually, or annually depending on the company&#39;s dividend policy.</value>
        [DataMember(Name = "dividendPerShare", EmitDefaultValue = true)]
        public double? DividendPerShare { get; set; }

        /// <summary>
        /// The date on which the dividend eligibility expires is called the ex-dividend date
        /// </summary>
        /// <value>The date on which the dividend eligibility expires is called the ex-dividend date</value>
        [DataMember(Name = "exDividendDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? ExDividendDate { get; set; }

        /// <summary>
        /// Indicated dividend Rate projects the annual dividend return of a stock based on its most recent dividend, the number of dividends issued each year, and the current share price
        /// </summary>
        /// <value>Indicated dividend Rate projects the annual dividend return of a stock based on its most recent dividend, the number of dividends issued each year, and the current share price</value>
        [DataMember(Name = "indicativeDividendRate", EmitDefaultValue = true)]
        public string IndicativeDividendRate { get; set; }

        /// <summary>
        /// The company issues the payment of the dividend on the payment date, which is when the money gets credited to investor&#39;s account
        /// </summary>
        /// <value>The company issues the payment of the dividend on the payment date, which is when the money gets credited to investor&#39;s account</value>
        [DataMember(Name = "payableDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PayableDate { get; set; }

        /// <summary>
        /// The record date is the cut-off date in order to determine which shareholders are eligible to receive a dividend or distribution
        /// </summary>
        /// <value>The record date is the cut-off date in order to determine which shareholders are eligible to receive a dividend or distribution</value>
        [DataMember(Name = "recordDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? RecordDate { get; set; }

        /// <summary>
        /// Dividend yield is the financial ratio that shows how much a company pays out in dividends each year relative to its stock price
        /// </summary>
        /// <value>Dividend yield is the financial ratio that shows how much a company pays out in dividends each year relative to its stock price</value>
        [DataMember(Name = "yield", EmitDefaultValue = true)]
        public double? Yield { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Dividend {\n");
            sb.Append("  AnnualDividendPerShare: ").Append(AnnualDividendPerShare).Append("\n");
            sb.Append("  DistributionFrequency: ").Append(DistributionFrequency).Append("\n");
            sb.Append("  DividendPerShare: ").Append(DividendPerShare).Append("\n");
            sb.Append("  ExDividendDate: ").Append(ExDividendDate).Append("\n");
            sb.Append("  IndicativeDividendRate: ").Append(IndicativeDividendRate).Append("\n");
            sb.Append("  PayableDate: ").Append(PayableDate).Append("\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  Yield: ").Append(Yield).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dividend);
        }

        /// <summary>
        /// Returns true if Dividend instances are equal
        /// </summary>
        /// <param name="input">Instance of Dividend to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dividend input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AnnualDividendPerShare == input.AnnualDividendPerShare ||
                    (this.AnnualDividendPerShare != null &&
                    this.AnnualDividendPerShare.Equals(input.AnnualDividendPerShare))
                ) && 
                (
                    this.DistributionFrequency == input.DistributionFrequency ||
                    (this.DistributionFrequency != null &&
                    this.DistributionFrequency.Equals(input.DistributionFrequency))
                ) && 
                (
                    this.DividendPerShare == input.DividendPerShare ||
                    (this.DividendPerShare != null &&
                    this.DividendPerShare.Equals(input.DividendPerShare))
                ) && 
                (
                    this.ExDividendDate == input.ExDividendDate ||
                    (this.ExDividendDate != null &&
                    this.ExDividendDate.Equals(input.ExDividendDate))
                ) && 
                (
                    this.IndicativeDividendRate == input.IndicativeDividendRate ||
                    (this.IndicativeDividendRate != null &&
                    this.IndicativeDividendRate.Equals(input.IndicativeDividendRate))
                ) && 
                (
                    this.PayableDate == input.PayableDate ||
                    (this.PayableDate != null &&
                    this.PayableDate.Equals(input.PayableDate))
                ) && 
                (
                    this.RecordDate == input.RecordDate ||
                    (this.RecordDate != null &&
                    this.RecordDate.Equals(input.RecordDate))
                ) && 
                (
                    this.Yield == input.Yield ||
                    (this.Yield != null &&
                    this.Yield.Equals(input.Yield))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnnualDividendPerShare != null)
                {
                    hashCode = (hashCode * 59) + this.AnnualDividendPerShare.GetHashCode();
                }
                if (this.DistributionFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionFrequency.GetHashCode();
                }
                if (this.DividendPerShare != null)
                {
                    hashCode = (hashCode * 59) + this.DividendPerShare.GetHashCode();
                }
                if (this.ExDividendDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExDividendDate.GetHashCode();
                }
                if (this.IndicativeDividendRate != null)
                {
                    hashCode = (hashCode * 59) + this.IndicativeDividendRate.GetHashCode();
                }
                if (this.PayableDate != null)
                {
                    hashCode = (hashCode * 59) + this.PayableDate.GetHashCode();
                }
                if (this.RecordDate != null)
                {
                    hashCode = (hashCode * 59) + this.RecordDate.GetHashCode();
                }
                if (this.Yield != null)
                {
                    hashCode = (hashCode * 59) + this.Yield.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
