/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Represents a single value for a fundamental metric as it was known during a specific Point-in-Time window for a given security and fiscal period.
    /// </summary>
    [DataContract(Name = "FundamentalsPITData")]
    public partial class FundamentalsPITData : IEquatable<FundamentalsPITData>, IValidatableObject
    {
        /// <summary>
        /// Indicates the status of the source filing when this data point was recorded (&#x60;Preliminary&#x60; or &#x60;Final&#x60;).
        /// </summary>
        /// <value>Indicates the status of the source filing when this data point was recorded (&#x60;Preliminary&#x60; or &#x60;Final&#x60;).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpdateTypeEnum
        {
            /// <summary>
            /// Enum Preliminary for value: Preliminary
            /// </summary>
            [EnumMember(Value = "Preliminary")]
            Preliminary = 1,

            /// <summary>
            /// Enum Final for value: Final
            /// </summary>
            [EnumMember(Value = "Final")]
            Final = 2

        }


        /// <summary>
        /// Indicates the status of the source filing when this data point was recorded (&#x60;Preliminary&#x60; or &#x60;Final&#x60;).
        /// </summary>
        /// <value>Indicates the status of the source filing when this data point was recorded (&#x60;Preliminary&#x60; or &#x60;Final&#x60;).</value>
        [DataMember(Name = "updateType", EmitDefaultValue = true)]
        public UpdateTypeEnum? UpdateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundamentalsPITData" /> class.
        /// </summary>
        /// <param name="requestId">The identifier provided in the input request that corresponds to this data point..</param>
        /// <param name="fsymId">FactSet Regional Security Identifier representing the specific data series for the requested &#x60;requestId&#x60;..</param>
        /// <param name="metric">The identifier of the fundamental metric being reported (e.g., &#x60;FF_SALES&#x60;)..</param>
        /// <param name="periodicity">Periodicity of this data point (e.g., &#x60;QTR&#x60;, &#x60;ANN&#x60;)..</param>
        /// <param name="fiscalPeriod">Integer representing the fiscal period. For &#x60;QTR&#x60; periodicity, possible values are 1, 2, 3, or 4. For &#x60;SEMI&#x60; periodicity, possible values are 1 or 2..</param>
        /// <param name="fiscalYear">Fiscal year of the reported period, expressed in a YYYY format..</param>
        /// <param name="fiscalEndDate">The official ending date of the fiscal period (YYYY-MM-DD)..</param>
        /// <param name="currency">Currency of the reported &#x60;value&#x60;, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="value">value.</param>
        /// <param name="updateType">Indicates the status of the source filing when this data point was recorded (&#x60;Preliminary&#x60; or &#x60;Final&#x60;)..</param>
        /// <param name="pitStart">Start of Point-in-Time (inclusive, in UTC) during which this value was current. Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If frequency is weekly (w) or monthly (m), this will be null. .</param>
        /// <param name="pitEnd">End of Point-in-Time (inclusive, in UTC). Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If value is &#x60;null&#x60; -&gt; this value is current (latest active snapshot). If frequency is weekly or monthly, and this is an end-of-week or end-of-month snapshot -&gt; &#x60;pitStart&#x60; will be null. .</param>
        public FundamentalsPITData(string requestId = default(string), string fsymId = default(string), string metric = default(string), string periodicity = default(string), int? fiscalPeriod = default(int?), int? fiscalYear = default(int?), DateTime? fiscalEndDate = default(DateTime?), string currency = default(string), FundamentalValue value = default(FundamentalValue), UpdateTypeEnum? updateType = default(UpdateTypeEnum?), DateTime? pitStart = default(DateTime?), DateTime? pitEnd = default(DateTime?))
        {
            this.RequestId = requestId;
            this.FsymId = fsymId;
            this.Metric = metric;
            this.Periodicity = periodicity;
            this.FiscalPeriod = fiscalPeriod;
            this.FiscalYear = fiscalYear;
            this.FiscalEndDate = fiscalEndDate;
            this.Currency = currency;
            this.Value = value;
            this.UpdateType = updateType;
            this.PitStart = pitStart;
            this.PitEnd = pitEnd;
        }

        /// <summary>
        /// The identifier provided in the input request that corresponds to this data point.
        /// </summary>
        /// <value>The identifier provided in the input request that corresponds to this data point.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// FactSet Regional Security Identifier representing the specific data series for the requested &#x60;requestId&#x60;.
        /// </summary>
        /// <value>FactSet Regional Security Identifier representing the specific data series for the requested &#x60;requestId&#x60;.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// The identifier of the fundamental metric being reported (e.g., &#x60;FF_SALES&#x60;).
        /// </summary>
        /// <value>The identifier of the fundamental metric being reported (e.g., &#x60;FF_SALES&#x60;).</value>
        [DataMember(Name = "metric", EmitDefaultValue = true)]
        public string Metric { get; set; }

        /// <summary>
        /// Periodicity of this data point (e.g., &#x60;QTR&#x60;, &#x60;ANN&#x60;).
        /// </summary>
        /// <value>Periodicity of this data point (e.g., &#x60;QTR&#x60;, &#x60;ANN&#x60;).</value>
        [DataMember(Name = "periodicity", EmitDefaultValue = true)]
        public string Periodicity { get; set; }

        /// <summary>
        /// Integer representing the fiscal period. For &#x60;QTR&#x60; periodicity, possible values are 1, 2, 3, or 4. For &#x60;SEMI&#x60; periodicity, possible values are 1 or 2.
        /// </summary>
        /// <value>Integer representing the fiscal period. For &#x60;QTR&#x60; periodicity, possible values are 1, 2, 3, or 4. For &#x60;SEMI&#x60; periodicity, possible values are 1 or 2.</value>
        [DataMember(Name = "fiscalPeriod", EmitDefaultValue = true)]
        public int? FiscalPeriod { get; set; }

        /// <summary>
        /// Fiscal year of the reported period, expressed in a YYYY format.
        /// </summary>
        /// <value>Fiscal year of the reported period, expressed in a YYYY format.</value>
        [DataMember(Name = "fiscalYear", EmitDefaultValue = true)]
        public int? FiscalYear { get; set; }

        /// <summary>
        /// The official ending date of the fiscal period (YYYY-MM-DD).
        /// </summary>
        /// <value>The official ending date of the fiscal period (YYYY-MM-DD).</value>
        [DataMember(Name = "fiscalEndDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? FiscalEndDate { get; set; }

        /// <summary>
        /// Currency of the reported &#x60;value&#x60;, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency of the reported &#x60;value&#x60;, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public FundamentalValue Value { get; set; }

        /// <summary>
        /// Start of Point-in-Time (inclusive, in UTC) during which this value was current. Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If frequency is weekly (w) or monthly (m), this will be null. 
        /// </summary>
        /// <value>Start of Point-in-Time (inclusive, in UTC) during which this value was current. Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If frequency is weekly (w) or monthly (m), this will be null. </value>
        [DataMember(Name = "pitStart", EmitDefaultValue = true)]
        public DateTime? PitStart { get; set; }

        /// <summary>
        /// End of Point-in-Time (inclusive, in UTC). Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If value is &#x60;null&#x60; -&gt; this value is current (latest active snapshot). If frequency is weekly or monthly, and this is an end-of-week or end-of-month snapshot -&gt; &#x60;pitStart&#x60; will be null. 
        /// </summary>
        /// <value>End of Point-in-Time (inclusive, in UTC). Format: ISO 8601 &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. If value is &#x60;null&#x60; -&gt; this value is current (latest active snapshot). If frequency is weekly or monthly, and this is an end-of-week or end-of-month snapshot -&gt; &#x60;pitStart&#x60; will be null. </value>
        [DataMember(Name = "pitEnd", EmitDefaultValue = true)]
        public DateTime? PitEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundamentalsPITData {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Periodicity: ").Append(Periodicity).Append("\n");
            sb.Append("  FiscalPeriod: ").Append(FiscalPeriod).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  FiscalEndDate: ").Append(FiscalEndDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  UpdateType: ").Append(UpdateType).Append("\n");
            sb.Append("  PitStart: ").Append(PitStart).Append("\n");
            sb.Append("  PitEnd: ").Append(PitEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundamentalsPITData);
        }

        /// <summary>
        /// Returns true if FundamentalsPITData instances are equal
        /// </summary>
        /// <param name="input">Instance of FundamentalsPITData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundamentalsPITData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Metric == input.Metric ||
                    (this.Metric != null &&
                    this.Metric.Equals(input.Metric))
                ) && 
                (
                    this.Periodicity == input.Periodicity ||
                    (this.Periodicity != null &&
                    this.Periodicity.Equals(input.Periodicity))
                ) && 
                (
                    this.FiscalPeriod == input.FiscalPeriod ||
                    (this.FiscalPeriod != null &&
                    this.FiscalPeriod.Equals(input.FiscalPeriod))
                ) && 
                (
                    this.FiscalYear == input.FiscalYear ||
                    (this.FiscalYear != null &&
                    this.FiscalYear.Equals(input.FiscalYear))
                ) && 
                (
                    this.FiscalEndDate == input.FiscalEndDate ||
                    (this.FiscalEndDate != null &&
                    this.FiscalEndDate.Equals(input.FiscalEndDate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.UpdateType == input.UpdateType ||
                    this.UpdateType.Equals(input.UpdateType)
                ) && 
                (
                    this.PitStart == input.PitStart ||
                    (this.PitStart != null &&
                    this.PitStart.Equals(input.PitStart))
                ) && 
                (
                    this.PitEnd == input.PitEnd ||
                    (this.PitEnd != null &&
                    this.PitEnd.Equals(input.PitEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Metric != null)
                {
                    hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                }
                if (this.Periodicity != null)
                {
                    hashCode = (hashCode * 59) + this.Periodicity.GetHashCode();
                }
                if (this.FiscalPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalPeriod.GetHashCode();
                }
                if (this.FiscalYear != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalYear.GetHashCode();
                }
                if (this.FiscalEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalEndDate.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateType.GetHashCode();
                if (this.PitStart != null)
                {
                    hashCode = (hashCode * 59) + this.PitStart.GetHashCode();
                }
                if (this.PitEnd != null)
                {
                    hashCode = (hashCode * 59) + this.PitEnd.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
