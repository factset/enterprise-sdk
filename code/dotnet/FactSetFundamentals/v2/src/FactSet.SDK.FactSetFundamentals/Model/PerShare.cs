/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// PerShare
    /// </summary>
    [DataContract(Name = "PerShare")]
    public partial class PerShare : IEquatable<PerShare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerShare" /> class.
        /// </summary>
        /// <param name="bookValuePerShare">Book value per common share is a formula used to calculate the per share value of a company based on common shareholders&#39; equity in the company.</param>
        /// <param name="cashFlowPerShare">Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company’s net income with the costs of depreciation and amortization added back.</param>
        /// <param name="cashPerShare">Cash Per Share of Security.</param>
        /// <param name="earningsPerShare">Earnings per share (EPS) is the portion of a company&#39;s profit allocated to each share of common stock.</param>
        /// <param name="revenuePerShare">The portion of a company&#39;s revenue that is allocated to each share of common stock..</param>
        /// <param name="salesPerShare">Sales per share is a ratio that computes the total revenue earned per share over a designated period.</param>
        /// <param name="trailingTwelveMonthEarningsPerShare">Earnings per share over the last 12 months..</param>
        public PerShare(double? bookValuePerShare = default(double?), double? cashFlowPerShare = default(double?), double? cashPerShare = default(double?), double? earningsPerShare = default(double?), double? revenuePerShare = default(double?), double? salesPerShare = default(double?), double? trailingTwelveMonthEarningsPerShare = default(double?))
        {
            this.BookValuePerShare = bookValuePerShare;
            this.CashFlowPerShare = cashFlowPerShare;
            this.CashPerShare = cashPerShare;
            this.EarningsPerShare = earningsPerShare;
            this.RevenuePerShare = revenuePerShare;
            this.SalesPerShare = salesPerShare;
            this.TrailingTwelveMonthEarningsPerShare = trailingTwelveMonthEarningsPerShare;
        }

        /// <summary>
        /// Book value per common share is a formula used to calculate the per share value of a company based on common shareholders&#39; equity in the company
        /// </summary>
        /// <value>Book value per common share is a formula used to calculate the per share value of a company based on common shareholders&#39; equity in the company</value>
        [DataMember(Name = "bookValuePerShare", EmitDefaultValue = true)]
        public double? BookValuePerShare { get; set; }

        /// <summary>
        /// Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company’s net income with the costs of depreciation and amortization added back
        /// </summary>
        /// <value>Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company’s net income with the costs of depreciation and amortization added back</value>
        [DataMember(Name = "cashFlowPerShare", EmitDefaultValue = true)]
        public double? CashFlowPerShare { get; set; }

        /// <summary>
        /// Cash Per Share of Security
        /// </summary>
        /// <value>Cash Per Share of Security</value>
        [DataMember(Name = "cashPerShare", EmitDefaultValue = true)]
        public double? CashPerShare { get; set; }

        /// <summary>
        /// Earnings per share (EPS) is the portion of a company&#39;s profit allocated to each share of common stock
        /// </summary>
        /// <value>Earnings per share (EPS) is the portion of a company&#39;s profit allocated to each share of common stock</value>
        [DataMember(Name = "earningsPerShare", EmitDefaultValue = true)]
        public double? EarningsPerShare { get; set; }

        /// <summary>
        /// The portion of a company&#39;s revenue that is allocated to each share of common stock.
        /// </summary>
        /// <value>The portion of a company&#39;s revenue that is allocated to each share of common stock.</value>
        [DataMember(Name = "revenuePerShare", EmitDefaultValue = true)]
        public double? RevenuePerShare { get; set; }

        /// <summary>
        /// Sales per share is a ratio that computes the total revenue earned per share over a designated period
        /// </summary>
        /// <value>Sales per share is a ratio that computes the total revenue earned per share over a designated period</value>
        [DataMember(Name = "salesPerShare", EmitDefaultValue = true)]
        public double? SalesPerShare { get; set; }

        /// <summary>
        /// Earnings per share over the last 12 months.
        /// </summary>
        /// <value>Earnings per share over the last 12 months.</value>
        [DataMember(Name = "trailingTwelveMonthEarningsPerShare", EmitDefaultValue = true)]
        public double? TrailingTwelveMonthEarningsPerShare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PerShare {\n");
            sb.Append("  BookValuePerShare: ").Append(BookValuePerShare).Append("\n");
            sb.Append("  CashFlowPerShare: ").Append(CashFlowPerShare).Append("\n");
            sb.Append("  CashPerShare: ").Append(CashPerShare).Append("\n");
            sb.Append("  EarningsPerShare: ").Append(EarningsPerShare).Append("\n");
            sb.Append("  RevenuePerShare: ").Append(RevenuePerShare).Append("\n");
            sb.Append("  SalesPerShare: ").Append(SalesPerShare).Append("\n");
            sb.Append("  TrailingTwelveMonthEarningsPerShare: ").Append(TrailingTwelveMonthEarningsPerShare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerShare);
        }

        /// <summary>
        /// Returns true if PerShare instances are equal
        /// </summary>
        /// <param name="input">Instance of PerShare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerShare input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BookValuePerShare == input.BookValuePerShare ||
                    (this.BookValuePerShare != null &&
                    this.BookValuePerShare.Equals(input.BookValuePerShare))
                ) && 
                (
                    this.CashFlowPerShare == input.CashFlowPerShare ||
                    (this.CashFlowPerShare != null &&
                    this.CashFlowPerShare.Equals(input.CashFlowPerShare))
                ) && 
                (
                    this.CashPerShare == input.CashPerShare ||
                    (this.CashPerShare != null &&
                    this.CashPerShare.Equals(input.CashPerShare))
                ) && 
                (
                    this.EarningsPerShare == input.EarningsPerShare ||
                    (this.EarningsPerShare != null &&
                    this.EarningsPerShare.Equals(input.EarningsPerShare))
                ) && 
                (
                    this.RevenuePerShare == input.RevenuePerShare ||
                    (this.RevenuePerShare != null &&
                    this.RevenuePerShare.Equals(input.RevenuePerShare))
                ) && 
                (
                    this.SalesPerShare == input.SalesPerShare ||
                    (this.SalesPerShare != null &&
                    this.SalesPerShare.Equals(input.SalesPerShare))
                ) && 
                (
                    this.TrailingTwelveMonthEarningsPerShare == input.TrailingTwelveMonthEarningsPerShare ||
                    (this.TrailingTwelveMonthEarningsPerShare != null &&
                    this.TrailingTwelveMonthEarningsPerShare.Equals(input.TrailingTwelveMonthEarningsPerShare))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BookValuePerShare != null)
                {
                    hashCode = (hashCode * 59) + this.BookValuePerShare.GetHashCode();
                }
                if (this.CashFlowPerShare != null)
                {
                    hashCode = (hashCode * 59) + this.CashFlowPerShare.GetHashCode();
                }
                if (this.CashPerShare != null)
                {
                    hashCode = (hashCode * 59) + this.CashPerShare.GetHashCode();
                }
                if (this.EarningsPerShare != null)
                {
                    hashCode = (hashCode * 59) + this.EarningsPerShare.GetHashCode();
                }
                if (this.RevenuePerShare != null)
                {
                    hashCode = (hashCode * 59) + this.RevenuePerShare.GetHashCode();
                }
                if (this.SalesPerShare != null)
                {
                    hashCode = (hashCode * 59) + this.SalesPerShare.GetHashCode();
                }
                if (this.TrailingTwelveMonthEarningsPerShare != null)
                {
                    hashCode = (hashCode * 59) + this.TrailingTwelveMonthEarningsPerShare.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
