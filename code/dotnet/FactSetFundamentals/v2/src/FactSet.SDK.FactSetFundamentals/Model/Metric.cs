/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Metric
    /// </summary>
    [DataContract(Name = "Metric")]
    public partial class Metric : IEquatable<Metric>, IValidatableObject
    {
        /// <summary>
        /// An indicator for which Standard Data Feed (SDF) package the item is available in - BASIC or ADVANCED. A null value represents items available only in API.
        /// </summary>
        /// <value>An indicator for which Standard Data Feed (SDF) package the item is available in - BASIC or ADVANCED. A null value represents items available only in API.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SdfPackageEnum
        {
            /// <summary>
            /// Enum BASIC for value: BASIC
            /// </summary>
            [EnumMember(Value = "BASIC")]
            BASIC = 1,

            /// <summary>
            /// Enum ADVANCED for value: ADVANCED
            /// </summary>
            [EnumMember(Value = "ADVANCED")]
            ADVANCED = 2

        }


        /// <summary>
        /// An indicator for which Standard Data Feed (SDF) package the item is available in - BASIC or ADVANCED. A null value represents items available only in API.
        /// </summary>
        /// <value>An indicator for which Standard Data Feed (SDF) package the item is available in - BASIC or ADVANCED. A null value represents items available only in API.</value>
        [DataMember(Name = "sdfPackage", EmitDefaultValue = true)]
        public SdfPackageEnum? SdfPackage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metric" /> class.
        /// </summary>
        /// <param name="metric">Metric identifier to be used as &#x60;metrics&#x60; input in &#x60;/fundamentals/v2/fundamentals&#x60; endpoint..</param>
        /// <param name="name">Plain text name of the metric..</param>
        /// <param name="category">Primary Category of metric item, such as, INCOME_STATEMENT, BALANCE_SHEET, CASH_FLOW, or RATIOS..</param>
        /// <param name="subcategory">Sub-category of metric item, such as ASSETS, SUPPLEMENTAL, SHAREHOLDERS_EQUITY, VALUATION, PROFITABILITY, etc..</param>
        /// <param name="isPIT">Flag indicating if the metric is available in Point-in-Time (PIT) datasets, and can be used with the &#x60;/point-in-time&#x60; endpoint..</param>
        /// <param name="isNonPIT">Flag indicating if the metric is available in non-Point-in-Time (non-PIT) datasets, and can be used with the &#x60;/fundamentals&#x60; endpoint. A metric can be available in both PIT and non-PIT datasets..</param>
        /// <param name="oaPageId">The Online Assistant Page ID in D***** format, used to look up the definition and methodology of the requested item. Visit my.apps.factset.com/oa/pages/[D*****] for details. For example, https://my.apps.factset.com/oa/pages/D10585 will give you the definition for FF_SALES..</param>
        /// <param name="description">Description of the metric item..</param>
        /// <param name="oaUrl">The Online Assistant Page URL, is used to look up the definition and methodology of the requested item. For example, https://my.apps.factset.com/oa/pages/D10585 will give you the definition for FF_SALES..</param>
        /// <param name="factor">The factor for the metric (e.g. 1000 &#x3D; thousands)..</param>
        /// <param name="sdfPackage">An indicator for which Standard Data Feed (SDF) package the item is available in - BASIC or ADVANCED. A null value represents items available only in API..</param>
        /// <param name="dataType">The data type for the metric. Make note, mixing data types within a single /fundamentals API is not supported. Each dataType is defined below -   * **date** - date format expressed in YYYY-MM-DD.   * **doubleArray** - A double is a FactSet data type, similar to a float or an integer. A double represents numeric data but provides a greater amount of decimal precision than the float data type. Double values have up to 15 digits of precision, while float values have up to 7 digits (integers have up to 10 digits).   * **float** - A float value is a real number (i.e., a number that can contain a fractional part/decimals). A float value has a precision of up to seven digits and accurately represents numbers whose absolute value is less than 16,277,216 (224). An example metric includes   * **floatArray** - Function will hold data for multiple periods, as well as for many companies (i.e., two-dimensional value). The FLOATARRAY function returns data using a vertical orientation (e.g., down a column). The difference between FLOAT and FLOATARRAY is that FLOAT can only go across a row (one-dimension; horizontal orientation; vertical length&#x3D;1) whereas FLOATARRAY will return data both across a row and down a column (two-dimensions; vertical orientation). With FLOATARRAY, the number of data points across a row will correspond to the number of companies queried; the number of data points down a column will correspond to the length of the time series.   * **intArray** - An integer is a whole number or zero (i.e., integers do not include decimals). Integers can be positive or negative.   * **string** - A string value is an ASCII character. A string is a sequence of ASCII characters. String value and text value are synonymous. The function will hold data for multiple time periods, as well as for many companies (i.e., two-dimensional value). The STRING_ARRAY function returns data using a vertical orientation (e.g., down a column)   * **stringArray** - The difference between STRING and STRINGARRAY is that STRING can only go across a row (one-dimension; horizontal orientation; vertical length&#x3D;1) whereas STRINGARRAY will return data both across a row and down a column (two-dimensions; vertical orientation). With STRINGARRAY, the number of data points across a row will correspond to the number of companies queried; the number of data points down a column will correspond to the length of the time series..</param>
        public Metric(string metric = default(string), string name = default(string), string category = default(string), string subcategory = default(string), bool isPIT = default(bool), bool isNonPIT = default(bool), string oaPageId = default(string), string description = default(string), string oaUrl = default(string), int? factor = default(int?), SdfPackageEnum? sdfPackage = default(SdfPackageEnum?), string dataType = default(string))
        {
            this._Metric = metric;
            this.Name = name;
            this.Category = category;
            this.Subcategory = subcategory;
            this.IsPIT = isPIT;
            this.IsNonPIT = isNonPIT;
            this.OaPageId = oaPageId;
            this.Description = description;
            this.OaUrl = oaUrl;
            this.Factor = factor;
            this.SdfPackage = sdfPackage;
            this.DataType = dataType;
        }

        /// <summary>
        /// Metric identifier to be used as &#x60;metrics&#x60; input in &#x60;/fundamentals/v2/fundamentals&#x60; endpoint.
        /// </summary>
        /// <value>Metric identifier to be used as &#x60;metrics&#x60; input in &#x60;/fundamentals/v2/fundamentals&#x60; endpoint.</value>
        [DataMember(Name = "metric", EmitDefaultValue = true)]
        public string _Metric { get; set; }

        /// <summary>
        /// Plain text name of the metric.
        /// </summary>
        /// <value>Plain text name of the metric.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Primary Category of metric item, such as, INCOME_STATEMENT, BALANCE_SHEET, CASH_FLOW, or RATIOS.
        /// </summary>
        /// <value>Primary Category of metric item, such as, INCOME_STATEMENT, BALANCE_SHEET, CASH_FLOW, or RATIOS.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Sub-category of metric item, such as ASSETS, SUPPLEMENTAL, SHAREHOLDERS_EQUITY, VALUATION, PROFITABILITY, etc.
        /// </summary>
        /// <value>Sub-category of metric item, such as ASSETS, SUPPLEMENTAL, SHAREHOLDERS_EQUITY, VALUATION, PROFITABILITY, etc.</value>
        [DataMember(Name = "subcategory", EmitDefaultValue = true)]
        public string Subcategory { get; set; }

        /// <summary>
        /// Flag indicating if the metric is available in Point-in-Time (PIT) datasets, and can be used with the &#x60;/point-in-time&#x60; endpoint.
        /// </summary>
        /// <value>Flag indicating if the metric is available in Point-in-Time (PIT) datasets, and can be used with the &#x60;/point-in-time&#x60; endpoint.</value>
        [DataMember(Name = "isPIT", EmitDefaultValue = true)]
        public bool IsPIT { get; set; }

        /// <summary>
        /// Flag indicating if the metric is available in non-Point-in-Time (non-PIT) datasets, and can be used with the &#x60;/fundamentals&#x60; endpoint. A metric can be available in both PIT and non-PIT datasets.
        /// </summary>
        /// <value>Flag indicating if the metric is available in non-Point-in-Time (non-PIT) datasets, and can be used with the &#x60;/fundamentals&#x60; endpoint. A metric can be available in both PIT and non-PIT datasets.</value>
        [DataMember(Name = "isNonPIT", EmitDefaultValue = true)]
        public bool IsNonPIT { get; set; }

        /// <summary>
        /// The Online Assistant Page ID in D***** format, used to look up the definition and methodology of the requested item. Visit my.apps.factset.com/oa/pages/[D*****] for details. For example, https://my.apps.factset.com/oa/pages/D10585 will give you the definition for FF_SALES.
        /// </summary>
        /// <value>The Online Assistant Page ID in D***** format, used to look up the definition and methodology of the requested item. Visit my.apps.factset.com/oa/pages/[D*****] for details. For example, https://my.apps.factset.com/oa/pages/D10585 will give you the definition for FF_SALES.</value>
        [DataMember(Name = "oaPageId", EmitDefaultValue = true)]
        public string OaPageId { get; set; }

        /// <summary>
        /// Description of the metric item.
        /// </summary>
        /// <value>Description of the metric item.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The Online Assistant Page URL, is used to look up the definition and methodology of the requested item. For example, https://my.apps.factset.com/oa/pages/D10585 will give you the definition for FF_SALES.
        /// </summary>
        /// <value>The Online Assistant Page URL, is used to look up the definition and methodology of the requested item. For example, https://my.apps.factset.com/oa/pages/D10585 will give you the definition for FF_SALES.</value>
        [DataMember(Name = "oaUrl", EmitDefaultValue = true)]
        public string OaUrl { get; set; }

        /// <summary>
        /// The factor for the metric (e.g. 1000 &#x3D; thousands).
        /// </summary>
        /// <value>The factor for the metric (e.g. 1000 &#x3D; thousands).</value>
        [DataMember(Name = "factor", EmitDefaultValue = true)]
        public int? Factor { get; set; }

        /// <summary>
        /// The data type for the metric. Make note, mixing data types within a single /fundamentals API is not supported. Each dataType is defined below -   * **date** - date format expressed in YYYY-MM-DD.   * **doubleArray** - A double is a FactSet data type, similar to a float or an integer. A double represents numeric data but provides a greater amount of decimal precision than the float data type. Double values have up to 15 digits of precision, while float values have up to 7 digits (integers have up to 10 digits).   * **float** - A float value is a real number (i.e., a number that can contain a fractional part/decimals). A float value has a precision of up to seven digits and accurately represents numbers whose absolute value is less than 16,277,216 (224). An example metric includes   * **floatArray** - Function will hold data for multiple periods, as well as for many companies (i.e., two-dimensional value). The FLOATARRAY function returns data using a vertical orientation (e.g., down a column). The difference between FLOAT and FLOATARRAY is that FLOAT can only go across a row (one-dimension; horizontal orientation; vertical length&#x3D;1) whereas FLOATARRAY will return data both across a row and down a column (two-dimensions; vertical orientation). With FLOATARRAY, the number of data points across a row will correspond to the number of companies queried; the number of data points down a column will correspond to the length of the time series.   * **intArray** - An integer is a whole number or zero (i.e., integers do not include decimals). Integers can be positive or negative.   * **string** - A string value is an ASCII character. A string is a sequence of ASCII characters. String value and text value are synonymous. The function will hold data for multiple time periods, as well as for many companies (i.e., two-dimensional value). The STRING_ARRAY function returns data using a vertical orientation (e.g., down a column)   * **stringArray** - The difference between STRING and STRINGARRAY is that STRING can only go across a row (one-dimension; horizontal orientation; vertical length&#x3D;1) whereas STRINGARRAY will return data both across a row and down a column (two-dimensions; vertical orientation). With STRINGARRAY, the number of data points across a row will correspond to the number of companies queried; the number of data points down a column will correspond to the length of the time series.
        /// </summary>
        /// <value>The data type for the metric. Make note, mixing data types within a single /fundamentals API is not supported. Each dataType is defined below -   * **date** - date format expressed in YYYY-MM-DD.   * **doubleArray** - A double is a FactSet data type, similar to a float or an integer. A double represents numeric data but provides a greater amount of decimal precision than the float data type. Double values have up to 15 digits of precision, while float values have up to 7 digits (integers have up to 10 digits).   * **float** - A float value is a real number (i.e., a number that can contain a fractional part/decimals). A float value has a precision of up to seven digits and accurately represents numbers whose absolute value is less than 16,277,216 (224). An example metric includes   * **floatArray** - Function will hold data for multiple periods, as well as for many companies (i.e., two-dimensional value). The FLOATARRAY function returns data using a vertical orientation (e.g., down a column). The difference between FLOAT and FLOATARRAY is that FLOAT can only go across a row (one-dimension; horizontal orientation; vertical length&#x3D;1) whereas FLOATARRAY will return data both across a row and down a column (two-dimensions; vertical orientation). With FLOATARRAY, the number of data points across a row will correspond to the number of companies queried; the number of data points down a column will correspond to the length of the time series.   * **intArray** - An integer is a whole number or zero (i.e., integers do not include decimals). Integers can be positive or negative.   * **string** - A string value is an ASCII character. A string is a sequence of ASCII characters. String value and text value are synonymous. The function will hold data for multiple time periods, as well as for many companies (i.e., two-dimensional value). The STRING_ARRAY function returns data using a vertical orientation (e.g., down a column)   * **stringArray** - The difference between STRING and STRINGARRAY is that STRING can only go across a row (one-dimension; horizontal orientation; vertical length&#x3D;1) whereas STRINGARRAY will return data both across a row and down a column (two-dimensions; vertical orientation). With STRINGARRAY, the number of data points across a row will correspond to the number of companies queried; the number of data points down a column will correspond to the length of the time series.</value>
        [DataMember(Name = "dataType", EmitDefaultValue = true)]
        public string DataType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Metric {\n");
            sb.Append("  _Metric: ").Append(_Metric).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  IsPIT: ").Append(IsPIT).Append("\n");
            sb.Append("  IsNonPIT: ").Append(IsNonPIT).Append("\n");
            sb.Append("  OaPageId: ").Append(OaPageId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OaUrl: ").Append(OaUrl).Append("\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  SdfPackage: ").Append(SdfPackage).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metric);
        }

        /// <summary>
        /// Returns true if Metric instances are equal
        /// </summary>
        /// <param name="input">Instance of Metric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metric input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Metric == input._Metric ||
                    (this._Metric != null &&
                    this._Metric.Equals(input._Metric))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Subcategory == input.Subcategory ||
                    (this.Subcategory != null &&
                    this.Subcategory.Equals(input.Subcategory))
                ) && 
                (
                    this.IsPIT == input.IsPIT ||
                    this.IsPIT.Equals(input.IsPIT)
                ) && 
                (
                    this.IsNonPIT == input.IsNonPIT ||
                    this.IsNonPIT.Equals(input.IsNonPIT)
                ) && 
                (
                    this.OaPageId == input.OaPageId ||
                    (this.OaPageId != null &&
                    this.OaPageId.Equals(input.OaPageId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.OaUrl == input.OaUrl ||
                    (this.OaUrl != null &&
                    this.OaUrl.Equals(input.OaUrl))
                ) && 
                (
                    this.Factor == input.Factor ||
                    (this.Factor != null &&
                    this.Factor.Equals(input.Factor))
                ) && 
                (
                    this.SdfPackage == input.SdfPackage ||
                    this.SdfPackage.Equals(input.SdfPackage)
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Metric != null)
                {
                    hashCode = (hashCode * 59) + this._Metric.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Subcategory != null)
                {
                    hashCode = (hashCode * 59) + this.Subcategory.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPIT.GetHashCode();
                hashCode = (hashCode * 59) + this.IsNonPIT.GetHashCode();
                if (this.OaPageId != null)
                {
                    hashCode = (hashCode * 59) + this.OaPageId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.OaUrl != null)
                {
                    hashCode = (hashCode * 59) + this.OaUrl.GetHashCode();
                }
                if (this.Factor != null)
                {
                    hashCode = (hashCode * 59) + this.Factor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SdfPackage.GetHashCode();
                if (this.DataType != null)
                {
                    hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
