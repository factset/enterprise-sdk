/*
 * FactSet Fundamentals API
 *
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetFundamentals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetFundamentals.Model
{
    /// <summary>
    /// Ratios
    /// </summary>
    [DataContract(Name = "Ratios")]
    public partial class Ratios : IEquatable<Ratios>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ratios" /> class.
        /// </summary>
        /// <param name="assetTurnoverRatio">The asset turnover ratio measures the value of a company&#39;s sales or revenues relative to the value of its assets.</param>
        /// <param name="currentRatio">The current ratio is a liquidity ratio that measures a company&#39;s ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities.</param>
        /// <param name="quickRatio">The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities.</param>
        /// <param name="ebitMargin">EBIT margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue.</param>
        /// <param name="ebitdaMargin">EBITDA margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue.</param>
        /// <param name="grossMargin">Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues..</param>
        /// <param name="inventoryTurnover">Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period.</param>
        /// <param name="longTermDebtToEquity">Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities lasting over one year by its shareholder equity.</param>
        /// <param name="payoutRatio">The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.</param>
        /// <param name="pretaxMargin">The pretax margin is the ratio of a company&#39;s pre-tax earnings to its total sales.</param>
        /// <param name="priceToBookRatio">Companies use the price-to-book ratio to compare a firm&#39;s market to book value by dividing price per share by book value per share (BVPS) ..</param>
        /// <param name="priceToCashFlowRatio">The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stock’s price relative to its operating cash flow per share..</param>
        /// <param name="priceToEarningsRatio">The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings.</param>
        /// <param name="priceToSalesRatio">The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a company’s stock price to its revenues.</param>
        /// <param name="returnOnAssets">Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital.</param>
        /// <param name="returnOnEquity">Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders&#39; equity.</param>
        /// <param name="returnOnInvestedCapital">Return on Investment (ROI) measures how well an investment is performing.</param>
        /// <param name="totalDebtToEquity">The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity.</param>
        public Ratios(double? assetTurnoverRatio = default(double?), double? currentRatio = default(double?), double? quickRatio = default(double?), double? ebitMargin = default(double?), double? ebitdaMargin = default(double?), double? grossMargin = default(double?), double? inventoryTurnover = default(double?), double? longTermDebtToEquity = default(double?), double? payoutRatio = default(double?), double? pretaxMargin = default(double?), double? priceToBookRatio = default(double?), double? priceToCashFlowRatio = default(double?), double? priceToEarningsRatio = default(double?), double? priceToSalesRatio = default(double?), double? returnOnAssets = default(double?), double? returnOnEquity = default(double?), double? returnOnInvestedCapital = default(double?), double? totalDebtToEquity = default(double?))
        {
            this.AssetTurnoverRatio = assetTurnoverRatio;
            this.CurrentRatio = currentRatio;
            this.QuickRatio = quickRatio;
            this.EbitMargin = ebitMargin;
            this.EbitdaMargin = ebitdaMargin;
            this.GrossMargin = grossMargin;
            this.InventoryTurnover = inventoryTurnover;
            this.LongTermDebtToEquity = longTermDebtToEquity;
            this.PayoutRatio = payoutRatio;
            this.PretaxMargin = pretaxMargin;
            this.PriceToBookRatio = priceToBookRatio;
            this.PriceToCashFlowRatio = priceToCashFlowRatio;
            this.PriceToEarningsRatio = priceToEarningsRatio;
            this.PriceToSalesRatio = priceToSalesRatio;
            this.ReturnOnAssets = returnOnAssets;
            this.ReturnOnEquity = returnOnEquity;
            this.ReturnOnInvestedCapital = returnOnInvestedCapital;
            this.TotalDebtToEquity = totalDebtToEquity;
        }

        /// <summary>
        /// The asset turnover ratio measures the value of a company&#39;s sales or revenues relative to the value of its assets
        /// </summary>
        /// <value>The asset turnover ratio measures the value of a company&#39;s sales or revenues relative to the value of its assets</value>
        [DataMember(Name = "assetTurnoverRatio", EmitDefaultValue = true)]
        public double? AssetTurnoverRatio { get; set; }

        /// <summary>
        /// The current ratio is a liquidity ratio that measures a company&#39;s ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities
        /// </summary>
        /// <value>The current ratio is a liquidity ratio that measures a company&#39;s ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities</value>
        [DataMember(Name = "currentRatio", EmitDefaultValue = true)]
        public double? CurrentRatio { get; set; }

        /// <summary>
        /// The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities
        /// </summary>
        /// <value>The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities</value>
        [DataMember(Name = "quickRatio", EmitDefaultValue = true)]
        public double? QuickRatio { get; set; }

        /// <summary>
        /// EBIT margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue
        /// </summary>
        /// <value>EBIT margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue</value>
        [DataMember(Name = "ebitMargin", EmitDefaultValue = true)]
        public double? EbitMargin { get; set; }

        /// <summary>
        /// EBITDA margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue
        /// </summary>
        /// <value>EBITDA margin is an assessment of a firm&#39;s operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue</value>
        [DataMember(Name = "ebitdaMargin", EmitDefaultValue = true)]
        public double? EbitdaMargin { get; set; }

        /// <summary>
        /// Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues.
        /// </summary>
        /// <value>Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues.</value>
        [DataMember(Name = "grossMargin", EmitDefaultValue = true)]
        public double? GrossMargin { get; set; }

        /// <summary>
        /// Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period
        /// </summary>
        /// <value>Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period</value>
        [DataMember(Name = "inventoryTurnover", EmitDefaultValue = true)]
        public double? InventoryTurnover { get; set; }

        /// <summary>
        /// Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities lasting over one year by its shareholder equity
        /// </summary>
        /// <value>Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities lasting over one year by its shareholder equity</value>
        [DataMember(Name = "longTermDebtToEquity", EmitDefaultValue = true)]
        public double? LongTermDebtToEquity { get; set; }

        /// <summary>
        /// The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company
        /// </summary>
        /// <value>The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company</value>
        [DataMember(Name = "payoutRatio", EmitDefaultValue = true)]
        public double? PayoutRatio { get; set; }

        /// <summary>
        /// The pretax margin is the ratio of a company&#39;s pre-tax earnings to its total sales
        /// </summary>
        /// <value>The pretax margin is the ratio of a company&#39;s pre-tax earnings to its total sales</value>
        [DataMember(Name = "pretaxMargin", EmitDefaultValue = true)]
        public double? PretaxMargin { get; set; }

        /// <summary>
        /// Companies use the price-to-book ratio to compare a firm&#39;s market to book value by dividing price per share by book value per share (BVPS) .
        /// </summary>
        /// <value>Companies use the price-to-book ratio to compare a firm&#39;s market to book value by dividing price per share by book value per share (BVPS) .</value>
        [DataMember(Name = "priceToBookRatio", EmitDefaultValue = true)]
        public double? PriceToBookRatio { get; set; }

        /// <summary>
        /// The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stock’s price relative to its operating cash flow per share.
        /// </summary>
        /// <value>The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stock’s price relative to its operating cash flow per share.</value>
        [DataMember(Name = "priceToCashFlowRatio", EmitDefaultValue = true)]
        public double? PriceToCashFlowRatio { get; set; }

        /// <summary>
        /// The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings
        /// </summary>
        /// <value>The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings</value>
        [DataMember(Name = "priceToEarningsRatio", EmitDefaultValue = true)]
        public double? PriceToEarningsRatio { get; set; }

        /// <summary>
        /// The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a company’s stock price to its revenues
        /// </summary>
        /// <value>The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a company’s stock price to its revenues</value>
        [DataMember(Name = "priceToSalesRatio", EmitDefaultValue = true)]
        public double? PriceToSalesRatio { get; set; }

        /// <summary>
        /// Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital
        /// </summary>
        /// <value>Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital</value>
        [DataMember(Name = "returnOnAssets", EmitDefaultValue = true)]
        public double? ReturnOnAssets { get; set; }

        /// <summary>
        /// Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders&#39; equity
        /// </summary>
        /// <value>Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders&#39; equity</value>
        [DataMember(Name = "returnOnEquity", EmitDefaultValue = true)]
        public double? ReturnOnEquity { get; set; }

        /// <summary>
        /// Return on Investment (ROI) measures how well an investment is performing
        /// </summary>
        /// <value>Return on Investment (ROI) measures how well an investment is performing</value>
        [DataMember(Name = "returnOnInvestedCapital", EmitDefaultValue = true)]
        public double? ReturnOnInvestedCapital { get; set; }

        /// <summary>
        /// The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity
        /// </summary>
        /// <value>The Debt/Equity (D/E) Ratio is calculated by dividing a company’s total liabilities by its shareholder equity</value>
        [DataMember(Name = "totalDebtToEquity", EmitDefaultValue = true)]
        public double? TotalDebtToEquity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ratios {\n");
            sb.Append("  AssetTurnoverRatio: ").Append(AssetTurnoverRatio).Append("\n");
            sb.Append("  CurrentRatio: ").Append(CurrentRatio).Append("\n");
            sb.Append("  QuickRatio: ").Append(QuickRatio).Append("\n");
            sb.Append("  EbitMargin: ").Append(EbitMargin).Append("\n");
            sb.Append("  EbitdaMargin: ").Append(EbitdaMargin).Append("\n");
            sb.Append("  GrossMargin: ").Append(GrossMargin).Append("\n");
            sb.Append("  InventoryTurnover: ").Append(InventoryTurnover).Append("\n");
            sb.Append("  LongTermDebtToEquity: ").Append(LongTermDebtToEquity).Append("\n");
            sb.Append("  PayoutRatio: ").Append(PayoutRatio).Append("\n");
            sb.Append("  PretaxMargin: ").Append(PretaxMargin).Append("\n");
            sb.Append("  PriceToBookRatio: ").Append(PriceToBookRatio).Append("\n");
            sb.Append("  PriceToCashFlowRatio: ").Append(PriceToCashFlowRatio).Append("\n");
            sb.Append("  PriceToEarningsRatio: ").Append(PriceToEarningsRatio).Append("\n");
            sb.Append("  PriceToSalesRatio: ").Append(PriceToSalesRatio).Append("\n");
            sb.Append("  ReturnOnAssets: ").Append(ReturnOnAssets).Append("\n");
            sb.Append("  ReturnOnEquity: ").Append(ReturnOnEquity).Append("\n");
            sb.Append("  ReturnOnInvestedCapital: ").Append(ReturnOnInvestedCapital).Append("\n");
            sb.Append("  TotalDebtToEquity: ").Append(TotalDebtToEquity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ratios);
        }

        /// <summary>
        /// Returns true if Ratios instances are equal
        /// </summary>
        /// <param name="input">Instance of Ratios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ratios input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetTurnoverRatio == input.AssetTurnoverRatio ||
                    (this.AssetTurnoverRatio != null &&
                    this.AssetTurnoverRatio.Equals(input.AssetTurnoverRatio))
                ) && 
                (
                    this.CurrentRatio == input.CurrentRatio ||
                    (this.CurrentRatio != null &&
                    this.CurrentRatio.Equals(input.CurrentRatio))
                ) && 
                (
                    this.QuickRatio == input.QuickRatio ||
                    (this.QuickRatio != null &&
                    this.QuickRatio.Equals(input.QuickRatio))
                ) && 
                (
                    this.EbitMargin == input.EbitMargin ||
                    (this.EbitMargin != null &&
                    this.EbitMargin.Equals(input.EbitMargin))
                ) && 
                (
                    this.EbitdaMargin == input.EbitdaMargin ||
                    (this.EbitdaMargin != null &&
                    this.EbitdaMargin.Equals(input.EbitdaMargin))
                ) && 
                (
                    this.GrossMargin == input.GrossMargin ||
                    (this.GrossMargin != null &&
                    this.GrossMargin.Equals(input.GrossMargin))
                ) && 
                (
                    this.InventoryTurnover == input.InventoryTurnover ||
                    (this.InventoryTurnover != null &&
                    this.InventoryTurnover.Equals(input.InventoryTurnover))
                ) && 
                (
                    this.LongTermDebtToEquity == input.LongTermDebtToEquity ||
                    (this.LongTermDebtToEquity != null &&
                    this.LongTermDebtToEquity.Equals(input.LongTermDebtToEquity))
                ) && 
                (
                    this.PayoutRatio == input.PayoutRatio ||
                    (this.PayoutRatio != null &&
                    this.PayoutRatio.Equals(input.PayoutRatio))
                ) && 
                (
                    this.PretaxMargin == input.PretaxMargin ||
                    (this.PretaxMargin != null &&
                    this.PretaxMargin.Equals(input.PretaxMargin))
                ) && 
                (
                    this.PriceToBookRatio == input.PriceToBookRatio ||
                    (this.PriceToBookRatio != null &&
                    this.PriceToBookRatio.Equals(input.PriceToBookRatio))
                ) && 
                (
                    this.PriceToCashFlowRatio == input.PriceToCashFlowRatio ||
                    (this.PriceToCashFlowRatio != null &&
                    this.PriceToCashFlowRatio.Equals(input.PriceToCashFlowRatio))
                ) && 
                (
                    this.PriceToEarningsRatio == input.PriceToEarningsRatio ||
                    (this.PriceToEarningsRatio != null &&
                    this.PriceToEarningsRatio.Equals(input.PriceToEarningsRatio))
                ) && 
                (
                    this.PriceToSalesRatio == input.PriceToSalesRatio ||
                    (this.PriceToSalesRatio != null &&
                    this.PriceToSalesRatio.Equals(input.PriceToSalesRatio))
                ) && 
                (
                    this.ReturnOnAssets == input.ReturnOnAssets ||
                    (this.ReturnOnAssets != null &&
                    this.ReturnOnAssets.Equals(input.ReturnOnAssets))
                ) && 
                (
                    this.ReturnOnEquity == input.ReturnOnEquity ||
                    (this.ReturnOnEquity != null &&
                    this.ReturnOnEquity.Equals(input.ReturnOnEquity))
                ) && 
                (
                    this.ReturnOnInvestedCapital == input.ReturnOnInvestedCapital ||
                    (this.ReturnOnInvestedCapital != null &&
                    this.ReturnOnInvestedCapital.Equals(input.ReturnOnInvestedCapital))
                ) && 
                (
                    this.TotalDebtToEquity == input.TotalDebtToEquity ||
                    (this.TotalDebtToEquity != null &&
                    this.TotalDebtToEquity.Equals(input.TotalDebtToEquity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetTurnoverRatio != null)
                {
                    hashCode = (hashCode * 59) + this.AssetTurnoverRatio.GetHashCode();
                }
                if (this.CurrentRatio != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentRatio.GetHashCode();
                }
                if (this.QuickRatio != null)
                {
                    hashCode = (hashCode * 59) + this.QuickRatio.GetHashCode();
                }
                if (this.EbitMargin != null)
                {
                    hashCode = (hashCode * 59) + this.EbitMargin.GetHashCode();
                }
                if (this.EbitdaMargin != null)
                {
                    hashCode = (hashCode * 59) + this.EbitdaMargin.GetHashCode();
                }
                if (this.GrossMargin != null)
                {
                    hashCode = (hashCode * 59) + this.GrossMargin.GetHashCode();
                }
                if (this.InventoryTurnover != null)
                {
                    hashCode = (hashCode * 59) + this.InventoryTurnover.GetHashCode();
                }
                if (this.LongTermDebtToEquity != null)
                {
                    hashCode = (hashCode * 59) + this.LongTermDebtToEquity.GetHashCode();
                }
                if (this.PayoutRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PayoutRatio.GetHashCode();
                }
                if (this.PretaxMargin != null)
                {
                    hashCode = (hashCode * 59) + this.PretaxMargin.GetHashCode();
                }
                if (this.PriceToBookRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PriceToBookRatio.GetHashCode();
                }
                if (this.PriceToCashFlowRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PriceToCashFlowRatio.GetHashCode();
                }
                if (this.PriceToEarningsRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PriceToEarningsRatio.GetHashCode();
                }
                if (this.PriceToSalesRatio != null)
                {
                    hashCode = (hashCode * 59) + this.PriceToSalesRatio.GetHashCode();
                }
                if (this.ReturnOnAssets != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnOnAssets.GetHashCode();
                }
                if (this.ReturnOnEquity != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnOnEquity.GetHashCode();
                }
                if (this.ReturnOnInvestedCapital != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnOnInvestedCapital.GetHashCode();
                }
                if (this.TotalDebtToEquity != null)
                {
                    hashCode = (hashCode * 59) + this.TotalDebtToEquity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
