/*
 * FactSet Prices API
 *
 * Gain access to comprehensive global coverage for Equities & Fixed Income. Perform quick analytics by controlling the date ranges, currencies, and rolling periods, or simply request Open, High, Low, and Close prices. Easily connect pricing data with other core company data or alternative content sets using FactSet's hub and spoke symbology. <p>Equity and Fund Security types include Common Stock, ADR, GDR, Preferred, Closed-ended Fund, Exchange Traded Fund, Unit, Open-ended Fund, Exchange Traded Fund UVI, Exchange Traded Fund NAV, Preferred Equity, Non-Voting Depositary Receipt/Certificate, Alien/Foreign, Structured Product, and Temporary Instruments. Reference over 180,000+ active and inactive securities.</p><p>Fixed Income Security Types include Corporate Bonds, Treasury and Agency bonds, Government Bonds, and Municipals.</p><p><b>Rate limit is set to 25 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPrices.Model
{
    /// <summary>
    /// HighLow
    /// </summary>
    [DataContract(Name = "highLow")]
    public partial class HighLow : IEquatable<HighLow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HighLow" /> class.
        /// </summary>
        /// <param name="adjDate">Date of last split for which prices have been adjusted..</param>
        /// <param name="date">Specific reference date for the period expressed in YYYY-MM-DD format..</param>
        /// <param name="period">The period of measure requested using the period query parameter..</param>
        /// <param name="fsymId">Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="priceHigh">High price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted..</param>
        /// <param name="priceLow">Low price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted..</param>
        /// <param name="priceHighDate">Date in which the highest price occurred over the requested period  for the given id expressed in YYYY-MM-DD format..</param>
        /// <param name="priceLowDate">Date in which the lowest price occurred over the requested period for the given id expressed in YYYY-MM-DD format..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        public HighLow(DateTime? adjDate = default(DateTime?), DateTime? date = default(DateTime?), string period = default(string), string fsymId = default(string), double? priceHigh = default(double?), double? priceLow = default(double?), DateTime? priceHighDate = default(DateTime?), DateTime? priceLowDate = default(DateTime?), string requestId = default(string))
        {
            this.AdjDate = adjDate;
            this.Date = date;
            this.Period = period;
            this.FsymId = fsymId;
            this.PriceHigh = priceHigh;
            this.PriceLow = priceLow;
            this.PriceHighDate = priceHighDate;
            this.PriceLowDate = priceLowDate;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Date of last split for which prices have been adjusted.
        /// </summary>
        /// <value>Date of last split for which prices have been adjusted.</value>
        [DataMember(Name = "adjDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? AdjDate { get; set; }

        /// <summary>
        /// Specific reference date for the period expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Specific reference date for the period expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// The period of measure requested using the period query parameter.
        /// </summary>
        /// <value>The period of measure requested using the period query parameter.</value>
        [DataMember(Name = "period", EmitDefaultValue = true)]
        public string Period { get; set; }

        /// <summary>
        /// Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// High price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.
        /// </summary>
        /// <value>High price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.</value>
        [DataMember(Name = "priceHigh", EmitDefaultValue = true)]
        public double? PriceHigh { get; set; }

        /// <summary>
        /// Low price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.
        /// </summary>
        /// <value>Low price over the period requested. This can represent the intra-day or closing price depending on the priceType requested. By default the price is as of closing in local trading currency, split adjusted and not spinoff adjusted.</value>
        [DataMember(Name = "priceLow", EmitDefaultValue = true)]
        public double? PriceLow { get; set; }

        /// <summary>
        /// Date in which the highest price occurred over the requested period  for the given id expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date in which the highest price occurred over the requested period  for the given id expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "priceHighDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PriceHighDate { get; set; }

        /// <summary>
        /// Date in which the lowest price occurred over the requested period for the given id expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Date in which the lowest price occurred over the requested period for the given id expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "priceLowDate", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? PriceLowDate { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HighLow {\n");
            sb.Append("  AdjDate: ").Append(AdjDate).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  PriceHigh: ").Append(PriceHigh).Append("\n");
            sb.Append("  PriceLow: ").Append(PriceLow).Append("\n");
            sb.Append("  PriceHighDate: ").Append(PriceHighDate).Append("\n");
            sb.Append("  PriceLowDate: ").Append(PriceLowDate).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HighLow);
        }

        /// <summary>
        /// Returns true if HighLow instances are equal
        /// </summary>
        /// <param name="input">Instance of HighLow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HighLow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdjDate == input.AdjDate ||
                    (this.AdjDate != null &&
                    this.AdjDate.Equals(input.AdjDate))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.PriceHigh == input.PriceHigh ||
                    (this.PriceHigh != null &&
                    this.PriceHigh.Equals(input.PriceHigh))
                ) && 
                (
                    this.PriceLow == input.PriceLow ||
                    (this.PriceLow != null &&
                    this.PriceLow.Equals(input.PriceLow))
                ) && 
                (
                    this.PriceHighDate == input.PriceHighDate ||
                    (this.PriceHighDate != null &&
                    this.PriceHighDate.Equals(input.PriceHighDate))
                ) && 
                (
                    this.PriceLowDate == input.PriceLowDate ||
                    (this.PriceLowDate != null &&
                    this.PriceLowDate.Equals(input.PriceLowDate))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdjDate != null)
                {
                    hashCode = (hashCode * 59) + this.AdjDate.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.PriceHigh != null)
                {
                    hashCode = (hashCode * 59) + this.PriceHigh.GetHashCode();
                }
                if (this.PriceLow != null)
                {
                    hashCode = (hashCode * 59) + this.PriceLow.GetHashCode();
                }
                if (this.PriceHighDate != null)
                {
                    hashCode = (hashCode * 59) + this.PriceHighDate.GetHashCode();
                }
                if (this.PriceLowDate != null)
                {
                    hashCode = (hashCode * 59) + this.PriceLowDate.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
