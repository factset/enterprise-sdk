/*
 * FactSet Prices API
 *
 * Gain access to comprehensive global coverage for Equities & Fixed Income. Perform quick analytics by controlling the date ranges, currencies, and rolling periods, or simply request Open, High, Low, and Close prices. Easily connect pricing data with other core company data or alternative content sets using FactSet's hub and spoke symbology. <p>Equity and Fund Security types include Common Stock, ADR, GDR, Preferred, Closed-ended Fund, Exchange Traded Fund, Unit, Open-ended Fund, Exchange Traded Fund UVI, Exchange Traded Fund NAV, Preferred Equity, Non-Voting Depositary Receipt/Certificate, Alien/Foreign, Structured Product, and Temporary Instruments. Reference over 180,000+ active and inactive securities.</p><p>Fixed Income Security Types include Corporate Bonds, Treasury and Agency bonds, Government Bonds, and Municipals.</p><p><b>Rate limit is set to 25 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetPrices.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetPrices.Model
{
    /// <summary>
    /// ReturnsSnapshot
    /// </summary>
    [DataContract(Name = "returnsSnapshot")]
    public partial class ReturnsSnapshot : IEquatable<ReturnsSnapshot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnsSnapshot" /> class.
        /// </summary>
        /// <param name="fsymId">Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet..</param>
        /// <param name="date">Specific reference date for the period expressed in YYYY-MM-DD format..</param>
        /// <param name="currency">Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470)..</param>
        /// <param name="requestId">Identifier that was used for the request..</param>
        /// <param name="oneDay">Returns the price performance of the security for the previous one day from the given date..</param>
        /// <param name="oneMonth">Returns the price performance of the security for the past one month..</param>
        /// <param name="threeMonth">Returns the price performance of the security for the past three months..</param>
        /// <param name="sixMonth">Returns the price performance of the security for the past six months..</param>
        /// <param name="nineMonth">Returns the price performance of the security for the past nine months..</param>
        /// <param name="oneYear">Returns the price performance of the security for the past one year..</param>
        /// <param name="quarterToDate">Returns the price performance of the security from the previous calendar quarter end to the given date..</param>
        /// <param name="weekToDate">Returns the price performance of the security from the previous week (usually Friday) to the given date..</param>
        /// <param name="monthToDate">Returns the price performance of the security from the previous month-end to the given date..</param>
        /// <param name="yearToDate">Returns the price performance of the security from the previous calendar year-end to the given date..</param>
        /// <param name="twoYearAnnualized">Returns the annualized compound total return for two years..</param>
        /// <param name="threeYearAnnualized">Returns the annualized compound total return for three years..</param>
        /// <param name="fiveYearAnnualized">Returns the annualized compound total return for five years..</param>
        /// <param name="tenYearAnnualized">Returns the annualized compound total return for ten years..</param>
        /// <param name="twentyYearAnnualized">Returns the annualized compound total return for twenty years..</param>
        /// <param name="thirtyYearAnnualized">Returns the annualized compound total return for thirty years..</param>
        /// <param name="ipoToDateAnnualized">Returns the annualized compound total return from the ipo date. The calculation uses the closing price as of the IPO date, and not the IPO price itself..</param>
        /// <param name="dividendAdjust">Controls the dividend reinvestment for the returns calculation. Dividends will be reinvested on the date the dividends go ex (when the dividends belong to the seller rather than the buyer). Visit [OA 8748](https://my.apps.factset.com/oa/pages/8748) for calculation methodology.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested. Dividends accumulated throughout the specified period are added to the price at the end of the period.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate. Dividends accumulated throughout the specified period are used to buy more shares of stock in the company. .</param>
        public ReturnsSnapshot(string fsymId = default(string), DateTime? date = default(DateTime?), string currency = default(string), string requestId = default(string), double? oneDay = default(double?), double? oneMonth = default(double?), double? threeMonth = default(double?), double? sixMonth = default(double?), double? nineMonth = default(double?), double? oneYear = default(double?), double? quarterToDate = default(double?), double? weekToDate = default(double?), double? monthToDate = default(double?), double? yearToDate = default(double?), double? twoYearAnnualized = default(double?), double? threeYearAnnualized = default(double?), double? fiveYearAnnualized = default(double?), double? tenYearAnnualized = default(double?), double? twentyYearAnnualized = default(double?), double? thirtyYearAnnualized = default(double?), double? ipoToDateAnnualized = default(double?), string dividendAdjust = default(string))
        {
            this.FsymId = fsymId;
            this.Date = date;
            this.Currency = currency;
            this.RequestId = requestId;
            this.OneDay = oneDay;
            this.OneMonth = oneMonth;
            this.ThreeMonth = threeMonth;
            this.SixMonth = sixMonth;
            this.NineMonth = nineMonth;
            this.OneYear = oneYear;
            this.QuarterToDate = quarterToDate;
            this.WeekToDate = weekToDate;
            this.MonthToDate = monthToDate;
            this.YearToDate = yearToDate;
            this.TwoYearAnnualized = twoYearAnnualized;
            this.ThreeYearAnnualized = threeYearAnnualized;
            this.FiveYearAnnualized = fiveYearAnnualized;
            this.TenYearAnnualized = tenYearAnnualized;
            this.TwentyYearAnnualized = twentyYearAnnualized;
            this.ThirtyYearAnnualized = thirtyYearAnnualized;
            this.IpoToDateAnnualized = ipoToDateAnnualized;
            this.DividendAdjust = dividendAdjust;
        }

        /// <summary>
        /// Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
        /// </summary>
        /// <value>Factset Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security&#39;s best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.</value>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Specific reference date for the period expressed in YYYY-MM-DD format.
        /// </summary>
        /// <value>Specific reference date for the period expressed in YYYY-MM-DD format.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
        /// </summary>
        /// <value>Currency ISO code. For more details, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Identifier that was used for the request.
        /// </summary>
        /// <value>Identifier that was used for the request.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the price performance of the security for the previous one day from the given date.
        /// </summary>
        /// <value>Returns the price performance of the security for the previous one day from the given date.</value>
        [DataMember(Name = "oneDay", EmitDefaultValue = true)]
        public double? OneDay { get; set; }

        /// <summary>
        /// Returns the price performance of the security for the past one month.
        /// </summary>
        /// <value>Returns the price performance of the security for the past one month.</value>
        [DataMember(Name = "oneMonth", EmitDefaultValue = true)]
        public double? OneMonth { get; set; }

        /// <summary>
        /// Returns the price performance of the security for the past three months.
        /// </summary>
        /// <value>Returns the price performance of the security for the past three months.</value>
        [DataMember(Name = "threeMonth", EmitDefaultValue = true)]
        public double? ThreeMonth { get; set; }

        /// <summary>
        /// Returns the price performance of the security for the past six months.
        /// </summary>
        /// <value>Returns the price performance of the security for the past six months.</value>
        [DataMember(Name = "sixMonth", EmitDefaultValue = true)]
        public double? SixMonth { get; set; }

        /// <summary>
        /// Returns the price performance of the security for the past nine months.
        /// </summary>
        /// <value>Returns the price performance of the security for the past nine months.</value>
        [DataMember(Name = "nineMonth", EmitDefaultValue = true)]
        public double? NineMonth { get; set; }

        /// <summary>
        /// Returns the price performance of the security for the past one year.
        /// </summary>
        /// <value>Returns the price performance of the security for the past one year.</value>
        [DataMember(Name = "oneYear", EmitDefaultValue = true)]
        public double? OneYear { get; set; }

        /// <summary>
        /// Returns the price performance of the security from the previous calendar quarter end to the given date.
        /// </summary>
        /// <value>Returns the price performance of the security from the previous calendar quarter end to the given date.</value>
        [DataMember(Name = "quarterToDate", EmitDefaultValue = true)]
        public double? QuarterToDate { get; set; }

        /// <summary>
        /// Returns the price performance of the security from the previous week (usually Friday) to the given date.
        /// </summary>
        /// <value>Returns the price performance of the security from the previous week (usually Friday) to the given date.</value>
        [DataMember(Name = "weekToDate", EmitDefaultValue = true)]
        public double? WeekToDate { get; set; }

        /// <summary>
        /// Returns the price performance of the security from the previous month-end to the given date.
        /// </summary>
        /// <value>Returns the price performance of the security from the previous month-end to the given date.</value>
        [DataMember(Name = "monthToDate", EmitDefaultValue = true)]
        public double? MonthToDate { get; set; }

        /// <summary>
        /// Returns the price performance of the security from the previous calendar year-end to the given date.
        /// </summary>
        /// <value>Returns the price performance of the security from the previous calendar year-end to the given date.</value>
        [DataMember(Name = "yearToDate", EmitDefaultValue = true)]
        public double? YearToDate { get; set; }

        /// <summary>
        /// Returns the annualized compound total return for two years.
        /// </summary>
        /// <value>Returns the annualized compound total return for two years.</value>
        [DataMember(Name = "twoYearAnnualized", EmitDefaultValue = true)]
        public double? TwoYearAnnualized { get; set; }

        /// <summary>
        /// Returns the annualized compound total return for three years.
        /// </summary>
        /// <value>Returns the annualized compound total return for three years.</value>
        [DataMember(Name = "threeYearAnnualized", EmitDefaultValue = true)]
        public double? ThreeYearAnnualized { get; set; }

        /// <summary>
        /// Returns the annualized compound total return for five years.
        /// </summary>
        /// <value>Returns the annualized compound total return for five years.</value>
        [DataMember(Name = "fiveYearAnnualized", EmitDefaultValue = true)]
        public double? FiveYearAnnualized { get; set; }

        /// <summary>
        /// Returns the annualized compound total return for ten years.
        /// </summary>
        /// <value>Returns the annualized compound total return for ten years.</value>
        [DataMember(Name = "tenYearAnnualized", EmitDefaultValue = true)]
        public double? TenYearAnnualized { get; set; }

        /// <summary>
        /// Returns the annualized compound total return for twenty years.
        /// </summary>
        /// <value>Returns the annualized compound total return for twenty years.</value>
        [DataMember(Name = "twentyYearAnnualized", EmitDefaultValue = true)]
        public double? TwentyYearAnnualized { get; set; }

        /// <summary>
        /// Returns the annualized compound total return for thirty years.
        /// </summary>
        /// <value>Returns the annualized compound total return for thirty years.</value>
        [DataMember(Name = "thirtyYearAnnualized", EmitDefaultValue = true)]
        public double? ThirtyYearAnnualized { get; set; }

        /// <summary>
        /// Returns the annualized compound total return from the ipo date. The calculation uses the closing price as of the IPO date, and not the IPO price itself.
        /// </summary>
        /// <value>Returns the annualized compound total return from the ipo date. The calculation uses the closing price as of the IPO date, and not the IPO price itself.</value>
        [DataMember(Name = "ipoToDateAnnualized", EmitDefaultValue = true)]
        public double? IpoToDateAnnualized { get; set; }

        /// <summary>
        /// Controls the dividend reinvestment for the returns calculation. Dividends will be reinvested on the date the dividends go ex (when the dividends belong to the seller rather than the buyer). Visit [OA 8748](https://my.apps.factset.com/oa/pages/8748) for calculation methodology.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested. Dividends accumulated throughout the specified period are added to the price at the end of the period.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate. Dividends accumulated throughout the specified period are used to buy more shares of stock in the company. 
        /// </summary>
        /// <value>Controls the dividend reinvestment for the returns calculation. Dividends will be reinvested on the date the dividends go ex (when the dividends belong to the seller rather than the buyer). Visit [OA 8748](https://my.apps.factset.com/oa/pages/8748) for calculation methodology.   * **PRICE** &#x3D; Price Change - Dividends Excluded.   * **EXDATE** &#x3D; Simple Return - Dividends Received on exdate but not reinvested. Dividends accumulated throughout the specified period are added to the price at the end of the period.   * **EXDATE_C** &#x3D; Compound Return - Dividends reinvested on exdate. Dividends accumulated throughout the specified period are used to buy more shares of stock in the company. </value>
        [DataMember(Name = "dividendAdjust", EmitDefaultValue = true)]
        public string DividendAdjust { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnsSnapshot {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  OneDay: ").Append(OneDay).Append("\n");
            sb.Append("  OneMonth: ").Append(OneMonth).Append("\n");
            sb.Append("  ThreeMonth: ").Append(ThreeMonth).Append("\n");
            sb.Append("  SixMonth: ").Append(SixMonth).Append("\n");
            sb.Append("  NineMonth: ").Append(NineMonth).Append("\n");
            sb.Append("  OneYear: ").Append(OneYear).Append("\n");
            sb.Append("  QuarterToDate: ").Append(QuarterToDate).Append("\n");
            sb.Append("  WeekToDate: ").Append(WeekToDate).Append("\n");
            sb.Append("  MonthToDate: ").Append(MonthToDate).Append("\n");
            sb.Append("  YearToDate: ").Append(YearToDate).Append("\n");
            sb.Append("  TwoYearAnnualized: ").Append(TwoYearAnnualized).Append("\n");
            sb.Append("  ThreeYearAnnualized: ").Append(ThreeYearAnnualized).Append("\n");
            sb.Append("  FiveYearAnnualized: ").Append(FiveYearAnnualized).Append("\n");
            sb.Append("  TenYearAnnualized: ").Append(TenYearAnnualized).Append("\n");
            sb.Append("  TwentyYearAnnualized: ").Append(TwentyYearAnnualized).Append("\n");
            sb.Append("  ThirtyYearAnnualized: ").Append(ThirtyYearAnnualized).Append("\n");
            sb.Append("  IpoToDateAnnualized: ").Append(IpoToDateAnnualized).Append("\n");
            sb.Append("  DividendAdjust: ").Append(DividendAdjust).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReturnsSnapshot);
        }

        /// <summary>
        /// Returns true if ReturnsSnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of ReturnsSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnsSnapshot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.OneDay == input.OneDay ||
                    (this.OneDay != null &&
                    this.OneDay.Equals(input.OneDay))
                ) && 
                (
                    this.OneMonth == input.OneMonth ||
                    (this.OneMonth != null &&
                    this.OneMonth.Equals(input.OneMonth))
                ) && 
                (
                    this.ThreeMonth == input.ThreeMonth ||
                    (this.ThreeMonth != null &&
                    this.ThreeMonth.Equals(input.ThreeMonth))
                ) && 
                (
                    this.SixMonth == input.SixMonth ||
                    (this.SixMonth != null &&
                    this.SixMonth.Equals(input.SixMonth))
                ) && 
                (
                    this.NineMonth == input.NineMonth ||
                    (this.NineMonth != null &&
                    this.NineMonth.Equals(input.NineMonth))
                ) && 
                (
                    this.OneYear == input.OneYear ||
                    (this.OneYear != null &&
                    this.OneYear.Equals(input.OneYear))
                ) && 
                (
                    this.QuarterToDate == input.QuarterToDate ||
                    (this.QuarterToDate != null &&
                    this.QuarterToDate.Equals(input.QuarterToDate))
                ) && 
                (
                    this.WeekToDate == input.WeekToDate ||
                    (this.WeekToDate != null &&
                    this.WeekToDate.Equals(input.WeekToDate))
                ) && 
                (
                    this.MonthToDate == input.MonthToDate ||
                    (this.MonthToDate != null &&
                    this.MonthToDate.Equals(input.MonthToDate))
                ) && 
                (
                    this.YearToDate == input.YearToDate ||
                    (this.YearToDate != null &&
                    this.YearToDate.Equals(input.YearToDate))
                ) && 
                (
                    this.TwoYearAnnualized == input.TwoYearAnnualized ||
                    (this.TwoYearAnnualized != null &&
                    this.TwoYearAnnualized.Equals(input.TwoYearAnnualized))
                ) && 
                (
                    this.ThreeYearAnnualized == input.ThreeYearAnnualized ||
                    (this.ThreeYearAnnualized != null &&
                    this.ThreeYearAnnualized.Equals(input.ThreeYearAnnualized))
                ) && 
                (
                    this.FiveYearAnnualized == input.FiveYearAnnualized ||
                    (this.FiveYearAnnualized != null &&
                    this.FiveYearAnnualized.Equals(input.FiveYearAnnualized))
                ) && 
                (
                    this.TenYearAnnualized == input.TenYearAnnualized ||
                    (this.TenYearAnnualized != null &&
                    this.TenYearAnnualized.Equals(input.TenYearAnnualized))
                ) && 
                (
                    this.TwentyYearAnnualized == input.TwentyYearAnnualized ||
                    (this.TwentyYearAnnualized != null &&
                    this.TwentyYearAnnualized.Equals(input.TwentyYearAnnualized))
                ) && 
                (
                    this.ThirtyYearAnnualized == input.ThirtyYearAnnualized ||
                    (this.ThirtyYearAnnualized != null &&
                    this.ThirtyYearAnnualized.Equals(input.ThirtyYearAnnualized))
                ) && 
                (
                    this.IpoToDateAnnualized == input.IpoToDateAnnualized ||
                    (this.IpoToDateAnnualized != null &&
                    this.IpoToDateAnnualized.Equals(input.IpoToDateAnnualized))
                ) && 
                (
                    this.DividendAdjust == input.DividendAdjust ||
                    (this.DividendAdjust != null &&
                    this.DividendAdjust.Equals(input.DividendAdjust))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.OneDay != null)
                {
                    hashCode = (hashCode * 59) + this.OneDay.GetHashCode();
                }
                if (this.OneMonth != null)
                {
                    hashCode = (hashCode * 59) + this.OneMonth.GetHashCode();
                }
                if (this.ThreeMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeMonth.GetHashCode();
                }
                if (this.SixMonth != null)
                {
                    hashCode = (hashCode * 59) + this.SixMonth.GetHashCode();
                }
                if (this.NineMonth != null)
                {
                    hashCode = (hashCode * 59) + this.NineMonth.GetHashCode();
                }
                if (this.OneYear != null)
                {
                    hashCode = (hashCode * 59) + this.OneYear.GetHashCode();
                }
                if (this.QuarterToDate != null)
                {
                    hashCode = (hashCode * 59) + this.QuarterToDate.GetHashCode();
                }
                if (this.WeekToDate != null)
                {
                    hashCode = (hashCode * 59) + this.WeekToDate.GetHashCode();
                }
                if (this.MonthToDate != null)
                {
                    hashCode = (hashCode * 59) + this.MonthToDate.GetHashCode();
                }
                if (this.YearToDate != null)
                {
                    hashCode = (hashCode * 59) + this.YearToDate.GetHashCode();
                }
                if (this.TwoYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.TwoYearAnnualized.GetHashCode();
                }
                if (this.ThreeYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeYearAnnualized.GetHashCode();
                }
                if (this.FiveYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.FiveYearAnnualized.GetHashCode();
                }
                if (this.TenYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.TenYearAnnualized.GetHashCode();
                }
                if (this.TwentyYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.TwentyYearAnnualized.GetHashCode();
                }
                if (this.ThirtyYearAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.ThirtyYearAnnualized.GetHashCode();
                }
                if (this.IpoToDateAnnualized != null)
                {
                    hashCode = (hashCode * 59) + this.IpoToDateAnnualized.GetHashCode();
                }
                if (this.DividendAdjust != null)
                {
                    hashCode = (hashCode * 59) + this.DividendAdjust.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
