/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.GIPS.Client;
using FactSet.SDK.GIPS.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.GIPS.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGIPSCalculationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel GIPS calculation by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>void</returns>
        void CancelCalculationById(string id);

        /// <summary>
        /// Cancel GIPS calculation by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelCalculationByIdWithHttpInfo(string id);
        /// <summary>
        /// Get all calculations
        /// </summary>
        /// <remarks>
        /// This endpoints returns all calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <returns>CalculationsSummaryRoot</returns>
        CalculationsSummaryRoot GipsGetAllCalculations(int? pageNumber = default(int?));

        /// <summary>
        /// Get all calculations
        /// </summary>
        /// <remarks>
        /// This endpoints returns all calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <returns>ApiResponse of CalculationsSummaryRoot</returns>
        ApiResponse<CalculationsSummaryRoot> GipsGetAllCalculationsWithHttpInfo(int? pageNumber = default(int?));
        /// <summary>
        /// Get GIPS calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>CalculationStatusRoot</returns>
        CalculationStatusRoot GipsGetCalculationStatusById(string id);

        /// <summary>
        /// Get GIPS calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>ApiResponse of CalculationStatusRoot</returns>
        ApiResponse<CalculationStatusRoot> GipsGetCalculationStatusByIdWithHttpInfo(string id);
        /// <summary>
        /// Get GIPS calculation result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <returns>FactSetProtobufStachV3StachV3Table</returns>
        FactSetProtobufStachV3StachV3Table GipsGetCalculationUnitResultById(string id, string unitId);

        /// <summary>
        /// Get GIPS calculation result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <returns>ApiResponse of FactSetProtobufStachV3StachV3Table</returns>
        ApiResponse<FactSetProtobufStachV3StachV3Table> GipsGetCalculationUnitResultByIdWithHttpInfo(string id, string unitId);
        /// <summary>
        /// Create and Run GIPS calculation
        /// </summary>
        /// <remarks>
        /// This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <returns>CalculationStatusRoot</returns>
        CalculationStatusRoot GipsPostAndCalculate(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot));

        /// <summary>
        /// Create and Run GIPS calculation
        /// </summary>
        /// <remarks>
        /// This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <returns>ApiResponse of CalculationStatusRoot</returns>
        ApiResponse<CalculationStatusRoot> GipsPostAndCalculateWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGIPSCalculationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel GIPS calculation by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelCalculationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel GIPS calculation by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelCalculationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all calculations
        /// </summary>
        /// <remarks>
        /// This endpoints returns all calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationsSummaryRoot</returns>
        System.Threading.Tasks.Task<CalculationsSummaryRoot> GipsGetAllCalculationsAsync(int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all calculations
        /// </summary>
        /// <remarks>
        /// This endpoints returns all calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationsSummaryRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculationsSummaryRoot>> GipsGetAllCalculationsWithHttpInfoAsync(int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get GIPS calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatusRoot</returns>
        System.Threading.Tasks.Task<CalculationStatusRoot> GipsGetCalculationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get GIPS calculation status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatusRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculationStatusRoot>> GipsGetCalculationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get GIPS calculation result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FactSetProtobufStachV3StachV3Table</returns>
        System.Threading.Tasks.Task<FactSetProtobufStachV3StachV3Table> GipsGetCalculationUnitResultByIdAsync(string id, string unitId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get GIPS calculation result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FactSetProtobufStachV3StachV3Table)</returns>
        System.Threading.Tasks.Task<ApiResponse<FactSetProtobufStachV3StachV3Table>> GipsGetCalculationUnitResultByIdWithHttpInfoAsync(string id, string unitId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create and Run GIPS calculation
        /// </summary>
        /// <remarks>
        /// This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatusRoot</returns>
        System.Threading.Tasks.Task<CalculationStatusRoot> GipsPostAndCalculateAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create and Run GIPS calculation
        /// </summary>
        /// <remarks>
        /// This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </remarks>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatusRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculationStatusRoot>> GipsPostAndCalculateWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGIPSCalculationsApi : IGIPSCalculationsApiSync, IGIPSCalculationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GIPSCalculationsApi : IGIPSCalculationsApi
    {
        private FactSet.SDK.GIPS.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CancelCalculationByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GipsGetAllCalculationsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(CalculationsSummaryRoot) },
            { (HttpStatusCode)400, typeof(APIClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GipsGetCalculationStatusByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CalculationStatusRoot) },
            { (HttpStatusCode)202, typeof(CalculationStatusRoot) },
            { (HttpStatusCode)404, typeof(APIClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GipsGetCalculationUnitResultByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FactSetProtobufStachV3StachV3Table) },
            { (HttpStatusCode)404, typeof(APIClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GipsPostAndCalculateResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CalculationStatusRoot) },
            { (HttpStatusCode)202, typeof(CalculationStatusRoot) },
            { (HttpStatusCode)400, typeof(APIClientErrorResponse) },
            { (HttpStatusCode)404, typeof(APIClientErrorResponse) },
            { (HttpStatusCode)429, typeof(APIClientErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="GIPSCalculationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GIPSCalculationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GIPSCalculationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GIPSCalculationsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.GIPS.Client.Configuration.MergeConfigurations(
                FactSet.SDK.GIPS.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.GIPS.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.GIPS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.GIPS.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.GIPS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GIPSCalculationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GIPSCalculationsApi(FactSet.SDK.GIPS.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.GIPS.Client.Configuration.MergeConfigurations(
                FactSet.SDK.GIPS.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.GIPS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.GIPS.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.GIPS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GIPSCalculationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GIPSCalculationsApi(FactSet.SDK.GIPS.Client.ISynchronousClient client, FactSet.SDK.GIPS.Client.IAsynchronousClient asyncClient, FactSet.SDK.GIPS.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.GIPS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.GIPS.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.GIPS.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.GIPS.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.GIPS.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel GIPS calculation by id Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>void</returns>
        public void CancelCalculationById(string id)
        {
            CancelCalculationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel GIPS calculation by id Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelCalculationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'id' when calling GIPSCalculationsApi->CancelCalculationById");
            }

            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CancelCalculationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/calculations/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCalculationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Cancel GIPS calculation by id Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelCalculationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelCalculationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel GIPS calculation by id Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelCalculationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'id' when calling GIPSCalculationsApi->CancelCalculationById");
            }


            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CancelCalculationByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/calculations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelCalculationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all calculations This endpoints returns all calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <returns>CalculationsSummaryRoot</returns>
        public CalculationsSummaryRoot GipsGetAllCalculations(int? pageNumber = default(int?))
        {
            var localVarResponse = GipsGetAllCalculationsWithHttpInfo(pageNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all calculations This endpoints returns all calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <returns>ApiResponse of CalculationsSummaryRoot</returns>
        public ApiResponse<CalculationsSummaryRoot> GipsGetAllCalculationsWithHttpInfo(int? pageNumber = default(int?))
        {
            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GIPS.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GipsGetAllCalculationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CalculationsSummaryRoot>("/calculations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsGetAllCalculations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all calculations This endpoints returns all calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationsSummaryRoot</returns>
        public async System.Threading.Tasks.Task<CalculationsSummaryRoot>GipsGetAllCalculationsAsync(int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GipsGetAllCalculationsWithHttpInfoAsync(pageNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all calculations This endpoints returns all calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">Page number to be viewed (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationsSummaryRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CalculationsSummaryRoot>> GipsGetAllCalculationsWithHttpInfoAsync(int? pageNumber = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.GIPS.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GipsGetAllCalculationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CalculationsSummaryRoot>("/calculations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsGetAllCalculations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get GIPS calculation status by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>CalculationStatusRoot</returns>
        public CalculationStatusRoot GipsGetCalculationStatusById(string id)
        {
            var localVarResponse = GipsGetCalculationStatusByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get GIPS calculation status by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <returns>ApiResponse of CalculationStatusRoot</returns>
        public ApiResponse<CalculationStatusRoot> GipsGetCalculationStatusByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'id' when calling GIPSCalculationsApi->GipsGetCalculationStatusById");
            }

            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GipsGetCalculationStatusByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            CalculationStatusRoot>("/calculations/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsGetCalculationStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get GIPS calculation status by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatusRoot</returns>
        public async System.Threading.Tasks.Task<CalculationStatusRoot>GipsGetCalculationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GipsGetCalculationStatusByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get GIPS calculation status by id This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run GIPS calculation endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatusRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CalculationStatusRoot>> GipsGetCalculationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'id' when calling GIPSCalculationsApi->GipsGetCalculationStatusById");
            }


            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GipsGetCalculationStatusByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CalculationStatusRoot>("/calculations/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsGetCalculationStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get GIPS calculation result by id This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <returns>FactSetProtobufStachV3StachV3Table</returns>
        public FactSetProtobufStachV3StachV3Table GipsGetCalculationUnitResultById(string id, string unitId)
        {
            var localVarResponse = GipsGetCalculationUnitResultByIdWithHttpInfo(id, unitId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get GIPS calculation result by id This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <returns>ApiResponse of FactSetProtobufStachV3StachV3Table</returns>
        public ApiResponse<FactSetProtobufStachV3StachV3Table> GipsGetCalculationUnitResultByIdWithHttpInfo(string id, string unitId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'id' when calling GIPSCalculationsApi->GipsGetCalculationUnitResultById");
            }

            // verify the required parameter 'unitId' is set
            if (unitId == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'unitId' when calling GIPSCalculationsApi->GipsGetCalculationUnitResultById");
            }

            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/stach.v3+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("unitId", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(unitId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GipsGetCalculationUnitResultByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FactSetProtobufStachV3StachV3Table>("/calculations/{id}/units/{unitId}/result", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsGetCalculationUnitResultById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get GIPS calculation result by id This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FactSetProtobufStachV3StachV3Table</returns>
        public async System.Threading.Tasks.Task<FactSetProtobufStachV3StachV3Table>GipsGetCalculationUnitResultByIdAsync(string id, string unitId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GipsGetCalculationUnitResultByIdWithHttpInfoAsync(id, unitId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get GIPS calculation result by id This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="unitId">from url, provided from the location header in the Get GIPS calculation status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FactSetProtobufStachV3StachV3Table)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FactSetProtobufStachV3StachV3Table>> GipsGetCalculationUnitResultByIdWithHttpInfoAsync(string id, string unitId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'id' when calling GIPSCalculationsApi->GipsGetCalculationUnitResultById");
            }

            // verify the required parameter 'unitId' is set
            if (unitId == null)
            {
                throw new FactSet.SDK.GIPS.Client.ApiException(400, "Missing required parameter 'unitId' when calling GIPSCalculationsApi->GipsGetCalculationUnitResultById");
            }


            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/stach.v3+json",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("unitId", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(unitId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GipsGetCalculationUnitResultByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FactSetProtobufStachV3StachV3Table>("/calculations/{id}/units/{unitId}/result", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsGetCalculationUnitResultById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create and Run GIPS calculation This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <returns>CalculationStatusRoot</returns>
        public CalculationStatusRoot GipsPostAndCalculate(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot))
        {
            var localVarResponse = GipsPostAndCalculateWithHttpInfo(xFactSetApiLongRunningDeadline, cacheControl, gIPSCalculationParametersRoot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run GIPS calculation This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <returns>ApiResponse of CalculationStatusRoot</returns>
        public ApiResponse<CalculationStatusRoot> GipsPostAndCalculateWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot))
        {
            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = gIPSCalculationParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GipsPostAndCalculateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CalculationStatusRoot>("/calculations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsPostAndCalculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create and Run GIPS calculation This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationStatusRoot</returns>
        public async System.Threading.Tasks.Task<CalculationStatusRoot>GipsPostAndCalculateAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GipsPostAndCalculateWithHttpInfoAsync(xFactSetApiLongRunningDeadline, cacheControl, gIPSCalculationParametersRoot, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run GIPS calculation This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
        /// </summary>
        /// <exception cref="FactSet.SDK.GIPS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="gIPSCalculationParametersRoot">The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CalculationStatusRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CalculationStatusRoot>> GipsPostAndCalculateWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), GIPSCalculationParametersRoot gIPSCalculationParametersRoot = default(GIPSCalculationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.GIPS.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.GIPS.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.GIPS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.SDK.GIPS.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = gIPSCalculationParametersRoot;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.GIPS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GipsPostAndCalculateResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CalculationStatusRoot>("/calculations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GipsPostAndCalculate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
