/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3TableViewTypesGroup
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.TableView.Types.Group")]
    public partial class FactSetProtobufStachV3TableViewTypesGroup : IEquatable<FactSetProtobufStachV3TableViewTypesGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3TableViewTypesGroup" /> class.
        /// </summary>
        /// <param name="collapsedColumn">collapsedColumn.</param>
        /// <param name="excludeTotalRows">excludeTotalRows.</param>
        /// <param name="excludeDetailRows">excludeDetailRows.</param>
        public FactSetProtobufStachV3TableViewTypesGroup(List<string> by = default(List<string>), FactSetProtobufStachV3TableViewTypesCollapsedColumn collapsedColumn = default(FactSetProtobufStachV3TableViewTypesCollapsedColumn), Dictionary<string, FactSetProtobufStachV3TableViewTypesAggregate> aggregates = default(Dictionary<string, FactSetProtobufStachV3TableViewTypesAggregate>), bool excludeTotalRows = default(bool), List<string> excludeGroupRows = default(List<string>), bool excludeDetailRows = default(bool), Dictionary<string, FactSetProtobufStachV3Sort> sort = default(Dictionary<string, FactSetProtobufStachV3Sort>))
        {
            this.CollapsedColumn = collapsedColumn;
            this.ExcludeTotalRows = excludeTotalRows;
            this.ExcludeDetailRows = excludeDetailRows;
        }

        /// <summary>
        /// Gets or Sets By
        /// </summary>
        [DataMember(Name = "by", EmitDefaultValue = true)]
        public List<string> By { get; private set; }

        /// <summary>
        /// Returns false as By should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CollapsedColumn
        /// </summary>
        [DataMember(Name = "collapsedColumn", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableViewTypesCollapsedColumn CollapsedColumn { get; set; }

        /// <summary>
        /// Gets or Sets Aggregates
        /// </summary>
        [DataMember(Name = "aggregates", EmitDefaultValue = true)]
        public Dictionary<string, FactSetProtobufStachV3TableViewTypesAggregate> Aggregates { get; private set; }

        /// <summary>
        /// Returns false as Aggregates should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAggregates()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ExcludeTotalRows
        /// </summary>
        [DataMember(Name = "excludeTotalRows", EmitDefaultValue = true)]
        public bool ExcludeTotalRows { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeGroupRows
        /// </summary>
        [DataMember(Name = "excludeGroupRows", EmitDefaultValue = true)]
        public List<string> ExcludeGroupRows { get; private set; }

        /// <summary>
        /// Returns false as ExcludeGroupRows should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExcludeGroupRows()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ExcludeDetailRows
        /// </summary>
        [DataMember(Name = "excludeDetailRows", EmitDefaultValue = true)]
        public bool ExcludeDetailRows { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = true)]
        public Dictionary<string, FactSetProtobufStachV3Sort> Sort { get; private set; }

        /// <summary>
        /// Returns false as Sort should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSort()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3TableViewTypesGroup {\n");
            sb.Append("  By: ").Append(By).Append("\n");
            sb.Append("  CollapsedColumn: ").Append(CollapsedColumn).Append("\n");
            sb.Append("  Aggregates: ").Append(Aggregates).Append("\n");
            sb.Append("  ExcludeTotalRows: ").Append(ExcludeTotalRows).Append("\n");
            sb.Append("  ExcludeGroupRows: ").Append(ExcludeGroupRows).Append("\n");
            sb.Append("  ExcludeDetailRows: ").Append(ExcludeDetailRows).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3TableViewTypesGroup);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3TableViewTypesGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3TableViewTypesGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3TableViewTypesGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.By == input.By ||
                    this.By != null &&
                    input.By != null &&
                    this.By.SequenceEqual(input.By)
                ) && 
                (
                    this.CollapsedColumn == input.CollapsedColumn ||
                    (this.CollapsedColumn != null &&
                    this.CollapsedColumn.Equals(input.CollapsedColumn))
                ) && 
                (
                    this.Aggregates == input.Aggregates ||
                    this.Aggregates != null &&
                    input.Aggregates != null &&
                    this.Aggregates.SequenceEqual(input.Aggregates)
                ) && 
                (
                    this.ExcludeTotalRows == input.ExcludeTotalRows ||
                    this.ExcludeTotalRows.Equals(input.ExcludeTotalRows)
                ) && 
                (
                    this.ExcludeGroupRows == input.ExcludeGroupRows ||
                    this.ExcludeGroupRows != null &&
                    input.ExcludeGroupRows != null &&
                    this.ExcludeGroupRows.SequenceEqual(input.ExcludeGroupRows)
                ) && 
                (
                    this.ExcludeDetailRows == input.ExcludeDetailRows ||
                    this.ExcludeDetailRows.Equals(input.ExcludeDetailRows)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort != null &&
                    input.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.By != null)
                {
                    hashCode = (hashCode * 59) + this.By.GetHashCode();
                }
                if (this.CollapsedColumn != null)
                {
                    hashCode = (hashCode * 59) + this.CollapsedColumn.GetHashCode();
                }
                if (this.Aggregates != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregates.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExcludeTotalRows.GetHashCode();
                if (this.ExcludeGroupRows != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeGroupRows.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExcludeDetailRows.GetHashCode();
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
