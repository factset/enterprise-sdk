/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3Table
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.Table")]
    public partial class FactSetProtobufStachV3Table : IEquatable<FactSetProtobufStachV3Table>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3Table" /> class.
        /// </summary>
        /// <param name="totalNumRows">totalNumRows.</param>
        /// <param name="groupResult">groupResult.</param>
        /// <param name="splitResult">splitResult.</param>
        /// <param name="formatResult">formatResult.</param>
        /// <param name="pagination">pagination.</param>
        public FactSetProtobufStachV3Table(List<string> primaryKeys = default(List<string>), int totalNumRows = default(int), FactSetProtobufStachV3TableTypesGroupResult groupResult = default(FactSetProtobufStachV3TableTypesGroupResult), FactSetProtobufStachV3TableTypesSplitResult splitResult = default(FactSetProtobufStachV3TableTypesSplitResult), List<FactSetProtobufStachV3SortColumn> sortResult = default(List<FactSetProtobufStachV3SortColumn>), FactSetProtobufStachV3TableTypesFormatResult formatResult = default(FactSetProtobufStachV3TableTypesFormatResult), FactSetProtobufStachV3TableTypesPagination pagination = default(FactSetProtobufStachV3TableTypesPagination), List<FactSetProtobufStachV3TableTypesError> errors = default(List<FactSetProtobufStachV3TableTypesError>), Dictionary<string, FactSetProtobufStachV3MetadataItem> customMetadata = default(Dictionary<string, FactSetProtobufStachV3MetadataItem>))
        {
            this.TotalNumRows = totalNumRows;
            this.GroupResult = groupResult;
            this.SplitResult = splitResult;
            this.FormatResult = formatResult;
            this.Pagination = pagination;
        }

        /// <summary>
        /// Gets or Sets PrimaryKeys
        /// </summary>
        [DataMember(Name = "primaryKeys", EmitDefaultValue = true)]
        public List<string> PrimaryKeys { get; private set; }

        /// <summary>
        /// Returns false as PrimaryKeys should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrimaryKeys()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalNumRows
        /// </summary>
        [DataMember(Name = "totalNumRows", EmitDefaultValue = false)]
        public int TotalNumRows { get; set; }

        /// <summary>
        /// Gets or Sets GroupResult
        /// </summary>
        [DataMember(Name = "groupResult", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesGroupResult GroupResult { get; set; }

        /// <summary>
        /// Gets or Sets SplitResult
        /// </summary>
        [DataMember(Name = "splitResult", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesSplitResult SplitResult { get; set; }

        /// <summary>
        /// Gets or Sets SortResult
        /// </summary>
        [DataMember(Name = "sortResult", EmitDefaultValue = true)]
        public List<FactSetProtobufStachV3SortColumn> SortResult { get; private set; }

        /// <summary>
        /// Returns false as SortResult should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSortResult()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FormatResult
        /// </summary>
        [DataMember(Name = "formatResult", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesFormatResult FormatResult { get; set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name = "pagination", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesPagination Pagination { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = true)]
        public List<FactSetProtobufStachV3TableTypesError> Errors { get; private set; }

        /// <summary>
        /// Returns false as Errors should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrors()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CustomMetadata
        /// </summary>
        [DataMember(Name = "customMetadata", EmitDefaultValue = true)]
        public Dictionary<string, FactSetProtobufStachV3MetadataItem> CustomMetadata { get; private set; }

        /// <summary>
        /// Returns false as CustomMetadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomMetadata()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3Table {\n");
            sb.Append("  PrimaryKeys: ").Append(PrimaryKeys).Append("\n");
            sb.Append("  TotalNumRows: ").Append(TotalNumRows).Append("\n");
            sb.Append("  GroupResult: ").Append(GroupResult).Append("\n");
            sb.Append("  SplitResult: ").Append(SplitResult).Append("\n");
            sb.Append("  SortResult: ").Append(SortResult).Append("\n");
            sb.Append("  FormatResult: ").Append(FormatResult).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  CustomMetadata: ").Append(CustomMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3Table);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3Table instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3Table to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3Table input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrimaryKeys == input.PrimaryKeys ||
                    this.PrimaryKeys != null &&
                    input.PrimaryKeys != null &&
                    this.PrimaryKeys.SequenceEqual(input.PrimaryKeys)
                ) && 
                (
                    this.TotalNumRows == input.TotalNumRows ||
                    this.TotalNumRows.Equals(input.TotalNumRows)
                ) && 
                (
                    this.GroupResult == input.GroupResult ||
                    (this.GroupResult != null &&
                    this.GroupResult.Equals(input.GroupResult))
                ) && 
                (
                    this.SplitResult == input.SplitResult ||
                    (this.SplitResult != null &&
                    this.SplitResult.Equals(input.SplitResult))
                ) && 
                (
                    this.SortResult == input.SortResult ||
                    this.SortResult != null &&
                    input.SortResult != null &&
                    this.SortResult.SequenceEqual(input.SortResult)
                ) && 
                (
                    this.FormatResult == input.FormatResult ||
                    (this.FormatResult != null &&
                    this.FormatResult.Equals(input.FormatResult))
                ) && 
                (
                    this.Pagination == input.Pagination ||
                    (this.Pagination != null &&
                    this.Pagination.Equals(input.Pagination))
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.CustomMetadata == input.CustomMetadata ||
                    this.CustomMetadata != null &&
                    input.CustomMetadata != null &&
                    this.CustomMetadata.SequenceEqual(input.CustomMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrimaryKeys != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryKeys.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalNumRows.GetHashCode();
                if (this.GroupResult != null)
                {
                    hashCode = (hashCode * 59) + this.GroupResult.GetHashCode();
                }
                if (this.SplitResult != null)
                {
                    hashCode = (hashCode * 59) + this.SplitResult.GetHashCode();
                }
                if (this.SortResult != null)
                {
                    hashCode = (hashCode * 59) + this.SortResult.GetHashCode();
                }
                if (this.FormatResult != null)
                {
                    hashCode = (hashCode * 59) + this.FormatResult.GetHashCode();
                }
                if (this.Pagination != null)
                {
                    hashCode = (hashCode * 59) + this.Pagination.GetHashCode();
                }
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                if (this.CustomMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
