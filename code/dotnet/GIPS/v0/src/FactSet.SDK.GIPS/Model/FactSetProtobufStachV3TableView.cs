/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3TableView
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.TableView")]
    public partial class FactSetProtobufStachV3TableView : IEquatable<FactSetProtobufStachV3TableView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3TableView" /> class.
        /// </summary>
        /// <param name="displayName">displayName.</param>
        /// <param name="group">group.</param>
        /// <param name="split">split.</param>
        /// <param name="halign">halign.</param>
        /// <param name="format">format.</param>
        public FactSetProtobufStachV3TableView(string displayName = default(string), List<string> columns = default(List<string>), Dictionary<string, string> headers = default(Dictionary<string, string>), FactSetProtobufStachV3TableViewTypesGroup group = default(FactSetProtobufStachV3TableViewTypesGroup), FactSetProtobufStachV3TableViewTypesSplit split = default(FactSetProtobufStachV3TableViewTypesSplit), List<FactSetProtobufStachV3SortColumn> sort = default(List<FactSetProtobufStachV3SortColumn>), FactSetProtobufStachV3TableViewTypesHorizontalAlignment halign = default(FactSetProtobufStachV3TableViewTypesHorizontalAlignment), FactSetProtobufStachV3TableViewTypesFormat format = default(FactSetProtobufStachV3TableViewTypesFormat), Dictionary<string, FactSetProtobufStachV3MetadataItem> customMetadata = default(Dictionary<string, FactSetProtobufStachV3MetadataItem>))
        {
            this.DisplayName = displayName;
            this.Group = group;
            this.Split = split;
            this.Halign = halign;
            this.Format = format;
        }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", EmitDefaultValue = true)]
        public List<string> Columns { get; private set; }

        /// <summary>
        /// Returns false as Columns should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeColumns()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name = "headers", EmitDefaultValue = true)]
        public Dictionary<string, string> Headers { get; private set; }

        /// <summary>
        /// Returns false as Headers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHeaders()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableViewTypesGroup Group { get; set; }

        /// <summary>
        /// Gets or Sets Split
        /// </summary>
        [DataMember(Name = "split", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableViewTypesSplit Split { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = true)]
        public List<FactSetProtobufStachV3SortColumn> Sort { get; private set; }

        /// <summary>
        /// Returns false as Sort should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSort()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Halign
        /// </summary>
        [DataMember(Name = "halign", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableViewTypesHorizontalAlignment Halign { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableViewTypesFormat Format { get; set; }

        /// <summary>
        /// Gets or Sets CustomMetadata
        /// </summary>
        [DataMember(Name = "customMetadata", EmitDefaultValue = true)]
        public Dictionary<string, FactSetProtobufStachV3MetadataItem> CustomMetadata { get; private set; }

        /// <summary>
        /// Returns false as CustomMetadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomMetadata()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3TableView {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Split: ").Append(Split).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Halign: ").Append(Halign).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  CustomMetadata: ").Append(CustomMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3TableView);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3TableView instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3TableView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3TableView input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Split == input.Split ||
                    (this.Split != null &&
                    this.Split.Equals(input.Split))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort != null &&
                    input.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort)
                ) && 
                (
                    this.Halign == input.Halign ||
                    (this.Halign != null &&
                    this.Halign.Equals(input.Halign))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.CustomMetadata == input.CustomMetadata ||
                    this.CustomMetadata != null &&
                    input.CustomMetadata != null &&
                    this.CustomMetadata.SequenceEqual(input.CustomMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                if (this.Headers != null)
                {
                    hashCode = (hashCode * 59) + this.Headers.GetHashCode();
                }
                if (this.Group != null)
                {
                    hashCode = (hashCode * 59) + this.Group.GetHashCode();
                }
                if (this.Split != null)
                {
                    hashCode = (hashCode * 59) + this.Split.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                if (this.Halign != null)
                {
                    hashCode = (hashCode * 59) + this.Halign.GetHashCode();
                }
                if (this.Format != null)
                {
                    hashCode = (hashCode * 59) + this.Format.GetHashCode();
                }
                if (this.CustomMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
