/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Format.V1.NumberFormat.Types.PercentStandardSpecifier")]
    public partial class FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier : IEquatable<FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier" /> class.
        /// </summary>
        /// <param name="decimalDigits">decimalDigits.</param>
        /// <param name="decimalSeparator">decimalSeparator.</param>
        /// <param name="groupSeparator">groupSeparator.</param>
        /// <param name="negativePattern">negativePattern.</param>
        /// <param name="positivePattern">positivePattern.</param>
        public FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier(int decimalDigits = default(int), string decimalSeparator = default(string), string groupSeparator = default(string), List<int> groupSizes = default(List<int>), string negativePattern = default(string), string positivePattern = default(string))
        {
            this.DecimalDigits = decimalDigits;
            this.DecimalSeparator = decimalSeparator;
            this.GroupSeparator = groupSeparator;
            this.NegativePattern = negativePattern;
            this.PositivePattern = positivePattern;
        }

        /// <summary>
        /// Gets or Sets DecimalDigits
        /// </summary>
        [DataMember(Name = "decimalDigits", EmitDefaultValue = false)]
        public int DecimalDigits { get; set; }

        /// <summary>
        /// Gets or Sets DecimalSeparator
        /// </summary>
        [DataMember(Name = "decimalSeparator", EmitDefaultValue = true)]
        public string DecimalSeparator { get; set; }

        /// <summary>
        /// Gets or Sets GroupSeparator
        /// </summary>
        [DataMember(Name = "groupSeparator", EmitDefaultValue = true)]
        public string GroupSeparator { get; set; }

        /// <summary>
        /// Gets or Sets GroupSizes
        /// </summary>
        [DataMember(Name = "groupSizes", EmitDefaultValue = true)]
        public List<int> GroupSizes { get; private set; }

        /// <summary>
        /// Returns false as GroupSizes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupSizes()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NegativePattern
        /// </summary>
        [DataMember(Name = "negativePattern", EmitDefaultValue = true)]
        public string NegativePattern { get; set; }

        /// <summary>
        /// Gets or Sets PositivePattern
        /// </summary>
        [DataMember(Name = "positivePattern", EmitDefaultValue = true)]
        public string PositivePattern { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier {\n");
            sb.Append("  DecimalDigits: ").Append(DecimalDigits).Append("\n");
            sb.Append("  DecimalSeparator: ").Append(DecimalSeparator).Append("\n");
            sb.Append("  GroupSeparator: ").Append(GroupSeparator).Append("\n");
            sb.Append("  GroupSizes: ").Append(GroupSizes).Append("\n");
            sb.Append("  NegativePattern: ").Append(NegativePattern).Append("\n");
            sb.Append("  PositivePattern: ").Append(PositivePattern).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier);
        }

        /// <summary>
        /// Returns true if FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DecimalDigits == input.DecimalDigits ||
                    this.DecimalDigits.Equals(input.DecimalDigits)
                ) && 
                (
                    this.DecimalSeparator == input.DecimalSeparator ||
                    (this.DecimalSeparator != null &&
                    this.DecimalSeparator.Equals(input.DecimalSeparator))
                ) && 
                (
                    this.GroupSeparator == input.GroupSeparator ||
                    (this.GroupSeparator != null &&
                    this.GroupSeparator.Equals(input.GroupSeparator))
                ) && 
                (
                    this.GroupSizes == input.GroupSizes ||
                    this.GroupSizes != null &&
                    input.GroupSizes != null &&
                    this.GroupSizes.SequenceEqual(input.GroupSizes)
                ) && 
                (
                    this.NegativePattern == input.NegativePattern ||
                    (this.NegativePattern != null &&
                    this.NegativePattern.Equals(input.NegativePattern))
                ) && 
                (
                    this.PositivePattern == input.PositivePattern ||
                    (this.PositivePattern != null &&
                    this.PositivePattern.Equals(input.PositivePattern))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DecimalDigits.GetHashCode();
                if (this.DecimalSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.DecimalSeparator.GetHashCode();
                }
                if (this.GroupSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.GroupSeparator.GetHashCode();
                }
                if (this.GroupSizes != null)
                {
                    hashCode = (hashCode * 59) + this.GroupSizes.GetHashCode();
                }
                if (this.NegativePattern != null)
                {
                    hashCode = (hashCode * 59) + this.NegativePattern.GetHashCode();
                }
                if (this.PositivePattern != null)
                {
                    hashCode = (hashCode * 59) + this.PositivePattern.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
