/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3TableTypesGroupResult
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.Table.Types.GroupResult")]
    public partial class FactSetProtobufStachV3TableTypesGroupResult : IEquatable<FactSetProtobufStachV3TableTypesGroupResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3TableTypesGroupResult" /> class.
        /// </summary>
        /// <param name="collapsedColumnResult">collapsedColumnResult.</param>
        /// <param name="rowPath">rowPath.</param>
        /// <param name="aggregateRows">aggregateRows.</param>
        /// <param name="level">level.</param>
        public FactSetProtobufStachV3TableTypesGroupResult(List<string> by = default(List<string>), FactSetProtobufStachV3TableTypesCollapsedColumnResult collapsedColumnResult = default(FactSetProtobufStachV3TableTypesCollapsedColumnResult), string rowPath = default(string), string aggregateRows = default(string), string level = default(string), Dictionary<string, FactSetProtobufStachV3TableTypesGroupResultTypesAggregateValue> aggregateValues = default(Dictionary<string, FactSetProtobufStachV3TableTypesGroupResultTypesAggregateValue>), Dictionary<string, FactSetProtobufStachV3Sort> sort = default(Dictionary<string, FactSetProtobufStachV3Sort>))
        {
            this.CollapsedColumnResult = collapsedColumnResult;
            this.RowPath = rowPath;
            this.AggregateRows = aggregateRows;
            this.Level = level;
        }

        /// <summary>
        /// Gets or Sets By
        /// </summary>
        [DataMember(Name = "by", EmitDefaultValue = true)]
        public List<string> By { get; private set; }

        /// <summary>
        /// Returns false as By should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBy()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CollapsedColumnResult
        /// </summary>
        [DataMember(Name = "collapsedColumnResult", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesCollapsedColumnResult CollapsedColumnResult { get; set; }

        /// <summary>
        /// Gets or Sets RowPath
        /// </summary>
        [DataMember(Name = "rowPath", EmitDefaultValue = true)]
        public string RowPath { get; set; }

        /// <summary>
        /// Gets or Sets AggregateRows
        /// </summary>
        [DataMember(Name = "aggregateRows", EmitDefaultValue = true)]
        public string AggregateRows { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", EmitDefaultValue = true)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets AggregateValues
        /// </summary>
        [DataMember(Name = "aggregateValues", EmitDefaultValue = true)]
        public Dictionary<string, FactSetProtobufStachV3TableTypesGroupResultTypesAggregateValue> AggregateValues { get; private set; }

        /// <summary>
        /// Returns false as AggregateValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAggregateValues()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = true)]
        public Dictionary<string, FactSetProtobufStachV3Sort> Sort { get; private set; }

        /// <summary>
        /// Returns false as Sort should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSort()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3TableTypesGroupResult {\n");
            sb.Append("  By: ").Append(By).Append("\n");
            sb.Append("  CollapsedColumnResult: ").Append(CollapsedColumnResult).Append("\n");
            sb.Append("  RowPath: ").Append(RowPath).Append("\n");
            sb.Append("  AggregateRows: ").Append(AggregateRows).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  AggregateValues: ").Append(AggregateValues).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3TableTypesGroupResult);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3TableTypesGroupResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3TableTypesGroupResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3TableTypesGroupResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.By == input.By ||
                    this.By != null &&
                    input.By != null &&
                    this.By.SequenceEqual(input.By)
                ) && 
                (
                    this.CollapsedColumnResult == input.CollapsedColumnResult ||
                    (this.CollapsedColumnResult != null &&
                    this.CollapsedColumnResult.Equals(input.CollapsedColumnResult))
                ) && 
                (
                    this.RowPath == input.RowPath ||
                    (this.RowPath != null &&
                    this.RowPath.Equals(input.RowPath))
                ) && 
                (
                    this.AggregateRows == input.AggregateRows ||
                    (this.AggregateRows != null &&
                    this.AggregateRows.Equals(input.AggregateRows))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.AggregateValues == input.AggregateValues ||
                    this.AggregateValues != null &&
                    input.AggregateValues != null &&
                    this.AggregateValues.SequenceEqual(input.AggregateValues)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort != null &&
                    input.Sort != null &&
                    this.Sort.SequenceEqual(input.Sort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.By != null)
                {
                    hashCode = (hashCode * 59) + this.By.GetHashCode();
                }
                if (this.CollapsedColumnResult != null)
                {
                    hashCode = (hashCode * 59) + this.CollapsedColumnResult.GetHashCode();
                }
                if (this.RowPath != null)
                {
                    hashCode = (hashCode * 59) + this.RowPath.GetHashCode();
                }
                if (this.AggregateRows != null)
                {
                    hashCode = (hashCode * 59) + this.AggregateRows.GetHashCode();
                }
                if (this.Level != null)
                {
                    hashCode = (hashCode * 59) + this.Level.GetHashCode();
                }
                if (this.AggregateValues != null)
                {
                    hashCode = (hashCode * 59) + this.AggregateValues.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
