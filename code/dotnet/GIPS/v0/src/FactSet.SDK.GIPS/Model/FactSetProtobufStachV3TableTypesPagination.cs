/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3TableTypesPagination
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.Table.Types.Pagination")]
    public partial class FactSetProtobufStachV3TableTypesPagination : IEquatable<FactSetProtobufStachV3TableTypesPagination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3TableTypesPagination" /> class.
        /// </summary>
        /// <param name="isEstimatedTotal">isEstimatedTotal.</param>
        /// <param name="offset">offset.</param>
        /// <param name="cursor">cursor.</param>
        /// <param name="typeCase">typeCase.</param>
        public FactSetProtobufStachV3TableTypesPagination(bool isEstimatedTotal = default(bool), FactSetProtobufStachV3TableTypesPaginationTypesOffset offset = default(FactSetProtobufStachV3TableTypesPaginationTypesOffset), FactSetProtobufStachV3TableTypesPaginationTypesCursor cursor = default(FactSetProtobufStachV3TableTypesPaginationTypesCursor), FactSetProtobufStachV3TableTypesPaginationTypeOneofCase typeCase = default(FactSetProtobufStachV3TableTypesPaginationTypeOneofCase))
        {
            this.IsEstimatedTotal = isEstimatedTotal;
            this.Offset = offset;
            this.Cursor = cursor;
            this.TypeCase = typeCase;
        }

        /// <summary>
        /// Gets or Sets IsEstimatedTotal
        /// </summary>
        [DataMember(Name = "isEstimatedTotal", EmitDefaultValue = true)]
        public bool IsEstimatedTotal { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesPaginationTypesOffset Offset { get; set; }

        /// <summary>
        /// Gets or Sets Cursor
        /// </summary>
        [DataMember(Name = "cursor", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesPaginationTypesCursor Cursor { get; set; }

        /// <summary>
        /// Gets or Sets TypeCase
        /// </summary>
        [DataMember(Name = "typeCase", EmitDefaultValue = false)]
        public FactSetProtobufStachV3TableTypesPaginationTypeOneofCase TypeCase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3TableTypesPagination {\n");
            sb.Append("  IsEstimatedTotal: ").Append(IsEstimatedTotal).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  TypeCase: ").Append(TypeCase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3TableTypesPagination);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3TableTypesPagination instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3TableTypesPagination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3TableTypesPagination input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsEstimatedTotal == input.IsEstimatedTotal ||
                    this.IsEstimatedTotal.Equals(input.IsEstimatedTotal)
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.Cursor == input.Cursor ||
                    (this.Cursor != null &&
                    this.Cursor.Equals(input.Cursor))
                ) && 
                (
                    this.TypeCase == input.TypeCase ||
                    (this.TypeCase != null &&
                    this.TypeCase.Equals(input.TypeCase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsEstimatedTotal.GetHashCode();
                if (this.Offset != null)
                {
                    hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                }
                if (this.Cursor != null)
                {
                    hashCode = (hashCode * 59) + this.Cursor.GetHashCode();
                }
                if (this.TypeCase != null)
                {
                    hashCode = (hashCode * 59) + this.TypeCase.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
