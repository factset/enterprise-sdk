/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// GoogleProtobufWellKnownTypesValue
    /// </summary>
    [DataContract(Name = "Google.Protobuf.WellKnownTypes.Value")]
    public partial class GoogleProtobufWellKnownTypesValue : IEquatable<GoogleProtobufWellKnownTypesValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleProtobufWellKnownTypesValue" /> class.
        /// </summary>
        /// <param name="nullValue">nullValue.</param>
        /// <param name="numberValue">numberValue.</param>
        /// <param name="stringValue">stringValue.</param>
        /// <param name="boolValue">boolValue.</param>
        /// <param name="structValue">structValue.</param>
        /// <param name="listValue">listValue.</param>
        /// <param name="kindCase">kindCase.</param>
        public GoogleProtobufWellKnownTypesValue(GoogleProtobufWellKnownTypesNullValue nullValue = default(GoogleProtobufWellKnownTypesNullValue), bool hasNullValue = default(bool), double numberValue = default(double), bool hasNumberValue = default(bool), string stringValue = default(string), bool hasStringValue = default(bool), bool boolValue = default(bool), bool hasBoolValue = default(bool), GoogleProtobufWellKnownTypesStruct structValue = default(GoogleProtobufWellKnownTypesStruct), GoogleProtobufWellKnownTypesListValue listValue = default(GoogleProtobufWellKnownTypesListValue), GoogleProtobufWellKnownTypesValueKindOneofCase kindCase = default(GoogleProtobufWellKnownTypesValueKindOneofCase))
        {
            this.NullValue = nullValue;
            this.NumberValue = numberValue;
            this.StringValue = stringValue;
            this.BoolValue = boolValue;
            this.StructValue = structValue;
            this.ListValue = listValue;
            this.KindCase = kindCase;
        }

        /// <summary>
        /// Gets or Sets NullValue
        /// </summary>
        [DataMember(Name = "nullValue", EmitDefaultValue = false)]
        public GoogleProtobufWellKnownTypesNullValue NullValue { get; set; }

        /// <summary>
        /// Gets or Sets HasNullValue
        /// </summary>
        [DataMember(Name = "hasNullValue", EmitDefaultValue = true)]
        public bool HasNullValue { get; private set; }

        /// <summary>
        /// Returns false as HasNullValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasNullValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NumberValue
        /// </summary>
        [DataMember(Name = "numberValue", EmitDefaultValue = false)]
        public double NumberValue { get; set; }

        /// <summary>
        /// Gets or Sets HasNumberValue
        /// </summary>
        [DataMember(Name = "hasNumberValue", EmitDefaultValue = true)]
        public bool HasNumberValue { get; private set; }

        /// <summary>
        /// Returns false as HasNumberValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasNumberValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StringValue
        /// </summary>
        [DataMember(Name = "stringValue", EmitDefaultValue = true)]
        public string StringValue { get; set; }

        /// <summary>
        /// Gets or Sets HasStringValue
        /// </summary>
        [DataMember(Name = "hasStringValue", EmitDefaultValue = true)]
        public bool HasStringValue { get; private set; }

        /// <summary>
        /// Returns false as HasStringValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasStringValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets BoolValue
        /// </summary>
        [DataMember(Name = "boolValue", EmitDefaultValue = true)]
        public bool BoolValue { get; set; }

        /// <summary>
        /// Gets or Sets HasBoolValue
        /// </summary>
        [DataMember(Name = "hasBoolValue", EmitDefaultValue = true)]
        public bool HasBoolValue { get; private set; }

        /// <summary>
        /// Returns false as HasBoolValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasBoolValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets StructValue
        /// </summary>
        [DataMember(Name = "structValue", EmitDefaultValue = false)]
        public GoogleProtobufWellKnownTypesStruct StructValue { get; set; }

        /// <summary>
        /// Gets or Sets ListValue
        /// </summary>
        [DataMember(Name = "listValue", EmitDefaultValue = false)]
        public GoogleProtobufWellKnownTypesListValue ListValue { get; set; }

        /// <summary>
        /// Gets or Sets KindCase
        /// </summary>
        [DataMember(Name = "kindCase", EmitDefaultValue = false)]
        public GoogleProtobufWellKnownTypesValueKindOneofCase KindCase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoogleProtobufWellKnownTypesValue {\n");
            sb.Append("  NullValue: ").Append(NullValue).Append("\n");
            sb.Append("  HasNullValue: ").Append(HasNullValue).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  HasNumberValue: ").Append(HasNumberValue).Append("\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("  HasStringValue: ").Append(HasStringValue).Append("\n");
            sb.Append("  BoolValue: ").Append(BoolValue).Append("\n");
            sb.Append("  HasBoolValue: ").Append(HasBoolValue).Append("\n");
            sb.Append("  StructValue: ").Append(StructValue).Append("\n");
            sb.Append("  ListValue: ").Append(ListValue).Append("\n");
            sb.Append("  KindCase: ").Append(KindCase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoogleProtobufWellKnownTypesValue);
        }

        /// <summary>
        /// Returns true if GoogleProtobufWellKnownTypesValue instances are equal
        /// </summary>
        /// <param name="input">Instance of GoogleProtobufWellKnownTypesValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoogleProtobufWellKnownTypesValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NullValue == input.NullValue ||
                    (this.NullValue != null &&
                    this.NullValue.Equals(input.NullValue))
                ) && 
                (
                    this.HasNullValue == input.HasNullValue ||
                    this.HasNullValue.Equals(input.HasNullValue)
                ) && 
                (
                    this.NumberValue == input.NumberValue ||
                    this.NumberValue.Equals(input.NumberValue)
                ) && 
                (
                    this.HasNumberValue == input.HasNumberValue ||
                    this.HasNumberValue.Equals(input.HasNumberValue)
                ) && 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                ) && 
                (
                    this.HasStringValue == input.HasStringValue ||
                    this.HasStringValue.Equals(input.HasStringValue)
                ) && 
                (
                    this.BoolValue == input.BoolValue ||
                    this.BoolValue.Equals(input.BoolValue)
                ) && 
                (
                    this.HasBoolValue == input.HasBoolValue ||
                    this.HasBoolValue.Equals(input.HasBoolValue)
                ) && 
                (
                    this.StructValue == input.StructValue ||
                    (this.StructValue != null &&
                    this.StructValue.Equals(input.StructValue))
                ) && 
                (
                    this.ListValue == input.ListValue ||
                    (this.ListValue != null &&
                    this.ListValue.Equals(input.ListValue))
                ) && 
                (
                    this.KindCase == input.KindCase ||
                    (this.KindCase != null &&
                    this.KindCase.Equals(input.KindCase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NullValue != null)
                {
                    hashCode = (hashCode * 59) + this.NullValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasNullValue.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberValue.GetHashCode();
                hashCode = (hashCode * 59) + this.HasNumberValue.GetHashCode();
                if (this.StringValue != null)
                {
                    hashCode = (hashCode * 59) + this.StringValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasStringValue.GetHashCode();
                hashCode = (hashCode * 59) + this.BoolValue.GetHashCode();
                hashCode = (hashCode * 59) + this.HasBoolValue.GetHashCode();
                if (this.StructValue != null)
                {
                    hashCode = (hashCode * 59) + this.StructValue.GetHashCode();
                }
                if (this.ListValue != null)
                {
                    hashCode = (hashCode * 59) + this.ListValue.GetHashCode();
                }
                if (this.KindCase != null)
                {
                    hashCode = (hashCode * 59) + this.KindCase.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
