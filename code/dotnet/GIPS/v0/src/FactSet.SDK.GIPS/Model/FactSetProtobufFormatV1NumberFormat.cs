/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufFormatV1NumberFormat
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Format.V1.NumberFormat")]
    public partial class FactSetProtobufFormatV1NumberFormat : IEquatable<FactSetProtobufFormatV1NumberFormat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufFormatV1NumberFormat" /> class.
        /// </summary>
        /// <param name="currencySpecifier">currencySpecifier.</param>
        /// <param name="exponentialSpecifier">exponentialSpecifier.</param>
        /// <param name="numericSpecifier">numericSpecifier.</param>
        /// <param name="percentSpecifier">percentSpecifier.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="currencySymbol">currencySymbol.</param>
        /// <param name="zeroValue">zeroValue.</param>
        /// <param name="negativeSign">negativeSign.</param>
        /// <param name="positiveSign">positiveSign.</param>
        /// <param name="decimalDigits">decimalDigits.</param>
        /// <param name="decimalSeparator">decimalSeparator.</param>
        /// <param name="groupSeparator">groupSeparator.</param>
        /// <param name="negativeInfinitySymbol">negativeInfinitySymbol.</param>
        /// <param name="positiveInfinitySymbol">positiveInfinitySymbol.</param>
        /// <param name="nanSymbol">nanSymbol.</param>
        /// <param name="percentSymbol">percentSymbol.</param>
        /// <param name="perMilleSymbol">perMilleSymbol.</param>
        /// <param name="digitSubstitution">digitSubstitution.</param>
        /// <param name="rounding">rounding.</param>
        public FactSetProtobufFormatV1NumberFormat(FactSetProtobufFormatV1NumberFormatTypesCurrencyStandardSpecifier currencySpecifier = default(FactSetProtobufFormatV1NumberFormatTypesCurrencyStandardSpecifier), FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier exponentialSpecifier = default(FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier), FactSetProtobufFormatV1NumberFormatTypesNumericStandardSpecifier numericSpecifier = default(FactSetProtobufFormatV1NumberFormatTypesNumericStandardSpecifier), FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier percentSpecifier = default(FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier), string currencyCode = default(string), string currencySymbol = default(string), string zeroValue = default(string), List<string> digits = default(List<string>), string negativeSign = default(string), string positiveSign = default(string), int decimalDigits = default(int), string decimalSeparator = default(string), string groupSeparator = default(string), List<int> groupSizes = default(List<int>), string negativeInfinitySymbol = default(string), string positiveInfinitySymbol = default(string), string nanSymbol = default(string), string percentSymbol = default(string), string perMilleSymbol = default(string), FactSetProtobufFormatV1NumberFormatTypesDigits digitSubstitution = default(FactSetProtobufFormatV1NumberFormatTypesDigits), FactSetProtobufFormatV1NumberFormatTypesRounding rounding = default(FactSetProtobufFormatV1NumberFormatTypesRounding))
        {
            this.CurrencySpecifier = currencySpecifier;
            this.ExponentialSpecifier = exponentialSpecifier;
            this.NumericSpecifier = numericSpecifier;
            this.PercentSpecifier = percentSpecifier;
            this.CurrencyCode = currencyCode;
            this.CurrencySymbol = currencySymbol;
            this.ZeroValue = zeroValue;
            this.NegativeSign = negativeSign;
            this.PositiveSign = positiveSign;
            this.DecimalDigits = decimalDigits;
            this.DecimalSeparator = decimalSeparator;
            this.GroupSeparator = groupSeparator;
            this.NegativeInfinitySymbol = negativeInfinitySymbol;
            this.PositiveInfinitySymbol = positiveInfinitySymbol;
            this.NanSymbol = nanSymbol;
            this.PercentSymbol = percentSymbol;
            this.PerMilleSymbol = perMilleSymbol;
            this.DigitSubstitution = digitSubstitution;
            this.Rounding = rounding;
        }

        /// <summary>
        /// Gets or Sets CurrencySpecifier
        /// </summary>
        [DataMember(Name = "currencySpecifier", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1NumberFormatTypesCurrencyStandardSpecifier CurrencySpecifier { get; set; }

        /// <summary>
        /// Gets or Sets ExponentialSpecifier
        /// </summary>
        [DataMember(Name = "exponentialSpecifier", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier ExponentialSpecifier { get; set; }

        /// <summary>
        /// Gets or Sets NumericSpecifier
        /// </summary>
        [DataMember(Name = "numericSpecifier", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1NumberFormatTypesNumericStandardSpecifier NumericSpecifier { get; set; }

        /// <summary>
        /// Gets or Sets PercentSpecifier
        /// </summary>
        [DataMember(Name = "percentSpecifier", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier PercentSpecifier { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "currencyCode", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name = "currencySymbol", EmitDefaultValue = true)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets ZeroValue
        /// </summary>
        [DataMember(Name = "zeroValue", EmitDefaultValue = true)]
        public string ZeroValue { get; set; }

        /// <summary>
        /// Gets or Sets Digits
        /// </summary>
        [DataMember(Name = "digits", EmitDefaultValue = true)]
        public List<string> Digits { get; private set; }

        /// <summary>
        /// Returns false as Digits should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDigits()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NegativeSign
        /// </summary>
        [DataMember(Name = "negativeSign", EmitDefaultValue = true)]
        public string NegativeSign { get; set; }

        /// <summary>
        /// Gets or Sets PositiveSign
        /// </summary>
        [DataMember(Name = "positiveSign", EmitDefaultValue = true)]
        public string PositiveSign { get; set; }

        /// <summary>
        /// Gets or Sets DecimalDigits
        /// </summary>
        [DataMember(Name = "decimalDigits", EmitDefaultValue = false)]
        public int DecimalDigits { get; set; }

        /// <summary>
        /// Gets or Sets DecimalSeparator
        /// </summary>
        [DataMember(Name = "decimalSeparator", EmitDefaultValue = true)]
        public string DecimalSeparator { get; set; }

        /// <summary>
        /// Gets or Sets GroupSeparator
        /// </summary>
        [DataMember(Name = "groupSeparator", EmitDefaultValue = true)]
        public string GroupSeparator { get; set; }

        /// <summary>
        /// Gets or Sets GroupSizes
        /// </summary>
        [DataMember(Name = "groupSizes", EmitDefaultValue = true)]
        public List<int> GroupSizes { get; private set; }

        /// <summary>
        /// Returns false as GroupSizes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupSizes()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets NegativeInfinitySymbol
        /// </summary>
        [DataMember(Name = "negativeInfinitySymbol", EmitDefaultValue = true)]
        public string NegativeInfinitySymbol { get; set; }

        /// <summary>
        /// Gets or Sets PositiveInfinitySymbol
        /// </summary>
        [DataMember(Name = "positiveInfinitySymbol", EmitDefaultValue = true)]
        public string PositiveInfinitySymbol { get; set; }

        /// <summary>
        /// Gets or Sets NanSymbol
        /// </summary>
        [DataMember(Name = "nanSymbol", EmitDefaultValue = true)]
        public string NanSymbol { get; set; }

        /// <summary>
        /// Gets or Sets PercentSymbol
        /// </summary>
        [DataMember(Name = "percentSymbol", EmitDefaultValue = true)]
        public string PercentSymbol { get; set; }

        /// <summary>
        /// Gets or Sets PerMilleSymbol
        /// </summary>
        [DataMember(Name = "perMilleSymbol", EmitDefaultValue = true)]
        public string PerMilleSymbol { get; set; }

        /// <summary>
        /// Gets or Sets DigitSubstitution
        /// </summary>
        [DataMember(Name = "digitSubstitution", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1NumberFormatTypesDigits DigitSubstitution { get; set; }

        /// <summary>
        /// Gets or Sets Rounding
        /// </summary>
        [DataMember(Name = "rounding", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1NumberFormatTypesRounding Rounding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufFormatV1NumberFormat {\n");
            sb.Append("  CurrencySpecifier: ").Append(CurrencySpecifier).Append("\n");
            sb.Append("  ExponentialSpecifier: ").Append(ExponentialSpecifier).Append("\n");
            sb.Append("  NumericSpecifier: ").Append(NumericSpecifier).Append("\n");
            sb.Append("  PercentSpecifier: ").Append(PercentSpecifier).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  ZeroValue: ").Append(ZeroValue).Append("\n");
            sb.Append("  Digits: ").Append(Digits).Append("\n");
            sb.Append("  NegativeSign: ").Append(NegativeSign).Append("\n");
            sb.Append("  PositiveSign: ").Append(PositiveSign).Append("\n");
            sb.Append("  DecimalDigits: ").Append(DecimalDigits).Append("\n");
            sb.Append("  DecimalSeparator: ").Append(DecimalSeparator).Append("\n");
            sb.Append("  GroupSeparator: ").Append(GroupSeparator).Append("\n");
            sb.Append("  GroupSizes: ").Append(GroupSizes).Append("\n");
            sb.Append("  NegativeInfinitySymbol: ").Append(NegativeInfinitySymbol).Append("\n");
            sb.Append("  PositiveInfinitySymbol: ").Append(PositiveInfinitySymbol).Append("\n");
            sb.Append("  NanSymbol: ").Append(NanSymbol).Append("\n");
            sb.Append("  PercentSymbol: ").Append(PercentSymbol).Append("\n");
            sb.Append("  PerMilleSymbol: ").Append(PerMilleSymbol).Append("\n");
            sb.Append("  DigitSubstitution: ").Append(DigitSubstitution).Append("\n");
            sb.Append("  Rounding: ").Append(Rounding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufFormatV1NumberFormat);
        }

        /// <summary>
        /// Returns true if FactSetProtobufFormatV1NumberFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufFormatV1NumberFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufFormatV1NumberFormat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencySpecifier == input.CurrencySpecifier ||
                    (this.CurrencySpecifier != null &&
                    this.CurrencySpecifier.Equals(input.CurrencySpecifier))
                ) && 
                (
                    this.ExponentialSpecifier == input.ExponentialSpecifier ||
                    (this.ExponentialSpecifier != null &&
                    this.ExponentialSpecifier.Equals(input.ExponentialSpecifier))
                ) && 
                (
                    this.NumericSpecifier == input.NumericSpecifier ||
                    (this.NumericSpecifier != null &&
                    this.NumericSpecifier.Equals(input.NumericSpecifier))
                ) && 
                (
                    this.PercentSpecifier == input.PercentSpecifier ||
                    (this.PercentSpecifier != null &&
                    this.PercentSpecifier.Equals(input.PercentSpecifier))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.ZeroValue == input.ZeroValue ||
                    (this.ZeroValue != null &&
                    this.ZeroValue.Equals(input.ZeroValue))
                ) && 
                (
                    this.Digits == input.Digits ||
                    this.Digits != null &&
                    input.Digits != null &&
                    this.Digits.SequenceEqual(input.Digits)
                ) && 
                (
                    this.NegativeSign == input.NegativeSign ||
                    (this.NegativeSign != null &&
                    this.NegativeSign.Equals(input.NegativeSign))
                ) && 
                (
                    this.PositiveSign == input.PositiveSign ||
                    (this.PositiveSign != null &&
                    this.PositiveSign.Equals(input.PositiveSign))
                ) && 
                (
                    this.DecimalDigits == input.DecimalDigits ||
                    this.DecimalDigits.Equals(input.DecimalDigits)
                ) && 
                (
                    this.DecimalSeparator == input.DecimalSeparator ||
                    (this.DecimalSeparator != null &&
                    this.DecimalSeparator.Equals(input.DecimalSeparator))
                ) && 
                (
                    this.GroupSeparator == input.GroupSeparator ||
                    (this.GroupSeparator != null &&
                    this.GroupSeparator.Equals(input.GroupSeparator))
                ) && 
                (
                    this.GroupSizes == input.GroupSizes ||
                    this.GroupSizes != null &&
                    input.GroupSizes != null &&
                    this.GroupSizes.SequenceEqual(input.GroupSizes)
                ) && 
                (
                    this.NegativeInfinitySymbol == input.NegativeInfinitySymbol ||
                    (this.NegativeInfinitySymbol != null &&
                    this.NegativeInfinitySymbol.Equals(input.NegativeInfinitySymbol))
                ) && 
                (
                    this.PositiveInfinitySymbol == input.PositiveInfinitySymbol ||
                    (this.PositiveInfinitySymbol != null &&
                    this.PositiveInfinitySymbol.Equals(input.PositiveInfinitySymbol))
                ) && 
                (
                    this.NanSymbol == input.NanSymbol ||
                    (this.NanSymbol != null &&
                    this.NanSymbol.Equals(input.NanSymbol))
                ) && 
                (
                    this.PercentSymbol == input.PercentSymbol ||
                    (this.PercentSymbol != null &&
                    this.PercentSymbol.Equals(input.PercentSymbol))
                ) && 
                (
                    this.PerMilleSymbol == input.PerMilleSymbol ||
                    (this.PerMilleSymbol != null &&
                    this.PerMilleSymbol.Equals(input.PerMilleSymbol))
                ) && 
                (
                    this.DigitSubstitution == input.DigitSubstitution ||
                    (this.DigitSubstitution != null &&
                    this.DigitSubstitution.Equals(input.DigitSubstitution))
                ) && 
                (
                    this.Rounding == input.Rounding ||
                    (this.Rounding != null &&
                    this.Rounding.Equals(input.Rounding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencySpecifier != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencySpecifier.GetHashCode();
                }
                if (this.ExponentialSpecifier != null)
                {
                    hashCode = (hashCode * 59) + this.ExponentialSpecifier.GetHashCode();
                }
                if (this.NumericSpecifier != null)
                {
                    hashCode = (hashCode * 59) + this.NumericSpecifier.GetHashCode();
                }
                if (this.PercentSpecifier != null)
                {
                    hashCode = (hashCode * 59) + this.PercentSpecifier.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.CurrencySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencySymbol.GetHashCode();
                }
                if (this.ZeroValue != null)
                {
                    hashCode = (hashCode * 59) + this.ZeroValue.GetHashCode();
                }
                if (this.Digits != null)
                {
                    hashCode = (hashCode * 59) + this.Digits.GetHashCode();
                }
                if (this.NegativeSign != null)
                {
                    hashCode = (hashCode * 59) + this.NegativeSign.GetHashCode();
                }
                if (this.PositiveSign != null)
                {
                    hashCode = (hashCode * 59) + this.PositiveSign.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DecimalDigits.GetHashCode();
                if (this.DecimalSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.DecimalSeparator.GetHashCode();
                }
                if (this.GroupSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.GroupSeparator.GetHashCode();
                }
                if (this.GroupSizes != null)
                {
                    hashCode = (hashCode * 59) + this.GroupSizes.GetHashCode();
                }
                if (this.NegativeInfinitySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.NegativeInfinitySymbol.GetHashCode();
                }
                if (this.PositiveInfinitySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.PositiveInfinitySymbol.GetHashCode();
                }
                if (this.NanSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.NanSymbol.GetHashCode();
                }
                if (this.PercentSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.PercentSymbol.GetHashCode();
                }
                if (this.PerMilleSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.PerMilleSymbol.GetHashCode();
                }
                if (this.DigitSubstitution != null)
                {
                    hashCode = (hashCode * 59) + this.DigitSubstitution.GetHashCode();
                }
                if (this.Rounding != null)
                {
                    hashCode = (hashCode * 59) + this.Rounding.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
