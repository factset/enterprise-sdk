/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufFormatV1DateTimeFormat
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Format.V1.DateTimeFormat")]
    public partial class FactSetProtobufFormatV1DateTimeFormat : IEquatable<FactSetProtobufFormatV1DateTimeFormat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufFormatV1DateTimeFormat" /> class.
        /// </summary>
        /// <param name="shortDateCustomFormatString">shortDateCustomFormatString.</param>
        /// <param name="longDateCustomFormatString">longDateCustomFormatString.</param>
        /// <param name="shortTimeCustomFormatString">shortTimeCustomFormatString.</param>
        /// <param name="longTimeCustomFormatString">longTimeCustomFormatString.</param>
        /// <param name="monthDayCustomFormatString">monthDayCustomFormatString.</param>
        /// <param name="yearMonthCustomFormatString">yearMonthCustomFormatString.</param>
        /// <param name="amDesignator">amDesignator.</param>
        /// <param name="pmDesignator">pmDesignator.</param>
        /// <param name="dateSeparator">dateSeparator.</param>
        /// <param name="timeSeparator">timeSeparator.</param>
        /// <param name="fractionalSecondsSeparator">fractionalSecondsSeparator.</param>
        public FactSetProtobufFormatV1DateTimeFormat(string shortDateCustomFormatString = default(string), string longDateCustomFormatString = default(string), string shortTimeCustomFormatString = default(string), string longTimeCustomFormatString = default(string), string monthDayCustomFormatString = default(string), string yearMonthCustomFormatString = default(string), List<string> dayNames = default(List<string>), List<string> abbreviatedDayNames = default(List<string>), List<string> monthNames = default(List<string>), List<string> abbreviatedMonthNames = default(List<string>), List<string> monthGenitiveNames = default(List<string>), List<string> abbreviatedMonthGenitiveNames = default(List<string>), string amDesignator = default(string), string pmDesignator = default(string), string dateSeparator = default(string), string timeSeparator = default(string), string fractionalSecondsSeparator = default(string))
        {
            this.ShortDateCustomFormatString = shortDateCustomFormatString;
            this.LongDateCustomFormatString = longDateCustomFormatString;
            this.ShortTimeCustomFormatString = shortTimeCustomFormatString;
            this.LongTimeCustomFormatString = longTimeCustomFormatString;
            this.MonthDayCustomFormatString = monthDayCustomFormatString;
            this.YearMonthCustomFormatString = yearMonthCustomFormatString;
            this.AmDesignator = amDesignator;
            this.PmDesignator = pmDesignator;
            this.DateSeparator = dateSeparator;
            this.TimeSeparator = timeSeparator;
            this.FractionalSecondsSeparator = fractionalSecondsSeparator;
        }

        /// <summary>
        /// Gets or Sets ShortDateCustomFormatString
        /// </summary>
        [DataMember(Name = "shortDateCustomFormatString", EmitDefaultValue = true)]
        public string ShortDateCustomFormatString { get; set; }

        /// <summary>
        /// Gets or Sets LongDateCustomFormatString
        /// </summary>
        [DataMember(Name = "longDateCustomFormatString", EmitDefaultValue = true)]
        public string LongDateCustomFormatString { get; set; }

        /// <summary>
        /// Gets or Sets ShortTimeCustomFormatString
        /// </summary>
        [DataMember(Name = "shortTimeCustomFormatString", EmitDefaultValue = true)]
        public string ShortTimeCustomFormatString { get; set; }

        /// <summary>
        /// Gets or Sets LongTimeCustomFormatString
        /// </summary>
        [DataMember(Name = "longTimeCustomFormatString", EmitDefaultValue = true)]
        public string LongTimeCustomFormatString { get; set; }

        /// <summary>
        /// Gets or Sets MonthDayCustomFormatString
        /// </summary>
        [DataMember(Name = "monthDayCustomFormatString", EmitDefaultValue = true)]
        public string MonthDayCustomFormatString { get; set; }

        /// <summary>
        /// Gets or Sets YearMonthCustomFormatString
        /// </summary>
        [DataMember(Name = "yearMonthCustomFormatString", EmitDefaultValue = true)]
        public string YearMonthCustomFormatString { get; set; }

        /// <summary>
        /// Gets or Sets DayNames
        /// </summary>
        [DataMember(Name = "dayNames", EmitDefaultValue = true)]
        public List<string> DayNames { get; private set; }

        /// <summary>
        /// Returns false as DayNames should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDayNames()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AbbreviatedDayNames
        /// </summary>
        [DataMember(Name = "abbreviatedDayNames", EmitDefaultValue = true)]
        public List<string> AbbreviatedDayNames { get; private set; }

        /// <summary>
        /// Returns false as AbbreviatedDayNames should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAbbreviatedDayNames()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MonthNames
        /// </summary>
        [DataMember(Name = "monthNames", EmitDefaultValue = true)]
        public List<string> MonthNames { get; private set; }

        /// <summary>
        /// Returns false as MonthNames should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMonthNames()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AbbreviatedMonthNames
        /// </summary>
        [DataMember(Name = "abbreviatedMonthNames", EmitDefaultValue = true)]
        public List<string> AbbreviatedMonthNames { get; private set; }

        /// <summary>
        /// Returns false as AbbreviatedMonthNames should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAbbreviatedMonthNames()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MonthGenitiveNames
        /// </summary>
        [DataMember(Name = "monthGenitiveNames", EmitDefaultValue = true)]
        public List<string> MonthGenitiveNames { get; private set; }

        /// <summary>
        /// Returns false as MonthGenitiveNames should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMonthGenitiveNames()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AbbreviatedMonthGenitiveNames
        /// </summary>
        [DataMember(Name = "abbreviatedMonthGenitiveNames", EmitDefaultValue = true)]
        public List<string> AbbreviatedMonthGenitiveNames { get; private set; }

        /// <summary>
        /// Returns false as AbbreviatedMonthGenitiveNames should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAbbreviatedMonthGenitiveNames()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AmDesignator
        /// </summary>
        [DataMember(Name = "amDesignator", EmitDefaultValue = true)]
        public string AmDesignator { get; set; }

        /// <summary>
        /// Gets or Sets PmDesignator
        /// </summary>
        [DataMember(Name = "pmDesignator", EmitDefaultValue = true)]
        public string PmDesignator { get; set; }

        /// <summary>
        /// Gets or Sets DateSeparator
        /// </summary>
        [DataMember(Name = "dateSeparator", EmitDefaultValue = true)]
        public string DateSeparator { get; set; }

        /// <summary>
        /// Gets or Sets TimeSeparator
        /// </summary>
        [DataMember(Name = "timeSeparator", EmitDefaultValue = true)]
        public string TimeSeparator { get; set; }

        /// <summary>
        /// Gets or Sets FractionalSecondsSeparator
        /// </summary>
        [DataMember(Name = "fractionalSecondsSeparator", EmitDefaultValue = true)]
        public string FractionalSecondsSeparator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufFormatV1DateTimeFormat {\n");
            sb.Append("  ShortDateCustomFormatString: ").Append(ShortDateCustomFormatString).Append("\n");
            sb.Append("  LongDateCustomFormatString: ").Append(LongDateCustomFormatString).Append("\n");
            sb.Append("  ShortTimeCustomFormatString: ").Append(ShortTimeCustomFormatString).Append("\n");
            sb.Append("  LongTimeCustomFormatString: ").Append(LongTimeCustomFormatString).Append("\n");
            sb.Append("  MonthDayCustomFormatString: ").Append(MonthDayCustomFormatString).Append("\n");
            sb.Append("  YearMonthCustomFormatString: ").Append(YearMonthCustomFormatString).Append("\n");
            sb.Append("  DayNames: ").Append(DayNames).Append("\n");
            sb.Append("  AbbreviatedDayNames: ").Append(AbbreviatedDayNames).Append("\n");
            sb.Append("  MonthNames: ").Append(MonthNames).Append("\n");
            sb.Append("  AbbreviatedMonthNames: ").Append(AbbreviatedMonthNames).Append("\n");
            sb.Append("  MonthGenitiveNames: ").Append(MonthGenitiveNames).Append("\n");
            sb.Append("  AbbreviatedMonthGenitiveNames: ").Append(AbbreviatedMonthGenitiveNames).Append("\n");
            sb.Append("  AmDesignator: ").Append(AmDesignator).Append("\n");
            sb.Append("  PmDesignator: ").Append(PmDesignator).Append("\n");
            sb.Append("  DateSeparator: ").Append(DateSeparator).Append("\n");
            sb.Append("  TimeSeparator: ").Append(TimeSeparator).Append("\n");
            sb.Append("  FractionalSecondsSeparator: ").Append(FractionalSecondsSeparator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufFormatV1DateTimeFormat);
        }

        /// <summary>
        /// Returns true if FactSetProtobufFormatV1DateTimeFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufFormatV1DateTimeFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufFormatV1DateTimeFormat input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShortDateCustomFormatString == input.ShortDateCustomFormatString ||
                    (this.ShortDateCustomFormatString != null &&
                    this.ShortDateCustomFormatString.Equals(input.ShortDateCustomFormatString))
                ) && 
                (
                    this.LongDateCustomFormatString == input.LongDateCustomFormatString ||
                    (this.LongDateCustomFormatString != null &&
                    this.LongDateCustomFormatString.Equals(input.LongDateCustomFormatString))
                ) && 
                (
                    this.ShortTimeCustomFormatString == input.ShortTimeCustomFormatString ||
                    (this.ShortTimeCustomFormatString != null &&
                    this.ShortTimeCustomFormatString.Equals(input.ShortTimeCustomFormatString))
                ) && 
                (
                    this.LongTimeCustomFormatString == input.LongTimeCustomFormatString ||
                    (this.LongTimeCustomFormatString != null &&
                    this.LongTimeCustomFormatString.Equals(input.LongTimeCustomFormatString))
                ) && 
                (
                    this.MonthDayCustomFormatString == input.MonthDayCustomFormatString ||
                    (this.MonthDayCustomFormatString != null &&
                    this.MonthDayCustomFormatString.Equals(input.MonthDayCustomFormatString))
                ) && 
                (
                    this.YearMonthCustomFormatString == input.YearMonthCustomFormatString ||
                    (this.YearMonthCustomFormatString != null &&
                    this.YearMonthCustomFormatString.Equals(input.YearMonthCustomFormatString))
                ) && 
                (
                    this.DayNames == input.DayNames ||
                    this.DayNames != null &&
                    input.DayNames != null &&
                    this.DayNames.SequenceEqual(input.DayNames)
                ) && 
                (
                    this.AbbreviatedDayNames == input.AbbreviatedDayNames ||
                    this.AbbreviatedDayNames != null &&
                    input.AbbreviatedDayNames != null &&
                    this.AbbreviatedDayNames.SequenceEqual(input.AbbreviatedDayNames)
                ) && 
                (
                    this.MonthNames == input.MonthNames ||
                    this.MonthNames != null &&
                    input.MonthNames != null &&
                    this.MonthNames.SequenceEqual(input.MonthNames)
                ) && 
                (
                    this.AbbreviatedMonthNames == input.AbbreviatedMonthNames ||
                    this.AbbreviatedMonthNames != null &&
                    input.AbbreviatedMonthNames != null &&
                    this.AbbreviatedMonthNames.SequenceEqual(input.AbbreviatedMonthNames)
                ) && 
                (
                    this.MonthGenitiveNames == input.MonthGenitiveNames ||
                    this.MonthGenitiveNames != null &&
                    input.MonthGenitiveNames != null &&
                    this.MonthGenitiveNames.SequenceEqual(input.MonthGenitiveNames)
                ) && 
                (
                    this.AbbreviatedMonthGenitiveNames == input.AbbreviatedMonthGenitiveNames ||
                    this.AbbreviatedMonthGenitiveNames != null &&
                    input.AbbreviatedMonthGenitiveNames != null &&
                    this.AbbreviatedMonthGenitiveNames.SequenceEqual(input.AbbreviatedMonthGenitiveNames)
                ) && 
                (
                    this.AmDesignator == input.AmDesignator ||
                    (this.AmDesignator != null &&
                    this.AmDesignator.Equals(input.AmDesignator))
                ) && 
                (
                    this.PmDesignator == input.PmDesignator ||
                    (this.PmDesignator != null &&
                    this.PmDesignator.Equals(input.PmDesignator))
                ) && 
                (
                    this.DateSeparator == input.DateSeparator ||
                    (this.DateSeparator != null &&
                    this.DateSeparator.Equals(input.DateSeparator))
                ) && 
                (
                    this.TimeSeparator == input.TimeSeparator ||
                    (this.TimeSeparator != null &&
                    this.TimeSeparator.Equals(input.TimeSeparator))
                ) && 
                (
                    this.FractionalSecondsSeparator == input.FractionalSecondsSeparator ||
                    (this.FractionalSecondsSeparator != null &&
                    this.FractionalSecondsSeparator.Equals(input.FractionalSecondsSeparator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShortDateCustomFormatString != null)
                {
                    hashCode = (hashCode * 59) + this.ShortDateCustomFormatString.GetHashCode();
                }
                if (this.LongDateCustomFormatString != null)
                {
                    hashCode = (hashCode * 59) + this.LongDateCustomFormatString.GetHashCode();
                }
                if (this.ShortTimeCustomFormatString != null)
                {
                    hashCode = (hashCode * 59) + this.ShortTimeCustomFormatString.GetHashCode();
                }
                if (this.LongTimeCustomFormatString != null)
                {
                    hashCode = (hashCode * 59) + this.LongTimeCustomFormatString.GetHashCode();
                }
                if (this.MonthDayCustomFormatString != null)
                {
                    hashCode = (hashCode * 59) + this.MonthDayCustomFormatString.GetHashCode();
                }
                if (this.YearMonthCustomFormatString != null)
                {
                    hashCode = (hashCode * 59) + this.YearMonthCustomFormatString.GetHashCode();
                }
                if (this.DayNames != null)
                {
                    hashCode = (hashCode * 59) + this.DayNames.GetHashCode();
                }
                if (this.AbbreviatedDayNames != null)
                {
                    hashCode = (hashCode * 59) + this.AbbreviatedDayNames.GetHashCode();
                }
                if (this.MonthNames != null)
                {
                    hashCode = (hashCode * 59) + this.MonthNames.GetHashCode();
                }
                if (this.AbbreviatedMonthNames != null)
                {
                    hashCode = (hashCode * 59) + this.AbbreviatedMonthNames.GetHashCode();
                }
                if (this.MonthGenitiveNames != null)
                {
                    hashCode = (hashCode * 59) + this.MonthGenitiveNames.GetHashCode();
                }
                if (this.AbbreviatedMonthGenitiveNames != null)
                {
                    hashCode = (hashCode * 59) + this.AbbreviatedMonthGenitiveNames.GetHashCode();
                }
                if (this.AmDesignator != null)
                {
                    hashCode = (hashCode * 59) + this.AmDesignator.GetHashCode();
                }
                if (this.PmDesignator != null)
                {
                    hashCode = (hashCode * 59) + this.PmDesignator.GetHashCode();
                }
                if (this.DateSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.DateSeparator.GetHashCode();
                }
                if (this.TimeSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.TimeSeparator.GetHashCode();
                }
                if (this.FractionalSecondsSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.FractionalSecondsSeparator.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
