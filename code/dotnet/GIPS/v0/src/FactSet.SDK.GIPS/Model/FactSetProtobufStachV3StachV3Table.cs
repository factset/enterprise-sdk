/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3StachV3Table
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.StachV3Table")]
    public partial class FactSetProtobufStachV3StachV3Table : IEquatable<FactSetProtobufStachV3StachV3Table>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3StachV3Table" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="name">name.</param>
        /// <param name="table">table.</param>
        /// <param name="multiLevelHeadersTable">multiLevelHeadersTable.</param>
        public FactSetProtobufStachV3StachV3Table(string version = default(string), string name = default(string), List<FactSetProtobufStachV3StachV3TableTypesColumn> columns = default(List<FactSetProtobufStachV3StachV3TableTypesColumn>), FactSetProtobufStachV3Table table = default(FactSetProtobufStachV3Table), FactSetProtobufStachV3StachV3Table multiLevelHeadersTable = default(FactSetProtobufStachV3StachV3Table), List<FactSetProtobufStachV3ViewsTypesView> views = default(List<FactSetProtobufStachV3ViewsTypesView>), List<GoogleProtobufWellKnownTypesStruct> rows = default(List<GoogleProtobufWellKnownTypesStruct>))
        {
            this._Version = version;
            this.Name = name;
            this.Table = table;
            this.MultiLevelHeadersTable = multiLevelHeadersTable;
        }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [DataMember(Name = "columns", EmitDefaultValue = true)]
        public List<FactSetProtobufStachV3StachV3TableTypesColumn> Columns { get; private set; }

        /// <summary>
        /// Returns false as Columns should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeColumns()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Table
        /// </summary>
        [DataMember(Name = "table", EmitDefaultValue = false)]
        public FactSetProtobufStachV3Table Table { get; set; }

        /// <summary>
        /// Gets or Sets MultiLevelHeadersTable
        /// </summary>
        [DataMember(Name = "multiLevelHeadersTable", EmitDefaultValue = false)]
        public FactSetProtobufStachV3StachV3Table MultiLevelHeadersTable { get; set; }

        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [DataMember(Name = "views", EmitDefaultValue = true)]
        public List<FactSetProtobufStachV3ViewsTypesView> Views { get; private set; }

        /// <summary>
        /// Returns false as Views should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeViews()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name = "rows", EmitDefaultValue = true)]
        public List<GoogleProtobufWellKnownTypesStruct> Rows { get; private set; }

        /// <summary>
        /// Returns false as Rows should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRows()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3StachV3Table {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  MultiLevelHeadersTable: ").Append(MultiLevelHeadersTable).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3StachV3Table);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3StachV3Table instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3StachV3Table to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3StachV3Table input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Table == input.Table ||
                    (this.Table != null &&
                    this.Table.Equals(input.Table))
                ) && 
                (
                    this.MultiLevelHeadersTable == input.MultiLevelHeadersTable ||
                    (this.MultiLevelHeadersTable != null &&
                    this.MultiLevelHeadersTable.Equals(input.MultiLevelHeadersTable))
                ) && 
                (
                    this.Views == input.Views ||
                    this.Views != null &&
                    input.Views != null &&
                    this.Views.SequenceEqual(input.Views)
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Columns != null)
                {
                    hashCode = (hashCode * 59) + this.Columns.GetHashCode();
                }
                if (this.Table != null)
                {
                    hashCode = (hashCode * 59) + this.Table.GetHashCode();
                }
                if (this.MultiLevelHeadersTable != null)
                {
                    hashCode = (hashCode * 59) + this.MultiLevelHeadersTable.GetHashCode();
                }
                if (this.Views != null)
                {
                    hashCode = (hashCode * 59) + this.Views.GetHashCode();
                }
                if (this.Rows != null)
                {
                    hashCode = (hashCode * 59) + this.Rows.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
