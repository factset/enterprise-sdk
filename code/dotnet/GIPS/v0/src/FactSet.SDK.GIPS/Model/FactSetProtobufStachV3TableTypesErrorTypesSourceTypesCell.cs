/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.Table.Types.Error.Types.Source.Types.Cell")]
    public partial class FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell : IEquatable<FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell" /> class.
        /// </summary>
        /// <param name="columnName">columnName.</param>
        public FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell(string columnName = default(string), Dictionary<string, GoogleProtobufWellKnownTypesValue> primaryKeyValues = default(Dictionary<string, GoogleProtobufWellKnownTypesValue>))
        {
            this.ColumnName = columnName;
        }

        /// <summary>
        /// Gets or Sets ColumnName
        /// </summary>
        [DataMember(Name = "columnName", EmitDefaultValue = true)]
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryKeyValues
        /// </summary>
        [DataMember(Name = "primaryKeyValues", EmitDefaultValue = true)]
        public Dictionary<string, GoogleProtobufWellKnownTypesValue> PrimaryKeyValues { get; private set; }

        /// <summary>
        /// Returns false as PrimaryKeyValues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrimaryKeyValues()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell {\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("  PrimaryKeyValues: ").Append(PrimaryKeyValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3TableTypesErrorTypesSourceTypesCell input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ColumnName == input.ColumnName ||
                    (this.ColumnName != null &&
                    this.ColumnName.Equals(input.ColumnName))
                ) && 
                (
                    this.PrimaryKeyValues == input.PrimaryKeyValues ||
                    this.PrimaryKeyValues != null &&
                    input.PrimaryKeyValues != null &&
                    this.PrimaryKeyValues.SequenceEqual(input.PrimaryKeyValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ColumnName != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnName.GetHashCode();
                }
                if (this.PrimaryKeyValues != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryKeyValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
