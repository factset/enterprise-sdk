/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufFormatV1FdsFormatSettings
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Format.V1.FdsFormatSettings")]
    public partial class FactSetProtobufFormatV1FdsFormatSettings : IEquatable<FactSetProtobufFormatV1FdsFormatSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufFormatV1FdsFormatSettings" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="culture">culture.</param>
        /// <param name="timeZone">timeZone.</param>
        /// <param name="nullValue">nullValue.</param>
        /// <param name="numberFormat">numberFormat.</param>
        /// <param name="dateTimeFormat">dateTimeFormat.</param>
        public FactSetProtobufFormatV1FdsFormatSettings(string version = default(string), string culture = default(string), string timeZone = default(string), string nullValue = default(string), FactSetProtobufFormatV1NumberFormat numberFormat = default(FactSetProtobufFormatV1NumberFormat), FactSetProtobufFormatV1DateTimeFormat dateTimeFormat = default(FactSetProtobufFormatV1DateTimeFormat))
        {
            this._Version = version;
            this.Culture = culture;
            this.TimeZone = timeZone;
            this.NullValue = nullValue;
            this.NumberFormat = numberFormat;
            this.DateTimeFormat = dateTimeFormat;
        }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets Culture
        /// </summary>
        [DataMember(Name = "culture", EmitDefaultValue = true)]
        public string Culture { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name = "timeZone", EmitDefaultValue = true)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets NullValue
        /// </summary>
        [DataMember(Name = "nullValue", EmitDefaultValue = true)]
        public string NullValue { get; set; }

        /// <summary>
        /// Gets or Sets NumberFormat
        /// </summary>
        [DataMember(Name = "numberFormat", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1NumberFormat NumberFormat { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeFormat
        /// </summary>
        [DataMember(Name = "dateTimeFormat", EmitDefaultValue = false)]
        public FactSetProtobufFormatV1DateTimeFormat DateTimeFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufFormatV1FdsFormatSettings {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  NullValue: ").Append(NullValue).Append("\n");
            sb.Append("  NumberFormat: ").Append(NumberFormat).Append("\n");
            sb.Append("  DateTimeFormat: ").Append(DateTimeFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufFormatV1FdsFormatSettings);
        }

        /// <summary>
        /// Returns true if FactSetProtobufFormatV1FdsFormatSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufFormatV1FdsFormatSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufFormatV1FdsFormatSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Culture == input.Culture ||
                    (this.Culture != null &&
                    this.Culture.Equals(input.Culture))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.NullValue == input.NullValue ||
                    (this.NullValue != null &&
                    this.NullValue.Equals(input.NullValue))
                ) && 
                (
                    this.NumberFormat == input.NumberFormat ||
                    (this.NumberFormat != null &&
                    this.NumberFormat.Equals(input.NumberFormat))
                ) && 
                (
                    this.DateTimeFormat == input.DateTimeFormat ||
                    (this.DateTimeFormat != null &&
                    this.DateTimeFormat.Equals(input.DateTimeFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.Culture != null)
                {
                    hashCode = (hashCode * 59) + this.Culture.GetHashCode();
                }
                if (this.TimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZone.GetHashCode();
                }
                if (this.NullValue != null)
                {
                    hashCode = (hashCode * 59) + this.NullValue.GetHashCode();
                }
                if (this.NumberFormat != null)
                {
                    hashCode = (hashCode * 59) + this.NumberFormat.GetHashCode();
                }
                if (this.DateTimeFormat != null)
                {
                    hashCode = (hashCode * 59) + this.DateTimeFormat.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
