/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Format.V1.NumberFormat.Types.ExponentialStandardSpecifier")]
    public partial class FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier : IEquatable<FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier" /> class.
        /// </summary>
        /// <param name="decimalDigits">decimalDigits.</param>
        /// <param name="exponentDigits">exponentDigits.</param>
        /// <param name="decimalSeparator">decimalSeparator.</param>
        /// <param name="exponentSignRequired">exponentSignRequired.</param>
        public FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier(int decimalDigits = default(int), int exponentDigits = default(int), string decimalSeparator = default(string), bool exponentSignRequired = default(bool))
        {
            this.DecimalDigits = decimalDigits;
            this.ExponentDigits = exponentDigits;
            this.DecimalSeparator = decimalSeparator;
            this.ExponentSignRequired = exponentSignRequired;
        }

        /// <summary>
        /// Gets or Sets DecimalDigits
        /// </summary>
        [DataMember(Name = "decimalDigits", EmitDefaultValue = false)]
        public int DecimalDigits { get; set; }

        /// <summary>
        /// Gets or Sets ExponentDigits
        /// </summary>
        [DataMember(Name = "exponentDigits", EmitDefaultValue = false)]
        public int ExponentDigits { get; set; }

        /// <summary>
        /// Gets or Sets DecimalSeparator
        /// </summary>
        [DataMember(Name = "decimalSeparator", EmitDefaultValue = true)]
        public string DecimalSeparator { get; set; }

        /// <summary>
        /// Gets or Sets ExponentSignRequired
        /// </summary>
        [DataMember(Name = "exponentSignRequired", EmitDefaultValue = true)]
        public bool ExponentSignRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier {\n");
            sb.Append("  DecimalDigits: ").Append(DecimalDigits).Append("\n");
            sb.Append("  ExponentDigits: ").Append(ExponentDigits).Append("\n");
            sb.Append("  DecimalSeparator: ").Append(DecimalSeparator).Append("\n");
            sb.Append("  ExponentSignRequired: ").Append(ExponentSignRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier);
        }

        /// <summary>
        /// Returns true if FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DecimalDigits == input.DecimalDigits ||
                    this.DecimalDigits.Equals(input.DecimalDigits)
                ) && 
                (
                    this.ExponentDigits == input.ExponentDigits ||
                    this.ExponentDigits.Equals(input.ExponentDigits)
                ) && 
                (
                    this.DecimalSeparator == input.DecimalSeparator ||
                    (this.DecimalSeparator != null &&
                    this.DecimalSeparator.Equals(input.DecimalSeparator))
                ) && 
                (
                    this.ExponentSignRequired == input.ExponentSignRequired ||
                    this.ExponentSignRequired.Equals(input.ExponentSignRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DecimalDigits.GetHashCode();
                hashCode = (hashCode * 59) + this.ExponentDigits.GetHashCode();
                if (this.DecimalSeparator != null)
                {
                    hashCode = (hashCode * 59) + this.DecimalSeparator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExponentSignRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
