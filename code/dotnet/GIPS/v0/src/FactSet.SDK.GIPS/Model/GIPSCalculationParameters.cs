/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// List of calculation parameters.
    /// </summary>
    [DataContract(Name = "GIPSCalculationParameters")]
    public partial class GIPSCalculationParameters : IEquatable<GIPSCalculationParameters>, IValidatableObject
    {
        /// <summary>
        /// Report name
        /// </summary>
        /// <value>Report name</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReportEnum
        {
            /// <summary>
            /// Enum RETSTAT for value: RET_STAT
            /// </summary>
            [EnumMember(Value = "RET_STAT")]
            RETSTAT = 1

        }


        /// <summary>
        /// Report name
        /// </summary>
        /// <value>Report name</value>
        [DataMember(Name = "report", EmitDefaultValue = true)]
        public ReportEnum? Report { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GIPSCalculationParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GIPSCalculationParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GIPSCalculationParameters" /> class.
        /// </summary>
        /// <param name="account">Account path for the calculation. Account field accepts only ACTM. (required).</param>
        /// <param name="enddate">Calculation&#39;s end date. End of previous month will be used as the enddate if not provided explicitly..</param>
        /// <param name="report">Report name.</param>
        /// <param name="viewid">ViewId for calculation..</param>
        /// <param name="currencyisocode">Currency ISO code for calculation. The default currency value of the account will be used if not provided explicitly..</param>
        public GIPSCalculationParameters(string account,string enddate = default(string), ReportEnum? report = default(ReportEnum?), string viewid = default(string), string currencyisocode = default(string))
        {
            // to ensure "account" is required (not null)
            if (account == null) {
                throw new ArgumentNullException("account is a required property for GIPSCalculationParameters and cannot be null");
            }
            this.Account = account;
            this.Enddate = enddate;
            this.Report = report;
            this.Viewid = viewid;
            this.Currencyisocode = currencyisocode;
        }

        /// <summary>
        /// Account path for the calculation. Account field accepts only ACTM.
        /// </summary>
        /// <value>Account path for the calculation. Account field accepts only ACTM.</value>
        [DataMember(Name = "account", IsRequired = true, EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Calculation&#39;s end date. End of previous month will be used as the enddate if not provided explicitly.
        /// </summary>
        /// <value>Calculation&#39;s end date. End of previous month will be used as the enddate if not provided explicitly.</value>
        [DataMember(Name = "enddate", EmitDefaultValue = true)]
        public string Enddate { get; set; }

        /// <summary>
        /// ViewId for calculation.
        /// </summary>
        /// <value>ViewId for calculation.</value>
        [DataMember(Name = "viewid", EmitDefaultValue = true)]
        public string Viewid { get; set; }

        /// <summary>
        /// Currency ISO code for calculation. The default currency value of the account will be used if not provided explicitly.
        /// </summary>
        /// <value>Currency ISO code for calculation. The default currency value of the account will be used if not provided explicitly.</value>
        [DataMember(Name = "currencyisocode", EmitDefaultValue = true)]
        public string Currencyisocode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GIPSCalculationParameters {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Enddate: ").Append(Enddate).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  Viewid: ").Append(Viewid).Append("\n");
            sb.Append("  Currencyisocode: ").Append(Currencyisocode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GIPSCalculationParameters);
        }

        /// <summary>
        /// Returns true if GIPSCalculationParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of GIPSCalculationParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GIPSCalculationParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Enddate == input.Enddate ||
                    (this.Enddate != null &&
                    this.Enddate.Equals(input.Enddate))
                ) && 
                (
                    this.Report == input.Report ||
                    this.Report.Equals(input.Report)
                ) && 
                (
                    this.Viewid == input.Viewid ||
                    (this.Viewid != null &&
                    this.Viewid.Equals(input.Viewid))
                ) && 
                (
                    this.Currencyisocode == input.Currencyisocode ||
                    (this.Currencyisocode != null &&
                    this.Currencyisocode.Equals(input.Currencyisocode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Enddate != null)
                {
                    hashCode = (hashCode * 59) + this.Enddate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Report.GetHashCode();
                if (this.Viewid != null)
                {
                    hashCode = (hashCode * 59) + this.Viewid.GetHashCode();
                }
                if (this.Currencyisocode != null)
                {
                    hashCode = (hashCode * 59) + this.Currencyisocode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Account (string) pattern
            Regex regexAccount = new Regex(@"^.*\\.(a|A)(c|C)(t|T)(m|M)$", RegexOptions.CultureInvariant);
            if (false == regexAccount.Match(this.Account).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Account, must match a pattern of " + regexAccount, new [] { "Account" });
            }

            yield break;
        }
    }

}
