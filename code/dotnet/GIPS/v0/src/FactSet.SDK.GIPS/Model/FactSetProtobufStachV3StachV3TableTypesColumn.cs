/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3StachV3TableTypesColumn
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.StachV3Table.Types.Column")]
    public partial class FactSetProtobufStachV3StachV3TableTypesColumn : IEquatable<FactSetProtobufStachV3StachV3TableTypesColumn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3StachV3TableTypesColumn" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="forbidNulls">forbidNulls.</param>
        /// <param name="contextualType">contextualType.</param>
        public FactSetProtobufStachV3StachV3TableTypesColumn(string name = default(string), bool forbidNulls = default(bool), string contextualType = default(string), Dictionary<string, FactSetProtobufStachV3MetadataItem> customMetadata = default(Dictionary<string, FactSetProtobufStachV3MetadataItem>))
        {
            this.Name = name;
            this.ForbidNulls = forbidNulls;
            this.ContextualType = contextualType;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ForbidNulls
        /// </summary>
        [DataMember(Name = "forbidNulls", EmitDefaultValue = true)]
        public bool ForbidNulls { get; set; }

        /// <summary>
        /// Gets or Sets ContextualType
        /// </summary>
        [DataMember(Name = "contextualType", EmitDefaultValue = true)]
        public string ContextualType { get; set; }

        /// <summary>
        /// Gets or Sets CustomMetadata
        /// </summary>
        [DataMember(Name = "customMetadata", EmitDefaultValue = true)]
        public Dictionary<string, FactSetProtobufStachV3MetadataItem> CustomMetadata { get; private set; }

        /// <summary>
        /// Returns false as CustomMetadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomMetadata()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3StachV3TableTypesColumn {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ForbidNulls: ").Append(ForbidNulls).Append("\n");
            sb.Append("  ContextualType: ").Append(ContextualType).Append("\n");
            sb.Append("  CustomMetadata: ").Append(CustomMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3StachV3TableTypesColumn);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3StachV3TableTypesColumn instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3StachV3TableTypesColumn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3StachV3TableTypesColumn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ForbidNulls == input.ForbidNulls ||
                    this.ForbidNulls.Equals(input.ForbidNulls)
                ) && 
                (
                    this.ContextualType == input.ContextualType ||
                    (this.ContextualType != null &&
                    this.ContextualType.Equals(input.ContextualType))
                ) && 
                (
                    this.CustomMetadata == input.CustomMetadata ||
                    this.CustomMetadata != null &&
                    input.CustomMetadata != null &&
                    this.CustomMetadata.SequenceEqual(input.CustomMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForbidNulls.GetHashCode();
                if (this.ContextualType != null)
                {
                    hashCode = (hashCode * 59) + this.ContextualType.GetHashCode();
                }
                if (this.CustomMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
