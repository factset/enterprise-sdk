/*
 * GIPS API
 *
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.GIPS.Client.OpenAPIDateConverter;

namespace FactSet.SDK.GIPS.Model
{
    /// <summary>
    /// FactSetProtobufStachV3SortColumn
    /// </summary>
    [DataContract(Name = "FactSet.Protobuf.Stach.V3.SortColumn")]
    public partial class FactSetProtobufStachV3SortColumn : IEquatable<FactSetProtobufStachV3SortColumn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetProtobufStachV3SortColumn" /> class.
        /// </summary>
        /// <param name="by">by.</param>
        /// <param name="descending">descending.</param>
        /// <param name="nullsFirst">nullsFirst.</param>
        /// <param name="caseInsensitive">caseInsensitive.</param>
        /// <param name="absoluteValue">absoluteValue.</param>
        public FactSetProtobufStachV3SortColumn(string by = default(string), bool descending = default(bool), bool nullsFirst = default(bool), bool caseInsensitive = default(bool), bool absoluteValue = default(bool))
        {
            this.By = by;
            this.Descending = descending;
            this.NullsFirst = nullsFirst;
            this.CaseInsensitive = caseInsensitive;
            this.AbsoluteValue = absoluteValue;
        }

        /// <summary>
        /// Gets or Sets By
        /// </summary>
        [DataMember(Name = "by", EmitDefaultValue = true)]
        public string By { get; set; }

        /// <summary>
        /// Gets or Sets Descending
        /// </summary>
        [DataMember(Name = "descending", EmitDefaultValue = true)]
        public bool Descending { get; set; }

        /// <summary>
        /// Gets or Sets NullsFirst
        /// </summary>
        [DataMember(Name = "nullsFirst", EmitDefaultValue = true)]
        public bool NullsFirst { get; set; }

        /// <summary>
        /// Gets or Sets CaseInsensitive
        /// </summary>
        [DataMember(Name = "caseInsensitive", EmitDefaultValue = true)]
        public bool CaseInsensitive { get; set; }

        /// <summary>
        /// Gets or Sets AbsoluteValue
        /// </summary>
        [DataMember(Name = "absoluteValue", EmitDefaultValue = true)]
        public bool AbsoluteValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactSetProtobufStachV3SortColumn {\n");
            sb.Append("  By: ").Append(By).Append("\n");
            sb.Append("  Descending: ").Append(Descending).Append("\n");
            sb.Append("  NullsFirst: ").Append(NullsFirst).Append("\n");
            sb.Append("  CaseInsensitive: ").Append(CaseInsensitive).Append("\n");
            sb.Append("  AbsoluteValue: ").Append(AbsoluteValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactSetProtobufStachV3SortColumn);
        }

        /// <summary>
        /// Returns true if FactSetProtobufStachV3SortColumn instances are equal
        /// </summary>
        /// <param name="input">Instance of FactSetProtobufStachV3SortColumn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactSetProtobufStachV3SortColumn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.By == input.By ||
                    (this.By != null &&
                    this.By.Equals(input.By))
                ) && 
                (
                    this.Descending == input.Descending ||
                    this.Descending.Equals(input.Descending)
                ) && 
                (
                    this.NullsFirst == input.NullsFirst ||
                    this.NullsFirst.Equals(input.NullsFirst)
                ) && 
                (
                    this.CaseInsensitive == input.CaseInsensitive ||
                    this.CaseInsensitive.Equals(input.CaseInsensitive)
                ) && 
                (
                    this.AbsoluteValue == input.AbsoluteValue ||
                    this.AbsoluteValue.Equals(input.AbsoluteValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.By != null)
                {
                    hashCode = (hashCode * 59) + this.By.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Descending.GetHashCode();
                hashCode = (hashCode * 59) + this.NullsFirst.GetHashCode();
                hashCode = (hashCode * 59) + this.CaseInsensitive.GetHashCode();
                hashCode = (hashCode * 59) + this.AbsoluteValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
