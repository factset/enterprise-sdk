/*
 * FactSet Supply Chain API
 *
 * Access the complex networks of key customer, suppliers, competitors and partners so that you can make insightful investment decisions. Relationship information is sourced from trusted primary sources and reverse-linked to non-disclosing parties, creating a comprehensive and consistent relationship graph. <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetSupplyChain.Client;
using FactSet.SDK.FactSetSupplyChain.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetSupplyChain.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <returns>RelationshipsResponse</returns>
        RelationshipsResponse GetRelationships(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string));

        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <returns>ApiResponse of RelationshipsResponse</returns>
        ApiResponse<RelationshipsResponse> GetRelationshipsWithHttpInfo(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string));
        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <returns>RelationshipsResponse</returns>
        RelationshipsResponse GetRelationshipsForList(RelationshipsRequest relationshipsRequest);

        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <returns>ApiResponse of RelationshipsResponse</returns>
        ApiResponse<RelationshipsResponse> GetRelationshipsForListWithHttpInfo(RelationshipsRequest relationshipsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RelationshipsResponse</returns>
        System.Threading.Tasks.Task<RelationshipsResponse> GetRelationshipsAsync(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RelationshipsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelationshipsResponse>> GetRelationshipsWithHttpInfoAsync(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RelationshipsResponse</returns>
        System.Threading.Tasks.Task<RelationshipsResponse> GetRelationshipsForListAsync(RelationshipsRequest relationshipsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns Supply Chain Relationships Data.
        /// </summary>
        /// <remarks>
        /// Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RelationshipsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelationshipsResponse>> GetRelationshipsForListWithHttpInfoAsync(RelationshipsRequest relationshipsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelationshipsApi : IRelationshipsApiSync, IRelationshipsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RelationshipsApi : IRelationshipsApi
    {
        private FactSet.SDK.FactSetSupplyChain.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetRelationshipsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(RelationshipsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetRelationshipsForListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(RelationshipsResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)415, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationshipsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelationshipsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetSupplyChain.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetSupplyChain.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetSupplyChain.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetSupplyChain.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetSupplyChain.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetSupplyChain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RelationshipsApi(FactSet.SDK.FactSetSupplyChain.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetSupplyChain.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetSupplyChain.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetSupplyChain.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetSupplyChain.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetSupplyChain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RelationshipsApi(FactSet.SDK.FactSetSupplyChain.Client.ISynchronousClient client, FactSet.SDK.FactSetSupplyChain.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetSupplyChain.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetSupplyChain.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetSupplyChain.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetSupplyChain.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetSupplyChain.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetSupplyChain.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <returns>RelationshipsResponse</returns>
        public RelationshipsResponse GetRelationships(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string))
        {
            var localVarResponse = GetRelationshipsWithHttpInfo(ids, relationshipType, companyType, relationshipDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <returns>ApiResponse of RelationshipsResponse</returns>
        public ApiResponse<RelationshipsResponse> GetRelationshipsWithHttpInfo(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetSupplyChain.Client.ApiException(400, "Missing required parameter 'ids' when calling RelationshipsApi->GetRelationships");
            }

            // verify the required parameter 'relationshipType' is set
            if (relationshipType == null)
            {
                throw new FactSet.SDK.FactSetSupplyChain.Client.ApiException(400, "Missing required parameter 'relationshipType' when calling RelationshipsApi->GetRelationships");
            }

            FactSet.SDK.FactSetSupplyChain.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSupplyChain.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("", "relationshipType", relationshipType));
            if (companyType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("", "companyType", companyType));
            }
            if (relationshipDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("", "relationshipDirection", relationshipDirection));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            RelationshipsResponse>("/relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RelationshipsResponse</returns>
        public async System.Threading.Tasks.Task<RelationshipsResponse>GetRelationshipsAsync(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetRelationshipsWithHttpInfoAsync(ids, relationshipType, companyType, relationshipDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 </param>
        /// <param name="relationshipType"> The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** &#x3D; An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \&quot;Customer\&quot; relationships.)   * **COMPETITORS** &#x3D; An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** &#x3D; An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \&quot;Supplier\&quot; relationships.)   * **PARTNERS** &#x3D; An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. </param>
        /// <param name="companyType">Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (optional, default to PUBLIC_COMPANIES_ONLY)</param>
        /// <param name="relationshipDirection">Filters the list of available relationship directions -   * **ALL** &#x3D; Include both direct and reverse relationships.   * **DIRECT** &#x3D; Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** &#x3D; Include only relationships where the target company identified and named the connection to the source company.  (optional, default to ALL)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RelationshipsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<RelationshipsResponse>> GetRelationshipsWithHttpInfoAsync(List<string> ids, string relationshipType, string companyType = default(string), string relationshipDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.FactSetSupplyChain.Client.ApiException(400, "Missing required parameter 'ids' when calling RelationshipsApi->GetRelationships");
            }

            // verify the required parameter 'relationshipType' is set
            if (relationshipType == null)
            {
                throw new FactSet.SDK.FactSetSupplyChain.Client.ApiException(400, "Missing required parameter 'relationshipType' when calling RelationshipsApi->GetRelationships");
            }


            FactSet.SDK.FactSetSupplyChain.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSupplyChain.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("", "relationshipType", relationshipType));
            if (companyType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("", "companyType", companyType));
            }
            if (relationshipDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.ParameterToMultiMap("", "relationshipDirection", relationshipDirection));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetRelationshipsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RelationshipsResponse>("/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationships", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <returns>RelationshipsResponse</returns>
        public RelationshipsResponse GetRelationshipsForList(RelationshipsRequest relationshipsRequest)
        {
            var localVarResponse = GetRelationshipsForListWithHttpInfo(relationshipsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <returns>ApiResponse of RelationshipsResponse</returns>
        public ApiResponse<RelationshipsResponse> GetRelationshipsForListWithHttpInfo(RelationshipsRequest relationshipsRequest)
        {
            // verify the required parameter 'relationshipsRequest' is set
            if (relationshipsRequest == null)
            {
                throw new FactSet.SDK.FactSetSupplyChain.Client.ApiException(400, "Missing required parameter 'relationshipsRequest' when calling RelationshipsApi->GetRelationshipsForList");
            }

            FactSet.SDK.FactSetSupplyChain.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSupplyChain.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = relationshipsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetRelationshipsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            RelationshipsResponse>("/relationships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationshipsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RelationshipsResponse</returns>
        public async System.Threading.Tasks.Task<RelationshipsResponse>GetRelationshipsForListAsync(RelationshipsRequest relationshipsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetRelationshipsForListWithHttpInfoAsync(relationshipsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns Supply Chain Relationships Data. Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSupplyChain.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationshipsRequest">Request body to request a list of Supply Chain financials objects.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RelationshipsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<RelationshipsResponse>> GetRelationshipsForListWithHttpInfoAsync(RelationshipsRequest relationshipsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'relationshipsRequest' is set
            if (relationshipsRequest == null)
            {
                throw new FactSet.SDK.FactSetSupplyChain.Client.ApiException(400, "Missing required parameter 'relationshipsRequest' when calling RelationshipsApi->GetRelationshipsForList");
            }


            FactSet.SDK.FactSetSupplyChain.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSupplyChain.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = relationshipsRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSupplyChain.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetRelationshipsForListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RelationshipsResponse>("/relationships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRelationshipsForList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
