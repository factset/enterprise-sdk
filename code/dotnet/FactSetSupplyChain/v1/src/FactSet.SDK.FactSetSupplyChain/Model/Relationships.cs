/*
 * FactSet Supply Chain API
 *
 * Access the complex networks of key customer, suppliers, competitors and partners so that you can make insightful investment decisions. Relationship information is sourced from trusted primary sources and reverse-linked to non-disclosing parties, creating a comprehensive and consistent relationship graph. <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetSupplyChain.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetSupplyChain.Model
{
    /// <summary>
    /// Relationships
    /// </summary>
    [DataContract(Name = "relationships")]
    public partial class Relationships : IEquatable<Relationships>, IValidatableObject
    {
        /// <summary>
        /// Direction of Relationship indicates which company (target or source) determined the relationship.
        /// </summary>
        /// <value>Direction of Relationship indicates which company (target or source) determined the relationship.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationshipDirectionEnum
        {
            /// <summary>
            /// Enum Mutual for value: Mutual
            /// </summary>
            [EnumMember(Value = "Mutual")]
            Mutual = 1,

            /// <summary>
            /// Enum Direct for value: Direct
            /// </summary>
            [EnumMember(Value = "Direct")]
            Direct = 2,

            /// <summary>
            /// Enum Reverse for value: Reverse
            /// </summary>
            [EnumMember(Value = "Reverse")]
            Reverse = 3

        }


        /// <summary>
        /// Direction of Relationship indicates which company (target or source) determined the relationship.
        /// </summary>
        /// <value>Direction of Relationship indicates which company (target or source) determined the relationship.</value>
        [DataMember(Name = "relationshipDirection", EmitDefaultValue = false)]
        public RelationshipDirectionEnum? RelationshipDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Relationships" /> class.
        /// </summary>
        /// <param name="entityId">Unique FactSet-generated identifier representing an entity for the current entity identifier (-E).</param>
        /// <param name="companyName">Referring to the official name of a business entity..</param>
        /// <param name="overlappingProductCount">Number of Product Overlap is determined by how many sectors matches in named products (determined by Revere Hierarchy) there are in a given relationship between the source and target company..</param>
        /// <param name="overlapPercentage">Product Overlap Percentage is the percent value of the preceding overlapping product count data item..</param>
        /// <param name="relationshipDirection">Direction of Relationship indicates which company (target or source) determined the relationship..</param>
        /// <param name="requestId">Identifier used in &#x60;ids&#x60;..</param>
        public Relationships(string entityId = default(string), string companyName = default(string), string overlappingProductCount = default(string), int overlapPercentage = default(int), RelationshipDirectionEnum? relationshipDirection = default(RelationshipDirectionEnum?), string requestId = default(string))
        {
            this.EntityId = entityId;
            this.CompanyName = companyName;
            this.OverlappingProductCount = overlappingProductCount;
            this.OverlapPercentage = overlapPercentage;
            this.RelationshipDirection = relationshipDirection;
            this.RequestId = requestId;
        }

        /// <summary>
        /// Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)
        /// </summary>
        /// <value>Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)</value>
        [DataMember(Name = "entityId", EmitDefaultValue = true)]
        public string EntityId { get; set; }

        /// <summary>
        /// Referring to the official name of a business entity.
        /// </summary>
        /// <value>Referring to the official name of a business entity.</value>
        [DataMember(Name = "companyName", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Number of Product Overlap is determined by how many sectors matches in named products (determined by Revere Hierarchy) there are in a given relationship between the source and target company.
        /// </summary>
        /// <value>Number of Product Overlap is determined by how many sectors matches in named products (determined by Revere Hierarchy) there are in a given relationship between the source and target company.</value>
        [DataMember(Name = "overlappingProductCount", EmitDefaultValue = false)]
        public string OverlappingProductCount { get; set; }

        /// <summary>
        /// Product Overlap Percentage is the percent value of the preceding overlapping product count data item.
        /// </summary>
        /// <value>Product Overlap Percentage is the percent value of the preceding overlapping product count data item.</value>
        [DataMember(Name = "overlapPercentage", EmitDefaultValue = false)]
        public int OverlapPercentage { get; set; }

        /// <summary>
        /// Identifier used in &#x60;ids&#x60;.
        /// </summary>
        /// <value>Identifier used in &#x60;ids&#x60;.</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Relationships {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  OverlappingProductCount: ").Append(OverlappingProductCount).Append("\n");
            sb.Append("  OverlapPercentage: ").Append(OverlapPercentage).Append("\n");
            sb.Append("  RelationshipDirection: ").Append(RelationshipDirection).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Relationships);
        }

        /// <summary>
        /// Returns true if Relationships instances are equal
        /// </summary>
        /// <param name="input">Instance of Relationships to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Relationships input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.OverlappingProductCount == input.OverlappingProductCount ||
                    (this.OverlappingProductCount != null &&
                    this.OverlappingProductCount.Equals(input.OverlappingProductCount))
                ) && 
                (
                    this.OverlapPercentage == input.OverlapPercentage ||
                    this.OverlapPercentage.Equals(input.OverlapPercentage)
                ) && 
                (
                    this.RelationshipDirection == input.RelationshipDirection ||
                    this.RelationshipDirection.Equals(input.RelationshipDirection)
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.OverlappingProductCount != null)
                {
                    hashCode = (hashCode * 59) + this.OverlappingProductCount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OverlapPercentage.GetHashCode();
                hashCode = (hashCode * 59) + this.RelationshipDirection.GetHashCode();
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
