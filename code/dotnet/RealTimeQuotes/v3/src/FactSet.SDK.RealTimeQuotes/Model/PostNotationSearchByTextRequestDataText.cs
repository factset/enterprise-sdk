/*
 * Quotes API For Digital Portals
 *
 * The Quotes API combines endpoints for retrieving security end-of-day, delayed, and realtime prices with performance key figures and basic reference data on the security and market level.  The API supports over 20 different price types for each quote and comes with basic search endpoints based on security identifiers and instrument names. Market coverage is included in the *Sample Use Cases* section below.  The Digital Portal use case is focused on high-performance applications that are  * serving millions of end-users, * accessible by client browsers via the internet, * supporting subscriptions for streamed updates out-of-the-box, * typically combining a wide variety of *for Digital Portals*-APIs into a highly use-case specific solution for customers, * integrated into complex infrastructures such as existing frontend frameworks, authentication services.  All APIs labelled *for Digital Portals* have been designed for direct use by client web applications and feature extreme low latency: The average response time across all endpoints is 30 ms whereas 99% of all requests are answered in close to under 300ms.  See the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals) for direct access to price histories, and the [News API for Digital Portals](https://developer.factset.com/api-catalog/news-api-digital-portals) for searching and fetching related news. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeQuotes.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeQuotes.Model
{
    /// <summary>
    /// Text-related parameters.
    /// </summary>
    [DataContract(Name = "PostNotationSearchByTextRequest_data_text")]
    public partial class PostNotationSearchByTextRequestDataText : IEquatable<PostNotationSearchByTextRequestDataText>, IValidatableObject
    {
        /// <summary>
        /// Defines Attributes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttributesEnum
        {
            /// <summary>
            /// Enum AllEntitled for value: allEntitled
            /// </summary>
            [EnumMember(Value = "allEntitled")]
            AllEntitled = 1,

            /// <summary>
            /// Enum Isin for value: isin
            /// </summary>
            [EnumMember(Value = "isin")]
            Isin = 2,

            /// <summary>
            /// Enum Wkn for value: wkn
            /// </summary>
            [EnumMember(Value = "wkn")]
            Wkn = 3,

            /// <summary>
            /// Enum Valor for value: valor
            /// </summary>
            [EnumMember(Value = "valor")]
            Valor = 4,

            /// <summary>
            /// Enum Sedol for value: sedol
            /// </summary>
            [EnumMember(Value = "sedol")]
            Sedol = 5,

            /// <summary>
            /// Enum Cusip for value: cusip
            /// </summary>
            [EnumMember(Value = "cusip")]
            Cusip = 6,

            /// <summary>
            /// Enum Symbol for value: symbol
            /// </summary>
            [EnumMember(Value = "symbol")]
            Symbol = 7,

            /// <summary>
            /// Enum NormalizedSymbol for value: normalizedSymbol
            /// </summary>
            [EnumMember(Value = "normalizedSymbol")]
            NormalizedSymbol = 8,

            /// <summary>
            /// Enum LongName for value: longName
            /// </summary>
            [EnumMember(Value = "longName")]
            LongName = 9,

            /// <summary>
            /// Enum ShortName for value: shortName
            /// </summary>
            [EnumMember(Value = "shortName")]
            ShortName = 10

        }



        /// <summary>
        /// List of attributes to be searched in. The value &#x60;allEntitled&#x60; cannot appear with any other value.
        /// </summary>
        /// <value>List of attributes to be searched in. The value &#x60;allEntitled&#x60; cannot appear with any other value.</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public HashSet<AttributesEnum> Attributes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostNotationSearchByTextRequestDataText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostNotationSearchByTextRequestDataText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostNotationSearchByTextRequestDataText" /> class.
        /// </summary>
        /// <param name="attributes">List of attributes to be searched in. The value &#x60;allEntitled&#x60; cannot appear with any other value..</param>
        /// <param name="value">Full-text search string. It may be enclosed in double quotes (\&quot;). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \&quot; daimler\&quot;. If only two characters are submitted, the search is executed as an exact search. (required).</param>
        /// <param name="minimumMatchScore">Minimum match score for the text string. The match score has a value between 0 and 1 (inclusive), where a higher value indicates a better match than a lower one.      Examples for the two most relevant thresholds:       0.25: Exact substring match after case-folding and modifier elimination - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Munch\&quot; but not for \&quot;Muench\&quot;.        0.50: Exact substring match - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Münch\&quot; but not for \&quot;Munch\&quot; or \&quot;münch\&quot;. (default to 0.25M).</param>
        public PostNotationSearchByTextRequestDataText(string value,HashSet<AttributesEnum> attributes = default(HashSet<AttributesEnum>), decimal minimumMatchScore = 0.25M)
        {
            // to ensure "value" is required (not null)
            if (value == null) {
                throw new ArgumentNullException("value is a required property for PostNotationSearchByTextRequestDataText and cannot be null");
            }
            this.Value = value;
            this.Attributes = attributes;
            this.MinimumMatchScore = minimumMatchScore;
        }

        /// <summary>
        /// Full-text search string. It may be enclosed in double quotes (\&quot;). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \&quot; daimler\&quot;. If only two characters are submitted, the search is executed as an exact search.
        /// </summary>
        /// <value>Full-text search string. It may be enclosed in double quotes (\&quot;). No escaping is provided, therefore it is impossible to specify a search string containing double quotes. Relevance of word starts is indicated by a phrase starting with a space character, such as \&quot; daimler\&quot;. If only two characters are submitted, the search is executed as an exact search.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Minimum match score for the text string. The match score has a value between 0 and 1 (inclusive), where a higher value indicates a better match than a lower one.      Examples for the two most relevant thresholds:       0.25: Exact substring match after case-folding and modifier elimination - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Munch\&quot; but not for \&quot;Muench\&quot;.        0.50: Exact substring match - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Münch\&quot; but not for \&quot;Munch\&quot; or \&quot;münch\&quot;.
        /// </summary>
        /// <value>Minimum match score for the text string. The match score has a value between 0 and 1 (inclusive), where a higher value indicates a better match than a lower one.      Examples for the two most relevant thresholds:       0.25: Exact substring match after case-folding and modifier elimination - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Munch\&quot; but not for \&quot;Muench\&quot;.        0.50: Exact substring match - \&quot;Münchner Rück\&quot; is a match for the search string \&quot;Münch\&quot; but not for \&quot;Munch\&quot; or \&quot;münch\&quot;.</value>
        [DataMember(Name = "minimumMatchScore", EmitDefaultValue = false)]
        public decimal MinimumMatchScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostNotationSearchByTextRequestDataText {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  MinimumMatchScore: ").Append(MinimumMatchScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostNotationSearchByTextRequestDataText);
        }

        /// <summary>
        /// Returns true if PostNotationSearchByTextRequestDataText instances are equal
        /// </summary>
        /// <param name="input">Instance of PostNotationSearchByTextRequestDataText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostNotationSearchByTextRequestDataText input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.MinimumMatchScore == input.MinimumMatchScore ||
                    this.MinimumMatchScore.Equals(input.MinimumMatchScore)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinimumMatchScore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if (this.Value != null && this.Value.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 50.", new [] { "Value" });
            }

            // Value (string) minLength
            if (this.Value != null && this.Value.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 2.", new [] { "Value" });
            }

            // Value (string) pattern
            Regex regexValue = new Regex(@"^[ -+- -\/0-:=?@\\p{L}]*$", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }

            // MinimumMatchScore (decimal) maximum
            if (this.MinimumMatchScore > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumMatchScore, must be a value less than or equal to 1.", new [] { "MinimumMatchScore" });
            }

            // MinimumMatchScore (decimal) minimum
            if (this.MinimumMatchScore < (decimal)0.1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinimumMatchScore, must be a value greater than or equal to 0.1.", new [] { "MinimumMatchScore" });
            }

            yield break;
        }
    }

}
