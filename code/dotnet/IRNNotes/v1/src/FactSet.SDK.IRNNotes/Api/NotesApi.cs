/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNNotes.Client;
using FactSet.SDK.IRNNotes.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNNotes.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a note
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <returns>NewItemDto</returns>
        NewItemDto CreateNote(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string));

        /// <summary>
        /// Create a note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        ApiResponse<NewItemDto> CreateNoteWithHttpInfo(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string));
        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>void</returns>
        void DeleteNote(Guid noteId);

        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNoteWithHttpInfo(Guid noteId);
        /// <summary>
        /// Get details of a note
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>NoteDto</returns>
        NoteDto GetNote(Guid noteId);

        /// <summary>
        /// Get details of a note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>ApiResponse of NoteDto</returns>
        ApiResponse<NoteDto> GetNoteWithHttpInfo(Guid noteId);
        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <returns>List<NoteSummaryDto></returns>
        List<NoteSummaryDto> GetNotes(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?));

        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <returns>ApiResponse of List<NoteSummaryDto></returns>
        ApiResponse<List<NoteSummaryDto>> GetNotesWithHttpInfo(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?));
        /// <summary>
        /// Updates a note by replacing existing note with new data
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <returns>void</returns>
        void UpdateNote(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto));

        /// <summary>
        /// Updates a note by replacing existing note with new data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateNoteWithHttpInfo(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        System.Threading.Tasks.Task<NewItemDto> CreateNoteAsync(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateNoteWithHttpInfoAsync(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNoteAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNoteWithHttpInfoAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get details of a note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoteDto</returns>
        System.Threading.Tasks.Task<NoteDto> GetNoteAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get details of a note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoteDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NoteDto>> GetNoteWithHttpInfoAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NoteSummaryDto&gt;</returns>
        System.Threading.Tasks.Task<List<NoteSummaryDto>> GetNotesAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<NoteSummaryDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NoteSummaryDto>>> GetNotesWithHttpInfoAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a note by replacing existing note with new data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateNoteAsync(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a note by replacing existing note with new data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNoteWithHttpInfoAsync(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesApi : INotesApiSync, INotesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotesApi : INotesApi
    {
        private FactSet.SDK.IRNNotes.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateNoteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(NewItemDto) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteNoteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNoteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(NoteDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNotesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<NoteSummaryDto>) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UpdateNoteResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNNotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNNotes.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNNotes.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNNotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNNotes.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNNotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotesApi(FactSet.SDK.IRNNotes.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNNotes.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNNotes.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNNotes.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNNotes.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNNotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotesApi(FactSet.SDK.IRNNotes.Client.ISynchronousClient client, FactSet.SDK.IRNNotes.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNNotes.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNNotes.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNNotes.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNNotes.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNNotes.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNNotes.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <returns>NewItemDto</returns>
        public NewItemDto CreateNote(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string))
        {
            var localVarResponse = CreateNoteWithHttpInfo(createNoteDto, xIRNContributorUsername, xIRNContributorSerial);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        public ApiResponse<NewItemDto> CreateNoteWithHttpInfo(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string))
        {
            // verify the required parameter 'createNoteDto' is set
            if (createNoteDto == null)
            {
                throw new FactSet.SDK.IRNNotes.Client.ApiException(400, "Missing required parameter 'createNoteDto' when calling NotesApi->CreateNote");
            }

            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNContributorUsername != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Contributor-Username", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(xIRNContributorUsername)); // header parameter
            }
            if (xIRNContributorSerial != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Contributor-Serial", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(xIRNContributorSerial)); // header parameter
            }
            localVarRequestOptions.Data = createNoteDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NewItemDto>("/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        public async System.Threading.Tasks.Task<NewItemDto>CreateNoteAsync(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateNoteWithHttpInfoAsync(createNoteDto, xIRNContributorUsername, xIRNContributorSerial, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNoteDto"></param>
        /// <param name="xIRNContributorUsername"> (optional)</param>
        /// <param name="xIRNContributorSerial"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateNoteWithHttpInfoAsync(CreateNoteDto createNoteDto, string xIRNContributorUsername = default(string), string xIRNContributorSerial = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNoteDto' is set
            if (createNoteDto == null)
            {
                throw new FactSet.SDK.IRNNotes.Client.ApiException(400, "Missing required parameter 'createNoteDto' when calling NotesApi->CreateNote");
            }


            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNContributorUsername != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Contributor-Username", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(xIRNContributorUsername)); // header parameter
            }
            if (xIRNContributorSerial != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Contributor-Serial", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(xIRNContributorSerial)); // header parameter
            }
            localVarRequestOptions.Data = createNoteDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewItemDto>("/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>void</returns>
        public void DeleteNote(Guid noteId)
        {
            DeleteNoteWithHttpInfo(noteId);
        }

        /// <summary>
        /// Delete a Note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNoteWithHttpInfo(Guid noteId)
        {
            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/notes/{noteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a Note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNoteAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteNoteWithHttpInfoAsync(noteId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNoteWithHttpInfoAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/notes/{noteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get details of a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>NoteDto</returns>
        public NoteDto GetNote(Guid noteId)
        {
            var localVarResponse = GetNoteWithHttpInfo(noteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <returns>ApiResponse of NoteDto</returns>
        public ApiResponse<NoteDto> GetNoteWithHttpInfo(Guid noteId)
        {
            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            NoteDto>("/notes/{noteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get details of a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NoteDto</returns>
        public async System.Threading.Tasks.Task<NoteDto>GetNoteAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNoteWithHttpInfoAsync(noteId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a note 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NoteDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NoteDto>> GetNoteWithHttpInfoAsync(Guid noteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NoteDto>("/notes/{noteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <returns>List<NoteSummaryDto></returns>
        public List<NoteSummaryDto> GetNotes(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?))
        {
            var localVarResponse = GetNotesWithHttpInfo(start, end, identifiers, authors, subjects, recommendations, sentiments, limit, offset, modifiedSince, states, filterOnRelatedSymbols, includeRelatedEntities, xIRNIncludeDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;NoteSummaryDto&gt;</returns>
        public ApiResponse<List<NoteSummaryDto>> GetNotesWithHttpInfo(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?))
        {
            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (identifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "identifiers", identifiers));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "authors", authors));
            }
            if (subjects != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "subjects", subjects));
            }
            if (recommendations != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "recommendations", recommendations));
            }
            if (sentiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "sentiments", sentiments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (modifiedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "modifiedSince", modifiedSince));
            }
            if (states != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "states", states));
            }
            if (filterOnRelatedSymbols != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "filterOnRelatedSymbols", filterOnRelatedSymbols));
            }
            if (includeRelatedEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "includeRelatedEntities", includeRelatedEntities));
            }
            if (xIRNIncludeDeleted != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Include-Deleted", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(xIRNIncludeDeleted)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<NoteSummaryDto>>("/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NoteSummaryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<NoteSummaryDto>>GetNotesAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNotesWithHttpInfoAsync(start, end, identifiers, authors, subjects, recommendations, sentiments, limit, offset, modifiedSince, states, filterOnRelatedSymbols, includeRelatedEntities, xIRNIncludeDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the notes in the specified date range filtered on the given identifiers 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">StartDate (optional)</param>
        /// <param name="end">EndDate (optional)</param>
        /// <param name="identifiers">Set of identifiers to filter on (optional)</param>
        /// <param name="authors">Set of authors to filter on (optional)</param>
        /// <param name="subjects">Set of subjects to filter on (optional)</param>
        /// <param name="recommendations">Set of recommendations to filter on (optional)</param>
        /// <param name="sentiments">Set of sentiments to filter on (optional)</param>
        /// <param name="limit">Limit on the number of notes retrieved (optional)</param>
        /// <param name="offset">Fetch notes after the offset (optional)</param>
        /// <param name="modifiedSince">Only return notes which have been modified or created since a particular time (optional)</param>
        /// <param name="states">Set of states to filter on (optional)</param>
        /// <param name="filterOnRelatedSymbols">Include notes whose related symbols match the identifier filter (optional, default to false)</param>
        /// <param name="includeRelatedEntities">When set to true fetches notes tagged with all the entities related to identifiers param (optional, default to false)</param>
        /// <param name="xIRNIncludeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NoteSummaryDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<NoteSummaryDto>>> GetNotesWithHttpInfoAsync(string start = default(string), string end = default(string), List<string> identifiers = default(List<string>), List<Guid> authors = default(List<Guid>), List<Guid> subjects = default(List<Guid>), List<Guid> recommendations = default(List<Guid>), List<Guid> sentiments = default(List<Guid>), int? limit = default(int?), int? offset = default(int?), string modifiedSince = default(string), List<string> states = default(List<string>), bool? filterOnRelatedSymbols = default(bool?), bool? includeRelatedEntities = default(bool?), bool? xIRNIncludeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (identifiers != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "identifiers", identifiers));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "authors", authors));
            }
            if (subjects != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "subjects", subjects));
            }
            if (recommendations != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "recommendations", recommendations));
            }
            if (sentiments != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "sentiments", sentiments));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (modifiedSince != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "modifiedSince", modifiedSince));
            }
            if (states != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("multi", "states", states));
            }
            if (filterOnRelatedSymbols != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "filterOnRelatedSymbols", filterOnRelatedSymbols));
            }
            if (includeRelatedEntities != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToMultiMap("", "includeRelatedEntities", includeRelatedEntities));
            }
            if (xIRNIncludeDeleted != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Include-Deleted", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(xIRNIncludeDeleted)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNotesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<NoteSummaryDto>>("/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a note by replacing existing note with new data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <returns>void</returns>
        public void UpdateNote(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto))
        {
            UpdateNoteWithHttpInfo(noteId, updateNoteDto);
        }

        /// <summary>
        /// Updates a note by replacing existing note with new data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateNoteWithHttpInfo(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto))
        {
            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.Data = updateNoteDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UpdateNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            Object>("/notes/{noteId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Updates a note by replacing existing note with new data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateNoteAsync(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateNoteWithHttpInfoAsync(noteId, updateNoteDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a note by replacing existing note with new data 
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNNotes.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">Note Id</param>
        /// <param name="updateNoteDto">The new data for the note (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNoteWithHttpInfoAsync(Guid noteId, UpdateNoteDto updateNoteDto = default(UpdateNoteDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNNotes.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNNotes.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNNotes.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("noteId", FactSet.SDK.IRNNotes.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.Data = updateNoteDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNNotes.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UpdateNoteResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/notes/{noteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
