/*
 * FactSet Overview Report Builder API
 *
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// ProfileDataItemMetaAnyOf
    /// </summary>
    [DataContract(Name = "ProfileDataItemMeta_anyOf")]
    public partial class ProfileDataItemMetaAnyOf : IEquatable<ProfileDataItemMetaAnyOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileDataItemMetaAnyOf" /> class.
        /// </summary>
        /// <param name="currencyCode">Code for data currency.</param>
        /// <param name="currencySymbol">Symbol for data currency.</param>
        /// <param name="scale">Integer power of 10 to which numbers have been scaled. For example: 6 implies millions. Default is 0. .</param>
        public ProfileDataItemMetaAnyOf(string currencyCode = default(string), string currencySymbol = default(string), int scale = default(int))
        {
            this.CurrencyCode = currencyCode;
            this.CurrencySymbol = currencySymbol;
            this.Scale = scale;
        }

        /// <summary>
        /// Code for data currency
        /// </summary>
        /// <value>Code for data currency</value>
        [DataMember(Name = "currencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Symbol for data currency
        /// </summary>
        /// <value>Symbol for data currency</value>
        [DataMember(Name = "currencySymbol", EmitDefaultValue = false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Integer power of 10 to which numbers have been scaled. For example: 6 implies millions. Default is 0. 
        /// </summary>
        /// <value>Integer power of 10 to which numbers have been scaled. For example: 6 implies millions. Default is 0. </value>
        [DataMember(Name = "scale", EmitDefaultValue = false)]
        public int Scale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileDataItemMetaAnyOf {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileDataItemMetaAnyOf);
        }

        /// <summary>
        /// Returns true if ProfileDataItemMetaAnyOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileDataItemMetaAnyOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileDataItemMetaAnyOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.Scale == input.Scale ||
                    this.Scale.Equals(input.Scale)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.CurrencySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencySymbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Scale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
