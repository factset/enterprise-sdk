/*
 * FactSet Overview Report Builder API
 *
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// Key Statistics for the provided fund
    /// </summary>
    [DataContract(Name = "KeyStatsDataObjectFund")]
    public partial class KeyStatsDataObjectFund : IEquatable<KeyStatsDataObjectFund>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyStatsDataObjectFund" /> class.
        /// </summary>
        /// <param name="aumFundMonth">aumFundMonth.</param>
        /// <param name="aumShareDaily">aumShareDaily.</param>
        /// <param name="availableForSale">availableForSale.</param>
        /// <param name="averageSpread">averageSpread.</param>
        /// <param name="currencyIso">currencyIso.</param>
        /// <param name="dailyTradingVol">dailyTradingVol.</param>
        /// <param name="distributionYield">distributionYield.</param>
        /// <param name="esgCompliance">esgCompliance.</param>
        /// <param name="esgObjective">esgObjective.</param>
        /// <param name="expenseRatio">expenseRatio.</param>
        /// <param name="firstNavRecord">firstNavRecord.</param>
        /// <param name="fundFlowYTD">fundFlowYTD.</param>
        /// <param name="inceptionDateFund">inceptionDateFund.</param>
        /// <param name="inceptionDateShare">inceptionDateShare.</param>
        /// <param name="meta">meta.</param>
        /// <param name="outstandingShare">outstandingShare.</param>
        /// <param name="sfdrClassification">sfdrClassification.</param>
        public KeyStatsDataObjectFund(KeyStatsDataObjectFundAumFundMonth aumFundMonth = default(KeyStatsDataObjectFundAumFundMonth), KeyStatsDataObjectFundAumShareDaily aumShareDaily = default(KeyStatsDataObjectFundAumShareDaily), KeyStatsDataObjectFundAvailableForSale availableForSale = default(KeyStatsDataObjectFundAvailableForSale), KeyStatsDataObjectFundAverageSpread averageSpread = default(KeyStatsDataObjectFundAverageSpread), KeyStatsDataObjectFundCurrencyIso currencyIso = default(KeyStatsDataObjectFundCurrencyIso), KeyStatsDataObjectFundDailyTradingVol dailyTradingVol = default(KeyStatsDataObjectFundDailyTradingVol), KeyStatsDataObjectFundDistributionYield distributionYield = default(KeyStatsDataObjectFundDistributionYield), KeyStatsDataObjectFundEsgCompliance esgCompliance = default(KeyStatsDataObjectFundEsgCompliance), KeyStatsDataObjectFundEsgObjective esgObjective = default(KeyStatsDataObjectFundEsgObjective), KeyStatsDataObjectFundExpenseRatio expenseRatio = default(KeyStatsDataObjectFundExpenseRatio), KeyStatsDataObjectFundFirstNavRecord firstNavRecord = default(KeyStatsDataObjectFundFirstNavRecord), KeyStatsDataObjectFundFundFlowYTD fundFlowYTD = default(KeyStatsDataObjectFundFundFlowYTD), KeyStatsDataObjectFundInceptionDateFund inceptionDateFund = default(KeyStatsDataObjectFundInceptionDateFund), KeyStatsDataObjectFundInceptionDateShare inceptionDateShare = default(KeyStatsDataObjectFundInceptionDateShare), KeyStatsDataObjectFundMeta meta = default(KeyStatsDataObjectFundMeta), KeyStatsDataObjectFundOutstandingShare outstandingShare = default(KeyStatsDataObjectFundOutstandingShare), KeyStatsDataObjectFundSfdrClassification sfdrClassification = default(KeyStatsDataObjectFundSfdrClassification))
        {
            this.AumFundMonth = aumFundMonth;
            this.AumShareDaily = aumShareDaily;
            this.AvailableForSale = availableForSale;
            this.AverageSpread = averageSpread;
            this.CurrencyIso = currencyIso;
            this.DailyTradingVol = dailyTradingVol;
            this.DistributionYield = distributionYield;
            this.EsgCompliance = esgCompliance;
            this.EsgObjective = esgObjective;
            this.ExpenseRatio = expenseRatio;
            this.FirstNavRecord = firstNavRecord;
            this.FundFlowYTD = fundFlowYTD;
            this.InceptionDateFund = inceptionDateFund;
            this.InceptionDateShare = inceptionDateShare;
            this.Meta = meta;
            this.OutstandingShare = outstandingShare;
            this.SfdrClassification = sfdrClassification;
        }

        /// <summary>
        /// Gets or Sets AumFundMonth
        /// </summary>
        [DataMember(Name = "aumFundMonth", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundAumFundMonth AumFundMonth { get; set; }

        /// <summary>
        /// Gets or Sets AumShareDaily
        /// </summary>
        [DataMember(Name = "aumShareDaily", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundAumShareDaily AumShareDaily { get; set; }

        /// <summary>
        /// Gets or Sets AvailableForSale
        /// </summary>
        [DataMember(Name = "availableForSale", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundAvailableForSale AvailableForSale { get; set; }

        /// <summary>
        /// Gets or Sets AverageSpread
        /// </summary>
        [DataMember(Name = "averageSpread", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundAverageSpread AverageSpread { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyIso
        /// </summary>
        [DataMember(Name = "currencyIso", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundCurrencyIso CurrencyIso { get; set; }

        /// <summary>
        /// Gets or Sets DailyTradingVol
        /// </summary>
        [DataMember(Name = "dailyTradingVol", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundDailyTradingVol DailyTradingVol { get; set; }

        /// <summary>
        /// Gets or Sets DistributionYield
        /// </summary>
        [DataMember(Name = "distributionYield", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundDistributionYield DistributionYield { get; set; }

        /// <summary>
        /// Gets or Sets EsgCompliance
        /// </summary>
        [DataMember(Name = "esgCompliance", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundEsgCompliance EsgCompliance { get; set; }

        /// <summary>
        /// Gets or Sets EsgObjective
        /// </summary>
        [DataMember(Name = "esgObjective", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundEsgObjective EsgObjective { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseRatio
        /// </summary>
        [DataMember(Name = "expenseRatio", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundExpenseRatio ExpenseRatio { get; set; }

        /// <summary>
        /// Gets or Sets FirstNavRecord
        /// </summary>
        [DataMember(Name = "firstNavRecord", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundFirstNavRecord FirstNavRecord { get; set; }

        /// <summary>
        /// Gets or Sets FundFlowYTD
        /// </summary>
        [DataMember(Name = "fundFlowYTD", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundFundFlowYTD FundFlowYTD { get; set; }

        /// <summary>
        /// Gets or Sets InceptionDateFund
        /// </summary>
        [DataMember(Name = "inceptionDateFund", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundInceptionDateFund InceptionDateFund { get; set; }

        /// <summary>
        /// Gets or Sets InceptionDateShare
        /// </summary>
        [DataMember(Name = "inceptionDateShare", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundInceptionDateShare InceptionDateShare { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets OutstandingShare
        /// </summary>
        [DataMember(Name = "outstandingShare", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundOutstandingShare OutstandingShare { get; set; }

        /// <summary>
        /// Gets or Sets SfdrClassification
        /// </summary>
        [DataMember(Name = "sfdrClassification", EmitDefaultValue = false)]
        public KeyStatsDataObjectFundSfdrClassification SfdrClassification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KeyStatsDataObjectFund {\n");
            sb.Append("  AumFundMonth: ").Append(AumFundMonth).Append("\n");
            sb.Append("  AumShareDaily: ").Append(AumShareDaily).Append("\n");
            sb.Append("  AvailableForSale: ").Append(AvailableForSale).Append("\n");
            sb.Append("  AverageSpread: ").Append(AverageSpread).Append("\n");
            sb.Append("  CurrencyIso: ").Append(CurrencyIso).Append("\n");
            sb.Append("  DailyTradingVol: ").Append(DailyTradingVol).Append("\n");
            sb.Append("  DistributionYield: ").Append(DistributionYield).Append("\n");
            sb.Append("  EsgCompliance: ").Append(EsgCompliance).Append("\n");
            sb.Append("  EsgObjective: ").Append(EsgObjective).Append("\n");
            sb.Append("  ExpenseRatio: ").Append(ExpenseRatio).Append("\n");
            sb.Append("  FirstNavRecord: ").Append(FirstNavRecord).Append("\n");
            sb.Append("  FundFlowYTD: ").Append(FundFlowYTD).Append("\n");
            sb.Append("  InceptionDateFund: ").Append(InceptionDateFund).Append("\n");
            sb.Append("  InceptionDateShare: ").Append(InceptionDateShare).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  OutstandingShare: ").Append(OutstandingShare).Append("\n");
            sb.Append("  SfdrClassification: ").Append(SfdrClassification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeyStatsDataObjectFund);
        }

        /// <summary>
        /// Returns true if KeyStatsDataObjectFund instances are equal
        /// </summary>
        /// <param name="input">Instance of KeyStatsDataObjectFund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyStatsDataObjectFund input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AumFundMonth == input.AumFundMonth ||
                    (this.AumFundMonth != null &&
                    this.AumFundMonth.Equals(input.AumFundMonth))
                ) && 
                (
                    this.AumShareDaily == input.AumShareDaily ||
                    (this.AumShareDaily != null &&
                    this.AumShareDaily.Equals(input.AumShareDaily))
                ) && 
                (
                    this.AvailableForSale == input.AvailableForSale ||
                    (this.AvailableForSale != null &&
                    this.AvailableForSale.Equals(input.AvailableForSale))
                ) && 
                (
                    this.AverageSpread == input.AverageSpread ||
                    (this.AverageSpread != null &&
                    this.AverageSpread.Equals(input.AverageSpread))
                ) && 
                (
                    this.CurrencyIso == input.CurrencyIso ||
                    (this.CurrencyIso != null &&
                    this.CurrencyIso.Equals(input.CurrencyIso))
                ) && 
                (
                    this.DailyTradingVol == input.DailyTradingVol ||
                    (this.DailyTradingVol != null &&
                    this.DailyTradingVol.Equals(input.DailyTradingVol))
                ) && 
                (
                    this.DistributionYield == input.DistributionYield ||
                    (this.DistributionYield != null &&
                    this.DistributionYield.Equals(input.DistributionYield))
                ) && 
                (
                    this.EsgCompliance == input.EsgCompliance ||
                    (this.EsgCompliance != null &&
                    this.EsgCompliance.Equals(input.EsgCompliance))
                ) && 
                (
                    this.EsgObjective == input.EsgObjective ||
                    (this.EsgObjective != null &&
                    this.EsgObjective.Equals(input.EsgObjective))
                ) && 
                (
                    this.ExpenseRatio == input.ExpenseRatio ||
                    (this.ExpenseRatio != null &&
                    this.ExpenseRatio.Equals(input.ExpenseRatio))
                ) && 
                (
                    this.FirstNavRecord == input.FirstNavRecord ||
                    (this.FirstNavRecord != null &&
                    this.FirstNavRecord.Equals(input.FirstNavRecord))
                ) && 
                (
                    this.FundFlowYTD == input.FundFlowYTD ||
                    (this.FundFlowYTD != null &&
                    this.FundFlowYTD.Equals(input.FundFlowYTD))
                ) && 
                (
                    this.InceptionDateFund == input.InceptionDateFund ||
                    (this.InceptionDateFund != null &&
                    this.InceptionDateFund.Equals(input.InceptionDateFund))
                ) && 
                (
                    this.InceptionDateShare == input.InceptionDateShare ||
                    (this.InceptionDateShare != null &&
                    this.InceptionDateShare.Equals(input.InceptionDateShare))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.OutstandingShare == input.OutstandingShare ||
                    (this.OutstandingShare != null &&
                    this.OutstandingShare.Equals(input.OutstandingShare))
                ) && 
                (
                    this.SfdrClassification == input.SfdrClassification ||
                    (this.SfdrClassification != null &&
                    this.SfdrClassification.Equals(input.SfdrClassification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AumFundMonth != null)
                {
                    hashCode = (hashCode * 59) + this.AumFundMonth.GetHashCode();
                }
                if (this.AumShareDaily != null)
                {
                    hashCode = (hashCode * 59) + this.AumShareDaily.GetHashCode();
                }
                if (this.AvailableForSale != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableForSale.GetHashCode();
                }
                if (this.AverageSpread != null)
                {
                    hashCode = (hashCode * 59) + this.AverageSpread.GetHashCode();
                }
                if (this.CurrencyIso != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyIso.GetHashCode();
                }
                if (this.DailyTradingVol != null)
                {
                    hashCode = (hashCode * 59) + this.DailyTradingVol.GetHashCode();
                }
                if (this.DistributionYield != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionYield.GetHashCode();
                }
                if (this.EsgCompliance != null)
                {
                    hashCode = (hashCode * 59) + this.EsgCompliance.GetHashCode();
                }
                if (this.EsgObjective != null)
                {
                    hashCode = (hashCode * 59) + this.EsgObjective.GetHashCode();
                }
                if (this.ExpenseRatio != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseRatio.GetHashCode();
                }
                if (this.FirstNavRecord != null)
                {
                    hashCode = (hashCode * 59) + this.FirstNavRecord.GetHashCode();
                }
                if (this.FundFlowYTD != null)
                {
                    hashCode = (hashCode * 59) + this.FundFlowYTD.GetHashCode();
                }
                if (this.InceptionDateFund != null)
                {
                    hashCode = (hashCode * 59) + this.InceptionDateFund.GetHashCode();
                }
                if (this.InceptionDateShare != null)
                {
                    hashCode = (hashCode * 59) + this.InceptionDateShare.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.OutstandingShare != null)
                {
                    hashCode = (hashCode * 59) + this.OutstandingShare.GetHashCode();
                }
                if (this.SfdrClassification != null)
                {
                    hashCode = (hashCode * 59) + this.SfdrClassification.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
