/*
 * FactSet Overview Report Builder API
 *
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// ProfileDataObjectBusiness
    /// </summary>
    [DataContract(Name = "ProfileDataObject_business")]
    public partial class ProfileDataObjectBusiness : IEquatable<ProfileDataObjectBusiness>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileDataObjectBusiness" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfileDataObjectBusiness() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileDataObjectBusiness" /> class.
        /// </summary>
        /// <param name="crunchbaseCategories">crunchbaseCategories.</param>
        /// <param name="crunchbaseUrl">crunchbaseUrl.</param>
        /// <param name="dbaName">dbaName.</param>
        /// <param name="description">description (required).</param>
        /// <param name="industry">industry (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="sector">sector (required).</param>
        public ProfileDataObjectBusiness(ProfileDataObjectBusinessDescription description, KeyStatsAttributeMetaPeriodicity industry, KeyStatsAttributeMetaPeriodicity name, KeyStatsAttributeMetaPeriodicity sector,ProfileDataObjectBusinessCrunchbaseCategories crunchbaseCategories = default(ProfileDataObjectBusinessCrunchbaseCategories), ProfileDataObjectBusinessCrunchbaseUrl crunchbaseUrl = default(ProfileDataObjectBusinessCrunchbaseUrl), KeyStatsAttributeMetaPeriodicity dbaName = default(KeyStatsAttributeMetaPeriodicity))
        {
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for ProfileDataObjectBusiness and cannot be null");
            }
            this.Description = description;
            // to ensure "industry" is required (not null)
            if (industry == null) {
                throw new ArgumentNullException("industry is a required property for ProfileDataObjectBusiness and cannot be null");
            }
            this.Industry = industry;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ProfileDataObjectBusiness and cannot be null");
            }
            this.Name = name;
            // to ensure "sector" is required (not null)
            if (sector == null) {
                throw new ArgumentNullException("sector is a required property for ProfileDataObjectBusiness and cannot be null");
            }
            this.Sector = sector;
            this.CrunchbaseCategories = crunchbaseCategories;
            this.CrunchbaseUrl = crunchbaseUrl;
            this.DbaName = dbaName;
        }

        /// <summary>
        /// Gets or Sets CrunchbaseCategories
        /// </summary>
        [DataMember(Name = "crunchbaseCategories", EmitDefaultValue = false)]
        public ProfileDataObjectBusinessCrunchbaseCategories CrunchbaseCategories { get; set; }

        /// <summary>
        /// Gets or Sets CrunchbaseUrl
        /// </summary>
        [DataMember(Name = "crunchbaseUrl", EmitDefaultValue = false)]
        public ProfileDataObjectBusinessCrunchbaseUrl CrunchbaseUrl { get; set; }

        /// <summary>
        /// Gets or Sets DbaName
        /// </summary>
        [DataMember(Name = "dbaName", EmitDefaultValue = false)]
        public KeyStatsAttributeMetaPeriodicity DbaName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public ProfileDataObjectBusinessDescription Description { get; set; }

        /// <summary>
        /// Gets or Sets Industry
        /// </summary>
        [DataMember(Name = "industry", IsRequired = true, EmitDefaultValue = false)]
        public KeyStatsAttributeMetaPeriodicity Industry { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public KeyStatsAttributeMetaPeriodicity Name { get; set; }

        /// <summary>
        /// Gets or Sets Sector
        /// </summary>
        [DataMember(Name = "sector", IsRequired = true, EmitDefaultValue = false)]
        public KeyStatsAttributeMetaPeriodicity Sector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileDataObjectBusiness {\n");
            sb.Append("  CrunchbaseCategories: ").Append(CrunchbaseCategories).Append("\n");
            sb.Append("  CrunchbaseUrl: ").Append(CrunchbaseUrl).Append("\n");
            sb.Append("  DbaName: ").Append(DbaName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileDataObjectBusiness);
        }

        /// <summary>
        /// Returns true if ProfileDataObjectBusiness instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileDataObjectBusiness to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileDataObjectBusiness input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CrunchbaseCategories == input.CrunchbaseCategories ||
                    (this.CrunchbaseCategories != null &&
                    this.CrunchbaseCategories.Equals(input.CrunchbaseCategories))
                ) && 
                (
                    this.CrunchbaseUrl == input.CrunchbaseUrl ||
                    (this.CrunchbaseUrl != null &&
                    this.CrunchbaseUrl.Equals(input.CrunchbaseUrl))
                ) && 
                (
                    this.DbaName == input.DbaName ||
                    (this.DbaName != null &&
                    this.DbaName.Equals(input.DbaName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CrunchbaseCategories != null)
                {
                    hashCode = (hashCode * 59) + this.CrunchbaseCategories.GetHashCode();
                }
                if (this.CrunchbaseUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CrunchbaseUrl.GetHashCode();
                }
                if (this.DbaName != null)
                {
                    hashCode = (hashCode * 59) + this.DbaName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Industry != null)
                {
                    hashCode = (hashCode * 59) + this.Industry.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Sector != null)
                {
                    hashCode = (hashCode * 59) + this.Sector.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
