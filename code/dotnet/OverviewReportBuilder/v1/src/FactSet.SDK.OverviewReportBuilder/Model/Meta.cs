/*
 * FactSet Overview Report Builder API
 *
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OverviewReportBuilder.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OverviewReportBuilder.Model
{
    /// <summary>
    /// Meta
    /// </summary>
    [DataContract(Name = "Meta")]
    public partial class Meta : IEquatable<Meta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        /// <param name="fsymId">fsymId.</param>
        /// <param name="message">message.</param>
        /// <param name="noCoverage">noCoverage.</param>
        /// <param name="noData">noData.</param>
        /// <param name="requestId">requestId.</param>
        public Meta(string fsymId = default(string), string message = default(string), bool? noCoverage = default(bool?), bool? noData = default(bool?), string requestId = default(string))
        {
            this.FsymId = fsymId;
            this.Message = message;
            this.NoCoverage = noCoverage;
            this.NoData = noData;
            this.RequestId = requestId;
            this.AdditionalProperties = new Dictionary<string, string>();
        }

        /// <summary>
        /// Gets or Sets FsymId
        /// </summary>
        [DataMember(Name = "fsymId", EmitDefaultValue = true)]
        public string FsymId { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets NoCoverage
        /// </summary>
        [DataMember(Name = "noCoverage", EmitDefaultValue = true)]
        public bool? NoCoverage { get; set; }

        /// <summary>
        /// Gets or Sets NoData
        /// </summary>
        [DataMember(Name = "noData", EmitDefaultValue = true)]
        public bool? NoData { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name = "requestId", EmitDefaultValue = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        public IDictionary<string, string> AdditionalProperties { get; set; }

        [JsonExtensionData]
        private JObject _rawAdditionalData;

        [OnSerializing]
        private void OnSerializing(StreamingContext context)
        {
            _rawAdditionalData = JObject.FromObject(AdditionalProperties);
        }

        [OnDeserialized]
        private void OnDeserialized(StreamingContext context)
        {
            if (_rawAdditionalData != null) {
                new JsonSerializer().Populate(_rawAdditionalData.CreateReader(), AdditionalProperties);
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Meta {\n");
            sb.Append("  FsymId: ").Append(FsymId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NoCoverage: ").Append(NoCoverage).Append("\n");
            sb.Append("  NoData: ").Append(NoData).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Meta);
        }

        /// <summary>
        /// Returns true if Meta instances are equal
        /// </summary>
        /// <param name="input">Instance of Meta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Meta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FsymId == input.FsymId ||
                    (this.FsymId != null &&
                    this.FsymId.Equals(input.FsymId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.NoCoverage == input.NoCoverage ||
                    (this.NoCoverage != null &&
                    this.NoCoverage.Equals(input.NoCoverage))
                ) && 
                (
                    this.NoData == input.NoData ||
                    (this.NoData != null &&
                    this.NoData.Equals(input.NoData))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FsymId != null)
                {
                    hashCode = (hashCode * 59) + this.FsymId.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.NoCoverage != null)
                {
                    hashCode = (hashCode * 59) + this.NoCoverage.GetHashCode();
                }
                if (this.NoData != null)
                {
                    hashCode = (hashCode * 59) + this.NoData.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
