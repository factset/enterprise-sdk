/*
 * Signals API
 *
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.Signals.Client;
using FactSet.SDK.Signals.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.Signals.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>EventAdaptiveCard</returns>
        EventAdaptiveCard GetEventAdaptiveCardById(Guid eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>ApiResponse of EventAdaptiveCard</returns>
        ApiResponse<EventAdaptiveCard> GetEventAdaptiveCardByIdWithHttpInfo(Guid eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>EventDetail</returns>
        EventDetail GetEventDetailById(Guid eventId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>ApiResponse of EventDetail</returns>
        ApiResponse<EventDetail> GetEventDetailByIdWithHttpInfo(Guid eventId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>EventAdaptiveCards</returns>
        EventAdaptiveCards PostEventAdaptiveCards(EventRequestBody eventRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>ApiResponse of EventAdaptiveCards</returns>
        ApiResponse<EventAdaptiveCards> PostEventAdaptiveCardsWithHttpInfo(EventRequestBody eventRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>EventDetails</returns>
        EventDetails PostEventDetails(EventRequestBody eventRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>ApiResponse of EventDetails</returns>
        ApiResponse<EventDetails> PostEventDetailsWithHttpInfo(EventRequestBody eventRequestBody);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch FactSet entity IDs for events that match the filtering criteria
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <returns>EventsEntities</returns>
        EventsEntities PostEventEntities(EventsEntitiesPost eventsEntitiesPost);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch FactSet entity IDs for events that match the filtering criteria
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <returns>ApiResponse of EventsEntities</returns>
        ApiResponse<EventsEntities> PostEventEntitiesWithHttpInfo(EventsEntitiesPost eventsEntitiesPost);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>EventHeadlines</returns>
        EventHeadlines PostEventHeadlines(EventRequestBody eventRequestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>ApiResponse of EventHeadlines</returns>
        ApiResponse<EventHeadlines> PostEventHeadlinesWithHttpInfo(EventRequestBody eventRequestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventAdaptiveCard</returns>
        System.Threading.Tasks.Task<EventAdaptiveCard> GetEventAdaptiveCardByIdAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventAdaptiveCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventAdaptiveCard>> GetEventAdaptiveCardByIdWithHttpInfoAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetail</returns>
        System.Threading.Tasks.Task<EventDetail> GetEventDetailByIdAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDetail>> GetEventDetailByIdWithHttpInfoAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventAdaptiveCards</returns>
        System.Threading.Tasks.Task<EventAdaptiveCards> PostEventAdaptiveCardsAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventAdaptiveCards)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventAdaptiveCards>> PostEventAdaptiveCardsWithHttpInfoAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetails</returns>
        System.Threading.Tasks.Task<EventDetails> PostEventDetailsAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventDetails>> PostEventDetailsWithHttpInfoAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch FactSet entity IDs for events that match the filtering criteria
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsEntities</returns>
        System.Threading.Tasks.Task<EventsEntities> PostEventEntitiesAsync(EventsEntitiesPost eventsEntitiesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch FactSet entity IDs for events that match the filtering criteria
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsEntities)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventsEntities>> PostEventEntitiesWithHttpInfoAsync(EventsEntitiesPost eventsEntitiesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventHeadlines</returns>
        System.Threading.Tasks.Task<EventHeadlines> PostEventHeadlinesAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </remarks>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventHeadlines)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventHeadlines>> PostEventHeadlinesWithHttpInfoAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private FactSet.SDK.Signals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetEventAdaptiveCardByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EventAdaptiveCard) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(RateLimitResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetEventDetailByIdResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EventDetail) },
            { (HttpStatusCode)404, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(RateLimitResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostEventAdaptiveCardsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EventAdaptiveCards) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(RateLimitResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostEventDetailsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EventDetails) },
            { (HttpStatusCode)429, typeof(RateLimitResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostEventEntitiesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EventsEntities) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(RateLimitResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostEventHeadlinesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EventHeadlines) },
            { (HttpStatusCode)429, typeof(RateLimitResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.Signals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Signals.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.Signals.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.Signals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Signals.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.Signals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(FactSet.SDK.Signals.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.Signals.Client.Configuration.MergeConfigurations(
                FactSet.SDK.Signals.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.Signals.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.Signals.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.Signals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(FactSet.SDK.Signals.Client.ISynchronousClient client, FactSet.SDK.Signals.Client.IAsynchronousClient asyncClient, FactSet.SDK.Signals.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.Signals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.Signals.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.Signals.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.Signals.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.Signals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>EventAdaptiveCard</returns>
        public EventAdaptiveCard GetEventAdaptiveCardById(Guid eventId)
        {
            var localVarResponse = GetEventAdaptiveCardByIdWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>ApiResponse of EventAdaptiveCard</returns>
        public ApiResponse<EventAdaptiveCard> GetEventAdaptiveCardByIdWithHttpInfo(Guid eventId)
        {
            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.Signals.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEventAdaptiveCardByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EventAdaptiveCard>("/events/adaptive-cards/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventAdaptiveCardById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventAdaptiveCard</returns>
        public async System.Threading.Tasks.Task<EventAdaptiveCard>GetEventAdaptiveCardByIdAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEventAdaptiveCardByIdWithHttpInfoAsync(eventId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventAdaptiveCard)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EventAdaptiveCard>> GetEventAdaptiveCardByIdWithHttpInfoAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.Signals.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEventAdaptiveCardByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventAdaptiveCard>("/events/adaptive-cards/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventAdaptiveCardById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>EventDetail</returns>
        public EventDetail GetEventDetailById(Guid eventId)
        {
            var localVarResponse = GetEventDetailByIdWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <returns>ApiResponse of EventDetail</returns>
        public ApiResponse<EventDetail> GetEventDetailByIdWithHttpInfo(Guid eventId)
        {
            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.Signals.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetEventDetailByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EventDetail>("/events/details/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventDetailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetail</returns>
        public async System.Threading.Tasks.Task<EventDetail>GetEventDetailByIdAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetEventDetailByIdWithHttpInfoAsync(eventId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for a single requested Signal event
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The UUID of the event to return.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetail)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EventDetail>> GetEventDetailByIdWithHttpInfoAsync(Guid eventId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", FactSet.SDK.Signals.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetEventDetailByIdResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventDetail>("/events/details/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventDetailById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>EventAdaptiveCards</returns>
        public EventAdaptiveCards PostEventAdaptiveCards(EventRequestBody eventRequestBody)
        {
            var localVarResponse = PostEventAdaptiveCardsWithHttpInfo(eventRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>ApiResponse of EventAdaptiveCards</returns>
        public ApiResponse<EventAdaptiveCards> PostEventAdaptiveCardsWithHttpInfo(EventRequestBody eventRequestBody)
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventsApi->PostEventAdaptiveCards");
            }

            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostEventAdaptiveCardsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EventAdaptiveCards>("/events/adaptive-cards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventAdaptiveCards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventAdaptiveCards</returns>
        public async System.Threading.Tasks.Task<EventAdaptiveCards>PostEventAdaptiveCardsAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostEventAdaptiveCardsWithHttpInfoAsync(eventRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Microsoft&#39;s Adaptive Cards, which includes headlines and event details data plus hyperlinks to FactSet reports, based on at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventAdaptiveCards)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EventAdaptiveCards>> PostEventAdaptiveCardsWithHttpInfoAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventsApi->PostEventAdaptiveCards");
            }


            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostEventAdaptiveCardsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EventAdaptiveCards>("/events/adaptive-cards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventAdaptiveCards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>EventDetails</returns>
        public EventDetails PostEventDetails(EventRequestBody eventRequestBody)
        {
            var localVarResponse = PostEventDetailsWithHttpInfo(eventRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>ApiResponse of EventDetails</returns>
        public ApiResponse<EventDetails> PostEventDetailsWithHttpInfo(EventRequestBody eventRequestBody)
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventsApi->PostEventDetails");
            }

            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostEventDetailsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EventDetails>("/events/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventDetails</returns>
        public async System.Threading.Tasks.Task<EventDetails>PostEventDetailsAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostEventDetailsWithHttpInfoAsync(eventRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Signals event headlines plus all additional event details for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventDetails)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EventDetails>> PostEventDetailsWithHttpInfoAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventsApi->PostEventDetails");
            }


            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostEventDetailsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EventDetails>("/events/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch FactSet entity IDs for events that match the filtering criteria
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <returns>EventsEntities</returns>
        public EventsEntities PostEventEntities(EventsEntitiesPost eventsEntitiesPost)
        {
            var localVarResponse = PostEventEntitiesWithHttpInfo(eventsEntitiesPost);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch FactSet entity IDs for events that match the filtering criteria
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <returns>ApiResponse of EventsEntities</returns>
        public ApiResponse<EventsEntities> PostEventEntitiesWithHttpInfo(EventsEntitiesPost eventsEntitiesPost)
        {
            // verify the required parameter 'eventsEntitiesPost' is set
            if (eventsEntitiesPost == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventsEntitiesPost' when calling EventsApi->PostEventEntities");
            }

            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventsEntitiesPost;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostEventEntitiesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EventsEntities>("/events/entities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Fetch FactSet entity IDs for events that match the filtering criteria
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsEntities</returns>
        public async System.Threading.Tasks.Task<EventsEntities>PostEventEntitiesAsync(EventsEntitiesPost eventsEntitiesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostEventEntitiesWithHttpInfoAsync(eventsEntitiesPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch FactSet entity IDs for events that match the filtering criteria
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventsEntitiesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsEntities)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EventsEntities>> PostEventEntitiesWithHttpInfoAsync(EventsEntitiesPost eventsEntitiesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventsEntitiesPost' is set
            if (eventsEntitiesPost == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventsEntitiesPost' when calling EventsApi->PostEventEntities");
            }


            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventsEntitiesPost;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostEventEntitiesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EventsEntities>("/events/entities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>EventHeadlines</returns>
        public EventHeadlines PostEventHeadlines(EventRequestBody eventRequestBody)
        {
            var localVarResponse = PostEventHeadlinesWithHttpInfo(eventRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <returns>ApiResponse of EventHeadlines</returns>
        public ApiResponse<EventHeadlines> PostEventHeadlinesWithHttpInfo(EventRequestBody eventRequestBody)
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventsApi->PostEventHeadlines");
            }

            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostEventHeadlinesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            EventHeadlines>("/events/headlines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventHeadlines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        ///  Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventHeadlines</returns>
        public async System.Threading.Tasks.Task<EventHeadlines>PostEventHeadlinesAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostEventHeadlinesWithHttpInfoAsync(eventRequestBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Fetch Signals event headlines based on the filtering criteria for up to 1000 identifiers and at least one of the following filtering parameters: &#x60;ids&#x60;, &#x60;portfolios&#x60;
        /// </summary>
        /// <exception cref="FactSet.SDK.Signals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventHeadlines)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EventHeadlines>> PostEventHeadlinesWithHttpInfoAsync(EventRequestBody eventRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
            {
                throw new FactSet.SDK.Signals.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventsApi->PostEventHeadlines");
            }


            FactSet.SDK.Signals.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.Signals.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.Signals.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eventRequestBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.Signals.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostEventHeadlinesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EventHeadlines>("/events/headlines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostEventHeadlines", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
