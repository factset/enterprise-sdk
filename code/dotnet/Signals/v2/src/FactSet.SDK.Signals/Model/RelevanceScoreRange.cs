/*
 * Signals API
 *
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Signals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Signals.Model
{
    /// <summary>
    /// Represents a valid range for user relevancy score for signal events. The upper bound of the range is represented by the attribute **gt** or **gte**. The lower bound of the range is presented by **lt** or **lte** The range can contain either of the bounds or both. e.g. { \&quot;gt\&quot;: 0.4, \&quot;lt\&quot;: 0.8 } 
    /// </summary>
    [DataContract(Name = "RelevanceScoreRange")]
    public partial class RelevanceScoreRange : IEquatable<RelevanceScoreRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelevanceScoreRange" /> class.
        /// </summary>
        /// <param name="gt">gt.</param>
        /// <param name="gte">gte.</param>
        /// <param name="lt">lt.</param>
        /// <param name="lte">lte.</param>
        public RelevanceScoreRange(float gt = default(float), float gte = default(float), float lt = default(float), float lte = default(float))
        {
            this.Gt = gt;
            this.Gte = gte;
            this.Lt = lt;
            this.Lte = lte;
        }

        /// <summary>
        /// Gets or Sets Gt
        /// </summary>
        [DataMember(Name = "gt", EmitDefaultValue = false)]
        public float Gt { get; set; }

        /// <summary>
        /// Gets or Sets Gte
        /// </summary>
        [DataMember(Name = "gte", EmitDefaultValue = false)]
        public float Gte { get; set; }

        /// <summary>
        /// Gets or Sets Lt
        /// </summary>
        [DataMember(Name = "lt", EmitDefaultValue = false)]
        public float Lt { get; set; }

        /// <summary>
        /// Gets or Sets Lte
        /// </summary>
        [DataMember(Name = "lte", EmitDefaultValue = false)]
        public float Lte { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelevanceScoreRange {\n");
            sb.Append("  Gt: ").Append(Gt).Append("\n");
            sb.Append("  Gte: ").Append(Gte).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("  Lte: ").Append(Lte).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelevanceScoreRange);
        }

        /// <summary>
        /// Returns true if RelevanceScoreRange instances are equal
        /// </summary>
        /// <param name="input">Instance of RelevanceScoreRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelevanceScoreRange input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Gt == input.Gt ||
                    this.Gt.Equals(input.Gt)
                ) && 
                (
                    this.Gte == input.Gte ||
                    this.Gte.Equals(input.Gte)
                ) && 
                (
                    this.Lt == input.Lt ||
                    this.Lt.Equals(input.Lt)
                ) && 
                (
                    this.Lte == input.Lte ||
                    this.Lte.Equals(input.Lte)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Gt.GetHashCode();
                hashCode = (hashCode * 59) + this.Gte.GetHashCode();
                hashCode = (hashCode * 59) + this.Lt.GetHashCode();
                hashCode = (hashCode * 59) + this.Lte.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
