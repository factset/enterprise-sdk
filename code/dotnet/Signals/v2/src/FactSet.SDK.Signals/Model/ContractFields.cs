/*
 * Signals API
 *
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Signals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Signals.Model
{
    /// <summary>
    /// ContractFields
    /// </summary>
    [DataContract(Name = "contractFields")]
    public partial class ContractFields : IEquatable<ContractFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContractFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractFields" /> class.
        /// </summary>
        /// <param name="summary">summary (required).</param>
        /// <param name="eventDate">eventDate (required).</param>
        /// <param name="additionalProperties">additionalProperties.</param>
        public ContractFields(ContractFieldsSummary summary, ContractFieldsSummary eventDate,ContractProperty additionalProperties = default(ContractProperty))
        {
            // to ensure "summary" is required (not null)
            if (summary == null) {
                throw new ArgumentNullException("summary is a required property for ContractFields and cannot be null");
            }
            this.Summary = summary;
            // to ensure "eventDate" is required (not null)
            if (eventDate == null) {
                throw new ArgumentNullException("eventDate is a required property for ContractFields and cannot be null");
            }
            this.EventDate = eventDate;
            this.AdditionalProperties = additionalProperties;
        }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", IsRequired = true, EmitDefaultValue = false)]
        public ContractFieldsSummary Summary { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name = "eventDate", IsRequired = true, EmitDefaultValue = false)]
        public ContractFieldsSummary EventDate { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalProperties
        /// </summary>
        [DataMember(Name = "additionalProperties", EmitDefaultValue = false)]
        public ContractProperty AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractFields {\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractFields);
        }

        /// <summary>
        /// Returns true if ContractFields instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractFields input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.AdditionalProperties == input.AdditionalProperties ||
                    (this.AdditionalProperties != null &&
                    this.AdditionalProperties.Equals(input.AdditionalProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                if (this.EventDate != null)
                {
                    hashCode = (hashCode * 59) + this.EventDate.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
