/*
 * Signals API
 *
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.Signals.Client.OpenAPIDateConverter;

namespace FactSet.SDK.Signals.Model
{
    /// <summary>
    /// SignalDefinitionData
    /// </summary>
    [DataContract(Name = "signalDefinition_data")]
    public partial class SignalDefinitionData : IEquatable<SignalDefinitionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalDefinitionData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignalDefinitionData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignalDefinitionData" /> class.
        /// </summary>
        /// <param name="signalId">signalId (required).</param>
        /// <param name="theme">theme (required).</param>
        /// <param name="categories">categories (required).</param>
        /// <param name="contract">contract (required).</param>
        public SignalDefinitionData(string signalId, string theme, List<string> categories, Contract contract)
        {
            // to ensure "signalId" is required (not null)
            if (signalId == null) {
                throw new ArgumentNullException("signalId is a required property for SignalDefinitionData and cannot be null");
            }
            this.SignalId = signalId;
            // to ensure "theme" is required (not null)
            if (theme == null) {
                throw new ArgumentNullException("theme is a required property for SignalDefinitionData and cannot be null");
            }
            this.Theme = theme;
            // to ensure "categories" is required (not null)
            if (categories == null) {
                throw new ArgumentNullException("categories is a required property for SignalDefinitionData and cannot be null");
            }
            this.Categories = categories;
            // to ensure "contract" is required (not null)
            if (contract == null) {
                throw new ArgumentNullException("contract is a required property for SignalDefinitionData and cannot be null");
            }
            this.Contract = contract;
        }

        /// <summary>
        /// Gets or Sets SignalId
        /// </summary>
        [DataMember(Name = "signalId", IsRequired = true, EmitDefaultValue = false)]
        public string SignalId { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name = "theme", IsRequired = true, EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name = "contract", IsRequired = true, EmitDefaultValue = false)]
        public Contract Contract { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignalDefinitionData {\n");
            sb.Append("  SignalId: ").Append(SignalId).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignalDefinitionData);
        }

        /// <summary>
        /// Returns true if SignalDefinitionData instances are equal
        /// </summary>
        /// <param name="input">Instance of SignalDefinitionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignalDefinitionData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignalId == input.SignalId ||
                    (this.SignalId != null &&
                    this.SignalId.Equals(input.SignalId))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignalId != null)
                {
                    hashCode = (hashCode * 59) + this.SignalId.GetHashCode();
                }
                if (this.Theme != null)
                {
                    hashCode = (hashCode * 59) + this.Theme.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.Contract != null)
                {
                    hashCode = (hashCode * 59) + this.Contract.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
