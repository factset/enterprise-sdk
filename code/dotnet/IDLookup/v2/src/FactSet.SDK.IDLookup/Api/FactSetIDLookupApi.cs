/*
 * ID Lookup API
 *
 * The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IDLookup.Client;
using FactSet.SDK.IDLookup.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IDLookup.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactSetIDLookupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset.
        /// </summary>
        /// <remarks>
        /// By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <returns>HelperEndpoint</returns>
        HelperEndpoint Helper(string dataset);

        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset.
        /// </summary>
        /// <remarks>
        /// By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <returns>ApiResponse of HelperEndpoint</returns>
        ApiResponse<HelperEndpoint> HelperWithHttpInfo(string dataset);
        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data.
        /// </summary>
        /// <remarks>
        /// This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <returns>LookupResponse</returns>
        LookupResponse Search(LookupRequest lookupRequest);

        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data.
        /// </summary>
        /// <remarks>
        /// This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> SearchWithHttpInfo(LookupRequest lookupRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactSetIDLookupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset.
        /// </summary>
        /// <remarks>
        /// By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HelperEndpoint</returns>
        System.Threading.Tasks.Task<HelperEndpoint> HelperAsync(string dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset.
        /// </summary>
        /// <remarks>
        /// By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HelperEndpoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<HelperEndpoint>> HelperWithHttpInfoAsync(string dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data.
        /// </summary>
        /// <remarks>
        /// This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> SearchAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data.
        /// </summary>
        /// <remarks>
        /// This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </remarks>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchWithHttpInfoAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFactSetIDLookupApi : IFactSetIDLookupApiSync, IFactSetIDLookupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FactSetIDLookupApi : IFactSetIDLookupApi
    {
        private FactSet.SDK.IDLookup.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> HelperResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(HelperEndpoint) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> SearchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(LookupResponse) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(ErrorResponse) },
            { (HttpStatusCode)403, typeof(ErrorResponse) },
            { (HttpStatusCode)429, typeof(ErrorResponse) },
            { (HttpStatusCode)500, typeof(ErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactSetIDLookupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FactSetIDLookupApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IDLookup.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IDLookup.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IDLookup.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IDLookup.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FactSetIDLookupApi(FactSet.SDK.IDLookup.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IDLookup.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IDLookup.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IDLookup.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IDLookup.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FactSetIDLookupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FactSetIDLookupApi(FactSet.SDK.IDLookup.Client.ISynchronousClient client, FactSet.SDK.IDLookup.Client.IAsynchronousClient asyncClient, FactSet.SDK.IDLookup.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IDLookup.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IDLookup.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IDLookup.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IDLookup.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IDLookup.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset. By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <returns>HelperEndpoint</returns>
        public HelperEndpoint Helper(string dataset)
        {
            var localVarResponse = HelperWithHttpInfo(dataset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset. By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <returns>ApiResponse of HelperEndpoint</returns>
        public ApiResponse<HelperEndpoint> HelperWithHttpInfo(string dataset)
        {
            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new FactSet.SDK.IDLookup.Client.ApiException(400, "Missing required parameter 'dataset' when calling FactSetIDLookupApi->Helper");
            }

            FactSet.SDK.IDLookup.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IDLookup.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IDLookup.Client.ClientUtils.ParameterToMultiMap("", "dataset", dataset));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IDLookup.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = HelperResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            HelperEndpoint>("/metadata/fields/list-by-dataset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Helper", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset. By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HelperEndpoint</returns>
        public async System.Threading.Tasks.Task<HelperEndpoint>HelperAsync(string dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await HelperWithHttpInfoAsync(dataset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Helper endpoint offering a list of supported fields and values to filter a requested dataset. By querying this helper endpoint, users can retrieve a comprehensive list of supported fields, each associated with its permissible values. This functionality enhances the usability of the API by empowering users to construct precise queries tailored to their requirements when accessing the requested dataset. 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataset">Type of dataset.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HelperEndpoint)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<HelperEndpoint>> HelperWithHttpInfoAsync(string dataset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dataset' is set
            if (dataset == null)
            {
                throw new FactSet.SDK.IDLookup.Client.ApiException(400, "Missing required parameter 'dataset' when calling FactSetIDLookupApi->Helper");
            }


            FactSet.SDK.IDLookup.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IDLookup.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.IDLookup.Client.ClientUtils.ParameterToMultiMap("", "dataset", dataset));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IDLookup.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = HelperResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HelperEndpoint>("/metadata/fields/list-by-dataset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Helper", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data. This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <returns>LookupResponse</returns>
        public LookupResponse Search(LookupRequest lookupRequest)
        {
            var localVarResponse = SearchWithHttpInfo(lookupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data. This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public ApiResponse<LookupResponse> SearchWithHttpInfo(LookupRequest lookupRequest)
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
            {
                throw new FactSet.SDK.IDLookup.Client.ApiException(400, "Missing required parameter 'lookupRequest' when calling FactSetIDLookupApi->Search");
            }

            FactSet.SDK.IDLookup.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IDLookup.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IDLookup.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = SearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            LookupResponse>("/lookup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data. This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse>SearchAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SearchWithHttpInfoAsync(lookupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search functionality to return tickers, company names, and unique identifiers for FactSet data. This functionality enables users to input search queries, such as company names or keywords, and receive results containing matching entities along with their associated tickers and unique identifiers.   Essentially, it provides a streamlined means of locating specific data points within the FactSet database, facilitating the efficient retrieval of essential information related to companies or financial instruments.  The dataset names provided in the table below can be used in the request body.  | Dataset Name                | Dataset Description                 | ID Type           | ID Example   | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -| | *&#x60;bankLoans&#x60;*               | Bank Loans                          | symbol            | LX056750     | | *&#x60;commodities&#x60;*             | Commodities                         | symbol            | DUBAIM-FDS   | | *&#x60;cepBonds&#x60;*                | Continuous Evaluated Pricing        | tickerExchange    | N3ZWW5.FI-CEP| | *&#x60;countries&#x60;*               | Countries                           | symbol            | CC_MA        | | *&#x60;deals&#x60;*                   | Deals                               | symbol            | 4161715      | | *&#x60;economicReports&#x60;*             | Economic Reports                    | symbol            | USKEY-ECON   | | *&#x60;economicSeries&#x60;*          | Economic Series                     | symbol            | EUZ.GDPR     | | *&#x60;equities&#x60;*                | Equities                            | tickerRegion      | AAPL-US      | | *&#x60;equitiesRealTime&#x60;*        | Equities RealTime                   | tickerExchange    | M-BKK        | | *&#x60;etfs&#x60;*                    | ETFs                                | tickerRegion      | ACWI-US      | | *&#x60;etfsRealTime&#x60;*            | ETFs RealTime                       | symbol            | JPNA | *&#x60;exchangeRatesRealTime&#x60;*   | Exchange Rates RealTime             | symbol            | AUDUSD-FX1   | | *&#x60;bonds&#x60;*                   | Fixed Income                        | symbol            | XS2027359756 | | *&#x60;forex&#x60;*                   | Foreign Exchange                    | symbol            | USDARS       | | *&#x60;futures&#x60;*                 | Futures (continuous)                | symbol            | AP00-SFE     | | *&#x60;indices&#x60;*                 | Indices                             | symbol            | 186745       | | *&#x60;indicesRealTime&#x60;*         | Indices RealTime                    | symbol            | BB3MUS.A-PSE | | *&#x60;industries&#x60;*              | Industries                          | symbol            | FI1225R1     | | *&#x60;markitLoans&#x60;*             | Markit Loans                        | symbol            | LX111044-USA | | *&#x60;mutualFunds&#x60;*             | Mutual Funds                        | tickerRegion      | AMECX-US     | | *&#x60;mutualFundsRealTime&#x60;*     | Mutual Funds RealTime               | symbol            | 015414       | | *&#x60;ownershipHolders&#x60;*        | Ownership Holders                   | symbol            | F5102330     | | *&#x60;people&#x60;*                  | People                              | entityId          | 065SLB-E     | | *&#x60;privateCompanies&#x60;*        | Private Companies                   | entityId          | 0CBD2D-E     | | *&#x60;pevcFirms&#x60;*               | Private Equity/Venture Capital Firms| entityId          | 000BKX-E     | | *&#x60;pevcFunds&#x60;*               | Private Equity/Venture Capital Funds| entityId          | 0WCD0X-E     | | *&#x60;regions&#x60;*                 | Region                              | symbol            | RG_AMER      | | *&#x60;yields&#x60;*                  | Yields                              | symbol            | TRYAU10Y-FDS | | *&#x60;options&#x60;*                 | options                             | tickerExchange           | A#P1924C100000-USA| 
        /// </summary>
        /// <exception cref="FactSet.SDK.IDLookup.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupRequest">Request body to lookup any FactSet identifiers.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<LookupResponse>> SearchWithHttpInfoAsync(LookupRequest lookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
            {
                throw new FactSet.SDK.IDLookup.Client.ApiException(400, "Missing required parameter 'lookupRequest' when calling FactSetIDLookupApi->Search");
            }


            FactSet.SDK.IDLookup.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IDLookup.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IDLookup.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = lookupRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IDLookup.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = SearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupResponse>("/lookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
