/*
 * ID Lookup API
 *
 * The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IDLookup.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IDLookup.Model
{
    /// <summary>
    ///   Filters object helps narrow down the search results by including and/or excluding parameters. Filters are specific, depending on the dataset.   Please refer to &#x60;/metadata/fields/list-by-dataset&#x60; for the complete list of supported fields and values to filter the requested dataset.  If no filters are provided, all data will be returned.    * include - restricts results to those matching the provided fields and values   * exclude - returns all results except those matching the provided fields and values.   Possible cases:    * No filters object (default): No filter will be applied to the results.     * Include and exclude objects used together: Results are based on the combination of different fields used in both objects.     * The same field cannot be used in both include and exclude. If that happens, an HTTP 400 response is returned.    * If a specified field does not exist in the dataset, an HTTP 400 response is returned. 
    /// </summary>
    [DataContract(Name = "filters")]
    public partial class Filters : IEquatable<Filters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Filters" /> class.
        /// </summary>
        /// <param name="include">Include Object.</param>
        /// <param name="exclude">Exclude Object.</param>
        public Filters(Dictionary<string, List<string>> include = default(Dictionary<string, List<string>>), Dictionary<string, List<string>> exclude = default(Dictionary<string, List<string>>))
        {
            this.Include = include;
            this.Exclude = exclude;
        }

        /// <summary>
        /// Include Object
        /// </summary>
        /// <value>Include Object</value>
        [DataMember(Name = "include", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> Include { get; set; }

        /// <summary>
        /// Exclude Object
        /// </summary>
        /// <value>Exclude Object</value>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> Exclude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Filters {\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Filters);
        }

        /// <summary>
        /// Returns true if Filters instances are equal
        /// </summary>
        /// <param name="input">Instance of Filters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Filters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Include == input.Include ||
                    this.Include != null &&
                    input.Include != null &&
                    this.Include.SequenceEqual(input.Include)
                ) && 
                (
                    this.Exclude == input.Exclude ||
                    this.Exclude != null &&
                    input.Exclude != null &&
                    this.Exclude.SequenceEqual(input.Exclude)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Include != null)
                {
                    hashCode = (hashCode * 59) + this.Include.GetHashCode();
                }
                if (this.Exclude != null)
                {
                    hashCode = (hashCode * 59) + this.Exclude.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
