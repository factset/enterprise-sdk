/*
 * ID Lookup API
 *
 * The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IDLookup.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IDLookup.Model
{
    /// <summary>
    /// It details the number of response objects belonging to each dataset.
    /// </summary>
    [DataContract(Name = "lookupResponse_meta_resultCount")]
    public partial class LookupResponseMetaResultCount : IEquatable<LookupResponseMetaResultCount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupResponseMetaResultCount" /> class.
        /// </summary>
        /// <param name="equities">Number of equities..</param>
        /// <param name="equitiesRealTime">Number number of real-time equities..</param>
        /// <param name="bankLoans">Number of bank loans..</param>
        /// <param name="commodities">Number of commodities..</param>
        /// <param name="cepBonds">Number of continuous evaluated pricing bonds..</param>
        /// <param name="countries">Number of countries..</param>
        /// <param name="deals">Number of deals..</param>
        /// <param name="economicReports">Number of economic reports..</param>
        /// <param name="economicSeries">Number of economic series..</param>
        /// <param name="etfs">Number of ETFs..</param>
        /// <param name="etfsRealTime">Number of real-time ETFs..</param>
        /// <param name="exchangeRatesRealTime">Number of real-time exchange rates..</param>
        /// <param name="bonds">Number of bonds.</param>
        /// <param name="forex">Number of foreign exchanges..</param>
        /// <param name="futures">Number of futures..</param>
        /// <param name="indices">Number of indices..</param>
        /// <param name="indicesRealTime">Number of real-time indices..</param>
        /// <param name="industries">Number of industries..</param>
        /// <param name="markitLoans">Number of markit loans..</param>
        /// <param name="mutualFunds">Number of mutual funds..</param>
        /// <param name="mutualFundsRealTime">Number of real-time mutual funds..</param>
        /// <param name="ownershipHolders">Number of ownership holders..</param>
        /// <param name="people">Number of people..</param>
        /// <param name="privateCompanies">Number of private companies..</param>
        /// <param name="pevcFirms">Number of private equity/venture capital firms..</param>
        /// <param name="pevcFunds">Number of private equity/venture capital funds..</param>
        /// <param name="regions">Number of regions..</param>
        /// <param name="yields">Number of yields..</param>
        public LookupResponseMetaResultCount(int equities = default(int), int equitiesRealTime = default(int), int bankLoans = default(int), int commodities = default(int), int cepBonds = default(int), int countries = default(int), int deals = default(int), int economicReports = default(int), int economicSeries = default(int), int etfs = default(int), int etfsRealTime = default(int), int exchangeRatesRealTime = default(int), int bonds = default(int), int forex = default(int), int futures = default(int), int indices = default(int), int indicesRealTime = default(int), int industries = default(int), int markitLoans = default(int), int mutualFunds = default(int), int mutualFundsRealTime = default(int), int ownershipHolders = default(int), int people = default(int), int privateCompanies = default(int), int pevcFirms = default(int), int pevcFunds = default(int), int regions = default(int), int yields = default(int))
        {
            this.Equities = equities;
            this.EquitiesRealTime = equitiesRealTime;
            this.BankLoans = bankLoans;
            this.Commodities = commodities;
            this.CepBonds = cepBonds;
            this.Countries = countries;
            this.Deals = deals;
            this.EconomicReports = economicReports;
            this.EconomicSeries = economicSeries;
            this.Etfs = etfs;
            this.EtfsRealTime = etfsRealTime;
            this.ExchangeRatesRealTime = exchangeRatesRealTime;
            this.Bonds = bonds;
            this.Forex = forex;
            this.Futures = futures;
            this.Indices = indices;
            this.IndicesRealTime = indicesRealTime;
            this.Industries = industries;
            this.MarkitLoans = markitLoans;
            this.MutualFunds = mutualFunds;
            this.MutualFundsRealTime = mutualFundsRealTime;
            this.OwnershipHolders = ownershipHolders;
            this.People = people;
            this.PrivateCompanies = privateCompanies;
            this.PevcFirms = pevcFirms;
            this.PevcFunds = pevcFunds;
            this.Regions = regions;
            this.Yields = yields;
        }

        /// <summary>
        /// Number of equities.
        /// </summary>
        /// <value>Number of equities.</value>
        [DataMember(Name = "equities", EmitDefaultValue = false)]
        public int Equities { get; set; }

        /// <summary>
        /// Number number of real-time equities.
        /// </summary>
        /// <value>Number number of real-time equities.</value>
        [DataMember(Name = "equitiesRealTime", EmitDefaultValue = false)]
        public int EquitiesRealTime { get; set; }

        /// <summary>
        /// Number of bank loans.
        /// </summary>
        /// <value>Number of bank loans.</value>
        [DataMember(Name = "bankLoans", EmitDefaultValue = false)]
        public int BankLoans { get; set; }

        /// <summary>
        /// Number of commodities.
        /// </summary>
        /// <value>Number of commodities.</value>
        [DataMember(Name = "commodities", EmitDefaultValue = false)]
        public int Commodities { get; set; }

        /// <summary>
        /// Number of continuous evaluated pricing bonds.
        /// </summary>
        /// <value>Number of continuous evaluated pricing bonds.</value>
        [DataMember(Name = "cepBonds", EmitDefaultValue = false)]
        public int CepBonds { get; set; }

        /// <summary>
        /// Number of countries.
        /// </summary>
        /// <value>Number of countries.</value>
        [DataMember(Name = "countries", EmitDefaultValue = false)]
        public int Countries { get; set; }

        /// <summary>
        /// Number of deals.
        /// </summary>
        /// <value>Number of deals.</value>
        [DataMember(Name = "deals", EmitDefaultValue = false)]
        public int Deals { get; set; }

        /// <summary>
        /// Number of economic reports.
        /// </summary>
        /// <value>Number of economic reports.</value>
        [DataMember(Name = "economicReports", EmitDefaultValue = false)]
        public int EconomicReports { get; set; }

        /// <summary>
        /// Number of economic series.
        /// </summary>
        /// <value>Number of economic series.</value>
        [DataMember(Name = "economicSeries", EmitDefaultValue = false)]
        public int EconomicSeries { get; set; }

        /// <summary>
        /// Number of ETFs.
        /// </summary>
        /// <value>Number of ETFs.</value>
        [DataMember(Name = "etfs", EmitDefaultValue = false)]
        public int Etfs { get; set; }

        /// <summary>
        /// Number of real-time ETFs.
        /// </summary>
        /// <value>Number of real-time ETFs.</value>
        [DataMember(Name = "etfsRealTime", EmitDefaultValue = false)]
        public int EtfsRealTime { get; set; }

        /// <summary>
        /// Number of real-time exchange rates.
        /// </summary>
        /// <value>Number of real-time exchange rates.</value>
        [DataMember(Name = "exchangeRatesRealTime", EmitDefaultValue = false)]
        public int ExchangeRatesRealTime { get; set; }

        /// <summary>
        /// Number of bonds
        /// </summary>
        /// <value>Number of bonds</value>
        [DataMember(Name = "bonds", EmitDefaultValue = false)]
        public int Bonds { get; set; }

        /// <summary>
        /// Number of foreign exchanges.
        /// </summary>
        /// <value>Number of foreign exchanges.</value>
        [DataMember(Name = "forex", EmitDefaultValue = false)]
        public int Forex { get; set; }

        /// <summary>
        /// Number of futures.
        /// </summary>
        /// <value>Number of futures.</value>
        [DataMember(Name = "futures", EmitDefaultValue = false)]
        public int Futures { get; set; }

        /// <summary>
        /// Number of indices.
        /// </summary>
        /// <value>Number of indices.</value>
        [DataMember(Name = "indices", EmitDefaultValue = false)]
        public int Indices { get; set; }

        /// <summary>
        /// Number of real-time indices.
        /// </summary>
        /// <value>Number of real-time indices.</value>
        [DataMember(Name = "indicesRealTime", EmitDefaultValue = false)]
        public int IndicesRealTime { get; set; }

        /// <summary>
        /// Number of industries.
        /// </summary>
        /// <value>Number of industries.</value>
        [DataMember(Name = "industries", EmitDefaultValue = false)]
        public int Industries { get; set; }

        /// <summary>
        /// Number of markit loans.
        /// </summary>
        /// <value>Number of markit loans.</value>
        [DataMember(Name = "markitLoans", EmitDefaultValue = false)]
        public int MarkitLoans { get; set; }

        /// <summary>
        /// Number of mutual funds.
        /// </summary>
        /// <value>Number of mutual funds.</value>
        [DataMember(Name = "mutualFunds", EmitDefaultValue = false)]
        public int MutualFunds { get; set; }

        /// <summary>
        /// Number of real-time mutual funds.
        /// </summary>
        /// <value>Number of real-time mutual funds.</value>
        [DataMember(Name = "mutualFundsRealTime", EmitDefaultValue = false)]
        public int MutualFundsRealTime { get; set; }

        /// <summary>
        /// Number of ownership holders.
        /// </summary>
        /// <value>Number of ownership holders.</value>
        [DataMember(Name = "ownershipHolders", EmitDefaultValue = false)]
        public int OwnershipHolders { get; set; }

        /// <summary>
        /// Number of people.
        /// </summary>
        /// <value>Number of people.</value>
        [DataMember(Name = "people", EmitDefaultValue = false)]
        public int People { get; set; }

        /// <summary>
        /// Number of private companies.
        /// </summary>
        /// <value>Number of private companies.</value>
        [DataMember(Name = "privateCompanies", EmitDefaultValue = false)]
        public int PrivateCompanies { get; set; }

        /// <summary>
        /// Number of private equity/venture capital firms.
        /// </summary>
        /// <value>Number of private equity/venture capital firms.</value>
        [DataMember(Name = "pevcFirms", EmitDefaultValue = false)]
        public int PevcFirms { get; set; }

        /// <summary>
        /// Number of private equity/venture capital funds.
        /// </summary>
        /// <value>Number of private equity/venture capital funds.</value>
        [DataMember(Name = "pevcFunds", EmitDefaultValue = false)]
        public int PevcFunds { get; set; }

        /// <summary>
        /// Number of regions.
        /// </summary>
        /// <value>Number of regions.</value>
        [DataMember(Name = "regions", EmitDefaultValue = false)]
        public int Regions { get; set; }

        /// <summary>
        /// Number of yields.
        /// </summary>
        /// <value>Number of yields.</value>
        [DataMember(Name = "yields", EmitDefaultValue = false)]
        public int Yields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LookupResponseMetaResultCount {\n");
            sb.Append("  Equities: ").Append(Equities).Append("\n");
            sb.Append("  EquitiesRealTime: ").Append(EquitiesRealTime).Append("\n");
            sb.Append("  BankLoans: ").Append(BankLoans).Append("\n");
            sb.Append("  Commodities: ").Append(Commodities).Append("\n");
            sb.Append("  CepBonds: ").Append(CepBonds).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Deals: ").Append(Deals).Append("\n");
            sb.Append("  EconomicReports: ").Append(EconomicReports).Append("\n");
            sb.Append("  EconomicSeries: ").Append(EconomicSeries).Append("\n");
            sb.Append("  Etfs: ").Append(Etfs).Append("\n");
            sb.Append("  EtfsRealTime: ").Append(EtfsRealTime).Append("\n");
            sb.Append("  ExchangeRatesRealTime: ").Append(ExchangeRatesRealTime).Append("\n");
            sb.Append("  Bonds: ").Append(Bonds).Append("\n");
            sb.Append("  Forex: ").Append(Forex).Append("\n");
            sb.Append("  Futures: ").Append(Futures).Append("\n");
            sb.Append("  Indices: ").Append(Indices).Append("\n");
            sb.Append("  IndicesRealTime: ").Append(IndicesRealTime).Append("\n");
            sb.Append("  Industries: ").Append(Industries).Append("\n");
            sb.Append("  MarkitLoans: ").Append(MarkitLoans).Append("\n");
            sb.Append("  MutualFunds: ").Append(MutualFunds).Append("\n");
            sb.Append("  MutualFundsRealTime: ").Append(MutualFundsRealTime).Append("\n");
            sb.Append("  OwnershipHolders: ").Append(OwnershipHolders).Append("\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("  PrivateCompanies: ").Append(PrivateCompanies).Append("\n");
            sb.Append("  PevcFirms: ").Append(PevcFirms).Append("\n");
            sb.Append("  PevcFunds: ").Append(PevcFunds).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Yields: ").Append(Yields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LookupResponseMetaResultCount);
        }

        /// <summary>
        /// Returns true if LookupResponseMetaResultCount instances are equal
        /// </summary>
        /// <param name="input">Instance of LookupResponseMetaResultCount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LookupResponseMetaResultCount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Equities == input.Equities ||
                    this.Equities.Equals(input.Equities)
                ) && 
                (
                    this.EquitiesRealTime == input.EquitiesRealTime ||
                    this.EquitiesRealTime.Equals(input.EquitiesRealTime)
                ) && 
                (
                    this.BankLoans == input.BankLoans ||
                    this.BankLoans.Equals(input.BankLoans)
                ) && 
                (
                    this.Commodities == input.Commodities ||
                    this.Commodities.Equals(input.Commodities)
                ) && 
                (
                    this.CepBonds == input.CepBonds ||
                    this.CepBonds.Equals(input.CepBonds)
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries.Equals(input.Countries)
                ) && 
                (
                    this.Deals == input.Deals ||
                    this.Deals.Equals(input.Deals)
                ) && 
                (
                    this.EconomicReports == input.EconomicReports ||
                    this.EconomicReports.Equals(input.EconomicReports)
                ) && 
                (
                    this.EconomicSeries == input.EconomicSeries ||
                    this.EconomicSeries.Equals(input.EconomicSeries)
                ) && 
                (
                    this.Etfs == input.Etfs ||
                    this.Etfs.Equals(input.Etfs)
                ) && 
                (
                    this.EtfsRealTime == input.EtfsRealTime ||
                    this.EtfsRealTime.Equals(input.EtfsRealTime)
                ) && 
                (
                    this.ExchangeRatesRealTime == input.ExchangeRatesRealTime ||
                    this.ExchangeRatesRealTime.Equals(input.ExchangeRatesRealTime)
                ) && 
                (
                    this.Bonds == input.Bonds ||
                    this.Bonds.Equals(input.Bonds)
                ) && 
                (
                    this.Forex == input.Forex ||
                    this.Forex.Equals(input.Forex)
                ) && 
                (
                    this.Futures == input.Futures ||
                    this.Futures.Equals(input.Futures)
                ) && 
                (
                    this.Indices == input.Indices ||
                    this.Indices.Equals(input.Indices)
                ) && 
                (
                    this.IndicesRealTime == input.IndicesRealTime ||
                    this.IndicesRealTime.Equals(input.IndicesRealTime)
                ) && 
                (
                    this.Industries == input.Industries ||
                    this.Industries.Equals(input.Industries)
                ) && 
                (
                    this.MarkitLoans == input.MarkitLoans ||
                    this.MarkitLoans.Equals(input.MarkitLoans)
                ) && 
                (
                    this.MutualFunds == input.MutualFunds ||
                    this.MutualFunds.Equals(input.MutualFunds)
                ) && 
                (
                    this.MutualFundsRealTime == input.MutualFundsRealTime ||
                    this.MutualFundsRealTime.Equals(input.MutualFundsRealTime)
                ) && 
                (
                    this.OwnershipHolders == input.OwnershipHolders ||
                    this.OwnershipHolders.Equals(input.OwnershipHolders)
                ) && 
                (
                    this.People == input.People ||
                    this.People.Equals(input.People)
                ) && 
                (
                    this.PrivateCompanies == input.PrivateCompanies ||
                    this.PrivateCompanies.Equals(input.PrivateCompanies)
                ) && 
                (
                    this.PevcFirms == input.PevcFirms ||
                    this.PevcFirms.Equals(input.PevcFirms)
                ) && 
                (
                    this.PevcFunds == input.PevcFunds ||
                    this.PevcFunds.Equals(input.PevcFunds)
                ) && 
                (
                    this.Regions == input.Regions ||
                    this.Regions.Equals(input.Regions)
                ) && 
                (
                    this.Yields == input.Yields ||
                    this.Yields.Equals(input.Yields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Equities.GetHashCode();
                hashCode = (hashCode * 59) + this.EquitiesRealTime.GetHashCode();
                hashCode = (hashCode * 59) + this.BankLoans.GetHashCode();
                hashCode = (hashCode * 59) + this.Commodities.GetHashCode();
                hashCode = (hashCode * 59) + this.CepBonds.GetHashCode();
                hashCode = (hashCode * 59) + this.Countries.GetHashCode();
                hashCode = (hashCode * 59) + this.Deals.GetHashCode();
                hashCode = (hashCode * 59) + this.EconomicReports.GetHashCode();
                hashCode = (hashCode * 59) + this.EconomicSeries.GetHashCode();
                hashCode = (hashCode * 59) + this.Etfs.GetHashCode();
                hashCode = (hashCode * 59) + this.EtfsRealTime.GetHashCode();
                hashCode = (hashCode * 59) + this.ExchangeRatesRealTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Bonds.GetHashCode();
                hashCode = (hashCode * 59) + this.Forex.GetHashCode();
                hashCode = (hashCode * 59) + this.Futures.GetHashCode();
                hashCode = (hashCode * 59) + this.Indices.GetHashCode();
                hashCode = (hashCode * 59) + this.IndicesRealTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Industries.GetHashCode();
                hashCode = (hashCode * 59) + this.MarkitLoans.GetHashCode();
                hashCode = (hashCode * 59) + this.MutualFunds.GetHashCode();
                hashCode = (hashCode * 59) + this.MutualFundsRealTime.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnershipHolders.GetHashCode();
                hashCode = (hashCode * 59) + this.People.GetHashCode();
                hashCode = (hashCode * 59) + this.PrivateCompanies.GetHashCode();
                hashCode = (hashCode * 59) + this.PevcFirms.GetHashCode();
                hashCode = (hashCode * 59) + this.PevcFunds.GetHashCode();
                hashCode = (hashCode * 59) + this.Regions.GetHashCode();
                hashCode = (hashCode * 59) + this.Yields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
