/*
 * ID Lookup API
 *
 * The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IDLookup.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IDLookup.Model
{
    /// <summary>
    /// Lookup Object
    /// </summary>
    [DataContract(Name = "lookupObject")]
    public partial class LookupObject : IEquatable<LookupObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LookupObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupObject" /> class.
        /// </summary>
        /// <param name="searchText">The string or keyword being searched on. (required).</param>
        /// <param name="datasets">Type of dataset (required).</param>
        public LookupObject(string searchText, List<FilterObjects> datasets)
        {
            // to ensure "searchText" is required (not null)
            if (searchText == null) {
                throw new ArgumentNullException("searchText is a required property for LookupObject and cannot be null");
            }
            this.SearchText = searchText;
            // to ensure "datasets" is required (not null)
            if (datasets == null) {
                throw new ArgumentNullException("datasets is a required property for LookupObject and cannot be null");
            }
            this.Datasets = datasets;
        }

        /// <summary>
        /// The string or keyword being searched on.
        /// </summary>
        /// <value>The string or keyword being searched on.</value>
        [DataMember(Name = "searchText", IsRequired = true, EmitDefaultValue = false)]
        public string SearchText { get; set; }

        /// <summary>
        /// Type of dataset
        /// </summary>
        /// <value>Type of dataset</value>
        [DataMember(Name = "datasets", IsRequired = true, EmitDefaultValue = false)]
        public List<FilterObjects> Datasets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LookupObject {\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("  Datasets: ").Append(Datasets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LookupObject);
        }

        /// <summary>
        /// Returns true if LookupObject instances are equal
        /// </summary>
        /// <param name="input">Instance of LookupObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LookupObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SearchText == input.SearchText ||
                    (this.SearchText != null &&
                    this.SearchText.Equals(input.SearchText))
                ) && 
                (
                    this.Datasets == input.Datasets ||
                    this.Datasets != null &&
                    input.Datasets != null &&
                    this.Datasets.SequenceEqual(input.Datasets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchText != null)
                {
                    hashCode = (hashCode * 59) + this.SearchText.GetHashCode();
                }
                if (this.Datasets != null)
                {
                    hashCode = (hashCode * 59) + this.Datasets.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
