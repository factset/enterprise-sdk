/*
 * Asset Cash Flow Projections API
 *
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.AssetCashFlowProjections.Client;
using FactSet.SDK.AssetCashFlowProjections.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.AssetCashFlowProjections.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve a document
        /// </summary>
        /// <remarks>
        /// Provides information about the document settings.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <returns>UpdateNewDocument</returns>
        UpdateNewDocument GetDocumentDetails(string documentPath);

        /// <summary>
        /// Retrieve a document
        /// </summary>
        /// <remarks>
        /// Provides information about the document settings.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <returns>ApiResponse of UpdateNewDocument</returns>
        ApiResponse<UpdateNewDocument> GetDocumentDetailsWithHttpInfo(string documentPath);
        /// <summary>
        /// Create new document based on existing document - Save as
        /// </summary>
        /// <remarks>
        /// This will create a new document based on existing one.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <returns>void</returns>
        void PostDocument(CreateNewDocument createNewDocument = default(CreateNewDocument));

        /// <summary>
        /// Create new document based on existing document - Save as
        /// </summary>
        /// <remarks>
        /// This will create a new document based on existing one.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostDocumentWithHttpInfo(CreateNewDocument createNewDocument = default(CreateNewDocument));
        /// <summary>
        /// Update existing document - Save
        /// </summary>
        /// <remarks>
        /// This will update existing document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <returns>void</returns>
        void PutDocument(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument));

        /// <summary>
        /// Update existing document - Save
        /// </summary>
        /// <remarks>
        /// This will update existing document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutDocumentWithHttpInfo(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve a document
        /// </summary>
        /// <remarks>
        /// Provides information about the document settings.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateNewDocument</returns>
        System.Threading.Tasks.Task<UpdateNewDocument> GetDocumentDetailsAsync(string documentPath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a document
        /// </summary>
        /// <remarks>
        /// Provides information about the document settings.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateNewDocument)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateNewDocument>> GetDocumentDetailsWithHttpInfoAsync(string documentPath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new document based on existing document - Save as
        /// </summary>
        /// <remarks>
        /// This will create a new document based on existing one.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostDocumentAsync(CreateNewDocument createNewDocument = default(CreateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new document based on existing document - Save as
        /// </summary>
        /// <remarks>
        /// This will create a new document based on existing one.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostDocumentWithHttpInfoAsync(CreateNewDocument createNewDocument = default(CreateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update existing document - Save
        /// </summary>
        /// <remarks>
        /// This will update existing document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutDocumentAsync(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update existing document - Save
        /// </summary>
        /// <remarks>
        /// This will update existing document.
        /// </remarks>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutDocumentWithHttpInfoAsync(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IDocumentsApiSync, IDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private FactSet.SDK.AssetCashFlowProjections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetDocumentDetailsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(UpdateNewDocument) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostDocumentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PutDocumentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.AssetCashFlowProjections.Client.Configuration.MergeConfigurations(
                FactSet.SDK.AssetCashFlowProjections.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.AssetCashFlowProjections.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.AssetCashFlowProjections.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.AssetCashFlowProjections.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.AssetCashFlowProjections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(FactSet.SDK.AssetCashFlowProjections.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.AssetCashFlowProjections.Client.Configuration.MergeConfigurations(
                FactSet.SDK.AssetCashFlowProjections.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.AssetCashFlowProjections.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.AssetCashFlowProjections.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.AssetCashFlowProjections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DocumentsApi(FactSet.SDK.AssetCashFlowProjections.Client.ISynchronousClient client, FactSet.SDK.AssetCashFlowProjections.Client.IAsynchronousClient asyncClient, FactSet.SDK.AssetCashFlowProjections.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.AssetCashFlowProjections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.AssetCashFlowProjections.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.AssetCashFlowProjections.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.AssetCashFlowProjections.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.AssetCashFlowProjections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve a document Provides information about the document settings.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <returns>UpdateNewDocument</returns>
        public UpdateNewDocument GetDocumentDetails(string documentPath)
        {
            var localVarResponse = GetDocumentDetailsWithHttpInfo(documentPath);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a document Provides information about the document settings.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <returns>ApiResponse of UpdateNewDocument</returns>
        public ApiResponse<UpdateNewDocument> GetDocumentDetailsWithHttpInfo(string documentPath)
        {
            // verify the required parameter 'documentPath' is set
            if (documentPath == null)
            {
                throw new FactSet.SDK.AssetCashFlowProjections.Client.ApiException(400, "Missing required parameter 'documentPath' when calling DocumentsApi->GetDocumentDetails");
            }

            FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentPath", FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.ParameterToString(documentPath)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetDocumentDetailsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            UpdateNewDocument>("/documents/{documentPath}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a document Provides information about the document settings.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateNewDocument</returns>
        public async System.Threading.Tasks.Task<UpdateNewDocument>GetDocumentDetailsAsync(string documentPath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetDocumentDetailsWithHttpInfoAsync(documentPath, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a document Provides information about the document settings.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateNewDocument)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<UpdateNewDocument>> GetDocumentDetailsWithHttpInfoAsync(string documentPath, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentPath' is set
            if (documentPath == null)
            {
                throw new FactSet.SDK.AssetCashFlowProjections.Client.ApiException(400, "Missing required parameter 'documentPath' when calling DocumentsApi->GetDocumentDetails");
            }


            FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentPath", FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.ParameterToString(documentPath)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetDocumentDetailsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UpdateNewDocument>("/documents/{documentPath}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDocumentDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new document based on existing document - Save as This will create a new document based on existing one.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <returns>void</returns>
        public void PostDocument(CreateNewDocument createNewDocument = default(CreateNewDocument))
        {
            PostDocumentWithHttpInfo(createNewDocument);
        }

        /// <summary>
        /// Create new document based on existing document - Save as This will create a new document based on existing one.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostDocumentWithHttpInfo(CreateNewDocument createNewDocument = default(CreateNewDocument))
        {
            FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNewDocument;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostDocumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create new document based on existing document - Save as This will create a new document based on existing one.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostDocumentAsync(CreateNewDocument createNewDocument = default(CreateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostDocumentWithHttpInfoAsync(createNewDocument, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create new document based on existing document - Save as This will create a new document based on existing one.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostDocumentWithHttpInfoAsync(CreateNewDocument createNewDocument = default(CreateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNewDocument;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostDocumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing document - Save This will update existing document.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <returns>void</returns>
        public void PutDocument(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument))
        {
            PutDocumentWithHttpInfo(documentPath, updateNewDocument);
        }

        /// <summary>
        /// Update existing document - Save This will update existing document.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutDocumentWithHttpInfo(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument))
        {
            // verify the required parameter 'documentPath' is set
            if (documentPath == null)
            {
                throw new FactSet.SDK.AssetCashFlowProjections.Client.ApiException(400, "Missing required parameter 'documentPath' when calling DocumentsApi->PutDocument");
            }

            FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentPath", FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.ParameterToString(documentPath)); // path parameter
            localVarRequestOptions.Data = updateNewDocument;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PutDocumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            Object>("/documents/{documentPath}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Update existing document - Save This will update existing document.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutDocumentAsync(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutDocumentWithHttpInfoAsync(documentPath, updateNewDocument, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update existing document - Save This will update existing document.
        /// </summary>
        /// <exception cref="FactSet.SDK.AssetCashFlowProjections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPath">Enter the path to existing document name</param>
        /// <param name="updateNewDocument"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutDocumentWithHttpInfoAsync(string documentPath, UpdateNewDocument updateNewDocument = default(UpdateNewDocument), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'documentPath' is set
            if (documentPath == null)
            {
                throw new FactSet.SDK.AssetCashFlowProjections.Client.ApiException(400, "Missing required parameter 'documentPath' when calling DocumentsApi->PutDocument");
            }


            FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.AssetCashFlowProjections.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("documentPath", FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.ParameterToString(documentPath)); // path parameter
            localVarRequestOptions.Data = updateNewDocument;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.AssetCashFlowProjections.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PutDocumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/documents/{documentPath}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
