/*
 * Asset Cash Flow Projections API
 *
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.AssetCashFlowProjections.Client.OpenAPIDateConverter;

namespace FactSet.SDK.AssetCashFlowProjections.Model
{
    /// <summary>
    /// Details required for uploading scenario files
    /// </summary>
    [DataContract(Name = "ClientScenariosUploadParameters")]
    public partial class ClientScenariosUploadParameters : IEquatable<ClientScenariosUploadParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientScenariosUploadParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientScenariosUploadParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientScenariosUploadParameters" /> class.
        /// </summary>
        /// <param name="fileName">Scenario file name including file extension. (required).</param>
        /// <param name="asOfDate">Scenario As of Date ( Please select a Date not later than Previous Close Date) (required).</param>
        /// <param name="overwrite">Flag to indicate if existing file needs to be overwritten. Please expect a 409 if the file already exists and the overwrite is not set to true. (default to false).</param>
        /// <param name="replaceSpecialCharacters">Flag to indicate if the special characters in the fileName can be replaced with underscore. Please expect a 400 if their exists some special characters in the filename and this parameter is not set to true. - &#x60;SpecialCharacters&#x60;: .^%~$!#{} ()&#39;&#x60;+,:/ (default to false).</param>
        public ClientScenariosUploadParameters(string fileName, DateTime asOfDate,bool overwrite = false, bool replaceSpecialCharacters = false)
        {
            // to ensure "fileName" is required (not null)
            if (fileName == null) {
                throw new ArgumentNullException("fileName is a required property for ClientScenariosUploadParameters and cannot be null");
            }
            this.FileName = fileName;
            this.AsOfDate = asOfDate;
            this.Overwrite = overwrite;
            this.ReplaceSpecialCharacters = replaceSpecialCharacters;
        }

        /// <summary>
        /// Scenario file name including file extension.
        /// </summary>
        /// <value>Scenario file name including file extension.</value>
        [DataMember(Name = "fileName", IsRequired = true, EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Scenario As of Date ( Please select a Date not later than Previous Close Date)
        /// </summary>
        /// <value>Scenario As of Date ( Please select a Date not later than Previous Close Date)</value>
        [DataMember(Name = "asOfDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// Flag to indicate if existing file needs to be overwritten. Please expect a 409 if the file already exists and the overwrite is not set to true.
        /// </summary>
        /// <value>Flag to indicate if existing file needs to be overwritten. Please expect a 409 if the file already exists and the overwrite is not set to true.</value>
        [DataMember(Name = "overwrite", EmitDefaultValue = true)]
        public bool Overwrite { get; set; }

        /// <summary>
        /// Flag to indicate if the special characters in the fileName can be replaced with underscore. Please expect a 400 if their exists some special characters in the filename and this parameter is not set to true. - &#x60;SpecialCharacters&#x60;: .^%~$!#{} ()&#39;&#x60;+,:/
        /// </summary>
        /// <value>Flag to indicate if the special characters in the fileName can be replaced with underscore. Please expect a 400 if their exists some special characters in the filename and this parameter is not set to true. - &#x60;SpecialCharacters&#x60;: .^%~$!#{} ()&#39;&#x60;+,:/</value>
        [DataMember(Name = "replaceSpecialCharacters", EmitDefaultValue = true)]
        public bool ReplaceSpecialCharacters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientScenariosUploadParameters {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  Overwrite: ").Append(Overwrite).Append("\n");
            sb.Append("  ReplaceSpecialCharacters: ").Append(ReplaceSpecialCharacters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientScenariosUploadParameters);
        }

        /// <summary>
        /// Returns true if ClientScenariosUploadParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientScenariosUploadParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientScenariosUploadParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.Overwrite == input.Overwrite ||
                    this.Overwrite.Equals(input.Overwrite)
                ) && 
                (
                    this.ReplaceSpecialCharacters == input.ReplaceSpecialCharacters ||
                    this.ReplaceSpecialCharacters.Equals(input.ReplaceSpecialCharacters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.AsOfDate != null)
                {
                    hashCode = (hashCode * 59) + this.AsOfDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Overwrite.GetHashCode();
                hashCode = (hashCode * 59) + this.ReplaceSpecialCharacters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FileName (string) maxLength
            if (this.FileName != null && this.FileName.Length > 41)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, length must be less than 41.", new [] { "FileName" });
            }

            // FileName (string) pattern
            Regex regexFileName = new Regex(@"^.*\\.(csv|scn|fac|rts|CSV|SCN|FAC|RTS)$", RegexOptions.CultureInvariant);
            if (false == regexFileName.Match(this.FileName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileName, must match a pattern of " + regexFileName, new [] { "FileName" });
            }

            yield break;
        }
    }

}
