/*
 * Asset Cash Flow Projections API
 *
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.AssetCashFlowProjections.Client.OpenAPIDateConverter;

namespace FactSet.SDK.AssetCashFlowProjections.Model
{
    /// <summary>
    /// Client upload status response parameters
    /// </summary>
    [DataContract(Name = "ClientUploadResponseParameters")]
    public partial class ClientUploadResponseParameters : IEquatable<ClientUploadResponseParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientUploadResponseParameters" /> class.
        /// </summary>
        /// <param name="uploadId">Unique Identifier for the file.</param>
        /// <param name="fileName">Actuarial Scenario file name.</param>
        /// <param name="signedUrl">Signed url to upload the scenarios file.</param>
        /// <param name="expirationTime">The signed URL remains valid for a duration of 4 hours and is usable until it becomes invalid or outdated..</param>
        public ClientUploadResponseParameters(string uploadId = default(string), string fileName = default(string), string signedUrl = default(string), DateTime expirationTime = default(DateTime))
        {
            this.UploadId = uploadId;
            this.FileName = fileName;
            this.SignedUrl = signedUrl;
            this.ExpirationTime = expirationTime;
        }

        /// <summary>
        /// Unique Identifier for the file
        /// </summary>
        /// <value>Unique Identifier for the file</value>
        [DataMember(Name = "uploadId", EmitDefaultValue = false)]
        public string UploadId { get; set; }

        /// <summary>
        /// Actuarial Scenario file name
        /// </summary>
        /// <value>Actuarial Scenario file name</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Signed url to upload the scenarios file
        /// </summary>
        /// <value>Signed url to upload the scenarios file</value>
        [DataMember(Name = "signedUrl", EmitDefaultValue = false)]
        public string SignedUrl { get; set; }

        /// <summary>
        /// The signed URL remains valid for a duration of 4 hours and is usable until it becomes invalid or outdated.
        /// </summary>
        /// <value>The signed URL remains valid for a duration of 4 hours and is usable until it becomes invalid or outdated.</value>
        [DataMember(Name = "expirationTime", EmitDefaultValue = false)]
        public DateTime ExpirationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientUploadResponseParameters {\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  SignedUrl: ").Append(SignedUrl).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientUploadResponseParameters);
        }

        /// <summary>
        /// Returns true if ClientUploadResponseParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientUploadResponseParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientUploadResponseParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.SignedUrl == input.SignedUrl ||
                    (this.SignedUrl != null &&
                    this.SignedUrl.Equals(input.SignedUrl))
                ) && 
                (
                    this.ExpirationTime == input.ExpirationTime ||
                    (this.ExpirationTime != null &&
                    this.ExpirationTime.Equals(input.ExpirationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UploadId != null)
                {
                    hashCode = (hashCode * 59) + this.UploadId.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                if (this.SignedUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SignedUrl.GetHashCode();
                }
                if (this.ExpirationTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
