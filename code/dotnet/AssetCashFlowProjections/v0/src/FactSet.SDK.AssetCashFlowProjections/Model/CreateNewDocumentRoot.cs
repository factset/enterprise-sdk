/*
 * Asset Cash Flow Projections API
 *
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.AssetCashFlowProjections.Client.OpenAPIDateConverter;

namespace FactSet.SDK.AssetCashFlowProjections.Model
{
    /// <summary>
    /// CreateNewDocumentRoot
    /// </summary>
    [DataContract(Name = "CreateNewDocumentRoot")]
    public partial class CreateNewDocumentRoot : IEquatable<CreateNewDocumentRoot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNewDocumentRoot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateNewDocumentRoot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNewDocumentRoot" /> class.
        /// </summary>
        /// <param name="asOfDate">As of Date should be in YYYY-MM-DD format..</param>
        /// <param name="existingDocumentName">Existing document name (required).</param>
        /// <param name="newDocumentName">New document name (required).</param>
        /// <param name="portfolios">Portfolios.</param>
        /// <param name="scenarios">Scenarios - Actuarial Scenarios input requires extension whereas Fixed Income Scenario Editor Scenarios won’t have any extension .</param>
        public CreateNewDocumentRoot(string existingDocumentName, string newDocumentName,DateTime asOfDate = default(DateTime), List<string> portfolios = default(List<string>), List<string> scenarios = default(List<string>))
        {
            // to ensure "existingDocumentName" is required (not null)
            if (existingDocumentName == null) {
                throw new ArgumentNullException("existingDocumentName is a required property for CreateNewDocumentRoot and cannot be null");
            }
            this.ExistingDocumentName = existingDocumentName;
            // to ensure "newDocumentName" is required (not null)
            if (newDocumentName == null) {
                throw new ArgumentNullException("newDocumentName is a required property for CreateNewDocumentRoot and cannot be null");
            }
            this.NewDocumentName = newDocumentName;
            this.AsOfDate = asOfDate;
            this.Portfolios = portfolios;
            this.Scenarios = scenarios;
        }

        /// <summary>
        /// As of Date should be in YYYY-MM-DD format.
        /// </summary>
        /// <value>As of Date should be in YYYY-MM-DD format.</value>
        [DataMember(Name = "asOfDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// Existing document name
        /// </summary>
        /// <value>Existing document name</value>
        [DataMember(Name = "existingDocumentName", IsRequired = true, EmitDefaultValue = false)]
        public string ExistingDocumentName { get; set; }

        /// <summary>
        /// New document name
        /// </summary>
        /// <value>New document name</value>
        [DataMember(Name = "newDocumentName", IsRequired = true, EmitDefaultValue = false)]
        public string NewDocumentName { get; set; }

        /// <summary>
        /// Portfolios
        /// </summary>
        /// <value>Portfolios</value>
        [DataMember(Name = "portfolios", EmitDefaultValue = false)]
        public List<string> Portfolios { get; set; }

        /// <summary>
        /// Scenarios - Actuarial Scenarios input requires extension whereas Fixed Income Scenario Editor Scenarios won’t have any extension 
        /// </summary>
        /// <value>Scenarios - Actuarial Scenarios input requires extension whereas Fixed Income Scenario Editor Scenarios won’t have any extension </value>
        [DataMember(Name = "scenarios", EmitDefaultValue = false)]
        public List<string> Scenarios { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateNewDocumentRoot {\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  ExistingDocumentName: ").Append(ExistingDocumentName).Append("\n");
            sb.Append("  NewDocumentName: ").Append(NewDocumentName).Append("\n");
            sb.Append("  Portfolios: ").Append(Portfolios).Append("\n");
            sb.Append("  Scenarios: ").Append(Scenarios).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateNewDocumentRoot);
        }

        /// <summary>
        /// Returns true if CreateNewDocumentRoot instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateNewDocumentRoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateNewDocumentRoot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.ExistingDocumentName == input.ExistingDocumentName ||
                    (this.ExistingDocumentName != null &&
                    this.ExistingDocumentName.Equals(input.ExistingDocumentName))
                ) && 
                (
                    this.NewDocumentName == input.NewDocumentName ||
                    (this.NewDocumentName != null &&
                    this.NewDocumentName.Equals(input.NewDocumentName))
                ) && 
                (
                    this.Portfolios == input.Portfolios ||
                    this.Portfolios != null &&
                    input.Portfolios != null &&
                    this.Portfolios.SequenceEqual(input.Portfolios)
                ) && 
                (
                    this.Scenarios == input.Scenarios ||
                    this.Scenarios != null &&
                    input.Scenarios != null &&
                    this.Scenarios.SequenceEqual(input.Scenarios)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsOfDate != null)
                {
                    hashCode = (hashCode * 59) + this.AsOfDate.GetHashCode();
                }
                if (this.ExistingDocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.ExistingDocumentName.GetHashCode();
                }
                if (this.NewDocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.NewDocumentName.GetHashCode();
                }
                if (this.Portfolios != null)
                {
                    hashCode = (hashCode * 59) + this.Portfolios.GetHashCode();
                }
                if (this.Scenarios != null)
                {
                    hashCode = (hashCode * 59) + this.Scenarios.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
