/*
 * Asset Cash Flow Projections API
 *
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.AssetCashFlowProjections.Client.OpenAPIDateConverter;

namespace FactSet.SDK.AssetCashFlowProjections.Model
{
    /// <summary>
    /// Uploaded status response parameters
    /// </summary>
    [DataContract(Name = "UploadStatusResponseParameters")]
    public partial class UploadStatusResponseParameters : IEquatable<UploadStatusResponseParameters>, IValidatableObject
    {
        /// <summary>
        /// The ACFP status of the uploaded file, can be one of the following: - &#x60;pending&#x60;: File validation is pending. - &#x60;validating&#x60;:File is being validated. - &#x60;error&#x60;: File failed validation.  - &#x60;replicating&#x60;: File is being copied. - &#x60;good&#x60;: File is successfully validated. - &#x60;preparing&#x60;: File is being parsed.  - &#x60;uninitiated&#x60;: File upload is not initiated.
        /// </summary>
        /// <value>The ACFP status of the uploaded file, can be one of the following: - &#x60;pending&#x60;: File validation is pending. - &#x60;validating&#x60;:File is being validated. - &#x60;error&#x60;: File failed validation.  - &#x60;replicating&#x60;: File is being copied. - &#x60;good&#x60;: File is successfully validated. - &#x60;preparing&#x60;: File is being parsed.  - &#x60;uninitiated&#x60;: File upload is not initiated.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AcfpStatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Validating for value: validating
            /// </summary>
            [EnumMember(Value = "validating")]
            Validating = 2,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 3,

            /// <summary>
            /// Enum Replicating for value: replicating
            /// </summary>
            [EnumMember(Value = "replicating")]
            Replicating = 4,

            /// <summary>
            /// Enum Good for value: good
            /// </summary>
            [EnumMember(Value = "good")]
            Good = 5,

            /// <summary>
            /// Enum Preparing for value: preparing
            /// </summary>
            [EnumMember(Value = "preparing")]
            Preparing = 6,

            /// <summary>
            /// Enum Uninitiated for value: uninitiated
            /// </summary>
            [EnumMember(Value = "uninitiated")]
            Uninitiated = 7

        }


        /// <summary>
        /// The ACFP status of the uploaded file, can be one of the following: - &#x60;pending&#x60;: File validation is pending. - &#x60;validating&#x60;:File is being validated. - &#x60;error&#x60;: File failed validation.  - &#x60;replicating&#x60;: File is being copied. - &#x60;good&#x60;: File is successfully validated. - &#x60;preparing&#x60;: File is being parsed.  - &#x60;uninitiated&#x60;: File upload is not initiated.
        /// </summary>
        /// <value>The ACFP status of the uploaded file, can be one of the following: - &#x60;pending&#x60;: File validation is pending. - &#x60;validating&#x60;:File is being validated. - &#x60;error&#x60;: File failed validation.  - &#x60;replicating&#x60;: File is being copied. - &#x60;good&#x60;: File is successfully validated. - &#x60;preparing&#x60;: File is being parsed.  - &#x60;uninitiated&#x60;: File upload is not initiated.</value>
        [DataMember(Name = "acfpStatus", EmitDefaultValue = false)]
        public AcfpStatusEnum? AcfpStatus { get; set; }
        /// <summary>
        /// The status of the uploaded file, can be one of the following:
        /// </summary>
        /// <value>The status of the uploaded file, can be one of the following:</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,

            /// <summary>
            /// Enum Executing for value: executing
            /// </summary>
            [EnumMember(Value = "executing")]
            Executing = 2,

            /// <summary>
            /// Enum Created for value: created
            /// </summary>
            [EnumMember(Value = "created")]
            Created = 3

        }


        /// <summary>
        /// The status of the uploaded file, can be one of the following:
        /// </summary>
        /// <value>The status of the uploaded file, can be one of the following:</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Actuarial Scenario File Type
        /// </summary>
        /// <value>Actuarial Scenario File Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum TillinghastActuarialSoftwareTAS for value: Tillinghast Actuarial Software (TAS)
            /// </summary>
            [EnumMember(Value = "Tillinghast Actuarial Software (TAS)")]
            TillinghastActuarialSoftwareTAS = 1,

            /// <summary>
            /// Enum MillimansMGALFAALFA for value: Milliman&#39;s MG-ALFA (ALFA)
            /// </summary>
            [EnumMember(Value = "Milliman's MG-ALFA (ALFA)")]
            MillimansMGALFAALFA = 2,

            /// <summary>
            /// Enum SungardIWorksProphet for value: Sungard iWorks Prophet
            /// </summary>
            [EnumMember(Value = "Sungard iWorks Prophet")]
            SungardIWorksProphet = 3,

            /// <summary>
            /// Enum FactSet for value: FactSet
            /// </summary>
            [EnumMember(Value = "FactSet")]
            FactSet = 4

        }


        /// <summary>
        /// Actuarial Scenario File Type
        /// </summary>
        /// <value>Actuarial Scenario File Type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadStatusResponseParameters" /> class.
        /// </summary>
        /// <param name="acfpStatus">The ACFP status of the uploaded file, can be one of the following: - &#x60;pending&#x60;: File validation is pending. - &#x60;validating&#x60;:File is being validated. - &#x60;error&#x60;: File failed validation.  - &#x60;replicating&#x60;: File is being copied. - &#x60;good&#x60;: File is successfully validated. - &#x60;preparing&#x60;: File is being parsed.  - &#x60;uninitiated&#x60;: File upload is not initiated..</param>
        /// <param name="asOfDate">Scenario As of Date.</param>
        /// <param name="fileName">Actuarial Scenario file name.</param>
        /// <param name="numberOfScenarios">Number of scenarios that are within a scenario file.</param>
        /// <param name="status">The status of the uploaded file, can be one of the following:.</param>
        /// <param name="type">Actuarial Scenario File Type.</param>
        /// <param name="uploadDateTime">The time stamp when the file is uploaded.</param>
        /// <param name="uploadId">Unique Identifier for the file.</param>
        public UploadStatusResponseParameters(AcfpStatusEnum? acfpStatus = default(AcfpStatusEnum?), DateTime asOfDate = default(DateTime), string fileName = default(string), decimal numberOfScenarios = default(decimal), StatusEnum? status = default(StatusEnum?), TypeEnum? type = default(TypeEnum?), DateTime uploadDateTime = default(DateTime), string uploadId = default(string))
        {
            this.AcfpStatus = acfpStatus;
            this.AsOfDate = asOfDate;
            this.FileName = fileName;
            this.NumberOfScenarios = numberOfScenarios;
            this.Status = status;
            this.Type = type;
            this.UploadDateTime = uploadDateTime;
            this.UploadId = uploadId;
        }

        /// <summary>
        /// Scenario As of Date
        /// </summary>
        /// <value>Scenario As of Date</value>
        [DataMember(Name = "asOfDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// Actuarial Scenario file name
        /// </summary>
        /// <value>Actuarial Scenario file name</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Number of scenarios that are within a scenario file
        /// </summary>
        /// <value>Number of scenarios that are within a scenario file</value>
        [DataMember(Name = "numberOfScenarios", EmitDefaultValue = false)]
        public decimal NumberOfScenarios { get; set; }

        /// <summary>
        /// The time stamp when the file is uploaded
        /// </summary>
        /// <value>The time stamp when the file is uploaded</value>
        [DataMember(Name = "uploadDateTime", EmitDefaultValue = false)]
        public DateTime UploadDateTime { get; set; }

        /// <summary>
        /// Unique Identifier for the file
        /// </summary>
        /// <value>Unique Identifier for the file</value>
        [DataMember(Name = "uploadId", EmitDefaultValue = false)]
        public string UploadId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UploadStatusResponseParameters {\n");
            sb.Append("  AcfpStatus: ").Append(AcfpStatus).Append("\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  NumberOfScenarios: ").Append(NumberOfScenarios).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UploadDateTime: ").Append(UploadDateTime).Append("\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadStatusResponseParameters);
        }

        /// <summary>
        /// Returns true if UploadStatusResponseParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadStatusResponseParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadStatusResponseParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AcfpStatus == input.AcfpStatus ||
                    this.AcfpStatus.Equals(input.AcfpStatus)
                ) && 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.NumberOfScenarios == input.NumberOfScenarios ||
                    this.NumberOfScenarios.Equals(input.NumberOfScenarios)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.UploadDateTime == input.UploadDateTime ||
                    (this.UploadDateTime != null &&
                    this.UploadDateTime.Equals(input.UploadDateTime))
                ) && 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AcfpStatus.GetHashCode();
                if (this.AsOfDate != null)
                {
                    hashCode = (hashCode * 59) + this.AsOfDate.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfScenarios.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.UploadDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UploadDateTime.GetHashCode();
                }
                if (this.UploadId != null)
                {
                    hashCode = (hashCode * 59) + this.UploadId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
