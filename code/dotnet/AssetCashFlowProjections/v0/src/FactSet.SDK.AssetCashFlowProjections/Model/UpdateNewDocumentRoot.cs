/*
 * Asset Cash Flow Projections API
 *
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.AssetCashFlowProjections.Client.OpenAPIDateConverter;

namespace FactSet.SDK.AssetCashFlowProjections.Model
{
    /// <summary>
    /// UpdateNewDocumentRoot
    /// </summary>
    [DataContract(Name = "UpdateNewDocumentRoot")]
    public partial class UpdateNewDocumentRoot : IEquatable<UpdateNewDocumentRoot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNewDocumentRoot" /> class.
        /// </summary>
        /// <param name="asOfDate">As of Date should be in YYYY-MM-DD format..</param>
        /// <param name="portfolios">Portfolio.</param>
        /// <param name="scenarios">Scenario.</param>
        public UpdateNewDocumentRoot(DateTime asOfDate = default(DateTime), List<string> portfolios = default(List<string>), List<string> scenarios = default(List<string>))
        {
            this.AsOfDate = asOfDate;
            this.Portfolios = portfolios;
            this.Scenarios = scenarios;
        }

        /// <summary>
        /// As of Date should be in YYYY-MM-DD format.
        /// </summary>
        /// <value>As of Date should be in YYYY-MM-DD format.</value>
        [DataMember(Name = "asOfDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AsOfDate { get; set; }

        /// <summary>
        /// Portfolio
        /// </summary>
        /// <value>Portfolio</value>
        [DataMember(Name = "portfolios", EmitDefaultValue = false)]
        public List<string> Portfolios { get; set; }

        /// <summary>
        /// Scenario
        /// </summary>
        /// <value>Scenario</value>
        [DataMember(Name = "scenarios", EmitDefaultValue = false)]
        public List<string> Scenarios { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateNewDocumentRoot {\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  Portfolios: ").Append(Portfolios).Append("\n");
            sb.Append("  Scenarios: ").Append(Scenarios).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateNewDocumentRoot);
        }

        /// <summary>
        /// Returns true if UpdateNewDocumentRoot instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateNewDocumentRoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNewDocumentRoot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.Portfolios == input.Portfolios ||
                    this.Portfolios != null &&
                    input.Portfolios != null &&
                    this.Portfolios.SequenceEqual(input.Portfolios)
                ) && 
                (
                    this.Scenarios == input.Scenarios ||
                    this.Scenarios != null &&
                    input.Scenarios != null &&
                    this.Scenarios.SequenceEqual(input.Scenarios)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsOfDate != null)
                {
                    hashCode = (hashCode * 59) + this.AsOfDate.GetHashCode();
                }
                if (this.Portfolios != null)
                {
                    hashCode = (hashCode * 59) + this.Portfolios.GetHashCode();
                }
                if (this.Scenarios != null)
                {
                    hashCode = (hashCode * 59) + this.Scenarios.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
