/*
 * Chart Generation Service
 *
 * This is a service for generating charts in a node environment that were created using web charting and get back images in form of `PNGs` and `JPEGs` as response.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ChartGenerationService.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ChartGenerationService.Model
{
    /// <summary>
    /// ErrorResponse
    /// </summary>
    [DataContract(Name = "ErrorResponse")]
    public partial class ErrorResponse : IEquatable<ErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Error
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorEnum
        {
            /// <summary>
            /// Enum MissingChartDocument for value: Missing chart document
            /// </summary>
            [EnumMember(Value = "Missing chart document")]
            MissingChartDocument = 1,

            /// <summary>
            /// Enum FailedToFetchSavedChartDocument for value: Failed to fetch saved chart document
            /// </summary>
            [EnumMember(Value = "Failed to fetch saved chart document")]
            FailedToFetchSavedChartDocument = 2,

            /// <summary>
            /// Enum InvalidChartWidth for value: Invalid chart width
            /// </summary>
            [EnumMember(Value = "Invalid chart width")]
            InvalidChartWidth = 3,

            /// <summary>
            /// Enum InvalidChartHeight for value: Invalid chart height
            /// </summary>
            [EnumMember(Value = "Invalid chart height")]
            InvalidChartHeight = 4,

            /// <summary>
            /// Enum InvalidShowEolLabelsOption for value: Invalid showEolLabels option
            /// </summary>
            [EnumMember(Value = "Invalid showEolLabels option")]
            InvalidShowEolLabelsOption = 5,

            /// <summary>
            /// Enum InvalidShowFooterOption for value: Invalid show footer option
            /// </summary>
            [EnumMember(Value = "Invalid show footer option")]
            InvalidShowFooterOption = 6,

            /// <summary>
            /// Enum InvalidDisplayFrequencyOption for value: Invalid display frequency option
            /// </summary>
            [EnumMember(Value = "Invalid display frequency option")]
            InvalidDisplayFrequencyOption = 7,

            /// <summary>
            /// Enum InvalidFileType for value: Invalid file type
            /// </summary>
            [EnumMember(Value = "Invalid file type")]
            InvalidFileType = 8,

            /// <summary>
            /// Enum InvalidFrequency for value: Invalid frequency
            /// </summary>
            [EnumMember(Value = "Invalid frequency")]
            InvalidFrequency = 9,

            /// <summary>
            /// Enum InvalidTimezone for value: Invalid timezone
            /// </summary>
            [EnumMember(Value = "Invalid timezone")]
            InvalidTimezone = 10,

            /// <summary>
            /// Enum InvalidTicker for value: Invalid ticker
            /// </summary>
            [EnumMember(Value = "Invalid ticker")]
            InvalidTicker = 11,

            /// <summary>
            /// Enum InvalidChartTitle for value: Invalid chart title
            /// </summary>
            [EnumMember(Value = "Invalid chart title")]
            InvalidChartTitle = 12

        }


        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public ErrorEnum? Error { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        /// <param name="error">error.</param>
        /// <param name="errors">errors.</param>
        public ErrorResponse(ErrorEnum? error = default(ErrorEnum?), List<ChartErrorResponseObject> errors = default(List<ChartErrorResponseObject>))
        {
            this.Error = error;
            this.Errors = errors;
        }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<ChartErrorResponseObject> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorResponse);
        }

        /// <summary>
        /// Returns true if ErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Error == input.Error ||
                    this.Error.Equals(input.Error)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Error.GetHashCode();
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
