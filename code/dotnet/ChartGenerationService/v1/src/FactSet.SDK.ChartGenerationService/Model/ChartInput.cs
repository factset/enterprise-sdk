/*
 * Chart Generation Service
 *
 * This is a service for generating charts in a node environment that were created using web charting and get back images in form of `PNGs` and `JPEGs` as response.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.ChartGenerationService.Client.OpenAPIDateConverter;

namespace FactSet.SDK.ChartGenerationService.Model
{
    /// <summary>
    /// ChartInput
    /// </summary>
    [DataContract(Name = "ChartInput")]
    public partial class ChartInput : IEquatable<ChartInput>, IValidatableObject
    {
        /// <summary>
        /// How to apply the additional input. Would be often via query parameter which can be appended to the request with &amp;
        /// </summary>
        /// <value>How to apply the additional input. Would be often via query parameter which can be appended to the request with &amp;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InEnum
        {
            /// <summary>
            /// Enum Query for value: query
            /// </summary>
            [EnumMember(Value = "query")]
            Query = 1,

            /// <summary>
            /// Enum Param for value: param
            /// </summary>
            [EnumMember(Value = "param")]
            Param = 2

        }


        /// <summary>
        /// How to apply the additional input. Would be often via query parameter which can be appended to the request with &amp;
        /// </summary>
        /// <value>How to apply the additional input. Would be often via query parameter which can be appended to the request with &amp;</value>
        [DataMember(Name = "in", EmitDefaultValue = false)]
        public InEnum? In { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartInput" /> class.
        /// </summary>
        /// <param name="_in">How to apply the additional input. Would be often via query parameter which can be appended to the request with &amp;.</param>
        /// <param name="name">The name of the parameter.</param>
        /// <param name="required">Whether or not the parameter is required to be specified to get the chart image..</param>
        /// <param name="description">A short description of the input and its use.</param>
        /// <param name="type">The type of value expected for the input.</param>
        /// <param name="example">An example value for the input.</param>
        public ChartInput(InEnum? _in = default(InEnum?), string name = default(string), bool required = default(bool), string description = default(string), string type = default(string), string example = default(string))
        {
            this.In = _in;
            this.Name = name;
            this.Required = required;
            this.Description = description;
            this.Type = type;
            this.Example = example;
        }

        /// <summary>
        /// The name of the parameter
        /// </summary>
        /// <value>The name of the parameter</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether or not the parameter is required to be specified to get the chart image.
        /// </summary>
        /// <value>Whether or not the parameter is required to be specified to get the chart image.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// A short description of the input and its use
        /// </summary>
        /// <value>A short description of the input and its use</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The type of value expected for the input
        /// </summary>
        /// <value>The type of value expected for the input</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// An example value for the input
        /// </summary>
        /// <value>An example value for the input</value>
        [DataMember(Name = "example", EmitDefaultValue = false)]
        public string Example { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChartInput {\n");
            sb.Append("  In: ").Append(In).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Example: ").Append(Example).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChartInput);
        }

        /// <summary>
        /// Returns true if ChartInput instances are equal
        /// </summary>
        /// <param name="input">Instance of ChartInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.In == input.In ||
                    this.In.Equals(input.In)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Example == input.Example ||
                    (this.Example != null &&
                    this.Example.Equals(input.Example))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.In.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Example != null)
                {
                    hashCode = (hashCode * 59) + this.Example.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
