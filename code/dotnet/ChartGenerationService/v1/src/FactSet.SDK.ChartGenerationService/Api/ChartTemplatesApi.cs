/*
 * Chart Generation Service
 *
 * This is a service for generating charts in a node environment that were created using web charting and get back images in form of `PNGs` and `JPEGs` as response.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.ChartGenerationService.Client;
using FactSet.SDK.ChartGenerationService.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.ChartGenerationService.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChartTemplatesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of chart categories
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all chart categories with getCategoryList() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<string></returns>
        List<string> GetCategoryList();

        /// <summary>
        /// Get a list of chart categories
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all chart categories with getCategoryList() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<string></returns>
        ApiResponse<List<string>> GetCategoryListWithHttpInfo();
        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service.
        /// </summary>
        /// <remarks>
        /// You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <returns>List<CategoryChartListErrorObject></returns>
        List<CategoryChartListErrorObject> GetChartList(string categories = default(string));

        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service.
        /// </summary>
        /// <remarks>
        /// You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <returns>ApiResponse of List<CategoryChartListErrorObject></returns>
        ApiResponse<List<CategoryChartListErrorObject>> GetChartListWithHttpInfo(string categories = default(string));
        /// <summary>
        /// Get chart image back in PNG or JPEG formats
        /// </summary>
        /// <remarks>
        /// Get a chart image in PNG or JPEG formats with the images() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream Images(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?));

        /// <summary>
        /// Get chart image back in PNG or JPEG formats
        /// </summary>
        /// <remarks>
        /// Get a chart image in PNG or JPEG formats with the images() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ImagesWithHttpInfo(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChartTemplatesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of chart categories
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all chart categories with getCategoryList() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetCategoryListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of chart categories
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all chart categories with getCategoryList() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<string>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetCategoryListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service.
        /// </summary>
        /// <remarks>
        /// You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CategoryChartListErrorObject&gt;</returns>
        System.Threading.Tasks.Task<List<CategoryChartListErrorObject>> GetChartListAsync(string categories = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service.
        /// </summary>
        /// <remarks>
        /// You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<CategoryChartListErrorObject>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CategoryChartListErrorObject>>> GetChartListWithHttpInfoAsync(string categories = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get chart image back in PNG or JPEG formats
        /// </summary>
        /// <remarks>
        /// Get a chart image in PNG or JPEG formats with the images() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ImagesAsync(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get chart image back in PNG or JPEG formats
        /// </summary>
        /// <remarks>
        /// Get a chart image in PNG or JPEG formats with the images() API call.
        /// </remarks>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ImagesWithHttpInfoAsync(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChartTemplatesApi : IChartTemplatesApiSync, IChartTemplatesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChartTemplatesApi : IChartTemplatesApi
    {
        private FactSet.SDK.ChartGenerationService.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<string>) },
            { (HttpStatusCode)400, typeof(CategoriesErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetChartListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<CategoryChartListErrorObject>) },
            { (HttpStatusCode)400, typeof(ChartListErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> ImagesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(System.IO.Stream) },
            { (HttpStatusCode)400, typeof(ErrorResponse) },
            { (HttpStatusCode)401, typeof(UnauthorizedResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChartTemplatesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartTemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChartTemplatesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.ChartGenerationService.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ChartGenerationService.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.ChartGenerationService.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.ChartGenerationService.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ChartGenerationService.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.ChartGenerationService.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartTemplatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChartTemplatesApi(FactSet.SDK.ChartGenerationService.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.ChartGenerationService.Client.Configuration.MergeConfigurations(
                FactSet.SDK.ChartGenerationService.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.ChartGenerationService.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.ChartGenerationService.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.ChartGenerationService.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChartTemplatesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChartTemplatesApi(FactSet.SDK.ChartGenerationService.Client.ISynchronousClient client, FactSet.SDK.ChartGenerationService.Client.IAsynchronousClient asyncClient, FactSet.SDK.ChartGenerationService.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.ChartGenerationService.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.ChartGenerationService.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.ChartGenerationService.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.ChartGenerationService.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.ChartGenerationService.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a list of chart categories Retrieve a list of all chart categories with getCategoryList() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<string></returns>
        public List<string> GetCategoryList()
        {
            var localVarResponse = GetCategoryListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of chart categories Retrieve a list of all chart categories with getCategoryList() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> GetCategoryListWithHttpInfo()
        {
            FactSet.SDK.ChartGenerationService.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ChartGenerationService.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ChartGenerationService.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<string>>("/catalog/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a list of chart categories Retrieve a list of all chart categories with getCategoryList() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>>GetCategoryListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryListWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of chart categories Retrieve a list of all chart categories with getCategoryList() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetCategoryListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ChartGenerationService.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ChartGenerationService.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ChartGenerationService.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/catalog/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service. You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <returns>List<CategoryChartListErrorObject></returns>
        public List<CategoryChartListErrorObject> GetChartList(string categories = default(string))
        {
            var localVarResponse = GetChartListWithHttpInfo(categories);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service. You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <returns>ApiResponse of List&lt;CategoryChartListErrorObject&gt;</returns>
        public ApiResponse<List<CategoryChartListErrorObject>> GetChartListWithHttpInfo(string categories = default(string))
        {
            FactSet.SDK.ChartGenerationService.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ChartGenerationService.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ChartGenerationService.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetChartListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<CategoryChartListErrorObject>>("/catalog/charts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service. You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CategoryChartListErrorObject&gt;</returns>
        public async System.Threading.Tasks.Task<List<CategoryChartListErrorObject>>GetChartListAsync(string categories = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetChartListWithHttpInfoAsync(categories, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of chart templates that can be used for getting the image from the service. You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categories">A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CategoryChartListErrorObject&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<CategoryChartListErrorObject>>> GetChartListWithHttpInfoAsync(string categories = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.ChartGenerationService.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ChartGenerationService.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ChartGenerationService.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetChartListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CategoryChartListErrorObject>>("/catalog/charts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChartList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get chart image back in PNG or JPEG formats Get a chart image in PNG or JPEG formats with the images() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream Images(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?))
        {
            var localVarResponse = ImagesWithHttpInfo(chart, ids, sd, ed, width, height, freq, ccy, split, spin, cal, title, fontSize, type, gridLines, decimalPrecision);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart image back in PNG or JPEG formats Get a chart image in PNG or JPEG formats with the images() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ImagesWithHttpInfo(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?))
        {
            // verify the required parameter 'chart' is set
            if (chart == null)
            {
                throw new FactSet.SDK.ChartGenerationService.Client.ApiException(400, "Missing required parameter 'chart' when calling ChartTemplatesApi->Images");
            }

            FactSet.SDK.ChartGenerationService.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ChartGenerationService.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "img/png",
                "img/jpeg",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "chart", chart));
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "sd", sd));
            }
            if (ed != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "ed", ed));
            }
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (freq != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "freq", freq));
            }
            if (ccy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "ccy", ccy));
            }
            if (split != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "split", split));
            }
            if (spin != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "spin", spin));
            }
            if (cal != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "cal", cal));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (fontSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "fontSize", fontSize));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (gridLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "gridLines", gridLines));
            }
            if (decimalPrecision != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "decimalPrecision", decimalPrecision));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ChartGenerationService.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = ImagesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            System.IO.Stream>("/image", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Images", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get chart image back in PNG or JPEG formats Get a chart image in PNG or JPEG formats with the images() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream>ImagesAsync(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await ImagesWithHttpInfoAsync(chart, ids, sd, ed, width, height, freq, ccy, split, spin, cal, title, fontSize, type, gridLines, decimalPrecision, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get chart image back in PNG or JPEG formats Get a chart image in PNG or JPEG formats with the images() API call.
        /// </summary>
        /// <exception cref="FactSet.SDK.ChartGenerationService.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chart">Path to the saved chart. For any of the default charts, the option should be &#x60;categoryName + &#39;/&#39; + chartName&#x60;. For charts under the Client or Personal directories, the option should be &#x60;directoryName + &#39;:/&#39; + pathTotheChart&#x60;.  </param>
        /// <param name="ids">List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker. (optional)</param>
        /// <param name="sd">Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in &#x60;YYYYMMDD&#x60; format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \&quot;zero date\&quot; is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** &#x60;0D&#x60; is the most recent trading day, &#x60;-1D&#x60; is one trading day prior  **M:** &#x60;0M&#x60; is the last trading day of the most recent month, &#x60;-1M&#x60; is the last trading day of the prior month  **AY:** &#x60;0AY&#x60; is the most recent trading day, &#x60;-1AY&#x60; is one actual year (365 days) prior  **Y:** &#x60;0Y&#x60; is the last trading day of the company&#39;s most recent fiscal year, &#x60;-1Y&#x60; is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f). (optional)</param>
        /// <param name="ed">Option for overriding the endDate of the chart. For absolute dates provide a string in &#x60;YYYYMMDD&#x60; format. We can also specify relative date options as described in the above &#x60;sd&#x60; option. (optional)</param>
        /// <param name="width">Option for setting the width of the image (optional, default to 1056)</param>
        /// <param name="height">Option for setting the height of the image (optional, default to 816)</param>
        /// <param name="freq">A shorthand string for the overall frequency of the chart like &#x60;D&#x60; (daily), &#x60;W&#x60; (weekly), &#x60;Y&#x60; (yearly) and &#x60;Q&#x60; (Quarterly). This will default to frequency stored in the document. (optional)</param>
        /// <param name="ccy">Currency ISO code for the overall currency of the chart. The API doesn&#39;t allow per series currency at this point in time. (optional)</param>
        /// <param name="split">Option to specify the splits adjustment (optional)</param>
        /// <param name="spin">Numeric option to specify the spinOffs adjustment. Possible options include &#x60;0&#x60; (When we only want spits adjustment), &#x60;1&#x60; (spinOffs), &#x60;4&#x60; (spinOffs and cash dividends) and &#x60;9&#x60; (No adjustments) (optional)</param>
        /// <param name="cal">Option for the calendarType of the chart (optional, default to local)</param>
        /// <param name="title">Option to customize the title. If you don&#39;t customize the title, then it displays by default the security name. (optional)</param>
        /// <param name="fontSize">Option to adjust chart&#39;s fontSize (optional)</param>
        /// <param name="type">The type of image to be generated by the service (optional, default to png)</param>
        /// <param name="gridLines">Option to toggle gridLines on/off on the chart (optional, default to true)</param>
        /// <param name="decimalPrecision">Option to add custom decimal precision on the chart (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ImagesWithHttpInfoAsync(string chart, string ids = default(string), string sd = default(string), string ed = default(string), long? width = default(long?), long? height = default(long?), string freq = default(string), string ccy = default(string), string split = default(string), decimal? spin = default(decimal?), string cal = default(string), string title = default(string), decimal? fontSize = default(decimal?), string type = default(string), bool? gridLines = default(bool?), decimal? decimalPrecision = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chart' is set
            if (chart == null)
            {
                throw new FactSet.SDK.ChartGenerationService.Client.ApiException(400, "Missing required parameter 'chart' when calling ChartTemplatesApi->Images");
            }


            FactSet.SDK.ChartGenerationService.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.ChartGenerationService.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "img/png",
                "img/jpeg",
                "application/json"
            };

            var localVarContentType = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.ChartGenerationService.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "chart", chart));
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (sd != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "sd", sd));
            }
            if (ed != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "ed", ed));
            }
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (freq != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "freq", freq));
            }
            if (ccy != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "ccy", ccy));
            }
            if (split != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "split", split));
            }
            if (spin != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "spin", spin));
            }
            if (cal != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "cal", cal));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (fontSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "fontSize", fontSize));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (gridLines != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "gridLines", gridLines));
            }
            if (decimalPrecision != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.ChartGenerationService.Client.ClientUtils.ParameterToMultiMap("", "decimalPrecision", decimalPrecision));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.ChartGenerationService.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = ImagesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Images", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
