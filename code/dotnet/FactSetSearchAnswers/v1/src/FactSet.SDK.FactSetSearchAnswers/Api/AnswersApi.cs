/*
 * FactSet Search Answers API
 *
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.FactSetSearchAnswers.Client;
using FactSet.SDK.FactSetSearchAnswers.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.FactSetSearchAnswers.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnswersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <returns>AdaptiveCardAnswerSuccessResponse</returns>
        AdaptiveCardAnswerSuccessResponse SearchForAdaptiveCardAnswer(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string));

        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <returns>ApiResponse of AdaptiveCardAnswerSuccessResponse</returns>
        ApiResponse<AdaptiveCardAnswerSuccessResponse> SearchForAdaptiveCardAnswerWithHttpInfo(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string));
        /// <summary>
        /// Fetch FactSet answer in data format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <returns>DataAnswerSuccessResponse</returns>
        DataAnswerSuccessResponse SearchForDataAnswer(string query, string consumingApplication = default(string));

        /// <summary>
        /// Fetch FactSet answer in data format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <returns>ApiResponse of DataAnswerSuccessResponse</returns>
        ApiResponse<DataAnswerSuccessResponse> SearchForDataAnswerWithHttpInfo(string query, string consumingApplication = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnswersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdaptiveCardAnswerSuccessResponse</returns>
        System.Threading.Tasks.Task<AdaptiveCardAnswerSuccessResponse> SearchForAdaptiveCardAnswerAsync(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdaptiveCardAnswerSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdaptiveCardAnswerSuccessResponse>> SearchForAdaptiveCardAnswerWithHttpInfoAsync(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch FactSet answer in data format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataAnswerSuccessResponse</returns>
        System.Threading.Tasks.Task<DataAnswerSuccessResponse> SearchForDataAnswerAsync(string query, string consumingApplication = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch FactSet answer in data format
        /// </summary>
        /// <remarks>
        /// Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </remarks>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataAnswerSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataAnswerSuccessResponse>> SearchForDataAnswerWithHttpInfoAsync(string query, string consumingApplication = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnswersApi : IAnswersApiSync, IAnswersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnswersApi : IAnswersApi
    {
        private FactSet.SDK.FactSetSearchAnswers.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> SearchForAdaptiveCardAnswerResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(AdaptiveCardAnswerSuccessResponse) },
            { (HttpStatusCode)400, typeof(AnswerFailureResponse) },
            { (HttpStatusCode)401, typeof(AnswerFailureResponse) },
            { (HttpStatusCode)500, typeof(AnswerFailureResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> SearchForDataAnswerResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DataAnswerSuccessResponse) },
            { (HttpStatusCode)400, typeof(AnswerFailureResponse) },
            { (HttpStatusCode)401, typeof(AnswerFailureResponse) },
            { (HttpStatusCode)500, typeof(AnswerFailureResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="AnswersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnswersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnswersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnswersApi(string basePath)
        {
            this.Configuration = FactSet.SDK.FactSetSearchAnswers.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetSearchAnswers.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.FactSetSearchAnswers.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.FactSetSearchAnswers.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetSearchAnswers.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.FactSetSearchAnswers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnswersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnswersApi(FactSet.SDK.FactSetSearchAnswers.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.FactSetSearchAnswers.Client.Configuration.MergeConfigurations(
                FactSet.SDK.FactSetSearchAnswers.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.FactSetSearchAnswers.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.FactSetSearchAnswers.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.FactSetSearchAnswers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnswersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AnswersApi(FactSet.SDK.FactSetSearchAnswers.Client.ISynchronousClient client, FactSet.SDK.FactSetSearchAnswers.Client.IAsynchronousClient asyncClient, FactSet.SDK.FactSetSearchAnswers.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.FactSetSearchAnswers.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.FactSetSearchAnswers.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.FactSetSearchAnswers.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.FactSetSearchAnswers.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.FactSetSearchAnswers.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <returns>AdaptiveCardAnswerSuccessResponse</returns>
        public AdaptiveCardAnswerSuccessResponse SearchForAdaptiveCardAnswer(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string))
        {
            var localVarResponse = SearchForAdaptiveCardAnswerWithHttpInfo(query, includeThumbnail, disableNoAnswerResponses, theme);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <returns>ApiResponse of AdaptiveCardAnswerSuccessResponse</returns>
        public ApiResponse<AdaptiveCardAnswerSuccessResponse> SearchForAdaptiveCardAnswerWithHttpInfo(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new FactSet.SDK.FactSetSearchAnswers.Client.ApiException(400, "Missing required parameter 'query' when calling AnswersApi->SearchForAdaptiveCardAnswer");
            }

            FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (includeThumbnail != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "includeThumbnail", includeThumbnail));
            }
            if (disableNoAnswerResponses != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "disableNoAnswerResponses", disableNoAnswerResponses));
            }
            if (theme != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "theme", theme));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = SearchForAdaptiveCardAnswerResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            AdaptiveCardAnswerSuccessResponse>("/search/answers/v1/adaptive-card", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchForAdaptiveCardAnswer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AdaptiveCardAnswerSuccessResponse</returns>
        public async System.Threading.Tasks.Task<AdaptiveCardAnswerSuccessResponse>SearchForAdaptiveCardAnswerAsync(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SearchForAdaptiveCardAnswerWithHttpInfoAsync(query, includeThumbnail, disableNoAnswerResponses, theme, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch FactSet answer in Adaptive Card format Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="includeThumbnail">Includes thumbnail of Adaptive Card in response (optional, default to false)</param>
        /// <param name="disableNoAnswerResponses">Disables no-result answer responses (no-results and answer without data) (optional, default to true)</param>
        /// <param name="theme">Theme for desired answer (e.g., \&quot;Light\&quot;, \&quot;Dark\&quot;) (optional, default to &quot;Light&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AdaptiveCardAnswerSuccessResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<AdaptiveCardAnswerSuccessResponse>> SearchForAdaptiveCardAnswerWithHttpInfoAsync(string query, bool? includeThumbnail = default(bool?), bool? disableNoAnswerResponses = default(bool?), string theme = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new FactSet.SDK.FactSetSearchAnswers.Client.ApiException(400, "Missing required parameter 'query' when calling AnswersApi->SearchForAdaptiveCardAnswer");
            }


            FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (includeThumbnail != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "includeThumbnail", includeThumbnail));
            }
            if (disableNoAnswerResponses != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "disableNoAnswerResponses", disableNoAnswerResponses));
            }
            if (theme != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "theme", theme));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = SearchForAdaptiveCardAnswerResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AdaptiveCardAnswerSuccessResponse>("/search/answers/v1/adaptive-card", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchForAdaptiveCardAnswer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch FactSet answer in data format Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <returns>DataAnswerSuccessResponse</returns>
        public DataAnswerSuccessResponse SearchForDataAnswer(string query, string consumingApplication = default(string))
        {
            var localVarResponse = SearchForDataAnswerWithHttpInfo(query, consumingApplication);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch FactSet answer in data format Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <returns>ApiResponse of DataAnswerSuccessResponse</returns>
        public ApiResponse<DataAnswerSuccessResponse> SearchForDataAnswerWithHttpInfo(string query, string consumingApplication = default(string))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new FactSet.SDK.FactSetSearchAnswers.Client.ApiException(400, "Missing required parameter 'query' when calling AnswersApi->SearchForDataAnswer");
            }

            FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (consumingApplication != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "consumingApplication", consumingApplication));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = SearchForDataAnswerResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            DataAnswerSuccessResponse>("/search/answers/v1/data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchForDataAnswer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Fetch FactSet answer in data format Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataAnswerSuccessResponse</returns>
        public async System.Threading.Tasks.Task<DataAnswerSuccessResponse>SearchForDataAnswerAsync(string query, string consumingApplication = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await SearchForDataAnswerWithHttpInfoAsync(query, consumingApplication, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch FactSet answer in data format Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
        /// </summary>
        /// <exception cref="FactSet.SDK.FactSetSearchAnswers.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query for desired answer (e.g., \&quot;fds price\&quot;)</param>
        /// <param name="consumingApplication">Name of application consuming the API (used for analytics purposes) (optional, default to &quot;Developer Portal&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataAnswerSuccessResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DataAnswerSuccessResponse>> SearchForDataAnswerWithHttpInfoAsync(string query, string consumingApplication = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new FactSet.SDK.FactSetSearchAnswers.Client.ApiException(400, "Missing required parameter 'query' when calling AnswersApi->SearchForDataAnswer");
            }


            FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.FactSetSearchAnswers.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (consumingApplication != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.ParameterToMultiMap("", "consumingApplication", consumingApplication));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.FactSetSearchAnswers.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = SearchForDataAnswerResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataAnswerSuccessResponse>("/search/answers/v1/data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchForDataAnswer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
