/*
 * FactSet Search Answers API
 *
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetSearchAnswers.Client.OpenAPIDateConverter;
using System.Reflection;

namespace FactSet.SDK.FactSetSearchAnswers.Model
{
    /// <summary>
    /// DataAnswerData
    /// </summary>
    [JsonConverter(typeof(DataAnswerDataJsonConverter))]
    [DataContract(Name = "DataAnswerData")]
    public partial class DataAnswerData : AbstractOpenAPISchema, IEquatable<DataAnswerData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LinkTextBlockAnswer.</param>
        public DataAnswerData(LinkTextBlockAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TextBlockFootingAnswer.</param>
        public DataAnswerData(TextBlockFootingAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PercentChangeLabelAnswer.</param>
        public DataAnswerData(PercentChangeLabelAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueChangeDateLabelAnswer.</param>
        public DataAnswerData(ValueChangeDateLabelAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RankedTableAnswer.</param>
        public DataAnswerData(RankedTableAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TableAnswer.</param>
        public DataAnswerData(TableAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TableTableAnswer.</param>
        public DataAnswerData(TableTableAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueLabelAnswer.</param>
        public DataAnswerData(ValueLabelAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueLabelDateAnswer.</param>
        public DataAnswerData(ValueLabelDateAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ColoredValueLabelDateAnswer.</param>
        public DataAnswerData(ColoredValueLabelDateAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueLabelDateTextBlockAnswer.</param>
        public DataAnswerData(ValueLabelDateTextBlockAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ValueLabelDateDataPairListAnswer.</param>
        public DataAnswerData(ValueLabelDateDataPairListAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LabelValueChangeLabelValueChangeAnswer.</param>
        public DataAnswerData(LabelValueChangeLabelValueChangeAnswer actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AnswerWithoutData.</param>
        public DataAnswerData(AnswerWithoutData actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataAnswerData" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NoAnswersFound.</param>
        public DataAnswerData(NoAnswersFound actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value is LinkTextBlockAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is TextBlockFootingAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is PercentChangeLabelAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is ValueChangeDateLabelAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is RankedTableAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is TableAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is TableTableAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is ValueLabelAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is ValueLabelDateAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is ColoredValueLabelDateAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is ValueLabelDateTextBlockAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is ValueLabelDateDataPairListAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is LabelValueChangeLabelValueChangeAnswer)
                {
                    this._actualInstance = value;
                }
                else if (value is AnswerWithoutData)
                {
                    this._actualInstance = value;
                }
                else if (value is NoAnswersFound)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: LinkTextBlockAnswer, TextBlockFootingAnswer, PercentChangeLabelAnswer, ValueChangeDateLabelAnswer, RankedTableAnswer, TableAnswer, TableTableAnswer, ValueLabelAnswer, ValueLabelDateAnswer, ColoredValueLabelDateAnswer, ValueLabelDateTextBlockAnswer, ValueLabelDateDataPairListAnswer, LabelValueChangeLabelValueChangeAnswer, AnswerWithoutData, NoAnswersFound");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `LinkTextBlockAnswer`. If the actual instance is not `LinkTextBlockAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LinkTextBlockAnswer</returns>
        public LinkTextBlockAnswer GetLinkTextBlockAnswer()
        {
            return (LinkTextBlockAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TextBlockFootingAnswer`. If the actual instance is not `TextBlockFootingAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TextBlockFootingAnswer</returns>
        public TextBlockFootingAnswer GetTextBlockFootingAnswer()
        {
            return (TextBlockFootingAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PercentChangeLabelAnswer`. If the actual instance is not `PercentChangeLabelAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PercentChangeLabelAnswer</returns>
        public PercentChangeLabelAnswer GetPercentChangeLabelAnswer()
        {
            return (PercentChangeLabelAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueChangeDateLabelAnswer`. If the actual instance is not `ValueChangeDateLabelAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueChangeDateLabelAnswer</returns>
        public ValueChangeDateLabelAnswer GetValueChangeDateLabelAnswer()
        {
            return (ValueChangeDateLabelAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RankedTableAnswer`. If the actual instance is not `RankedTableAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RankedTableAnswer</returns>
        public RankedTableAnswer GetRankedTableAnswer()
        {
            return (RankedTableAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TableAnswer`. If the actual instance is not `TableAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TableAnswer</returns>
        public TableAnswer GetTableAnswer()
        {
            return (TableAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TableTableAnswer`. If the actual instance is not `TableTableAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TableTableAnswer</returns>
        public TableTableAnswer GetTableTableAnswer()
        {
            return (TableTableAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueLabelAnswer`. If the actual instance is not `ValueLabelAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueLabelAnswer</returns>
        public ValueLabelAnswer GetValueLabelAnswer()
        {
            return (ValueLabelAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueLabelDateAnswer`. If the actual instance is not `ValueLabelDateAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueLabelDateAnswer</returns>
        public ValueLabelDateAnswer GetValueLabelDateAnswer()
        {
            return (ValueLabelDateAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ColoredValueLabelDateAnswer`. If the actual instance is not `ColoredValueLabelDateAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ColoredValueLabelDateAnswer</returns>
        public ColoredValueLabelDateAnswer GetColoredValueLabelDateAnswer()
        {
            return (ColoredValueLabelDateAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueLabelDateTextBlockAnswer`. If the actual instance is not `ValueLabelDateTextBlockAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueLabelDateTextBlockAnswer</returns>
        public ValueLabelDateTextBlockAnswer GetValueLabelDateTextBlockAnswer()
        {
            return (ValueLabelDateTextBlockAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ValueLabelDateDataPairListAnswer`. If the actual instance is not `ValueLabelDateDataPairListAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ValueLabelDateDataPairListAnswer</returns>
        public ValueLabelDateDataPairListAnswer GetValueLabelDateDataPairListAnswer()
        {
            return (ValueLabelDateDataPairListAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LabelValueChangeLabelValueChangeAnswer`. If the actual instance is not `LabelValueChangeLabelValueChangeAnswer`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LabelValueChangeLabelValueChangeAnswer</returns>
        public LabelValueChangeLabelValueChangeAnswer GetLabelValueChangeLabelValueChangeAnswer()
        {
            return (LabelValueChangeLabelValueChangeAnswer)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AnswerWithoutData`. If the actual instance is not `AnswerWithoutData`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AnswerWithoutData</returns>
        public AnswerWithoutData GetAnswerWithoutData()
        {
            return (AnswerWithoutData)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NoAnswersFound`. If the actual instance is not `NoAnswersFound`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NoAnswersFound</returns>
        public NoAnswersFound GetNoAnswersFound()
        {
            return (NoAnswersFound)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataAnswerData {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, DataAnswerData.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of DataAnswerData
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of DataAnswerData</returns>
        public static DataAnswerData FromJson(string jsonString)
        {
            DataAnswerData newDataAnswerData = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newDataAnswerData;
            }

            try
            {
                var discriminatorObj = JObject.Parse(jsonString)["template"];
                string discriminatorValue =  discriminatorObj == null ?string.Empty :discriminatorObj.ToString();
                switch (discriminatorValue)
                {
                    case "AnswerWithoutData":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<AnswerWithoutData>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "AnswerWithoutDataTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<AnswerWithoutData>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ColoredValueLabelDateAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ColoredValueLabelDateAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ColoredValueLabelDateTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ColoredValueLabelDateAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "LabelValueChangeLabelValueChangeAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<LabelValueChangeLabelValueChangeAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "LabelValueChangeLabelValueChangeTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<LabelValueChangeLabelValueChangeAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "LinkTextBlockAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<LinkTextBlockAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "LinkTextBlockTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<LinkTextBlockAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "NoAnswerTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<NoAnswersFound>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "NoAnswersFound":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<NoAnswersFound>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "PercentChangeLabelAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<PercentChangeLabelAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "PercentChangeLabelTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<PercentChangeLabelAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "RankedTableAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<RankedTableAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "RankedTableTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<RankedTableAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "TableAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<TableAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "TableTableAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<TableTableAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "TableTableTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<TableTableAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "TableTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<TableAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "TextBlockFootingAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<TextBlockFootingAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "TextBlockFootingTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<TextBlockFootingAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueChangeDateLabelAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueChangeDateLabelAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueChangeDateLabelTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueChangeDateLabelAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelDateAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelDateAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelDateDataPairListAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelDateDataPairListAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelDateDataPairListTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelDateDataPairListAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelDateTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelDateAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelDateTextBlockAnswer":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelDateTextBlockAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelDateTextBlockTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelDateTextBlockAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    case "ValueLabelTemplate":
                        newDataAnswerData = new DataAnswerData(JsonConvert.DeserializeObject<ValueLabelAnswer>(jsonString, DataAnswerData.AdditionalPropertiesSerializerSettings));
                        return newDataAnswerData;
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for DataAnswerData. Possible values: AnswerWithoutData AnswerWithoutDataTemplate ColoredValueLabelDateAnswer ColoredValueLabelDateTemplate LabelValueChangeLabelValueChangeAnswer LabelValueChangeLabelValueChangeTemplate LinkTextBlockAnswer LinkTextBlockTemplate NoAnswerTemplate NoAnswersFound PercentChangeLabelAnswer PercentChangeLabelTemplate RankedTableAnswer RankedTableTemplate TableAnswer TableTableAnswer TableTableTemplate TableTemplate TextBlockFootingAnswer TextBlockFootingTemplate ValueChangeDateLabelAnswer ValueChangeDateLabelTemplate ValueLabelAnswer ValueLabelDateAnswer ValueLabelDateDataPairListAnswer ValueLabelDateDataPairListTemplate ValueLabelDateTemplate ValueLabelDateTextBlockAnswer ValueLabelDateTextBlockTemplate ValueLabelTemplate", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                var hasAdditionalProperties = !(typeof(LinkTextBlockAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<LinkTextBlockAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("LinkTextBlockAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LinkTextBlockAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(TextBlockFootingAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<TextBlockFootingAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("TextBlockFootingAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TextBlockFootingAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(PercentChangeLabelAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<PercentChangeLabelAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("PercentChangeLabelAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PercentChangeLabelAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(ValueChangeDateLabelAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<ValueChangeDateLabelAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("ValueChangeDateLabelAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueChangeDateLabelAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(RankedTableAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<RankedTableAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("RankedTableAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RankedTableAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(TableAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<TableAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("TableAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TableAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(TableTableAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<TableTableAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("TableTableAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TableTableAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(ValueLabelAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<ValueLabelAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("ValueLabelAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueLabelAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(ValueLabelDateAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<ValueLabelDateAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("ValueLabelDateAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueLabelDateAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(ColoredValueLabelDateAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<ColoredValueLabelDateAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("ColoredValueLabelDateAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ColoredValueLabelDateAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(ValueLabelDateTextBlockAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<ValueLabelDateTextBlockAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("ValueLabelDateTextBlockAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueLabelDateTextBlockAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(ValueLabelDateDataPairListAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<ValueLabelDateDataPairListAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("ValueLabelDateDataPairListAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ValueLabelDateDataPairListAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(LabelValueChangeLabelValueChangeAnswer).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<LabelValueChangeLabelValueChangeAnswer>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("LabelValueChangeLabelValueChangeAnswer");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LabelValueChangeLabelValueChangeAnswer: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(AnswerWithoutData).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<AnswerWithoutData>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("AnswerWithoutData");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AnswerWithoutData: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(NoAnswersFound).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<NoAnswersFound>(
                    jsonString,
                    hasAdditionalProperties ? DataAnswerData.AdditionalPropertiesSerializerSettings : DataAnswerData.SerializerSettings
                );
                newDataAnswerData = new DataAnswerData(parsedValue);
                matchedTypes.Add("NoAnswersFound");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NoAnswersFound: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newDataAnswerData;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataAnswerData);
        }

        /// <summary>
        /// Returns true if DataAnswerData instances are equal
        /// </summary>
        /// <param name="input">Instance of DataAnswerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataAnswerData input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for DataAnswerData
    /// </summary>
    public class DataAnswerDataJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(DataAnswerData).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return DataAnswerData.FromJson(JToken.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
