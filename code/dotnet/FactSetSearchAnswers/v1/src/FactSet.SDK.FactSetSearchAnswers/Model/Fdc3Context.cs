/*
 * FactSet Search Answers API
 *
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetSearchAnswers.Client.OpenAPIDateConverter;
using System.Reflection;

namespace FactSet.SDK.FactSetSearchAnswers.Model
{
    /// <summary>
    /// Fdc3Context
    /// </summary>
    [JsonConverter(typeof(Fdc3ContextJsonConverter))]
    [DataContract(Name = "Fdc3Context")]
    public partial class Fdc3Context : AbstractOpenAPISchema, IEquatable<Fdc3Context>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fdc3Context" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Fdc3Instrument.</param>
        public Fdc3Context(Fdc3Instrument actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Fdc3Context" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Fdc3Country.</param>
        public Fdc3Context(Fdc3Country actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value is Fdc3Instrument)
                {
                    this._actualInstance = value;
                }
                else if (value is Fdc3Country)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: Fdc3Instrument, Fdc3Country");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `Fdc3Instrument`. If the actual instance is not `Fdc3Instrument`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Fdc3Instrument</returns>
        public Fdc3Instrument GetFdc3Instrument()
        {
            return (Fdc3Instrument)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `Fdc3Country`. If the actual instance is not `Fdc3Country`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Fdc3Country</returns>
        public Fdc3Country GetFdc3Country()
        {
            return (Fdc3Country)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fdc3Context {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, Fdc3Context.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of Fdc3Context
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of Fdc3Context</returns>
        public static Fdc3Context FromJson(string jsonString)
        {
            Fdc3Context newFdc3Context = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newFdc3Context;
            }

            try
            {
                var discriminatorObj = JObject.Parse(jsonString)["type"];
                string discriminatorValue =  discriminatorObj == null ?string.Empty :discriminatorObj.ToString();
                switch (discriminatorValue)
                {
                    case "Fdc3Country":
                        newFdc3Context = new Fdc3Context(JsonConvert.DeserializeObject<Fdc3Country>(jsonString, Fdc3Context.AdditionalPropertiesSerializerSettings));
                        return newFdc3Context;
                    case "Fdc3Instrument":
                        newFdc3Context = new Fdc3Context(JsonConvert.DeserializeObject<Fdc3Instrument>(jsonString, Fdc3Context.AdditionalPropertiesSerializerSettings));
                        return newFdc3Context;
                    case "fdc3.country":
                        newFdc3Context = new Fdc3Context(JsonConvert.DeserializeObject<Fdc3Country>(jsonString, Fdc3Context.AdditionalPropertiesSerializerSettings));
                        return newFdc3Context;
                    case "fdc3.instrument":
                        newFdc3Context = new Fdc3Context(JsonConvert.DeserializeObject<Fdc3Instrument>(jsonString, Fdc3Context.AdditionalPropertiesSerializerSettings));
                        return newFdc3Context;
                    default:
                        System.Diagnostics.Debug.WriteLine(string.Format("Failed to lookup discriminator value `{0}` for Fdc3Context. Possible values: Fdc3Country Fdc3Instrument fdc3.country fdc3.instrument", discriminatorValue));
                        break;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to parse the json data : `{0}` {1}", jsonString, ex.ToString()));
            }

            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                var hasAdditionalProperties = !(typeof(Fdc3Instrument).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<Fdc3Instrument>(
                    jsonString,
                    hasAdditionalProperties ? Fdc3Context.AdditionalPropertiesSerializerSettings : Fdc3Context.SerializerSettings
                );
                newFdc3Context = new Fdc3Context(parsedValue);
                matchedTypes.Add("Fdc3Instrument");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Fdc3Instrument: {1}", jsonString, exception.ToString()));
            }

            try
            {
                var hasAdditionalProperties = !(typeof(Fdc3Country).GetProperty("AdditionalProperties") is null);
                var parsedValue = JsonConvert.DeserializeObject<Fdc3Country>(
                    jsonString,
                    hasAdditionalProperties ? Fdc3Context.AdditionalPropertiesSerializerSettings : Fdc3Context.SerializerSettings
                );
                newFdc3Context = new Fdc3Context(parsedValue);
                matchedTypes.Add("Fdc3Country");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Fdc3Country: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newFdc3Context;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fdc3Context);
        }

        /// <summary>
        /// Returns true if Fdc3Context instances are equal
        /// </summary>
        /// <param name="input">Instance of Fdc3Context to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fdc3Context input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for Fdc3Context
    /// </summary>
    public class Fdc3ContextJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(Fdc3Context).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return Fdc3Context.FromJson(JToken.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
