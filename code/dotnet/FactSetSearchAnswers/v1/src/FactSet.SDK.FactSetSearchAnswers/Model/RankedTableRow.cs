/*
 * FactSet Search Answers API
 *
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.FactSetSearchAnswers.Client.OpenAPIDateConverter;

namespace FactSet.SDK.FactSetSearchAnswers.Model
{
    /// <summary>
    /// RankedTableRow
    /// </summary>
    [DataContract(Name = "RankedTableRow")]
    public partial class RankedTableRow : IEquatable<RankedTableRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RankedTableRow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RankedTableRow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RankedTableRow" /> class.
        /// </summary>
        /// <param name="rank">rank (required).</param>
        /// <param name="entity">entity.</param>
        /// <param name="applicationLink">applicationLink.</param>
        /// <param name="additionalData">additionalData.</param>
        public RankedTableRow(decimal rank,RankedTableEntity entity = default(RankedTableEntity), ApplicationLink applicationLink = default(ApplicationLink), List<string> additionalData = default(List<string>))
        {
            this.Rank = rank;
            this.Entity = entity;
            this.ApplicationLink = applicationLink;
            this.AdditionalData = additionalData;
        }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name = "rank", IsRequired = true, EmitDefaultValue = false)]
        public decimal Rank { get; set; }

        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public RankedTableEntity Entity { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationLink
        /// </summary>
        [DataMember(Name = "applicationLink", EmitDefaultValue = false)]
        public ApplicationLink ApplicationLink { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalData
        /// </summary>
        [DataMember(Name = "additionalData", EmitDefaultValue = false)]
        public List<string> AdditionalData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RankedTableRow {\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  ApplicationLink: ").Append(ApplicationLink).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RankedTableRow);
        }

        /// <summary>
        /// Returns true if RankedTableRow instances are equal
        /// </summary>
        /// <param name="input">Instance of RankedTableRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RankedTableRow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Rank == input.Rank ||
                    this.Rank.Equals(input.Rank)
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.ApplicationLink == input.ApplicationLink ||
                    (this.ApplicationLink != null &&
                    this.ApplicationLink.Equals(input.ApplicationLink))
                ) && 
                (
                    this.AdditionalData == input.AdditionalData ||
                    this.AdditionalData != null &&
                    input.AdditionalData != null &&
                    this.AdditionalData.SequenceEqual(input.AdditionalData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Rank.GetHashCode();
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                if (this.ApplicationLink != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationLink.GetHashCode();
                }
                if (this.AdditionalData != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
