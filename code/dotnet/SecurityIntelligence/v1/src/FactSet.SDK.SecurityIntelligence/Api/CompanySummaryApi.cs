/*
 * Security Intelligence API - V1
 *
 * Surfaces AI generated summaries intended to provide up to date insights and guide users to currently relevant applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.SecurityIntelligence.Client;
using FactSet.SDK.SecurityIntelligence.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.SecurityIntelligence.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanySummaryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Company Debt Summary
        /// </summary>
        /// <remarks>
        /// Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>DebtSummaryResponse</returns>
        DebtSummaryResponse GetCompanyDebtSummary(string identifier);

        /// <summary>
        /// Get Company Debt Summary
        /// </summary>
        /// <remarks>
        /// Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of DebtSummaryResponse</returns>
        ApiResponse<DebtSummaryResponse> GetCompanyDebtSummaryWithHttpInfo(string identifier);
        /// <summary>
        /// Get Company Events
        /// </summary>
        /// <remarks>
        /// Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>EventsSummaryResponse</returns>
        EventsSummaryResponse GetCompanyEvents(string identifier);

        /// <summary>
        /// Get Company Events
        /// </summary>
        /// <remarks>
        /// Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of EventsSummaryResponse</returns>
        ApiResponse<EventsSummaryResponse> GetCompanyEventsWithHttpInfo(string identifier);
        /// <summary>
        /// Get Company Financial Highlights
        /// </summary>
        /// <remarks>
        /// Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>FinancialHighlightsResponse</returns>
        FinancialHighlightsResponse GetCompanyFinancialHighlights(string identifier);

        /// <summary>
        /// Get Company Financial Highlights
        /// </summary>
        /// <remarks>
        /// Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of FinancialHighlightsResponse</returns>
        ApiResponse<FinancialHighlightsResponse> GetCompanyFinancialHighlightsWithHttpInfo(string identifier);
        /// <summary>
        /// Get Company M&amp;A Summary
        /// </summary>
        /// <remarks>
        /// Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>MnaSummaryResponse</returns>
        MnaSummaryResponse GetCompanyMNASummary(string identifier);

        /// <summary>
        /// Get Company M&amp;A Summary
        /// </summary>
        /// <remarks>
        /// Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of MnaSummaryResponse</returns>
        ApiResponse<MnaSummaryResponse> GetCompanyMNASummaryWithHttpInfo(string identifier);
        /// <summary>
        /// Get Company Ownership Insights
        /// </summary>
        /// <remarks>
        /// Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>OwnershipInsightsResponse</returns>
        OwnershipInsightsResponse GetCompanyOwnershipInsights(string identifier);

        /// <summary>
        /// Get Company Ownership Insights
        /// </summary>
        /// <remarks>
        /// Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of OwnershipInsightsResponse</returns>
        ApiResponse<OwnershipInsightsResponse> GetCompanyOwnershipInsightsWithHttpInfo(string identifier);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanySummaryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Company Debt Summary
        /// </summary>
        /// <remarks>
        /// Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DebtSummaryResponse</returns>
        System.Threading.Tasks.Task<DebtSummaryResponse> GetCompanyDebtSummaryAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Company Debt Summary
        /// </summary>
        /// <remarks>
        /// Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DebtSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DebtSummaryResponse>> GetCompanyDebtSummaryWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Company Events
        /// </summary>
        /// <remarks>
        /// Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsSummaryResponse</returns>
        System.Threading.Tasks.Task<EventsSummaryResponse> GetCompanyEventsAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Company Events
        /// </summary>
        /// <remarks>
        /// Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventsSummaryResponse>> GetCompanyEventsWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Company Financial Highlights
        /// </summary>
        /// <remarks>
        /// Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialHighlightsResponse</returns>
        System.Threading.Tasks.Task<FinancialHighlightsResponse> GetCompanyFinancialHighlightsAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Company Financial Highlights
        /// </summary>
        /// <remarks>
        /// Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialHighlightsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinancialHighlightsResponse>> GetCompanyFinancialHighlightsWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Company M&amp;A Summary
        /// </summary>
        /// <remarks>
        /// Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MnaSummaryResponse</returns>
        System.Threading.Tasks.Task<MnaSummaryResponse> GetCompanyMNASummaryAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Company M&amp;A Summary
        /// </summary>
        /// <remarks>
        /// Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MnaSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MnaSummaryResponse>> GetCompanyMNASummaryWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Company Ownership Insights
        /// </summary>
        /// <remarks>
        /// Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OwnershipInsightsResponse</returns>
        System.Threading.Tasks.Task<OwnershipInsightsResponse> GetCompanyOwnershipInsightsAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Company Ownership Insights
        /// </summary>
        /// <remarks>
        /// Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OwnershipInsightsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OwnershipInsightsResponse>> GetCompanyOwnershipInsightsWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanySummaryApi : ICompanySummaryApiSync, ICompanySummaryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompanySummaryApi : ICompanySummaryApi
    {
        private FactSet.SDK.SecurityIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyDebtSummaryResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(DebtSummaryResponse) },
            { (HttpStatusCode)400, typeof(CustomValidationError) },
            { (HttpStatusCode)500, typeof(ServerError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyEventsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(EventsSummaryResponse) },
            { (HttpStatusCode)400, typeof(CustomValidationError) },
            { (HttpStatusCode)500, typeof(ServerError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyFinancialHighlightsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(FinancialHighlightsResponse) },
            { (HttpStatusCode)400, typeof(CustomValidationError) },
            { (HttpStatusCode)500, typeof(ServerError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyMNASummaryResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(MnaSummaryResponse) },
            { (HttpStatusCode)400, typeof(CustomValidationError) },
            { (HttpStatusCode)500, typeof(ServerError) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCompanyOwnershipInsightsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(OwnershipInsightsResponse) },
            { (HttpStatusCode)400, typeof(CustomValidationError) },
            { (HttpStatusCode)500, typeof(ServerError) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanySummaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanySummaryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanySummaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanySummaryApi(string basePath)
        {
            this.Configuration = FactSet.SDK.SecurityIntelligence.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecurityIntelligence.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.SecurityIntelligence.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.SecurityIntelligence.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanySummaryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompanySummaryApi(FactSet.SDK.SecurityIntelligence.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.SecurityIntelligence.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecurityIntelligence.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.SecurityIntelligence.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanySummaryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CompanySummaryApi(FactSet.SDK.SecurityIntelligence.Client.ISynchronousClient client, FactSet.SDK.SecurityIntelligence.Client.IAsynchronousClient asyncClient, FactSet.SDK.SecurityIntelligence.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.SecurityIntelligence.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.SecurityIntelligence.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.SecurityIntelligence.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.SecurityIntelligence.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.SecurityIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Company Debt Summary Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>DebtSummaryResponse</returns>
        public DebtSummaryResponse GetCompanyDebtSummary(string identifier)
        {
            var localVarResponse = GetCompanyDebtSummaryWithHttpInfo(identifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Debt Summary Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of DebtSummaryResponse</returns>
        public ApiResponse<DebtSummaryResponse> GetCompanyDebtSummaryWithHttpInfo(string identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyDebtSummary");
            }

            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyDebtSummaryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            DebtSummaryResponse>("/company/debt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyDebtSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Company Debt Summary Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DebtSummaryResponse</returns>
        public async System.Threading.Tasks.Task<DebtSummaryResponse>GetCompanyDebtSummaryAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyDebtSummaryWithHttpInfoAsync(identifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Debt Summary Presents the company&#39;s Debt Capital Structure maturity data, analysis of Total Debt, and information on debt obligations due in the near term.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DebtSummaryResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<DebtSummaryResponse>> GetCompanyDebtSummaryWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyDebtSummary");
            }


            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyDebtSummaryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DebtSummaryResponse>("/company/debt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyDebtSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company Events Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>EventsSummaryResponse</returns>
        public EventsSummaryResponse GetCompanyEvents(string identifier)
        {
            var localVarResponse = GetCompanyEventsWithHttpInfo(identifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Events Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of EventsSummaryResponse</returns>
        public ApiResponse<EventsSummaryResponse> GetCompanyEventsWithHttpInfo(string identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyEvents");
            }

            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyEventsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            EventsSummaryResponse>("/company/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Company Events Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventsSummaryResponse</returns>
        public async System.Threading.Tasks.Task<EventsSummaryResponse>GetCompanyEventsAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyEventsWithHttpInfoAsync(identifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Events Returns a summary of company events including Dividends, Earnings Releases and Stock Splits spanning 7 days in the past and 60 days into the future.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventsSummaryResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<EventsSummaryResponse>> GetCompanyEventsWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyEvents");
            }


            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyEventsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventsSummaryResponse>("/company/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company Financial Highlights Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>FinancialHighlightsResponse</returns>
        public FinancialHighlightsResponse GetCompanyFinancialHighlights(string identifier)
        {
            var localVarResponse = GetCompanyFinancialHighlightsWithHttpInfo(identifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Financial Highlights Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of FinancialHighlightsResponse</returns>
        public ApiResponse<FinancialHighlightsResponse> GetCompanyFinancialHighlightsWithHttpInfo(string identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyFinancialHighlights");
            }

            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyFinancialHighlightsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            FinancialHighlightsResponse>("/company/financials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyFinancialHighlights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Company Financial Highlights Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinancialHighlightsResponse</returns>
        public async System.Threading.Tasks.Task<FinancialHighlightsResponse>GetCompanyFinancialHighlightsAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyFinancialHighlightsWithHttpInfoAsync(identifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Financial Highlights Provides comprehensive financial data including Income Statement, Cash Flow Statement, and Balance Sheet for the past 1.5 years.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinancialHighlightsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<FinancialHighlightsResponse>> GetCompanyFinancialHighlightsWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyFinancialHighlights");
            }


            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyFinancialHighlightsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FinancialHighlightsResponse>("/company/financials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyFinancialHighlights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company M&amp;A Summary Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>MnaSummaryResponse</returns>
        public MnaSummaryResponse GetCompanyMNASummary(string identifier)
        {
            var localVarResponse = GetCompanyMNASummaryWithHttpInfo(identifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company M&amp;A Summary Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of MnaSummaryResponse</returns>
        public ApiResponse<MnaSummaryResponse> GetCompanyMNASummaryWithHttpInfo(string identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyMNASummary");
            }

            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyMNASummaryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            MnaSummaryResponse>("/company/mna", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyMNASummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Company M&amp;A Summary Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MnaSummaryResponse</returns>
        public async System.Threading.Tasks.Task<MnaSummaryResponse>GetCompanyMNASummaryAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyMNASummaryWithHttpInfoAsync(identifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company M&amp;A Summary Reports on Mergers and Acquisitions activity related to the company within the last 3 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MnaSummaryResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<MnaSummaryResponse>> GetCompanyMNASummaryWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyMNASummary");
            }


            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyMNASummaryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MnaSummaryResponse>("/company/mna", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyMNASummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Company Ownership Insights Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>OwnershipInsightsResponse</returns>
        public OwnershipInsightsResponse GetCompanyOwnershipInsights(string identifier)
        {
            var localVarResponse = GetCompanyOwnershipInsightsWithHttpInfo(identifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Ownership Insights Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <returns>ApiResponse of OwnershipInsightsResponse</returns>
        public ApiResponse<OwnershipInsightsResponse> GetCompanyOwnershipInsightsWithHttpInfo(string identifier)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyOwnershipInsights");
            }

            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCompanyOwnershipInsightsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            OwnershipInsightsResponse>("/company/ownership", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyOwnershipInsights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Company Ownership Insights Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OwnershipInsightsResponse</returns>
        public async System.Threading.Tasks.Task<OwnershipInsightsResponse>GetCompanyOwnershipInsightsAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCompanyOwnershipInsightsWithHttpInfoAsync(identifier, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Company Ownership Insights Provides information on any activists targeting the company, and highlights the largest ownership position changes over the last 6 months.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OwnershipInsightsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<OwnershipInsightsResponse>> GetCompanyOwnershipInsightsWithHttpInfoAsync(string identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling CompanySummaryApi->GetCompanyOwnershipInsights");
            }


            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCompanyOwnershipInsightsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OwnershipInsightsResponse>("/company/ownership", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompanyOwnershipInsights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
