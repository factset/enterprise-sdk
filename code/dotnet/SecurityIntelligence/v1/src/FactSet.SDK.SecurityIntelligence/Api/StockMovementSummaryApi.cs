/*
 * Security Intelligence API - V1
 *
 * Surfaces AI generated summaries intended to provide up to date insights and guide users to currently relevant applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.SecurityIntelligence.Client;
using FactSet.SDK.SecurityIntelligence.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.SecurityIntelligence.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStockMovementSummaryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Stock Movement Summary
        /// </summary>
        /// <remarks>
        /// Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <returns>StockMovementResponse</returns>
        StockMovementResponse GetStockMovementSummary(string identifier, string outputType = default(string));

        /// <summary>
        /// Get Stock Movement Summary
        /// </summary>
        /// <remarks>
        /// Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <returns>ApiResponse of StockMovementResponse</returns>
        ApiResponse<StockMovementResponse> GetStockMovementSummaryWithHttpInfo(string identifier, string outputType = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStockMovementSummaryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Stock Movement Summary
        /// </summary>
        /// <remarks>
        /// Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StockMovementResponse</returns>
        System.Threading.Tasks.Task<StockMovementResponse> GetStockMovementSummaryAsync(string identifier, string outputType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Stock Movement Summary
        /// </summary>
        /// <remarks>
        /// Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StockMovementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StockMovementResponse>> GetStockMovementSummaryWithHttpInfoAsync(string identifier, string outputType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStockMovementSummaryApi : IStockMovementSummaryApiSync, IStockMovementSummaryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StockMovementSummaryApi : IStockMovementSummaryApi
    {
        private FactSet.SDK.SecurityIntelligence.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetStockMovementSummaryResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(StockMovementResponse) },
            { (HttpStatusCode)400, typeof(CustomValidationError) },
            { (HttpStatusCode)500, typeof(ServerError) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="StockMovementSummaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StockMovementSummaryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StockMovementSummaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StockMovementSummaryApi(string basePath)
        {
            this.Configuration = FactSet.SDK.SecurityIntelligence.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecurityIntelligence.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.SecurityIntelligence.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.SecurityIntelligence.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StockMovementSummaryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StockMovementSummaryApi(FactSet.SDK.SecurityIntelligence.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.SecurityIntelligence.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecurityIntelligence.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecurityIntelligence.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.SecurityIntelligence.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StockMovementSummaryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StockMovementSummaryApi(FactSet.SDK.SecurityIntelligence.Client.ISynchronousClient client, FactSet.SDK.SecurityIntelligence.Client.IAsynchronousClient asyncClient, FactSet.SDK.SecurityIntelligence.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.SecurityIntelligence.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.SecurityIntelligence.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.SecurityIntelligence.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.SecurityIntelligence.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.SecurityIntelligence.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Stock Movement Summary Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <returns>StockMovementResponse</returns>
        public StockMovementResponse GetStockMovementSummary(string identifier, string outputType = default(string))
        {
            var localVarResponse = GetStockMovementSummaryWithHttpInfo(identifier, outputType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stock Movement Summary Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <returns>ApiResponse of StockMovementResponse</returns>
        public ApiResponse<StockMovementResponse> GetStockMovementSummaryWithHttpInfo(string identifier, string outputType = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockMovementSummaryApi->GetStockMovementSummary");
            }

            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            if (outputType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStockMovementSummaryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            StockMovementResponse>("/company/stock-movement-summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockMovementSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Stock Movement Summary Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StockMovementResponse</returns>
        public async System.Threading.Tasks.Task<StockMovementResponse>GetStockMovementSummaryAsync(string identifier, string outputType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStockMovementSummaryWithHttpInfoAsync(identifier, outputType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stock Movement Summary Returns the stock price movement over the last trading period or intraday, and aims to explain that movement using StreetAccount news over the last two trading days.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityIntelligence.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Ticker or FactSet Entity ID of the company</param>
        /// <param name="outputType">Type of output to return. default for full summary and oneline for one-line summary. (optional, default to default)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StockMovementResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StockMovementResponse>> GetStockMovementSummaryWithHttpInfoAsync(string identifier, string outputType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.SecurityIntelligence.Client.ApiException(400, "Missing required parameter 'identifier' when calling StockMovementSummaryApi->GetStockMovementSummary");
            }


            FactSet.SDK.SecurityIntelligence.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityIntelligence.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityIntelligence.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            if (outputType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityIntelligence.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityIntelligence.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStockMovementSummaryResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StockMovementResponse>("/company/stock-movement-summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStockMovementSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
