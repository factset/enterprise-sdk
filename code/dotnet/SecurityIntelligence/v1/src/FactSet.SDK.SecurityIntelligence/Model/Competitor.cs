/*
 * Security Intelligence API - V1
 *
 * Surfaces AI generated summaries intended to provide up to date insights and guide users to currently relevant applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecurityIntelligence.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecurityIntelligence.Model
{
    /// <summary>
    /// Model for competitor information.
    /// </summary>
    [DataContract(Name = "Competitor")]
    public partial class Competitor : IEquatable<Competitor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Competitor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Competitor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Competitor" /> class.
        /// </summary>
        /// <param name="entityName">Name of the competitor company (required).</param>
        /// <param name="entityId">Identifier of the competitor company (required).</param>
        /// <param name="priceChangePercentage">Price change of the competitor as a percentage value (required).</param>
        public Competitor(string entityName, string entityId, decimal priceChangePercentage)
        {
            // to ensure "entityName" is required (not null)
            if (entityName == null) {
                throw new ArgumentNullException("entityName is a required property for Competitor and cannot be null");
            }
            this.EntityName = entityName;
            // to ensure "entityId" is required (not null)
            if (entityId == null) {
                throw new ArgumentNullException("entityId is a required property for Competitor and cannot be null");
            }
            this.EntityId = entityId;
            this.PriceChangePercentage = priceChangePercentage;
        }

        /// <summary>
        /// Name of the competitor company
        /// </summary>
        /// <value>Name of the competitor company</value>
        [DataMember(Name = "entityName", IsRequired = true, EmitDefaultValue = false)]
        public string EntityName { get; set; }

        /// <summary>
        /// Identifier of the competitor company
        /// </summary>
        /// <value>Identifier of the competitor company</value>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Price change of the competitor as a percentage value
        /// </summary>
        /// <value>Price change of the competitor as a percentage value</value>
        [DataMember(Name = "priceChangePercentage", IsRequired = true, EmitDefaultValue = false)]
        public decimal PriceChangePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Competitor {\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  PriceChangePercentage: ").Append(PriceChangePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Competitor);
        }

        /// <summary>
        /// Returns true if Competitor instances are equal
        /// </summary>
        /// <param name="input">Instance of Competitor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Competitor input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityName == input.EntityName ||
                    (this.EntityName != null &&
                    this.EntityName.Equals(input.EntityName))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.PriceChangePercentage == input.PriceChangePercentage ||
                    this.PriceChangePercentage.Equals(input.PriceChangePercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityName.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PriceChangePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
