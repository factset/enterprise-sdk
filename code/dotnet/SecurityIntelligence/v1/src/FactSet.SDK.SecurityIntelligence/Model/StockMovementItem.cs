/*
 * Security Intelligence API - V1
 *
 * Surfaces AI generated summaries intended to provide up to date insights and guide users to currently relevant applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecurityIntelligence.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecurityIntelligence.Model
{
    /// <summary>
    /// Model for stock movement data item.
    /// </summary>
    [DataContract(Name = "StockMovementItem")]
    public partial class StockMovementItem : IEquatable<StockMovementItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockMovementItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StockMovementItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StockMovementItem" /> class.
        /// </summary>
        /// <param name="title">Title of the company summary (required).</param>
        /// <param name="content">Detailed content of the company summary (required).</param>
        /// <param name="generatedTimestamp">Timestamp when the summary was generated in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ) (required).</param>
        /// <param name="references">List of references cited in the content (required).</param>
        /// <param name="competitors">List of competitor companies and their performance (required).</param>
        public StockMovementItem(string title, string content, DateTime generatedTimestamp, List<Reference> references, List<Competitor> competitors)
        {
            // to ensure "title" is required (not null)
            if (title == null) {
                throw new ArgumentNullException("title is a required property for StockMovementItem and cannot be null");
            }
            this.Title = title;
            // to ensure "content" is required (not null)
            if (content == null) {
                throw new ArgumentNullException("content is a required property for StockMovementItem and cannot be null");
            }
            this.Content = content;
            this.GeneratedTimestamp = generatedTimestamp;
            // to ensure "references" is required (not null)
            if (references == null) {
                throw new ArgumentNullException("references is a required property for StockMovementItem and cannot be null");
            }
            this.References = references;
            // to ensure "competitors" is required (not null)
            if (competitors == null) {
                throw new ArgumentNullException("competitors is a required property for StockMovementItem and cannot be null");
            }
            this.Competitors = competitors;
        }

        /// <summary>
        /// Title of the company summary
        /// </summary>
        /// <value>Title of the company summary</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Detailed content of the company summary
        /// </summary>
        /// <value>Detailed content of the company summary</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Timestamp when the summary was generated in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
        /// </summary>
        /// <value>Timestamp when the summary was generated in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)</value>
        [DataMember(Name = "generatedTimestamp", IsRequired = true, EmitDefaultValue = false)]
        public DateTime GeneratedTimestamp { get; set; }

        /// <summary>
        /// List of references cited in the content
        /// </summary>
        /// <value>List of references cited in the content</value>
        [DataMember(Name = "references", IsRequired = true, EmitDefaultValue = false)]
        public List<Reference> References { get; set; }

        /// <summary>
        /// List of competitor companies and their performance
        /// </summary>
        /// <value>List of competitor companies and their performance</value>
        [DataMember(Name = "competitors", IsRequired = true, EmitDefaultValue = false)]
        public List<Competitor> Competitors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StockMovementItem {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  GeneratedTimestamp: ").Append(GeneratedTimestamp).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  Competitors: ").Append(Competitors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StockMovementItem);
        }

        /// <summary>
        /// Returns true if StockMovementItem instances are equal
        /// </summary>
        /// <param name="input">Instance of StockMovementItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockMovementItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.GeneratedTimestamp == input.GeneratedTimestamp ||
                    (this.GeneratedTimestamp != null &&
                    this.GeneratedTimestamp.Equals(input.GeneratedTimestamp))
                ) && 
                (
                    this.References == input.References ||
                    this.References != null &&
                    input.References != null &&
                    this.References.SequenceEqual(input.References)
                ) && 
                (
                    this.Competitors == input.Competitors ||
                    this.Competitors != null &&
                    input.Competitors != null &&
                    this.Competitors.SequenceEqual(input.Competitors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.GeneratedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.GeneratedTimestamp.GetHashCode();
                }
                if (this.References != null)
                {
                    hashCode = (hashCode * 59) + this.References.GetHashCode();
                }
                if (this.Competitors != null)
                {
                    hashCode = (hashCode * 59) + this.Competitors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
