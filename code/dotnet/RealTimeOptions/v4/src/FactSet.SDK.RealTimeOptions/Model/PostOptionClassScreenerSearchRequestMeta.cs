/*
 * Real-Time Options API
 *
 * The Options API provides detailed information for option contracts (“options”) and option classes. This API presents a consolidated data model that gives access to options data of global options markets such as OPRA, Australia Exchange, Bovespa, CME Group, EUREX, Euronext, Hong Kong, ICE Futures Europe / US, Montreal Exchange, and others.  An option class is a product group of options from the same exchange and with the same underlying. The API includes endpoints to retrieve fundamental data for an option contract such as exercise right, exercise style, strike, maturity, open interest, underlying, etc. as well as risk measures of an option contract such as delta, omega, implied volatility, etc.  Option chains are provided by the /by-class/list endpoint. The list of option contracts for an option class can be filtered by exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The option screener allows you to search for option classes by using text search, root symbol, or ISIN plus additional criteria such as market, underlying, currency, and category. Similar to other screener endpoints in e.g. the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals), the /value-ranges/get endpoint provides the possible values and value ranges plus the number of option contracts for an option class related to the option contracts per criteria such as exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The Options API for Digital Portals seamlessly integrates with the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) that provides real-time, delayed, and end-of-day pricing data and basic security identifier cross-reference. For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api). 
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeOptions.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeOptions.Model
{
    /// <summary>
    /// The meta member contains the meta information of the request.
    /// </summary>
    [DataContract(Name = "PostOptionClassScreenerSearchRequest_meta")]
    public partial class PostOptionClassScreenerSearchRequestMeta : IEquatable<PostOptionClassScreenerSearchRequestMeta>, IValidatableObject
    {
        /// <summary>
        /// Defines Sort
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortEnum
        {
            /// <summary>
            /// Enum Symbol for value: symbol
            /// </summary>
            [EnumMember(Value = "symbol")]
            Symbol = 1,

            /// <summary>
            /// Enum MINUS_Symbol for value: -symbol
            /// </summary>
            [EnumMember(Value = "-symbol")]
            MINUS_Symbol = 2,

            /// <summary>
            /// Enum Isin for value: isin
            /// </summary>
            [EnumMember(Value = "isin")]
            Isin = 3,

            /// <summary>
            /// Enum MINUS_Isin for value: -isin
            /// </summary>
            [EnumMember(Value = "-isin")]
            MINUS_Isin = 4,

            /// <summary>
            /// Enum Name for value: name
            /// </summary>
            [EnumMember(Value = "name")]
            Name = 5,

            /// <summary>
            /// Enum MINUS_Name for value: -name
            /// </summary>
            [EnumMember(Value = "-name")]
            MINUS_Name = 6,

            /// <summary>
            /// Enum MarketName for value: market.name
            /// </summary>
            [EnumMember(Value = "market.name")]
            MarketName = 7,

            /// <summary>
            /// Enum MINUS_MarketName for value: -market.name
            /// </summary>
            [EnumMember(Value = "-market.name")]
            MINUS_MarketName = 8,

            /// <summary>
            /// Enum UnderlyingName for value: underlying.name
            /// </summary>
            [EnumMember(Value = "underlying.name")]
            UnderlyingName = 9,

            /// <summary>
            /// Enum MINUS_UnderlyingName for value: -underlying.name
            /// </summary>
            [EnumMember(Value = "-underlying.name")]
            MINUS_UnderlyingName = 10,

            /// <summary>
            /// Enum CurrencyCode for value: currency.code
            /// </summary>
            [EnumMember(Value = "currency.code")]
            CurrencyCode = 11,

            /// <summary>
            /// Enum MINUS_CurrencyCode for value: -currency.code
            /// </summary>
            [EnumMember(Value = "-currency.code")]
            MINUS_CurrencyCode = 12,

            /// <summary>
            /// Enum CategoryName for value: category.name
            /// </summary>
            [EnumMember(Value = "category.name")]
            CategoryName = 13,

            /// <summary>
            /// Enum MINUS_CategoryName for value: -category.name
            /// </summary>
            [EnumMember(Value = "-category.name")]
            MINUS_CategoryName = 14

        }



        /// <summary>
        /// Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | symbol | | -symbol | | isin | | -isin | | name | | -name | | market.name | | -market.name | | underlying.name | | -underlying.name | | currency.code | | -currency.code | | category.name | | -category.name |  
        /// </summary>
        /// <value>Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | symbol | | -symbol | | isin | | -isin | | name | | -name | | market.name | | -market.name | | underlying.name | | -underlying.name | | currency.code | | -currency.code | | category.name | | -category.name |  </value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public HashSet<SortEnum> Sort { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOptionClassScreenerSearchRequestMeta" /> class.
        /// </summary>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set..</param>
        /// <param name="language">ISO 639-1 code of the language..</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 7 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | symbol | | -symbol | | isin | | -isin | | name | | -name | | market.name | | -market.name | | underlying.name | | -underlying.name | | currency.code | | -currency.code | | category.name | | -category.name |  .</param>
        public PostOptionClassScreenerSearchRequestMeta(HashSet<string> attributes = default(HashSet<string>), string language = default(string), HashSet<SortEnum> sort = default(HashSet<SortEnum>))
        {
            this.Attributes = attributes;
            this.Language = language;
            this.Sort = sort;
        }

        /// <summary>
        /// Limit the attributes returned in the response to the specified set.
        /// </summary>
        /// <value>Limit the attributes returned in the response to the specified set.</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public HashSet<string> Attributes { get; set; }

        /// <summary>
        /// ISO 639-1 code of the language.
        /// </summary>
        /// <value>ISO 639-1 code of the language.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostOptionClassScreenerSearchRequestMeta {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostOptionClassScreenerSearchRequestMeta);
        }

        /// <summary>
        /// Returns true if PostOptionClassScreenerSearchRequestMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of PostOptionClassScreenerSearchRequestMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostOptionClassScreenerSearchRequestMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.SequenceEqual(input.Sort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Language (string) maxLength
            if (this.Language != null && this.Language.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, length must be less than 2.", new [] { "Language" });
            }

            // Language (string) minLength
            if (this.Language != null && this.Language.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, length must be greater than 2.", new [] { "Language" });
            }

            yield break;
        }
    }

}
