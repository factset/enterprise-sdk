/*
 * Real-Time Options API
 *
 * The Options API provides detailed information for option contracts (“options”) and option classes. This API presents a consolidated data model that gives access to options data of global options markets such as OPRA, Australia Exchange, Bovespa, CME Group, EUREX, Euronext, Hong Kong, ICE Futures Europe / US, Montreal Exchange, and others.  An option class is a product group of options from the same exchange and with the same underlying. The API includes endpoints to retrieve fundamental data for an option contract such as exercise right, exercise style, strike, maturity, open interest, underlying, etc. as well as risk measures of an option contract such as delta, omega, implied volatility, etc.  Option chains are provided by the /by-class/list endpoint. The list of option contracts for an option class can be filtered by exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The option screener allows you to search for option classes by using text search, root symbol, or ISIN plus additional criteria such as market, underlying, currency, and category. Similar to other screener endpoints in e.g. the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals), the /value-ranges/get endpoint provides the possible values and value ranges plus the number of option contracts for an option class related to the option contracts per criteria such as exercise right, exercise style, strike, maturity, open interest, delta, omega, implied volatility, etc.  The Options API for Digital Portals seamlessly integrates with the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) that provides real-time, delayed, and end-of-day pricing data and basic security identifier cross-reference. For direct access to price histories for charting, please refer to the [Real-Time Time Series API](https://developer.factset.com/api-catalog/real-time-time-series-api). 
 *
 * The version of the OpenAPI document: 4.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeOptions.Client;
using FactSet.SDK.RealTimeOptions.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeOptions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fundamental data for an option contract.
        /// </summary>
        /// <remarks>
        /// Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetOptionGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Fundamental data for an option contract.
        /// </summary>
        /// <remarks>
        /// Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetOptionGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Key figures of an option contract.
        /// </summary>
        /// <remarks>
        /// Key figures of an option contract.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetOptionKeyFiguresGet(string identifier, string identifierType, List<string> attributes = default(List<string>));

        /// <summary>
        /// Key figures of an option contract.
        /// </summary>
        /// <remarks>
        /// Key figures of an option contract.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetOptionKeyFiguresGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of option contracts for an option class.
        /// </summary>
        /// <remarks>
        /// List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PostOptionByClassList(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest));

        /// <summary>
        /// List of option contracts for an option class.
        /// </summary>
        /// <remarks>
        /// List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PostOptionByClassListWithHttpInfo(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest));
        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 PostOptionByClassValueRangesGet(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest));

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> PostOptionByClassValueRangesGetWithHttpInfo(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest));
        /// <summary>
        /// Screener for option classes based on option class-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostOptionClassScreenerSearch(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest));

        /// <summary>
        /// Screener for option classes based on option class-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostOptionClassScreenerSearchWithHttpInfo(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fundamental data for an option contract.
        /// </summary>
        /// <remarks>
        /// Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetOptionGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fundamental data for an option contract.
        /// </summary>
        /// <remarks>
        /// Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetOptionGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Key figures of an option contract.
        /// </summary>
        /// <remarks>
        /// Key figures of an option contract.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetOptionKeyFiguresGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Key figures of an option contract.
        /// </summary>
        /// <remarks>
        /// Key figures of an option contract.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetOptionKeyFiguresGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of option contracts for an option class.
        /// </summary>
        /// <remarks>
        /// List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PostOptionByClassListAsync(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of option contracts for an option class.
        /// </summary>
        /// <remarks>
        /// List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PostOptionByClassListWithHttpInfoAsync(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> PostOptionByClassValueRangesGetAsync(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;.
        /// </summary>
        /// <remarks>
        /// The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PostOptionByClassValueRangesGetWithHttpInfoAsync(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Screener for option classes based on option class-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostOptionClassScreenerSearchAsync(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Screener for option classes based on option class-specific parameters.
        /// </summary>
        /// <remarks>
        /// Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostOptionClassScreenerSearchWithHttpInfoAsync(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOptionApi : IOptionApiSync, IOptionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OptionApi : IOptionApi
    {
        private FactSet.SDK.RealTimeOptions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptionGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetOptionKeyFiguresGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostOptionByClassListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostOptionByClassValueRangesGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostOptionClassScreenerSearchResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OptionApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeOptions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeOptions.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeOptions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeOptions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeOptions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OptionApi(FactSet.SDK.RealTimeOptions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeOptions.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeOptions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeOptions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeOptions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OptionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OptionApi(FactSet.SDK.RealTimeOptions.Client.ISynchronousClient client, FactSet.SDK.RealTimeOptions.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeOptions.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeOptions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeOptions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeOptions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeOptions.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeOptions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fundamental data for an option contract. Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetOptionGet(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetOptionGetWithHttpInfo(identifier, identifierType, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fundamental data for an option contract. Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetOptionGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifier' when calling OptionApi->GetOptionGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifierType' when calling OptionApi->GetOptionGet");
            }

            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptionGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/option/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Fundamental data for an option contract. Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetOptionGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptionGetWithHttpInfoAsync(identifier, identifierType, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fundamental data for an option contract. Fundamental data for an option contract; any other instrument yields empty             values for option contract-specific attributes. Dates are interpreted in the time             zone of the exchange. Option contracts are exchange-specific; each option contract             instrument has exactly one notation.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetOptionGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifier' when calling OptionApi->GetOptionGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifierType' when calling OptionApi->GetOptionGet");
            }


            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptionGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/option/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Key figures of an option contract. Key figures of an option contract.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetOptionKeyFiguresGet(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetOptionKeyFiguresGetWithHttpInfo(identifier, identifierType, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Key figures of an option contract. Key figures of an option contract.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetOptionKeyFiguresGetWithHttpInfo(string identifier, string identifierType, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifier' when calling OptionApi->GetOptionKeyFiguresGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifierType' when calling OptionApi->GetOptionKeyFiguresGet");
            }

            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetOptionKeyFiguresGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2004>("/option/key-figures/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionKeyFiguresGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Key figures of an option contract. Key figures of an option contract.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>GetOptionKeyFiguresGetAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetOptionKeyFiguresGetWithHttpInfoAsync(identifier, identifierType, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Key figures of an option contract. Key figures of an option contract.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">Identifier to resolve.</param>
        /// <param name="identifierType">Type of the identifier. An instrument level identifier is resolved to a listing level identifier according to the configured listing selection rules. | Value | Description | | - -- | - -- | | idInstrument | MDG identifier of an instrument. | | idNotation | MDG identifier of a listing. | | fdsPermanentIdentifierSecurity | FactSet Permanent Identifier on security level. | | fdsPermanentIdentifierListing | FactSet Permanent Identifier on listing level. | | fdsPermanentIdentifierRegional | Regional FactSet Permanent Identifier, identifying the primary listing in the region. | | tickerExchange | FactSet market symbol of a listing. | | tickerRegion | Regional FactSet ticker symbol, identifying the primary listing in the region. | | sedol | SEDOL or IDII of a listing. | | isin | ISIN of an instrument. | | wkn | WKN of an instrument. | | valor | Valor number of an instrument. | | cusip | CUSIP or CINS identifier of an instrument |  </param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetOptionKeyFiguresGetWithHttpInfoAsync(string identifier, string identifierType, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifier' when calling OptionApi->GetOptionKeyFiguresGet");
            }

            // verify the required parameter 'identifierType' is set
            if (identifierType == null)
            {
                throw new FactSet.SDK.RealTimeOptions.Client.ApiException(400, "Missing required parameter 'identifierType' when calling OptionApi->GetOptionKeyFiguresGet");
            }


            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifier", identifier));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("", "identifierType", identifierType));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeOptions.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetOptionKeyFiguresGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/option/key-figures/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptionKeyFiguresGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of option contracts for an option class. List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PostOptionByClassList(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest))
        {
            var localVarResponse = PostOptionByClassListWithHttpInfo(postOptionByClassListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of option contracts for an option class. List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> PostOptionByClassListWithHttpInfo(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest))
        {
            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postOptionByClassListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostOptionByClassListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2001>("/option/by-class/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOptionByClassList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of option contracts for an option class. List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>PostOptionByClassListAsync(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostOptionByClassListWithHttpInfoAsync(postOptionByClassListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of option contracts for an option class. List of option contracts for an option class. The list can be filtered based on option contract-specific parameters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PostOptionByClassListWithHttpInfoAsync(PostOptionByClassListRequest postOptionByClassListRequest = default(PostOptionByClassListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postOptionByClassListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostOptionByClassListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2001>("/option/by-class/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOptionByClassList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 PostOptionByClassValueRangesGet(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest))
        {
            var localVarResponse = PostOptionByClassValueRangesGetWithHttpInfo(postOptionByClassValueRangesGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> PostOptionByClassValueRangesGetWithHttpInfo(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest))
        {
            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postOptionByClassValueRangesGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostOptionByClassValueRangesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2002>("/option/by-class/value-ranges/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOptionByClassValueRangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>PostOptionByClassValueRangesGetAsync(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostOptionByClassValueRangesGetWithHttpInfoAsync(postOptionByClassValueRangesGetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. The endpoint returns the possible values and value ranges for the parameters used in the endpoint &#x60;/option/by-class/list&#x60;. It allows to request the values and value ranges only for a restricted set of notations that match predefined parameters. If more than one notation of an instrument matches the parameters, and no market priority has been specified, only the notation with the highest trading volume, averaged over one month, is considered. The functionality may be used to pre-fill the values and value ranges of the parameters of the &#x60;/option/by-class/list&#x60; endpoint so that performing a search always leads to a non-empty list of notations. Lists of distinct values, e.g. identifiers, are sorted descending by the number of notations for each value.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionByClassValueRangesGetRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PostOptionByClassValueRangesGetWithHttpInfoAsync(PostOptionByClassValueRangesGetRequest postOptionByClassValueRangesGetRequest = default(PostOptionByClassValueRangesGetRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postOptionByClassValueRangesGetRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostOptionByClassValueRangesGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2002>("/option/by-class/value-ranges/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOptionByClassValueRangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Screener for option classes based on option class-specific parameters. Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostOptionClassScreenerSearch(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest))
        {
            var localVarResponse = PostOptionClassScreenerSearchWithHttpInfo(postOptionClassScreenerSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Screener for option classes based on option class-specific parameters. Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostOptionClassScreenerSearchWithHttpInfo(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest))
        {
            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postOptionClassScreenerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostOptionClassScreenerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/option/class/screener/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOptionClassScreenerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Screener for option classes based on option class-specific parameters. Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostOptionClassScreenerSearchAsync(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostOptionClassScreenerSearchWithHttpInfoAsync(postOptionClassScreenerSearchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Screener for option classes based on option class-specific parameters. Screener for option classes based on option class-specific parameters. An option class is defined by an exchange and includes all option contracts with the same reference data (e.g. underlying instrument). The result is limited to the 500 option classes with the most option contracts per class, that satisfy all the selected filters. All identifiers used as parameters must be valid and entitled.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeOptions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postOptionClassScreenerSearchRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostOptionClassScreenerSearchWithHttpInfoAsync(PostOptionClassScreenerSearchRequest postOptionClassScreenerSearchRequest = default(PostOptionClassScreenerSearchRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeOptions.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeOptions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeOptions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postOptionClassScreenerSearchRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeOptions.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostOptionClassScreenerSearchResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/option/class/screener/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOptionClassScreenerSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
