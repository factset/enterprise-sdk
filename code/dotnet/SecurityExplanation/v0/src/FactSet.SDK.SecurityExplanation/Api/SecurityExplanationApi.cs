/*
 * Security Explanation API
 *
 * Allow clients to use Security Explanation through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.SecurityExplanation.Client;
using FactSet.SDK.SecurityExplanation.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.SecurityExplanation.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityExplanationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get explanation status by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the status of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ExplanationStatusRoot</returns>
        ExplanationStatusRoot CheckExplanationStatus(string id);

        /// <summary>
        /// Get explanation status by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the status of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ExplanationStatusRoot</returns>
        ApiResponse<ExplanationStatusRoot> CheckExplanationStatusWithHttpInfo(string id);
        /// <summary>
        /// Get explanation results by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the results of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>SecurityExplanationApi.FetchExplanationResultsResponseWrapper</returns>
        SecurityExplanationApi.FetchExplanationResultsResponseWrapper FetchExplanationResults(string id);

        /// <summary>
        /// Get explanation results by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the results of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of SecurityExplanationApi.FetchExplanationResultsResponseWrapper</returns>
        ApiResponse<SecurityExplanationApi.FetchExplanationResultsResponseWrapper> FetchExplanationResultsWithHttpInfo(string id);
        /// <summary>
        /// Request explanation
        /// </summary>
        /// <remarks>
        /// Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <returns>ExplanationStatusRoot</returns>
        ExplanationStatusRoot GetExplanation(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string));

        /// <summary>
        /// Request explanation
        /// </summary>
        /// <remarks>
        /// Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <returns>ApiResponse of ExplanationStatusRoot</returns>
        ApiResponse<ExplanationStatusRoot> GetExplanationWithHttpInfo(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityExplanationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get explanation status by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the status of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExplanationStatusRoot</returns>
        System.Threading.Tasks.Task<ExplanationStatusRoot> CheckExplanationStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get explanation status by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the status of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExplanationStatusRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExplanationStatusRoot>> CheckExplanationStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get explanation results by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the results of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityExplanationResponseRoot</returns>
        System.Threading.Tasks.Task<SecurityExplanationApi.FetchExplanationResultsResponseWrapper> FetchExplanationResultsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get explanation results by id
        /// </summary>
        /// <remarks>
        /// Use this endpoint to fetch the results of the given explanation ID.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityExplanationApi.FetchExplanationResultsResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityExplanationApi.FetchExplanationResultsResponseWrapper>> FetchExplanationResultsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request explanation
        /// </summary>
        /// <remarks>
        /// Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExplanationStatusRoot</returns>
        System.Threading.Tasks.Task<ExplanationStatusRoot> GetExplanationAsync(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request explanation
        /// </summary>
        /// <remarks>
        /// Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </remarks>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExplanationStatusRoot)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExplanationStatusRoot>> GetExplanationWithHttpInfoAsync(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityExplanationApi : ISecurityExplanationApiSync, ISecurityExplanationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityExplanationApi : ISecurityExplanationApi
    {
        private FactSet.SDK.SecurityExplanation.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CheckExplanationStatusResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(ExplanationStatusRoot) },
            { (HttpStatusCode)202, typeof(ExplanationStatusRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> FetchExplanationResultsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SecurityExplanationResponseRoot) },
            { (HttpStatusCode)202, typeof(ExplanationStatusRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
            { (HttpStatusCode)404, typeof(ClientErrorResponse) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetExplanationResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(ExplanationStatusRoot) },
            { (HttpStatusCode)400, typeof(ClientErrorResponse) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /explanation/{id}/result returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 200 : SecurityExplanationResponseRoot<br />
        /// Expected response if explanation is generated.
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : ExplanationStatusRoot<br />
        /// Expected response, returns the poll ID with status.
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// FetchExplanationResultsResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 200:
        ///     SecurityExplanationResponseRoot data200 = response.getResponse200();
        ///     break;
        ///   case 202:
        ///     ExplanationStatusRoot data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class FetchExplanationResultsResponseWrapper {

            /// <summary>This constructor initializes the new FetchExplanationResultsResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public FetchExplanationResultsResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// Expected response if explanation is generated.
            /// </summary>
            public SecurityExplanationResponseRoot Response200
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 200)
                    {
                        throw new FactSet.SDK.SecurityExplanation.Client.ApiException(500, "Invalid response getter called. Response200 can't return a " + StatusCode + " response");
                    }
                    return (SecurityExplanationResponseRoot) Response;
                }
            }
            
            /// <summary>
            /// Expected response, returns the poll ID with status.
            /// </summary>
            public ExplanationStatusRoot Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.SecurityExplanation.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (ExplanationStatusRoot) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExplanationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityExplanationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExplanationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityExplanationApi(string basePath)
        {
            this.Configuration = FactSet.SDK.SecurityExplanation.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecurityExplanation.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.SecurityExplanation.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.SecurityExplanation.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecurityExplanation.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.SecurityExplanation.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExplanationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityExplanationApi(FactSet.SDK.SecurityExplanation.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.SecurityExplanation.Client.Configuration.MergeConfigurations(
                FactSet.SDK.SecurityExplanation.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.SecurityExplanation.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.SecurityExplanation.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.SecurityExplanation.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExplanationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SecurityExplanationApi(FactSet.SDK.SecurityExplanation.Client.ISynchronousClient client, FactSet.SDK.SecurityExplanation.Client.IAsynchronousClient asyncClient, FactSet.SDK.SecurityExplanation.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.SecurityExplanation.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.SecurityExplanation.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.SecurityExplanation.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.SecurityExplanation.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.SecurityExplanation.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get explanation status by id Use this endpoint to fetch the status of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ExplanationStatusRoot</returns>
        public ExplanationStatusRoot CheckExplanationStatus(string id)
        {
            var localVarResponse = CheckExplanationStatusWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get explanation status by id Use this endpoint to fetch the status of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ExplanationStatusRoot</returns>
        public ApiResponse<ExplanationStatusRoot> CheckExplanationStatusWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.SecurityExplanation.Client.ApiException(400, "Missing required parameter 'id' when calling SecurityExplanationApi->CheckExplanationStatus");
            }

            FactSet.SDK.SecurityExplanation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityExplanation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityExplanation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CheckExplanationStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ExplanationStatusRoot>("/explanation/{id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckExplanationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get explanation status by id Use this endpoint to fetch the status of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExplanationStatusRoot</returns>
        public async System.Threading.Tasks.Task<ExplanationStatusRoot>CheckExplanationStatusAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CheckExplanationStatusWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get explanation status by id Use this endpoint to fetch the status of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExplanationStatusRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ExplanationStatusRoot>> CheckExplanationStatusWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.SecurityExplanation.Client.ApiException(400, "Missing required parameter 'id' when calling SecurityExplanationApi->CheckExplanationStatus");
            }


            FactSet.SDK.SecurityExplanation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityExplanation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityExplanation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CheckExplanationStatusResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExplanationStatusRoot>("/explanation/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckExplanationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get explanation results by id Use this endpoint to fetch the results of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>SecurityExplanationApi.FetchExplanationResultsResponseWrapper</returns>
        public SecurityExplanationApi.FetchExplanationResultsResponseWrapper FetchExplanationResults(string id)
        {
            var localVarResponse = FetchExplanationResultsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get explanation results by id Use this endpoint to fetch the results of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of SecurityExplanationResponseRoot</returns>
        public ApiResponse<SecurityExplanationApi.FetchExplanationResultsResponseWrapper> FetchExplanationResultsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.SecurityExplanation.Client.ApiException(400, "Missing required parameter 'id' when calling SecurityExplanationApi->FetchExplanationResults");
            }

            FactSet.SDK.SecurityExplanation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityExplanation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityExplanation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = FetchExplanationResultsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/explanation/{id}/result", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchExplanationResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var fetchexplanationresultsResponse = new FetchExplanationResultsResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<FetchExplanationResultsResponseWrapper>(localVarResponse.StatusCode, fetchexplanationresultsResponse);
        }

        /// <summary>
        /// Get explanation results by id Use this endpoint to fetch the results of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityExplanationResponseRoot</returns>
        public async System.Threading.Tasks.Task<SecurityExplanationApi.FetchExplanationResultsResponseWrapper>FetchExplanationResultsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await FetchExplanationResultsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get explanation results by id Use this endpoint to fetch the results of the given explanation ID.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityExplanationResponseRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SecurityExplanationApi.FetchExplanationResultsResponseWrapper>> FetchExplanationResultsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.SecurityExplanation.Client.ApiException(400, "Missing required parameter 'id' when calling SecurityExplanationApi->FetchExplanationResults");
            }


            FactSet.SDK.SecurityExplanation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityExplanation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityExplanation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = FetchExplanationResultsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/explanation/{id}/result", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchExplanationResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var fetchexplanationresultsResponse = new FetchExplanationResultsResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<FetchExplanationResultsResponseWrapper>(localVarResponse.StatusCode, fetchexplanationresultsResponse);
        }

        /// <summary>
        /// Request explanation Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <returns>ExplanationStatusRoot</returns>
        public ExplanationStatusRoot GetExplanation(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string))
        {
            var localVarResponse = GetExplanationWithHttpInfo(id, startDate, endDate, enableLinks, explanationStyle);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request explanation Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <returns>ApiResponse of ExplanationStatusRoot</returns>
        public ApiResponse<ExplanationStatusRoot> GetExplanationWithHttpInfo(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.SecurityExplanation.Client.ApiException(400, "Missing required parameter 'id' when calling SecurityExplanationApi->GetExplanation");
            }

            FactSet.SDK.SecurityExplanation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityExplanation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            if (enableLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "enableLinks", enableLinks));
            }
            if (explanationStyle != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "explanationStyle", explanationStyle));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityExplanation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetExplanationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ExplanationStatusRoot>("/explanation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExplanation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Request explanation Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExplanationStatusRoot</returns>
        public async System.Threading.Tasks.Task<ExplanationStatusRoot>GetExplanationAsync(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetExplanationWithHttpInfoAsync(id, startDate, endDate, enableLinks, explanationStyle, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request explanation Use this endpoint to initiate a request to the LLM based on the required query parameters.
        /// </summary>
        /// <exception cref="FactSet.SDK.SecurityExplanation.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="enableLinks"> (optional, default to true)</param>
        /// <param name="explanationStyle"> (optional, default to short)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExplanationStatusRoot)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ExplanationStatusRoot>> GetExplanationWithHttpInfoAsync(string id, DateTime startDate, DateTime endDate, bool? enableLinks = default(bool?), string explanationStyle = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.SecurityExplanation.Client.ApiException(400, "Missing required parameter 'id' when calling SecurityExplanationApi->GetExplanation");
            }


            FactSet.SDK.SecurityExplanation.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.SecurityExplanation.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.SecurityExplanation.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "startDate", new DateOnlyParameter(startDate)));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "endDate", new DateOnlyParameter(endDate)));
            if (enableLinks != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "enableLinks", enableLinks));
            }
            if (explanationStyle != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.SecurityExplanation.Client.ClientUtils.ParameterToMultiMap("", "explanationStyle", explanationStyle));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.SecurityExplanation.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetExplanationResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExplanationStatusRoot>("/explanation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExplanation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
