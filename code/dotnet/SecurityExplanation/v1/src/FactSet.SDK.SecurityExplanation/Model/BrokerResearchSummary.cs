/*
 * Security Explanation API
 *
 * Allow clients to use Security Explanation through APIs.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecurityExplanation.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecurityExplanation.Model
{
    /// <summary>
    /// Broker research summary configuration object.
    /// </summary>
    [DataContract(Name = "BrokerResearchSummary")]
    public partial class BrokerResearchSummary : IEquatable<BrokerResearchSummary>, IValidatableObject
    {
        /// <summary>
        /// Include summarized broker research notes on the company, or just the footnote, or none. Only available for Broker Research users
        /// </summary>
        /// <value>Include summarized broker research notes on the company, or just the footnote, or none. Only available for Broker Research users</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Summary for value: summary
            /// </summary>
            [EnumMember(Value = "summary")]
            Summary = 2,

            /// <summary>
            /// Enum Footnote for value: footnote
            /// </summary>
            [EnumMember(Value = "footnote")]
            Footnote = 3

        }


        /// <summary>
        /// Include summarized broker research notes on the company, or just the footnote, or none. Only available for Broker Research users
        /// </summary>
        /// <value>Include summarized broker research notes on the company, or just the footnote, or none. Only available for Broker Research users</value>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerResearchSummary" /> class.
        /// </summary>
        /// <param name="style">Include summarized broker research notes on the company, or just the footnote, or none. Only available for Broker Research users (default to StyleEnum.None).</param>
        /// <param name="brokerIds">List of broker IDs covering the company to receive individual research summaries for each over the specified period.Summaries are presented separately by broker, not combined..</param>
        public BrokerResearchSummary(StyleEnum? style = StyleEnum.None, List<int> brokerIds = default(List<int>))
        {
            this.Style = style;
            this.BrokerIds = brokerIds;
        }

        /// <summary>
        /// List of broker IDs covering the company to receive individual research summaries for each over the specified period.Summaries are presented separately by broker, not combined.
        /// </summary>
        /// <value>List of broker IDs covering the company to receive individual research summaries for each over the specified period.Summaries are presented separately by broker, not combined.</value>
        [DataMember(Name = "brokerIds", EmitDefaultValue = false)]
        public List<int> BrokerIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrokerResearchSummary {\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  BrokerIds: ").Append(BrokerIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrokerResearchSummary);
        }

        /// <summary>
        /// Returns true if BrokerResearchSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of BrokerResearchSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrokerResearchSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Style == input.Style ||
                    this.Style.Equals(input.Style)
                ) && 
                (
                    this.BrokerIds == input.BrokerIds ||
                    this.BrokerIds != null &&
                    input.BrokerIds != null &&
                    this.BrokerIds.SequenceEqual(input.BrokerIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Style.GetHashCode();
                if (this.BrokerIds != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
