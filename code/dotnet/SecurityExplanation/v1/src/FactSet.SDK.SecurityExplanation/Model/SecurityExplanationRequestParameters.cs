/*
 * Security Explanation API
 *
 * Allow clients to use Security Explanation through APIs.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.SecurityExplanation.Client.OpenAPIDateConverter;

namespace FactSet.SDK.SecurityExplanation.Model
{
    /// <summary>
    /// Parameters for the security explanation request
    /// </summary>
    [DataContract(Name = "SecurityExplanationRequestParameters")]
    public partial class SecurityExplanationRequestParameters : IEquatable<SecurityExplanationRequestParameters>, IValidatableObject
    {
        /// <summary>
        /// Determines the style of the Explanation
        /// </summary>
        /// <value>Determines the style of the Explanation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExplanationStyleEnum
        {
            /// <summary>
            /// Enum Short for value: short
            /// </summary>
            [EnumMember(Value = "short")]
            Short = 1,

            /// <summary>
            /// Enum Long for value: long
            /// </summary>
            [EnumMember(Value = "long")]
            Long = 2

        }


        /// <summary>
        /// Determines the style of the Explanation
        /// </summary>
        /// <value>Determines the style of the Explanation</value>
        [DataMember(Name = "explanationStyle", EmitDefaultValue = false)]
        public ExplanationStyleEnum? ExplanationStyle { get; set; }
        /// <summary>
        /// For IRN users only; select to include a summary, footnotes, or no IRN notes for the period.
        /// </summary>
        /// <value>For IRN users only; select to include a summary, footnotes, or no IRN notes for the period.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InternalInvestmentRationaleEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Summary for value: summary
            /// </summary>
            [EnumMember(Value = "summary")]
            Summary = 2,

            /// <summary>
            /// Enum Footnote for value: footnote
            /// </summary>
            [EnumMember(Value = "footnote")]
            Footnote = 3

        }


        /// <summary>
        /// For IRN users only; select to include a summary, footnotes, or no IRN notes for the period.
        /// </summary>
        /// <value>For IRN users only; select to include a summary, footnotes, or no IRN notes for the period.</value>
        [DataMember(Name = "internalInvestmentRationale", EmitDefaultValue = false)]
        public InternalInvestmentRationaleEnum? InternalInvestmentRationale { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExplanationRequestParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityExplanationRequestParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExplanationRequestParameters" /> class.
        /// </summary>
        /// <param name="id">Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. (required).</param>
        /// <param name="startDate">Start date of the explain request in YYYY-MM-DD format. (required).</param>
        /// <param name="endDate">End date of the explain request in YYYY-MM-DD format. (required).</param>
        /// <param name="enableLinks">Include or exclude hyperlinks to underlying sources. (default to false).</param>
        /// <param name="explanationStyle">Determines the style of the Explanation (default to ExplanationStyleEnum.Short).</param>
        /// <param name="includePerformance">Include or exclude the company&#39;s total return for the request period. (default to false).</param>
        /// <param name="internalInvestmentRationale">For IRN users only; select to include a summary, footnotes, or no IRN notes for the period. (default to InternalInvestmentRationaleEnum.None).</param>
        /// <param name="includeCompanyDescription">Include or exclude the target company&#39;s business description. (default to false).</param>
        /// <param name="includeMarketSummary">Include or exclude a second paragraph in the explanation, offering market and sector news relating to the target company for additional context. (default to true).</param>
        /// <param name="includeInternalInvestmentRationaleRecommendation">For IRN users only; include or exclude your firm&#39;s rating in the summary or footnote. (default to true).</param>
        /// <param name="includeInternalInvestmentRationalePriceTarget">For IRN users only; include or exclude your firm&#39;s price target in the summary or footnote. (default to true).</param>
        /// <param name="brokerResearchSummary">brokerResearchSummary.</param>
        public SecurityExplanationRequestParameters(string id, DateTime startDate, DateTime endDate,bool enableLinks = false, ExplanationStyleEnum? explanationStyle = ExplanationStyleEnum.Short, bool includePerformance = false, InternalInvestmentRationaleEnum? internalInvestmentRationale = InternalInvestmentRationaleEnum.None, bool includeCompanyDescription = false, bool includeMarketSummary = true, bool includeInternalInvestmentRationaleRecommendation = true, bool includeInternalInvestmentRationalePriceTarget = true, BrokerResearchSummary brokerResearchSummary = default(BrokerResearchSummary))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for SecurityExplanationRequestParameters and cannot be null");
            }
            this.Id = id;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.EnableLinks = enableLinks;
            this.ExplanationStyle = explanationStyle;
            this.IncludePerformance = includePerformance;
            this.InternalInvestmentRationale = internalInvestmentRationale;
            this.IncludeCompanyDescription = includeCompanyDescription;
            this.IncludeMarketSummary = includeMarketSummary;
            this.IncludeInternalInvestmentRationaleRecommendation = includeInternalInvestmentRationaleRecommendation;
            this.IncludeInternalInvestmentRationalePriceTarget = includeInternalInvestmentRationalePriceTarget;
            this.BrokerResearchSummary = brokerResearchSummary;
        }

        /// <summary>
        /// Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.
        /// </summary>
        /// <value>Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Start date of the explain request in YYYY-MM-DD format.
        /// </summary>
        /// <value>Start date of the explain request in YYYY-MM-DD format.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// End date of the explain request in YYYY-MM-DD format.
        /// </summary>
        /// <value>End date of the explain request in YYYY-MM-DD format.</value>
        [DataMember(Name = "endDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Include or exclude hyperlinks to underlying sources.
        /// </summary>
        /// <value>Include or exclude hyperlinks to underlying sources.</value>
        [DataMember(Name = "enableLinks", EmitDefaultValue = true)]
        public bool EnableLinks { get; set; }

        /// <summary>
        /// Include or exclude the company&#39;s total return for the request period.
        /// </summary>
        /// <value>Include or exclude the company&#39;s total return for the request period.</value>
        [DataMember(Name = "includePerformance", EmitDefaultValue = true)]
        public bool IncludePerformance { get; set; }

        /// <summary>
        /// Include or exclude the target company&#39;s business description.
        /// </summary>
        /// <value>Include or exclude the target company&#39;s business description.</value>
        [DataMember(Name = "includeCompanyDescription", EmitDefaultValue = true)]
        public bool IncludeCompanyDescription { get; set; }

        /// <summary>
        /// Include or exclude a second paragraph in the explanation, offering market and sector news relating to the target company for additional context.
        /// </summary>
        /// <value>Include or exclude a second paragraph in the explanation, offering market and sector news relating to the target company for additional context.</value>
        [DataMember(Name = "includeMarketSummary", EmitDefaultValue = true)]
        public bool IncludeMarketSummary { get; set; }

        /// <summary>
        /// For IRN users only; include or exclude your firm&#39;s rating in the summary or footnote.
        /// </summary>
        /// <value>For IRN users only; include or exclude your firm&#39;s rating in the summary or footnote.</value>
        [DataMember(Name = "includeInternalInvestmentRationaleRecommendation", EmitDefaultValue = true)]
        public bool IncludeInternalInvestmentRationaleRecommendation { get; set; }

        /// <summary>
        /// For IRN users only; include or exclude your firm&#39;s price target in the summary or footnote.
        /// </summary>
        /// <value>For IRN users only; include or exclude your firm&#39;s price target in the summary or footnote.</value>
        [DataMember(Name = "includeInternalInvestmentRationalePriceTarget", EmitDefaultValue = true)]
        public bool IncludeInternalInvestmentRationalePriceTarget { get; set; }

        /// <summary>
        /// Gets or Sets BrokerResearchSummary
        /// </summary>
        [DataMember(Name = "brokerResearchSummary", EmitDefaultValue = false)]
        public BrokerResearchSummary BrokerResearchSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityExplanationRequestParameters {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EnableLinks: ").Append(EnableLinks).Append("\n");
            sb.Append("  ExplanationStyle: ").Append(ExplanationStyle).Append("\n");
            sb.Append("  IncludePerformance: ").Append(IncludePerformance).Append("\n");
            sb.Append("  InternalInvestmentRationale: ").Append(InternalInvestmentRationale).Append("\n");
            sb.Append("  IncludeCompanyDescription: ").Append(IncludeCompanyDescription).Append("\n");
            sb.Append("  IncludeMarketSummary: ").Append(IncludeMarketSummary).Append("\n");
            sb.Append("  IncludeInternalInvestmentRationaleRecommendation: ").Append(IncludeInternalInvestmentRationaleRecommendation).Append("\n");
            sb.Append("  IncludeInternalInvestmentRationalePriceTarget: ").Append(IncludeInternalInvestmentRationalePriceTarget).Append("\n");
            sb.Append("  BrokerResearchSummary: ").Append(BrokerResearchSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityExplanationRequestParameters);
        }

        /// <summary>
        /// Returns true if SecurityExplanationRequestParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityExplanationRequestParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityExplanationRequestParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EnableLinks == input.EnableLinks ||
                    this.EnableLinks.Equals(input.EnableLinks)
                ) && 
                (
                    this.ExplanationStyle == input.ExplanationStyle ||
                    this.ExplanationStyle.Equals(input.ExplanationStyle)
                ) && 
                (
                    this.IncludePerformance == input.IncludePerformance ||
                    this.IncludePerformance.Equals(input.IncludePerformance)
                ) && 
                (
                    this.InternalInvestmentRationale == input.InternalInvestmentRationale ||
                    this.InternalInvestmentRationale.Equals(input.InternalInvestmentRationale)
                ) && 
                (
                    this.IncludeCompanyDescription == input.IncludeCompanyDescription ||
                    this.IncludeCompanyDescription.Equals(input.IncludeCompanyDescription)
                ) && 
                (
                    this.IncludeMarketSummary == input.IncludeMarketSummary ||
                    this.IncludeMarketSummary.Equals(input.IncludeMarketSummary)
                ) && 
                (
                    this.IncludeInternalInvestmentRationaleRecommendation == input.IncludeInternalInvestmentRationaleRecommendation ||
                    this.IncludeInternalInvestmentRationaleRecommendation.Equals(input.IncludeInternalInvestmentRationaleRecommendation)
                ) && 
                (
                    this.IncludeInternalInvestmentRationalePriceTarget == input.IncludeInternalInvestmentRationalePriceTarget ||
                    this.IncludeInternalInvestmentRationalePriceTarget.Equals(input.IncludeInternalInvestmentRationalePriceTarget)
                ) && 
                (
                    this.BrokerResearchSummary == input.BrokerResearchSummary ||
                    (this.BrokerResearchSummary != null &&
                    this.BrokerResearchSummary.Equals(input.BrokerResearchSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableLinks.GetHashCode();
                hashCode = (hashCode * 59) + this.ExplanationStyle.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludePerformance.GetHashCode();
                hashCode = (hashCode * 59) + this.InternalInvestmentRationale.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeCompanyDescription.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeMarketSummary.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeInternalInvestmentRationaleRecommendation.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeInternalInvestmentRationalePriceTarget.GetHashCode();
                if (this.BrokerResearchSummary != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerResearchSummary.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
