/*
 * StreetAccount News API
 *
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Categories (the equivalent of 'Subjects' within the Workstation), Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.   **StreetAccount Historical Stories:**  These endpoints provide access to historical StreetAccount (SA) news. The API delivers SA stories in XML format based on user-specified date input parameters. Output files are securely available to users through a URL. This API has three endpoints: Create, Status, and Get.  Please note that this API only supports adhoc requests for historical files and does not support real-time files. If real-time push is required, consider using other methods such as SFTP, QNT account, or Azure Storage. Both historical and real-time Street Account news can be delivered via SFTP, QNT account, or Azure Storage.  The files delivered contain both metadata and content body, eliminating the need for multiple requests through multiple services to retrieve all the information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.StreetAccountNews.Client;
using FactSet.SDK.StreetAccountNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.StreetAccountNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreetAccountHistoricalStoriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint.
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>GetfilesResponse</returns>
        GetfilesResponse GetFilesData(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint.
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of GetfilesResponse</returns>
        ApiResponse<GetfilesResponse> GetFilesDataWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Returns the status of the request
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper</returns>
        StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper GetStatusData(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));

        /// <summary>
        /// Returns the status of the request
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper</returns>
        ApiResponse<StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper> GetStatusDataWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?));
        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data.
        /// </summary>
        /// <remarks>
        /// Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse RequestFiles(CreateFilesRequest createFilesRequest);

        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data.
        /// </summary>
        /// <remarks>
        /// Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> RequestFilesWithHttpInfo(CreateFilesRequest createFilesRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreetAccountHistoricalStoriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint.
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetfilesResponse</returns>
        System.Threading.Tasks.Task<GetfilesResponse> GetFilesDataAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint.
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetfilesResponse>> GetFilesDataWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the status of the request
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        System.Threading.Tasks.Task<StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper> GetStatusDataAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the status of the request
        /// </summary>
        /// <remarks>
        /// Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper>> GetStatusDataWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data.
        /// </summary>
        /// <remarks>
        /// Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> RequestFilesAsync(CreateFilesRequest createFilesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data.
        /// </summary>
        /// <remarks>
        /// Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> RequestFilesWithHttpInfoAsync(CreateFilesRequest createFilesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStreetAccountHistoricalStoriesApi : IStreetAccountHistoricalStoriesApiSync, IStreetAccountHistoricalStoriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StreetAccountHistoricalStoriesApi : IStreetAccountHistoricalStoriesApi
    {
        private FactSet.SDK.StreetAccountNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetFilesDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GetfilesResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStatusDataResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(SubmittedResponse) },
            { (HttpStatusCode)202, typeof(AcceptedResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> RequestFilesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)202, typeof(AcceptedResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)403, typeof(Error) },
            { (HttpStatusCode)429, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        
        /// <summary>
        /// Wrapper to support GET /historical/files/status returning different types
        /// per status code.
        ///
        /// <list>
        /// <item>
        /// <description>
        /// 201 : SubmittedResponse<br />
        /// The Request has been Created. 
        /// </description>
        /// </item>
        /// 
        /// <item>
        /// <description>
        /// 202 : AcceptedResponse<br />
        /// The Request has been Accepted. 
        /// </description>
        /// </item>
        /// </list>
        ///
        /// <example>
        /// <code>
        /// GetStatusDataResponseWrapper response = ...;
        /// switch (response.statusCode)
        /// {
        ///   case 201:
        ///     SubmittedResponse data201 = response.getResponse201();
        ///     break;
        ///   case 202:
        ///     AcceptedResponse data202 = response.getResponse202();
        ///     break;
        ///  }
        /// </code>
        /// </example>
        /// </summary>
        public class GetStatusDataResponseWrapper {

            /// <summary>This constructor initializes the new GetStatusDataResponseWrapper to
            /// (<paramref name="statusCode"/>,<paramref name="response"/>).
            /// </summary>
            /// <param name="statusCode">Http status code of the response</param>
            /// <param name="response">Raw response</param>
            public GetStatusDataResponseWrapper(HttpStatusCode statusCode, object response)
            {
                StatusCode = statusCode;
                Response = response;
            }

            /// <summary>
            /// Http status code of the response
            /// </summary>
            public HttpStatusCode StatusCode { get; }

            /// <summary>
            /// Raw Object response
            /// </summary>
            public object Response { get; }

            
            /// <summary>
            /// The Request has been Created. 
            /// </summary>
            public SubmittedResponse Response201
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 201)
                    {
                        throw new FactSet.SDK.StreetAccountNews.Client.ApiException(500, "Invalid response getter called. Response201 can't return a " + StatusCode + " response");
                    }
                    return (SubmittedResponse) Response;
                }
            }
            
            /// <summary>
            /// The Request has been Accepted. 
            /// </summary>
            public AcceptedResponse Response202
            {
                get
                {
                    if (StatusCode != (HttpStatusCode) 202)
                    {
                        throw new FactSet.SDK.StreetAccountNews.Client.ApiException(500, "Invalid response getter called. Response202 can't return a " + StatusCode + " response");
                    }
                    return (AcceptedResponse) Response;
                }
            }
            
        }



        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreetAccountHistoricalStoriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StreetAccountHistoricalStoriesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.StreetAccountNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StreetAccountNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.StreetAccountNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StreetAccountHistoricalStoriesApi(FactSet.SDK.StreetAccountNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.StreetAccountNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StreetAccountNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAccountHistoricalStoriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StreetAccountHistoricalStoriesApi(FactSet.SDK.StreetAccountNews.Client.ISynchronousClient client, FactSet.SDK.StreetAccountNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.StreetAccountNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.StreetAccountNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint. Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>GetfilesResponse</returns>
        public GetfilesResponse GetFilesData(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetFilesDataWithHttpInfo(id, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint. Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of GetfilesResponse</returns>
        public ApiResponse<GetfilesResponse> GetFilesDataWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'id' when calling StreetAccountHistoricalStoriesApi->GetFilesData");
            }

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetFilesDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            GetfilesResponse>("/historical/files/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilesData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint. Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetfilesResponse</returns>
        public async System.Threading.Tasks.Task<GetfilesResponse>GetFilesDataAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetFilesDataWithHttpInfoAsync(id, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the StreetAccount Historical data in files requested in the /historical/files/create endpoint. Need to plug-in the ID got from /historical/files/create into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to collect the results of the query</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the   beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetfilesResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GetfilesResponse>> GetFilesDataWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'id' when calling StreetAccountHistoricalStoriesApi->GetFilesData");
            }


            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetFilesDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetfilesResponse>("/historical/files/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilesData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the status of the request Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper</returns>
        public StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper GetStatusData(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            var localVarResponse = GetStatusDataWithHttpInfo(id, paginationLimit, paginationOffset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the request Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <returns>ApiResponse of SubmittedResponse</returns>
        public ApiResponse<StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper> GetStatusDataWithHttpInfo(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'id' when calling StreetAccountHistoricalStoriesApi->GetStatusData");
            }

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStatusDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Object>("/historical/files/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatusData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            var getstatusdataResponse = new GetStatusDataResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetStatusDataResponseWrapper>(localVarResponse.StatusCode, getstatusdataResponse);
        }

        /// <summary>
        /// Returns the status of the request Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubmittedResponse</returns>
        public async System.Threading.Tasks.Task<StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper>GetStatusDataAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStatusDataWithHttpInfoAsync(id, paginationLimit, paginationOffset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of the request Need to plug-in the ID get from /historical/files/create endpoint into /historical/files/status endpoint
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID returned by the /historical/files/create endpoint to know the status</param>
        /// <param name="paginationLimit">Specifies the maximum number of results to return per result (optional)</param>
        /// <param name="paginationOffset">Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubmittedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<StreetAccountHistoricalStoriesApi.GetStatusDataResponseWrapper>> GetStatusDataWithHttpInfoAsync(string id, int? paginationLimit = default(int?), int? paginationOffset = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'id' when calling StreetAccountHistoricalStoriesApi->GetStatusData");
            }


            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.StreetAccountNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStatusDataResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/historical/files/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatusData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            var getstatusdataResponse = new GetStatusDataResponseWrapper(localVarResponse.StatusCode, localVarResponse.Data);
            return new ApiResponse<GetStatusDataResponseWrapper>(localVarResponse.StatusCode, getstatusdataResponse);
        }

        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data. Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse RequestFiles(CreateFilesRequest createFilesRequest)
        {
            var localVarResponse = RequestFilesWithHttpInfo(createFilesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data. Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse<AcceptedResponse> RequestFilesWithHttpInfo(CreateFilesRequest createFilesRequest)
        {
            // verify the required parameter 'createFilesRequest' is set
            if (createFilesRequest == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'createFilesRequest' when calling StreetAccountHistoricalStoriesApi->RequestFiles");
            }

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFilesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = RequestFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            AcceptedResponse>("/historical/files/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data. Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse>RequestFilesAsync(CreateFilesRequest createFilesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await RequestFilesWithHttpInfoAsync(createFilesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests the creation of StreetAccount News Files with historical data. Data available from past 10 years, 2 years of data can be retrieved per API request and an ID is returned.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFilesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> RequestFilesWithHttpInfoAsync(CreateFilesRequest createFilesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFilesRequest' is set
            if (createFilesRequest == null)
            {
                throw new FactSet.SDK.StreetAccountNews.Client.ApiException(400, "Missing required parameter 'createFilesRequest' when calling StreetAccountHistoricalStoriesApi->RequestFiles");
            }


            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFilesRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = RequestFilesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AcceptedResponse>("/historical/files/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
