/*
 * StreetAccount News API
 *
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Categories (the equivalent of 'Subjects' within the Workstation), Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.StreetAccountNews.Client;
using FactSet.SDK.StreetAccountNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.StreetAccountNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a quick-alert for given saved view
        /// </summary>
        /// <remarks>
        /// This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>QuickAlertsResponse</returns>
        QuickAlertsResponse CreateQuickAlertForView(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody));

        /// <summary>
        /// Creates a quick-alert for given saved view
        /// </summary>
        /// <remarks>
        /// This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>ApiResponse of QuickAlertsResponse</returns>
        ApiResponse<QuickAlertsResponse> CreateQuickAlertForViewWithHttpInfo(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody));
        /// <summary>
        /// Creates and saves a StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>CreateViewResponse</returns>
        CreateViewResponse CreateStreetAccountView(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody));

        /// <summary>
        /// Creates and saves a StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>ApiResponse of CreateViewResponse</returns>
        ApiResponse<CreateViewResponse> CreateStreetAccountViewWithHttpInfo(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody));
        /// <summary>
        /// Deletes an existing quick alert for a view.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a quick alert from a previously saved view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>void</returns>
        void DeleteQuickalertView(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody));

        /// <summary>
        /// Deletes an existing quick alert for a view.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a quick alert from a previously saved view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuickalertViewWithHttpInfo(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody));
        /// <summary>
        /// Deletes an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <returns>void</returns>
        void DeleteStreetAccountView(DeleteViewBody deleteViewBody = default(DeleteViewBody));

        /// <summary>
        /// Deletes an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStreetAccountViewWithHttpInfo(DeleteViewBody deleteViewBody = default(DeleteViewBody));
        /// <summary>
        /// Edits and saves an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>void</returns>
        void EditStreetAccountView(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody));

        /// <summary>
        /// Edits and saves an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditStreetAccountViewWithHttpInfo(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody));
        /// <summary>
        /// Retrieves StreetAccount search views
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Views</returns>
        Views GetStreetAccountViews();

        /// <summary>
        /// Retrieves StreetAccount search views
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Views</returns>
        ApiResponse<Views> GetStreetAccountViewsWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a quick-alert for given saved view
        /// </summary>
        /// <remarks>
        /// This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuickAlertsResponse</returns>
        System.Threading.Tasks.Task<QuickAlertsResponse> CreateQuickAlertForViewAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a quick-alert for given saved view
        /// </summary>
        /// <remarks>
        /// This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuickAlertsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuickAlertsResponse>> CreateQuickAlertForViewWithHttpInfoAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates and saves a StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateViewResponse</returns>
        System.Threading.Tasks.Task<CreateViewResponse> CreateStreetAccountViewAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates and saves a StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateViewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateViewResponse>> CreateStreetAccountViewWithHttpInfoAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an existing quick alert for a view.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a quick alert from a previously saved view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuickalertViewAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing quick alert for a view.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a quick alert from a previously saved view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickalertViewWithHttpInfoAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStreetAccountViewAsync(DeleteViewBody deleteViewBody = default(DeleteViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to delete a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStreetAccountViewWithHttpInfoAsync(DeleteViewBody deleteViewBody = default(DeleteViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edits and saves an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditStreetAccountViewAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edits and saves an existing StreetAccount view
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditStreetAccountViewWithHttpInfoAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves StreetAccount search views
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Views</returns>
        System.Threading.Tasks.Task<Views> GetStreetAccountViewsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves StreetAccount search views
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </remarks>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Views)</returns>
        System.Threading.Tasks.Task<ApiResponse<Views>> GetStreetAccountViewsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewsApi : IViewsApiSync, IViewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewsApi : IViewsApi
    {
        private FactSet.SDK.StreetAccountNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateQuickAlertForViewResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(QuickAlertsResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)404, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> CreateStreetAccountViewResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(CreateViewResponse) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteQuickalertViewResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteStreetAccountViewResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> EditStreetAccountViewResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetStreetAccountViewsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(Views) },
            { (HttpStatusCode)400, typeof(Error) },
            { (HttpStatusCode)401, typeof(Error) },
            { (HttpStatusCode)500, typeof(Error) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.StreetAccountNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StreetAccountNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.StreetAccountNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewsApi(FactSet.SDK.StreetAccountNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.StreetAccountNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.StreetAccountNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.StreetAccountNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ViewsApi(FactSet.SDK.StreetAccountNews.Client.ISynchronousClient client, FactSet.SDK.StreetAccountNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.StreetAccountNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.StreetAccountNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.StreetAccountNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.StreetAccountNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a quick-alert for given saved view This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>QuickAlertsResponse</returns>
        public QuickAlertsResponse CreateQuickAlertForView(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody))
        {
            var localVarResponse = CreateQuickAlertForViewWithHttpInfo(quickAlertsBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a quick-alert for given saved view This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>ApiResponse of QuickAlertsResponse</returns>
        public ApiResponse<QuickAlertsResponse> CreateQuickAlertForViewWithHttpInfo(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody))
        {
            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = quickAlertsBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateQuickAlertForViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            QuickAlertsResponse>("/quick-alert/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuickAlertForView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Creates a quick-alert for given saved view This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuickAlertsResponse</returns>
        public async System.Threading.Tasks.Task<QuickAlertsResponse>CreateQuickAlertForViewAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateQuickAlertForViewWithHttpInfoAsync(quickAlertsBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a quick-alert for given saved view This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuickAlertsResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<QuickAlertsResponse>> CreateQuickAlertForViewWithHttpInfoAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = quickAlertsBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateQuickAlertForViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QuickAlertsResponse>("/quick-alert/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuickAlertForView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates and saves a StreetAccount view This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>CreateViewResponse</returns>
        public CreateViewResponse CreateStreetAccountView(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody))
        {
            var localVarResponse = CreateStreetAccountViewWithHttpInfo(createOrEditViewBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates and saves a StreetAccount view This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>ApiResponse of CreateViewResponse</returns>
        public ApiResponse<CreateViewResponse> CreateStreetAccountViewWithHttpInfo(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody))
        {
            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrEditViewBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateStreetAccountViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            CreateViewResponse>("/views/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStreetAccountView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Creates and saves a StreetAccount view This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateViewResponse</returns>
        public async System.Threading.Tasks.Task<CreateViewResponse>CreateStreetAccountViewAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateStreetAccountViewWithHttpInfoAsync(createOrEditViewBody, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates and saves a StreetAccount view This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateViewResponse)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<CreateViewResponse>> CreateStreetAccountViewWithHttpInfoAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrEditViewBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateStreetAccountViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateViewResponse>("/views/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStreetAccountView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing quick alert for a view. This endpoint allows you to delete a quick alert from a previously saved view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>void</returns>
        public void DeleteQuickalertView(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody))
        {
            DeleteQuickalertViewWithHttpInfo(quickAlertsBody);
        }

        /// <summary>
        /// Deletes an existing quick alert for a view. This endpoint allows you to delete a quick alert from a previously saved view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuickalertViewWithHttpInfo(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody))
        {
            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = quickAlertsBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteQuickalertViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/quick-alert/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteQuickalertView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing quick alert for a view. This endpoint allows you to delete a quick alert from a previously saved view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuickalertViewAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteQuickalertViewWithHttpInfoAsync(quickAlertsBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an existing quick alert for a view. This endpoint allows you to delete a quick alert from a previously saved view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickAlertsBody">View name to get an alert (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuickalertViewWithHttpInfoAsync(QuickAlertsBody quickAlertsBody = default(QuickAlertsBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = quickAlertsBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteQuickalertViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/quick-alert/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteQuickalertView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing StreetAccount view This endpoint allows you to delete a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <returns>void</returns>
        public void DeleteStreetAccountView(DeleteViewBody deleteViewBody = default(DeleteViewBody))
        {
            DeleteStreetAccountViewWithHttpInfo(deleteViewBody);
        }

        /// <summary>
        /// Deletes an existing StreetAccount view This endpoint allows you to delete a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStreetAccountViewWithHttpInfo(DeleteViewBody deleteViewBody = default(DeleteViewBody))
        {
            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteViewBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteStreetAccountViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/views/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStreetAccountView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing StreetAccount view This endpoint allows you to delete a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStreetAccountViewAsync(DeleteViewBody deleteViewBody = default(DeleteViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteStreetAccountViewWithHttpInfoAsync(deleteViewBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an existing StreetAccount view This endpoint allows you to delete a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteViewBody">Delete View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStreetAccountViewWithHttpInfoAsync(DeleteViewBody deleteViewBody = default(DeleteViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteViewBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteStreetAccountViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/views/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStreetAccountView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edits and saves an existing StreetAccount view This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>void</returns>
        public void EditStreetAccountView(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody))
        {
            EditStreetAccountViewWithHttpInfo(createOrEditViewBody);
        }

        /// <summary>
        /// Edits and saves an existing StreetAccount view This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditStreetAccountViewWithHttpInfo(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody))
        {
            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrEditViewBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = EditStreetAccountViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            Object>("/views/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditStreetAccountView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Edits and saves an existing StreetAccount view This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditStreetAccountViewAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EditStreetAccountViewWithHttpInfoAsync(createOrEditViewBody, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edits and saves an existing StreetAccount view This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrEditViewBody">Create or Edit View Body which needs to be sent with request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditStreetAccountViewWithHttpInfoAsync(CreateOrEditViewBody createOrEditViewBody = default(CreateOrEditViewBody), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrEditViewBody;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = EditStreetAccountViewResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/views/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditStreetAccountView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves StreetAccount search views This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Views</returns>
        public Views GetStreetAccountViews()
        {
            var localVarResponse = GetStreetAccountViewsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves StreetAccount search views This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Views</returns>
        public ApiResponse<Views> GetStreetAccountViewsWithHttpInfo()
        {
            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetStreetAccountViewsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            Views>("/views", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStreetAccountViews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Retrieves StreetAccount search views This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Views</returns>
        public async System.Threading.Tasks.Task<Views>GetStreetAccountViewsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetStreetAccountViewsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves StreetAccount search views This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
        /// </summary>
        /// <exception cref="FactSet.SDK.StreetAccountNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Views)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Views>> GetStreetAccountViewsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.StreetAccountNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.StreetAccountNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.StreetAccountNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.StreetAccountNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetStreetAccountViewsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Views>("/views", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStreetAccountViews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
