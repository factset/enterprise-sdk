/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNConfiguration.Client;
using FactSet.SDK.IRNConfiguration.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNConfiguration.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsTypesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create contact types
        /// </summary>
        /// <remarks>
        /// Create contact type with given name
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <returns>NewItemDto</returns>
        NewItemDto CreateContactType(string body);

        /// <summary>
        /// Create contact types
        /// </summary>
        /// <remarks>
        /// Create contact type with given name
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        ApiResponse<NewItemDto> CreateContactTypeWithHttpInfo(string body);
        /// <summary>
        /// Delete a contact type
        /// </summary>
        /// <remarks>
        /// Delete a contact type based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <returns>void</returns>
        void DeleteContactType(Guid contactTypeId);

        /// <summary>
        /// Delete a contact type
        /// </summary>
        /// <remarks>
        /// Delete a contact type based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactTypeWithHttpInfo(Guid contactTypeId);
        /// <summary>
        /// Get list of the contact types configured in your group
        /// </summary>
        /// <remarks>
        /// Get all contact types configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<ContactTypeDto></returns>
        List<ContactTypeDto> GetContactTypes();

        /// <summary>
        /// Get list of the contact types configured in your group
        /// </summary>
        /// <remarks>
        /// Get all contact types configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<ContactTypeDto></returns>
        ApiResponse<List<ContactTypeDto>> GetContactTypesWithHttpInfo();
        /// <summary>
        /// Edit a contact type
        /// </summary>
        /// <remarks>
        /// Update a contact type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <returns>void</returns>
        void UpdateContactType(Guid contactTypeId, string body);

        /// <summary>
        /// Edit a contact type
        /// </summary>
        /// <remarks>
        /// Update a contact type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateContactTypeWithHttpInfo(Guid contactTypeId, string body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsTypesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create contact types
        /// </summary>
        /// <remarks>
        /// Create contact type with given name
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        System.Threading.Tasks.Task<NewItemDto> CreateContactTypeAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create contact types
        /// </summary>
        /// <remarks>
        /// Create contact type with given name
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactTypeWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a contact type
        /// </summary>
        /// <remarks>
        /// Delete a contact type based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactTypeAsync(Guid contactTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a contact type
        /// </summary>
        /// <remarks>
        /// Delete a contact type based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactTypeWithHttpInfoAsync(Guid contactTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of the contact types configured in your group
        /// </summary>
        /// <remarks>
        /// Get all contact types configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactTypeDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactTypeDto>> GetContactTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of the contact types configured in your group
        /// </summary>
        /// <remarks>
        /// Get all contact types configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<ContactTypeDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactTypeDto>>> GetContactTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit a contact type
        /// </summary>
        /// <remarks>
        /// Update a contact type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateContactTypeAsync(Guid contactTypeId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit a contact type
        /// </summary>
        /// <remarks>
        /// Update a contact type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactTypeWithHttpInfoAsync(Guid contactTypeId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsTypesApi : IContactsTypesApiSync, IContactsTypesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsTypesApi : IContactsTypesApi
    {
        private FactSet.SDK.IRNConfiguration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateContactTypeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(NewItemDto) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteContactTypeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactTypesResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<ContactTypeDto>) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> UpdateContactTypeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsTypesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsTypesApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNConfiguration.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNConfiguration.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNConfiguration.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsTypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsTypesApi(FactSet.SDK.IRNConfiguration.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNConfiguration.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNConfiguration.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsTypesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsTypesApi(FactSet.SDK.IRNConfiguration.Client.ISynchronousClient client, FactSet.SDK.IRNConfiguration.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNConfiguration.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNConfiguration.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create contact types Create contact type with given name
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <returns>NewItemDto</returns>
        public NewItemDto CreateContactType(string body)
        {
            var localVarResponse = CreateContactTypeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create contact types Create contact type with given name
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        public ApiResponse<NewItemDto> CreateContactTypeWithHttpInfo(string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new FactSet.SDK.IRNConfiguration.Client.ApiException(400, "Missing required parameter 'body' when calling ContactsTypesApi->CreateContactType");
            }

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateContactTypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NewItemDto>("/contact-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create contact types Create contact type with given name
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        public async System.Threading.Tasks.Task<NewItemDto>CreateContactTypeAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateContactTypeWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create contact types Create contact type with given name
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactTypeWithHttpInfoAsync(string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new FactSet.SDK.IRNConfiguration.Client.ApiException(400, "Missing required parameter 'body' when calling ContactsTypesApi->CreateContactType");
            }


            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateContactTypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewItemDto>("/contact-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact type Delete a contact type based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <returns>void</returns>
        public void DeleteContactType(Guid contactTypeId)
        {
            DeleteContactTypeWithHttpInfo(contactTypeId);
        }

        /// <summary>
        /// Delete a contact type Delete a contact type based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactTypeWithHttpInfo(Guid contactTypeId)
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactTypeId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactTypeId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteContactTypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/contact-types/{contactTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact type Delete a contact type based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactTypeAsync(Guid contactTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactTypeWithHttpInfoAsync(contactTypeId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a contact type Delete a contact type based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactTypeWithHttpInfoAsync(Guid contactTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactTypeId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactTypeId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteContactTypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contact-types/{contactTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of the contact types configured in your group Get all contact types configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<ContactTypeDto></returns>
        public List<ContactTypeDto> GetContactTypes()
        {
            var localVarResponse = GetContactTypesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of the contact types configured in your group Get all contact types configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContactTypeDto&gt;</returns>
        public ApiResponse<List<ContactTypeDto>> GetContactTypesWithHttpInfo()
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<ContactTypeDto>>("/contact-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get list of the contact types configured in your group Get all contact types configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactTypeDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactTypeDto>>GetContactTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactTypesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of the contact types configured in your group Get all contact types configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactTypeDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<ContactTypeDto>>> GetContactTypesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactTypesResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactTypeDto>>("/contact-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact type Update a contact type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <returns>void</returns>
        public void UpdateContactType(Guid contactTypeId, string body)
        {
            UpdateContactTypeWithHttpInfo(contactTypeId, body);
        }

        /// <summary>
        /// Edit a contact type Update a contact type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateContactTypeWithHttpInfo(Guid contactTypeId, string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new FactSet.SDK.IRNConfiguration.Client.ApiException(400, "Missing required parameter 'body' when calling ContactsTypesApi->UpdateContactType");
            }

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactTypeId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactTypeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = UpdateContactTypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Put<
            Object>("/contact-types/{contactTypeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContactType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact type Update a contact type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateContactTypeAsync(Guid contactTypeId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateContactTypeWithHttpInfoAsync(contactTypeId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit a contact type Update a contact type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactTypeId">contactTypeId to update associated record</param>
        /// <param name="body">Updated contact type name</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactTypeWithHttpInfoAsync(Guid contactTypeId, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new FactSet.SDK.IRNConfiguration.Client.ApiException(400, "Missing required parameter 'body' when calling ContactsTypesApi->UpdateContactType");
            }


            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactTypeId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactTypeId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = UpdateContactTypeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/contact-types/{contactTypeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContactType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
