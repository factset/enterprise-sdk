/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNConfiguration.Client;
using FactSet.SDK.IRNConfiguration.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNConfiguration.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesConfigurationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all assigned FactSet users
        /// </summary>
        /// <remarks>
        /// Get all assigned FactSet users in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UserConfigDto></returns>
        List<UserConfigDto> GetAssignedFactSetUsers();

        /// <summary>
        /// Get all assigned FactSet users
        /// </summary>
        /// <remarks>
        /// Get all assigned FactSet users in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UserConfigDto></returns>
        ApiResponse<List<UserConfigDto>> GetAssignedFactSetUsersWithHttpInfo();
        /// <summary>
        /// Get all Authors
        /// </summary>
        /// <remarks>
        /// Get all Authors
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>List<AuthorConfigDto></returns>
        List<AuthorConfigDto> GetAuthors(bool? xIRNIgnorePermissions = default(bool?));

        /// <summary>
        /// Get all Authors
        /// </summary>
        /// <remarks>
        /// Get all Authors
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>ApiResponse of List<AuthorConfigDto></returns>
        ApiResponse<List<AuthorConfigDto>> GetAuthorsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?));
        /// <summary>
        /// Get Client Sales Representative
        /// </summary>
        /// <remarks>
        /// Get the client sales representative for the group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientSalesRepresentativeDto</returns>
        ClientSalesRepresentativeDto GetClientsSalesRepresentative();

        /// <summary>
        /// Get Client Sales Representative
        /// </summary>
        /// <remarks>
        /// Get the client sales representative for the group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientSalesRepresentativeDto</returns>
        ApiResponse<ClientSalesRepresentativeDto> GetClientsSalesRepresentativeWithHttpInfo();
        /// <summary>
        /// Get all Custom Fields
        /// </summary>
        /// <remarks>
        /// Get all customfields configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>List<CustomFieldConfigDto></returns>
        List<CustomFieldConfigDto> GetCustomFields(bool? xIRNIgnorePermissions = default(bool?));

        /// <summary>
        /// Get all Custom Fields
        /// </summary>
        /// <remarks>
        /// Get all customfields configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>ApiResponse of List<CustomFieldConfigDto></returns>
        ApiResponse<List<CustomFieldConfigDto>> GetCustomFieldsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?));
        /// <summary>
        /// Get Group details
        /// </summary>
        /// <remarks>
        /// Get all the group details
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupConfigDto</returns>
        GroupConfigDto GetGroup();

        /// <summary>
        /// Get Group details
        /// </summary>
        /// <remarks>
        /// Get all the group details
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupConfigDto</returns>
        ApiResponse<GroupConfigDto> GetGroupWithHttpInfo();
        /// <summary>
        /// Get all Recommendations
        /// </summary>
        /// <remarks>
        /// Get all recommendations configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<RecommendationConfigDto></returns>
        List<RecommendationConfigDto> GetRecommendations();

        /// <summary>
        /// Get all Recommendations
        /// </summary>
        /// <remarks>
        /// Get all recommendations configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<RecommendationConfigDto></returns>
        ApiResponse<List<RecommendationConfigDto>> GetRecommendationsWithHttpInfo();
        /// <summary>
        /// Get all Sentiments
        /// </summary>
        /// <remarks>
        /// Get all sentiments configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<SentimentConfigDto></returns>
        List<SentimentConfigDto> GetSentiments();

        /// <summary>
        /// Get all Sentiments
        /// </summary>
        /// <remarks>
        /// Get all sentiments configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<SentimentConfigDto></returns>
        ApiResponse<List<SentimentConfigDto>> GetSentimentsWithHttpInfo();
        /// <summary>
        /// Get Subject details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given subject
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>SubjectConfigDto</returns>
        SubjectConfigDto GetSubject(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?));

        /// <summary>
        /// Get Subject details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given subject
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>ApiResponse of SubjectConfigDto</returns>
        ApiResponse<SubjectConfigDto> GetSubjectWithHttpInfo(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?));
        /// <summary>
        /// Get all Subjects
        /// </summary>
        /// <remarks>
        /// Get all subjects configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>List<SubjectSummaryDto></returns>
        List<SubjectSummaryDto> GetSubjects(bool? xIRNIgnorePermissions = default(bool?));

        /// <summary>
        /// Get all Subjects
        /// </summary>
        /// <remarks>
        /// Get all subjects configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>ApiResponse of List<SubjectSummaryDto></returns>
        ApiResponse<List<SubjectSummaryDto>> GetSubjectsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?));
        /// <summary>
        /// Get Team details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given team
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>TeamConfigDto</returns>
        TeamConfigDto GetTeam(Guid teamId, bool? xIRNIgnorePermissions = default(bool?));

        /// <summary>
        /// Get Team details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given team
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>ApiResponse of TeamConfigDto</returns>
        ApiResponse<TeamConfigDto> GetTeamWithHttpInfo(Guid teamId, bool? xIRNIgnorePermissions = default(bool?));
        /// <summary>
        /// Get all Teams
        /// </summary>
        /// <remarks>
        /// Get all teams configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>List<TeamSummaryDto></returns>
        List<TeamSummaryDto> GetTeams(bool? xIRNIgnorePermissions = default(bool?));

        /// <summary>
        /// Get all Teams
        /// </summary>
        /// <remarks>
        /// Get all teams configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>ApiResponse of List<TeamSummaryDto></returns>
        ApiResponse<List<TeamSummaryDto>> GetTeamsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesConfigurationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get all assigned FactSet users
        /// </summary>
        /// <remarks>
        /// Get all assigned FactSet users in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserConfigDto&gt;</returns>
        System.Threading.Tasks.Task<List<UserConfigDto>> GetAssignedFactSetUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all assigned FactSet users
        /// </summary>
        /// <remarks>
        /// Get all assigned FactSet users in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<UserConfigDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserConfigDto>>> GetAssignedFactSetUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Authors
        /// </summary>
        /// <remarks>
        /// Get all Authors
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorConfigDto&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorConfigDto>> GetAuthorsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Authors
        /// </summary>
        /// <remarks>
        /// Get all Authors
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<AuthorConfigDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorConfigDto>>> GetAuthorsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Client Sales Representative
        /// </summary>
        /// <remarks>
        /// Get the client sales representative for the group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSalesRepresentativeDto</returns>
        System.Threading.Tasks.Task<ClientSalesRepresentativeDto> GetClientsSalesRepresentativeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Client Sales Representative
        /// </summary>
        /// <remarks>
        /// Get the client sales representative for the group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSalesRepresentativeDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientSalesRepresentativeDto>> GetClientsSalesRepresentativeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Custom Fields
        /// </summary>
        /// <remarks>
        /// Get all customfields configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomFieldConfigDto&gt;</returns>
        System.Threading.Tasks.Task<List<CustomFieldConfigDto>> GetCustomFieldsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Custom Fields
        /// </summary>
        /// <remarks>
        /// Get all customfields configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<CustomFieldConfigDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomFieldConfigDto>>> GetCustomFieldsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group details
        /// </summary>
        /// <remarks>
        /// Get all the group details
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupConfigDto</returns>
        System.Threading.Tasks.Task<GroupConfigDto> GetGroupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group details
        /// </summary>
        /// <remarks>
        /// Get all the group details
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupConfigDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupConfigDto>> GetGroupWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Recommendations
        /// </summary>
        /// <remarks>
        /// Get all recommendations configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecommendationConfigDto&gt;</returns>
        System.Threading.Tasks.Task<List<RecommendationConfigDto>> GetRecommendationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Recommendations
        /// </summary>
        /// <remarks>
        /// Get all recommendations configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<RecommendationConfigDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecommendationConfigDto>>> GetRecommendationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Sentiments
        /// </summary>
        /// <remarks>
        /// Get all sentiments configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SentimentConfigDto&gt;</returns>
        System.Threading.Tasks.Task<List<SentimentConfigDto>> GetSentimentsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Sentiments
        /// </summary>
        /// <remarks>
        /// Get all sentiments configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<SentimentConfigDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SentimentConfigDto>>> GetSentimentsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Subject details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given subject
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubjectConfigDto</returns>
        System.Threading.Tasks.Task<SubjectConfigDto> GetSubjectAsync(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Subject details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given subject
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubjectConfigDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubjectConfigDto>> GetSubjectWithHttpInfoAsync(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Subjects
        /// </summary>
        /// <remarks>
        /// Get all subjects configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SubjectSummaryDto&gt;</returns>
        System.Threading.Tasks.Task<List<SubjectSummaryDto>> GetSubjectsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Subjects
        /// </summary>
        /// <remarks>
        /// Get all subjects configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<SubjectSummaryDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SubjectSummaryDto>>> GetSubjectsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Team details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given team
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamConfigDto</returns>
        System.Threading.Tasks.Task<TeamConfigDto> GetTeamAsync(Guid teamId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Team details for the given Id provided
        /// </summary>
        /// <remarks>
        /// Get all details of a given team
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamConfigDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamConfigDto>> GetTeamWithHttpInfoAsync(Guid teamId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Teams
        /// </summary>
        /// <remarks>
        /// Get all teams configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamSummaryDto&gt;</returns>
        System.Threading.Tasks.Task<List<TeamSummaryDto>> GetTeamsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Teams
        /// </summary>
        /// <remarks>
        /// Get all teams configured in your group
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<TeamSummaryDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamSummaryDto>>> GetTeamsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotesConfigurationApi : INotesConfigurationApiSync, INotesConfigurationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotesConfigurationApi : INotesConfigurationApi
    {
        private FactSet.SDK.IRNConfiguration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetAssignedFactSetUsersResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<UserConfigDto>) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetAuthorsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<AuthorConfigDto>) },
            { (HttpStatusCode)403, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetClientsSalesRepresentativeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ClientSalesRepresentativeDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCustomFieldsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<CustomFieldConfigDto>) },
            { (HttpStatusCode)403, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetGroupResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(GroupConfigDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetRecommendationsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<RecommendationConfigDto>) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSentimentsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<SentimentConfigDto>) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSubjectResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(SubjectConfigDto) },
            { (HttpStatusCode)403, typeof(ProblemDetails) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetSubjectsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<SubjectSummaryDto>) },
            { (HttpStatusCode)403, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTeamResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(TeamConfigDto) },
            { (HttpStatusCode)403, typeof(ProblemDetails) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetTeamsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<TeamSummaryDto>) },
            { (HttpStatusCode)403, typeof(ProblemDetails) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotesConfigurationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotesConfigurationApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNConfiguration.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNConfiguration.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNConfiguration.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotesConfigurationApi(FactSet.SDK.IRNConfiguration.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNConfiguration.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNConfiguration.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotesConfigurationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotesConfigurationApi(FactSet.SDK.IRNConfiguration.Client.ISynchronousClient client, FactSet.SDK.IRNConfiguration.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNConfiguration.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNConfiguration.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all assigned FactSet users Get all assigned FactSet users in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UserConfigDto></returns>
        public List<UserConfigDto> GetAssignedFactSetUsers()
        {
            var localVarResponse = GetAssignedFactSetUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all assigned FactSet users Get all assigned FactSet users in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserConfigDto&gt;</returns>
        public ApiResponse<List<UserConfigDto>> GetAssignedFactSetUsersWithHttpInfo()
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAssignedFactSetUsersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<UserConfigDto>>("/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignedFactSetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all assigned FactSet users Get all assigned FactSet users in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserConfigDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserConfigDto>>GetAssignedFactSetUsersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAssignedFactSetUsersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all assigned FactSet users Get all assigned FactSet users in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserConfigDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<UserConfigDto>>> GetAssignedFactSetUsersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAssignedFactSetUsersResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserConfigDto>>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssignedFactSetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Authors Get all Authors
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>List<AuthorConfigDto></returns>
        public List<AuthorConfigDto> GetAuthors(bool? xIRNIgnorePermissions = default(bool?))
        {
            var localVarResponse = GetAuthorsWithHttpInfo(xIRNIgnorePermissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Authors Get all Authors
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;AuthorConfigDto&gt;</returns>
        public ApiResponse<List<AuthorConfigDto>> GetAuthorsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetAuthorsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<AuthorConfigDto>>("/authors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all Authors Get all Authors
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AuthorConfigDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorConfigDto>>GetAuthorsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetAuthorsWithHttpInfoAsync(xIRNIgnorePermissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Authors Get all Authors
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorConfigDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<AuthorConfigDto>>> GetAuthorsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetAuthorsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AuthorConfigDto>>("/authors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Sales Representative Get the client sales representative for the group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClientSalesRepresentativeDto</returns>
        public ClientSalesRepresentativeDto GetClientsSalesRepresentative()
        {
            var localVarResponse = GetClientsSalesRepresentativeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Sales Representative Get the client sales representative for the group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClientSalesRepresentativeDto</returns>
        public ApiResponse<ClientSalesRepresentativeDto> GetClientsSalesRepresentativeWithHttpInfo()
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetClientsSalesRepresentativeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ClientSalesRepresentativeDto>("/group/client-sales-representative", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientsSalesRepresentative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Client Sales Representative Get the client sales representative for the group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientSalesRepresentativeDto</returns>
        public async System.Threading.Tasks.Task<ClientSalesRepresentativeDto>GetClientsSalesRepresentativeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetClientsSalesRepresentativeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Sales Representative Get the client sales representative for the group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientSalesRepresentativeDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ClientSalesRepresentativeDto>> GetClientsSalesRepresentativeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetClientsSalesRepresentativeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientSalesRepresentativeDto>("/group/client-sales-representative", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientsSalesRepresentative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Custom Fields Get all customfields configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>List<CustomFieldConfigDto></returns>
        public List<CustomFieldConfigDto> GetCustomFields(bool? xIRNIgnorePermissions = default(bool?))
        {
            var localVarResponse = GetCustomFieldsWithHttpInfo(xIRNIgnorePermissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Custom Fields Get all customfields configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CustomFieldConfigDto&gt;</returns>
        public ApiResponse<List<CustomFieldConfigDto>> GetCustomFieldsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCustomFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<CustomFieldConfigDto>>("/custom-fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all Custom Fields Get all customfields configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CustomFieldConfigDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomFieldConfigDto>>GetCustomFieldsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCustomFieldsWithHttpInfoAsync(xIRNIgnorePermissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Custom Fields Get all customfields configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CustomFieldConfigDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<CustomFieldConfigDto>>> GetCustomFieldsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCustomFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CustomFieldConfigDto>>("/custom-fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group details Get all the group details
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GroupConfigDto</returns>
        public GroupConfigDto GetGroup()
        {
            var localVarResponse = GetGroupWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group details Get all the group details
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GroupConfigDto</returns>
        public ApiResponse<GroupConfigDto> GetGroupWithHttpInfo()
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetGroupResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            GroupConfigDto>("/group", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Group details Get all the group details
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupConfigDto</returns>
        public async System.Threading.Tasks.Task<GroupConfigDto>GetGroupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetGroupWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group details Get all the group details
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupConfigDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<GroupConfigDto>> GetGroupWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetGroupResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupConfigDto>("/group", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Recommendations Get all recommendations configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<RecommendationConfigDto></returns>
        public List<RecommendationConfigDto> GetRecommendations()
        {
            var localVarResponse = GetRecommendationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Recommendations Get all recommendations configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RecommendationConfigDto&gt;</returns>
        public ApiResponse<List<RecommendationConfigDto>> GetRecommendationsWithHttpInfo()
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetRecommendationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<RecommendationConfigDto>>("/recommendations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all Recommendations Get all recommendations configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RecommendationConfigDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecommendationConfigDto>>GetRecommendationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetRecommendationsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Recommendations Get all recommendations configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RecommendationConfigDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<RecommendationConfigDto>>> GetRecommendationsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetRecommendationsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RecommendationConfigDto>>("/recommendations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecommendations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Sentiments Get all sentiments configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<SentimentConfigDto></returns>
        public List<SentimentConfigDto> GetSentiments()
        {
            var localVarResponse = GetSentimentsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Sentiments Get all sentiments configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SentimentConfigDto&gt;</returns>
        public ApiResponse<List<SentimentConfigDto>> GetSentimentsWithHttpInfo()
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSentimentsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<SentimentConfigDto>>("/sentiments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSentiments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all Sentiments Get all sentiments configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SentimentConfigDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<SentimentConfigDto>>GetSentimentsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSentimentsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Sentiments Get all sentiments configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SentimentConfigDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<SentimentConfigDto>>> GetSentimentsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSentimentsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SentimentConfigDto>>("/sentiments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSentiments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subject details for the given Id provided Get all details of a given subject
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>SubjectConfigDto</returns>
        public SubjectConfigDto GetSubject(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?))
        {
            var localVarResponse = GetSubjectWithHttpInfo(subjectId, xIRNIgnorePermissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subject details for the given Id provided Get all details of a given subject
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>ApiResponse of SubjectConfigDto</returns>
        public ApiResponse<SubjectConfigDto> GetSubjectWithHttpInfo(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subjectId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(subjectId)); // path parameter
            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSubjectResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            SubjectConfigDto>("/subjects/{subjectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Subject details for the given Id provided Get all details of a given subject
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubjectConfigDto</returns>
        public async System.Threading.Tasks.Task<SubjectConfigDto>GetSubjectAsync(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSubjectWithHttpInfoAsync(subjectId, xIRNIgnorePermissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subject details for the given Id provided Get all details of a given subject
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId">Id</param>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubjectConfigDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<SubjectConfigDto>> GetSubjectWithHttpInfoAsync(Guid subjectId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subjectId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(subjectId)); // path parameter
            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSubjectResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubjectConfigDto>("/subjects/{subjectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Subjects Get all subjects configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>List<SubjectSummaryDto></returns>
        public List<SubjectSummaryDto> GetSubjects(bool? xIRNIgnorePermissions = default(bool?))
        {
            var localVarResponse = GetSubjectsWithHttpInfo(xIRNIgnorePermissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Subjects Get all subjects configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;SubjectSummaryDto&gt;</returns>
        public ApiResponse<List<SubjectSummaryDto>> GetSubjectsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetSubjectsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<SubjectSummaryDto>>("/subjects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all Subjects Get all subjects configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SubjectSummaryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<SubjectSummaryDto>>GetSubjectsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetSubjectsWithHttpInfoAsync(xIRNIgnorePermissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Subjects Get all subjects configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SubjectSummaryDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<SubjectSummaryDto>>> GetSubjectsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetSubjectsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SubjectSummaryDto>>("/subjects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Team details for the given Id provided Get all details of a given team
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>TeamConfigDto</returns>
        public TeamConfigDto GetTeam(Guid teamId, bool? xIRNIgnorePermissions = default(bool?))
        {
            var localVarResponse = GetTeamWithHttpInfo(teamId, xIRNIgnorePermissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Team details for the given Id provided Get all details of a given team
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>ApiResponse of TeamConfigDto</returns>
        public ApiResponse<TeamConfigDto> GetTeamWithHttpInfo(Guid teamId, bool? xIRNIgnorePermissions = default(bool?))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTeamResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            TeamConfigDto>("/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get Team details for the given Id provided Get all details of a given team
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamConfigDto</returns>
        public async System.Threading.Tasks.Task<TeamConfigDto>GetTeamAsync(Guid teamId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTeamWithHttpInfoAsync(teamId, xIRNIgnorePermissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Team details for the given Id provided Get all details of a given team
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Id</param>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamConfigDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<TeamConfigDto>> GetTeamWithHttpInfoAsync(Guid teamId, bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTeamResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamConfigDto>("/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Teams Get all teams configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>List<TeamSummaryDto></returns>
        public List<TeamSummaryDto> GetTeams(bool? xIRNIgnorePermissions = default(bool?))
        {
            var localVarResponse = GetTeamsWithHttpInfo(xIRNIgnorePermissions);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Teams Get all teams configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;TeamSummaryDto&gt;</returns>
        public ApiResponse<List<TeamSummaryDto>> GetTeamsWithHttpInfo(bool? xIRNIgnorePermissions = default(bool?))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetTeamsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<TeamSummaryDto>>("/teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all Teams Get all teams configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TeamSummaryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamSummaryDto>>GetTeamsAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetTeamsWithHttpInfoAsync(xIRNIgnorePermissions, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Teams Get all teams configured in your group
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xIRNIgnorePermissions">If set to true, permissions will be ignored. Default is false. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TeamSummaryDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<TeamSummaryDto>>> GetTeamsWithHttpInfoAsync(bool? xIRNIgnorePermissions = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xIRNIgnorePermissions != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-IRN-Ignore-Permissions", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(xIRNIgnorePermissions)); // header parameter
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetTeamsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamSummaryDto>>("/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
