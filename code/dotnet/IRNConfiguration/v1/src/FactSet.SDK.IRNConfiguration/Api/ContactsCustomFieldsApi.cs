/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.IRNConfiguration.Client;
using FactSet.SDK.IRNConfiguration.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.IRNConfiguration.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomFieldsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a contact custom field
        /// </summary>
        /// <remarks>
        /// Create a contact custom field with given name and type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        NewItemDto CreateContactCustomField(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto));

        /// <summary>
        /// Create a contact custom field
        /// </summary>
        /// <remarks>
        /// Create a contact custom field with given name and type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        ApiResponse<NewItemDto> CreateContactCustomFieldWithHttpInfo(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto));
        /// <summary>
        /// Delete a contact custom field
        /// </summary>
        /// <remarks>
        /// Delete a contact custom field based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <returns>void</returns>
        void DeleteContactCustomField(Guid contactCustomFieldId);

        /// <summary>
        /// Delete a contact custom field
        /// </summary>
        /// <remarks>
        /// Delete a contact custom field based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactCustomFieldWithHttpInfo(Guid contactCustomFieldId);
        /// <summary>
        /// Get a specific Contact custom field&#39;s details
        /// </summary>
        /// <remarks>
        /// Get all details of custom field&#39;s defined for contacts
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <returns>ContactCustomFieldDto</returns>
        ContactCustomFieldDto GetContactCustomField(Guid contactCustomFieldId);

        /// <summary>
        /// Get a specific Contact custom field&#39;s details
        /// </summary>
        /// <remarks>
        /// Get all details of custom field&#39;s defined for contacts
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <returns>ApiResponse of ContactCustomFieldDto</returns>
        ApiResponse<ContactCustomFieldDto> GetContactCustomFieldWithHttpInfo(Guid contactCustomFieldId);
        /// <summary>
        /// Get all the contact custom fields
        /// </summary>
        /// <remarks>
        /// Get all the contact custom fields
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<ContactCustomFieldDto></returns>
        List<ContactCustomFieldDto> GetContactCustomFields();

        /// <summary>
        /// Get all the contact custom fields
        /// </summary>
        /// <remarks>
        /// Get all the contact custom fields
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<ContactCustomFieldDto></returns>
        ApiResponse<List<ContactCustomFieldDto>> GetContactCustomFieldsWithHttpInfo();
        /// <summary>
        /// Edit a contact custom field
        /// </summary>
        /// <remarks>
        /// Update a contact custom field configuration
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <returns>void</returns>
        void PatchContactCustomField(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>));

        /// <summary>
        /// Edit a contact custom field
        /// </summary>
        /// <remarks>
        /// Update a contact custom field configuration
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PatchContactCustomFieldWithHttpInfo(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomFieldsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a contact custom field
        /// </summary>
        /// <remarks>
        /// Create a contact custom field with given name and type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        System.Threading.Tasks.Task<NewItemDto> CreateContactCustomFieldAsync(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a contact custom field
        /// </summary>
        /// <remarks>
        /// Create a contact custom field with given name and type
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactCustomFieldWithHttpInfoAsync(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a contact custom field
        /// </summary>
        /// <remarks>
        /// Delete a contact custom field based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactCustomFieldAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a contact custom field
        /// </summary>
        /// <remarks>
        /// Delete a contact custom field based on guid
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactCustomFieldWithHttpInfoAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specific Contact custom field&#39;s details
        /// </summary>
        /// <remarks>
        /// Get all details of custom field&#39;s defined for contacts
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactCustomFieldDto</returns>
        System.Threading.Tasks.Task<ContactCustomFieldDto> GetContactCustomFieldAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specific Contact custom field&#39;s details
        /// </summary>
        /// <remarks>
        /// Get all details of custom field&#39;s defined for contacts
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactCustomFieldDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactCustomFieldDto>> GetContactCustomFieldWithHttpInfoAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the contact custom fields
        /// </summary>
        /// <remarks>
        /// Get all the contact custom fields
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactCustomFieldDto&gt;</returns>
        System.Threading.Tasks.Task<List<ContactCustomFieldDto>> GetContactCustomFieldsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the contact custom fields
        /// </summary>
        /// <remarks>
        /// Get all the contact custom fields
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List<ContactCustomFieldDto>)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactCustomFieldDto>>> GetContactCustomFieldsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit a contact custom field
        /// </summary>
        /// <remarks>
        /// Update a contact custom field configuration
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PatchContactCustomFieldAsync(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit a contact custom field
        /// </summary>
        /// <remarks>
        /// Update a contact custom field configuration
        /// </remarks>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactCustomFieldWithHttpInfoAsync(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomFieldsApi : IContactsCustomFieldsApiSync, IContactsCustomFieldsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsCustomFieldsApi : IContactsCustomFieldsApi
    {
        private FactSet.SDK.IRNConfiguration.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> CreateContactCustomFieldResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)201, typeof(NewItemDto) },
            { (HttpStatusCode)400, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> DeleteContactCustomFieldResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactCustomFieldResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(ContactCustomFieldDto) },
            { (HttpStatusCode)404, typeof(ProblemDetails) },
            { (HttpStatusCode)0, typeof(ProblemDetails) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetContactCustomFieldsResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(List<ContactCustomFieldDto>) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PatchContactCustomFieldResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsCustomFieldsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsCustomFieldsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.IRNConfiguration.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNConfiguration.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.IRNConfiguration.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsCustomFieldsApi(FactSet.SDK.IRNConfiguration.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.IRNConfiguration.Client.Configuration.MergeConfigurations(
                FactSet.SDK.IRNConfiguration.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.IRNConfiguration.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsCustomFieldsApi(FactSet.SDK.IRNConfiguration.Client.ISynchronousClient client, FactSet.SDK.IRNConfiguration.Client.IAsynchronousClient asyncClient, FactSet.SDK.IRNConfiguration.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.IRNConfiguration.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.IRNConfiguration.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.IRNConfiguration.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a contact custom field Create a contact custom field with given name and type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <returns>NewItemDto</returns>
        public NewItemDto CreateContactCustomField(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto))
        {
            var localVarResponse = CreateContactCustomFieldWithHttpInfo(contactCustomFieldSaveDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact custom field Create a contact custom field with given name and type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <returns>ApiResponse of NewItemDto</returns>
        public ApiResponse<NewItemDto> CreateContactCustomFieldWithHttpInfo(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactCustomFieldSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = CreateContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            NewItemDto>("/contact-custom-fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Create a contact custom field Create a contact custom field with given name and type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewItemDto</returns>
        public async System.Threading.Tasks.Task<NewItemDto>CreateContactCustomFieldAsync(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await CreateContactCustomFieldWithHttpInfoAsync(contactCustomFieldSaveDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact custom field Create a contact custom field with given name and type
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldSaveDto">ContactCustomFieldSaveDto object to save (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewItemDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<NewItemDto>> CreateContactCustomFieldWithHttpInfoAsync(ContactCustomFieldSaveDto contactCustomFieldSaveDto = default(ContactCustomFieldSaveDto), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = contactCustomFieldSaveDto;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = CreateContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewItemDto>("/contact-custom-fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact custom field Delete a contact custom field based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <returns>void</returns>
        public void DeleteContactCustomField(Guid contactCustomFieldId)
        {
            DeleteContactCustomFieldWithHttpInfo(contactCustomFieldId);
        }

        /// <summary>
        /// Delete a contact custom field Delete a contact custom field based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactCustomFieldWithHttpInfo(Guid contactCustomFieldId)
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactCustomFieldId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactCustomFieldId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = DeleteContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Delete<
            Object>("/contact-custom-fields/{contactCustomFieldId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact custom field Delete a contact custom field based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactCustomFieldAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactCustomFieldWithHttpInfoAsync(contactCustomFieldId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a contact custom field Delete a contact custom field based on guid
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to delete associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactCustomFieldWithHttpInfoAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactCustomFieldId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactCustomFieldId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = DeleteContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contact-custom-fields/{contactCustomFieldId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specific Contact custom field&#39;s details Get all details of custom field&#39;s defined for contacts
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <returns>ContactCustomFieldDto</returns>
        public ContactCustomFieldDto GetContactCustomField(Guid contactCustomFieldId)
        {
            var localVarResponse = GetContactCustomFieldWithHttpInfo(contactCustomFieldId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific Contact custom field&#39;s details Get all details of custom field&#39;s defined for contacts
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <returns>ApiResponse of ContactCustomFieldDto</returns>
        public ApiResponse<ContactCustomFieldDto> GetContactCustomFieldWithHttpInfo(Guid contactCustomFieldId)
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactCustomFieldId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactCustomFieldId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            ContactCustomFieldDto>("/contact-custom-fields/{contactCustomFieldId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get a specific Contact custom field&#39;s details Get all details of custom field&#39;s defined for contacts
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ContactCustomFieldDto</returns>
        public async System.Threading.Tasks.Task<ContactCustomFieldDto>GetContactCustomFieldAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactCustomFieldWithHttpInfoAsync(contactCustomFieldId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific Contact custom field&#39;s details Get all details of custom field&#39;s defined for contacts
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to get associated record</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ContactCustomFieldDto)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<ContactCustomFieldDto>> GetContactCustomFieldWithHttpInfoAsync(Guid contactCustomFieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactCustomFieldId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactCustomFieldId)); // path parameter

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ContactCustomFieldDto>("/contact-custom-fields/{contactCustomFieldId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the contact custom fields Get all the contact custom fields
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<ContactCustomFieldDto></returns>
        public List<ContactCustomFieldDto> GetContactCustomFields()
        {
            var localVarResponse = GetContactCustomFieldsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the contact custom fields Get all the contact custom fields
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContactCustomFieldDto&gt;</returns>
        public ApiResponse<List<ContactCustomFieldDto>> GetContactCustomFieldsWithHttpInfo()
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetContactCustomFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            List<ContactCustomFieldDto>>("/contact-custom-fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Get all the contact custom fields Get all the contact custom fields
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ContactCustomFieldDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactCustomFieldDto>>GetContactCustomFieldsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetContactCustomFieldsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the contact custom fields Get all the contact custom fields
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ContactCustomFieldDto&gt;)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<List<ContactCustomFieldDto>>> GetContactCustomFieldsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetContactCustomFieldsResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactCustomFieldDto>>("/contact-custom-fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact custom field Update a contact custom field configuration
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <returns>void</returns>
        public void PatchContactCustomField(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>))
        {
            PatchContactCustomFieldWithHttpInfo(contactCustomFieldId, operation);
        }

        /// <summary>
        /// Edit a contact custom field Update a contact custom field configuration
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PatchContactCustomFieldWithHttpInfo(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>))
        {
            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactCustomFieldId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactCustomFieldId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PatchContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Patch<
            Object>("/contact-custom-fields/{contactCustomFieldId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Edit a contact custom field Update a contact custom field configuration
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PatchContactCustomFieldAsync(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PatchContactCustomFieldWithHttpInfoAsync(contactCustomFieldId, operation, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Edit a contact custom field Update a contact custom field configuration
        /// </summary>
        /// <exception cref="FactSet.SDK.IRNConfiguration.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactCustomFieldId">contactCustomFieldId to update associated record</param>
        /// <param name="operation">contactCustomFieldUpdateDto object to update (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>

        public async System.Threading.Tasks.Task<ApiResponse<Object>> PatchContactCustomFieldWithHttpInfoAsync(Guid contactCustomFieldId, List<Operation> operation = default(List<Operation>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.IRNConfiguration.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.IRNConfiguration.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.IRNConfiguration.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contactCustomFieldId", FactSet.SDK.IRNConfiguration.Client.ClientUtils.ParameterToString(contactCustomFieldId)); // path parameter
            localVarRequestOptions.Data = operation;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.IRNConfiguration.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PatchContactCustomFieldResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/contact-custom-fields/{contactCustomFieldId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchContactCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
