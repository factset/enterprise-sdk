/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// NoteSettingsDto
    /// </summary>
    [DataContract(Name = "NoteSettingsDto")]
    public partial class NoteSettingsDto : IEquatable<NoteSettingsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NoteSettingsDto" /> class.
        /// </summary>
        /// <param name="isHidden">isHidden.</param>
        /// <param name="isMandatory">isMandatory.</param>
        /// <param name="usePrevious">usePrevious.</param>
        /// <param name="allowPersonal">allowPersonal.</param>
        /// <param name="defaultStatus">defaultStatus.</param>
        /// <param name="alternativeCustomFieldId">alternativeCustomFieldId.</param>
        public NoteSettingsDto(bool isHidden = default(bool), bool isMandatory = default(bool), bool usePrevious = default(bool), bool allowPersonal = default(bool), string defaultStatus = default(string), Guid? alternativeCustomFieldId = default(Guid?))
        {
            this.IsHidden = isHidden;
            this.IsMandatory = isMandatory;
            this.UsePrevious = usePrevious;
            this.AllowPersonal = allowPersonal;
            this.DefaultStatus = defaultStatus;
            this.AlternativeCustomFieldId = alternativeCustomFieldId;
        }

        /// <summary>
        /// Gets or Sets IsHidden
        /// </summary>
        [DataMember(Name = "isHidden", EmitDefaultValue = true)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or Sets IsMandatory
        /// </summary>
        [DataMember(Name = "isMandatory", EmitDefaultValue = true)]
        public bool IsMandatory { get; set; }

        /// <summary>
        /// Gets or Sets UsePrevious
        /// </summary>
        [DataMember(Name = "usePrevious", EmitDefaultValue = true)]
        public bool UsePrevious { get; set; }

        /// <summary>
        /// Gets or Sets AllowPersonal
        /// </summary>
        [DataMember(Name = "allowPersonal", EmitDefaultValue = true)]
        public bool AllowPersonal { get; set; }

        /// <summary>
        /// Gets or Sets DefaultStatus
        /// </summary>
        [DataMember(Name = "defaultStatus", EmitDefaultValue = true)]
        public string DefaultStatus { get; set; }

        /// <summary>
        /// Gets or Sets AlternativeCustomFieldId
        /// </summary>
        [DataMember(Name = "alternativeCustomFieldId", EmitDefaultValue = true)]
        public Guid? AlternativeCustomFieldId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NoteSettingsDto {\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  IsMandatory: ").Append(IsMandatory).Append("\n");
            sb.Append("  UsePrevious: ").Append(UsePrevious).Append("\n");
            sb.Append("  AllowPersonal: ").Append(AllowPersonal).Append("\n");
            sb.Append("  DefaultStatus: ").Append(DefaultStatus).Append("\n");
            sb.Append("  AlternativeCustomFieldId: ").Append(AlternativeCustomFieldId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NoteSettingsDto);
        }

        /// <summary>
        /// Returns true if NoteSettingsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of NoteSettingsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NoteSettingsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsHidden == input.IsHidden ||
                    this.IsHidden.Equals(input.IsHidden)
                ) && 
                (
                    this.IsMandatory == input.IsMandatory ||
                    this.IsMandatory.Equals(input.IsMandatory)
                ) && 
                (
                    this.UsePrevious == input.UsePrevious ||
                    this.UsePrevious.Equals(input.UsePrevious)
                ) && 
                (
                    this.AllowPersonal == input.AllowPersonal ||
                    this.AllowPersonal.Equals(input.AllowPersonal)
                ) && 
                (
                    this.DefaultStatus == input.DefaultStatus ||
                    (this.DefaultStatus != null &&
                    this.DefaultStatus.Equals(input.DefaultStatus))
                ) && 
                (
                    this.AlternativeCustomFieldId == input.AlternativeCustomFieldId ||
                    (this.AlternativeCustomFieldId != null &&
                    this.AlternativeCustomFieldId.Equals(input.AlternativeCustomFieldId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsHidden.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMandatory.GetHashCode();
                hashCode = (hashCode * 59) + this.UsePrevious.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowPersonal.GetHashCode();
                if (this.DefaultStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultStatus.GetHashCode();
                }
                if (this.AlternativeCustomFieldId != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeCustomFieldId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
