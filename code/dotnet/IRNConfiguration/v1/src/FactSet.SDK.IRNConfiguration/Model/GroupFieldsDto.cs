/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// GroupFieldsDto
    /// </summary>
    [DataContract(Name = "GroupFieldsDto")]
    public partial class GroupFieldsDto : IEquatable<GroupFieldsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupFieldsDto" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="date">date.</param>
        /// <param name="identifier">identifier.</param>
        /// <param name="subject">subject.</param>
        /// <param name="recommendation">recommendation.</param>
        /// <param name="sentiment">sentiment.</param>
        /// <param name="link">link.</param>
        /// <param name="note">note.</param>
        /// <param name="source">source.</param>
        /// <param name="relatedSymbols">relatedSymbols.</param>
        /// <param name="relatedResearch">relatedResearch.</param>
        /// <param name="relatedContacts">relatedContacts.</param>
        /// <param name="team">team.</param>
        /// <param name="organizer">organizer.</param>
        public GroupFieldsDto(TitleSettingsDto title = default(TitleSettingsDto), DateSettingsDto date = default(DateSettingsDto), IdentifierSettingsDto identifier = default(IdentifierSettingsDto), SubjectSettingsDto subject = default(SubjectSettingsDto), RecommendationSettingsDto recommendation = default(RecommendationSettingsDto), SentimentSettingsDto sentiment = default(SentimentSettingsDto), LinkSettingsDto link = default(LinkSettingsDto), NoteSettingsDto note = default(NoteSettingsDto), SourceSettingsDto source = default(SourceSettingsDto), RelatedSymbolsSettingsDto relatedSymbols = default(RelatedSymbolsSettingsDto), RelatedResearchSettingsDto relatedResearch = default(RelatedResearchSettingsDto), RelatedContactsSettingsDto relatedContacts = default(RelatedContactsSettingsDto), TeamSettingsDto team = default(TeamSettingsDto), OrganizerSettingsDto organizer = default(OrganizerSettingsDto))
        {
            this.Title = title;
            this.Date = date;
            this.Identifier = identifier;
            this.Subject = subject;
            this.Recommendation = recommendation;
            this.Sentiment = sentiment;
            this.Link = link;
            this.Note = note;
            this.Source = source;
            this.RelatedSymbols = relatedSymbols;
            this.RelatedResearch = relatedResearch;
            this.RelatedContacts = relatedContacts;
            this.Team = team;
            this.Organizer = organizer;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public TitleSettingsDto Title { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateSettingsDto Date { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name = "identifier", EmitDefaultValue = true)]
        public IdentifierSettingsDto Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public SubjectSettingsDto Subject { get; set; }

        /// <summary>
        /// Gets or Sets Recommendation
        /// </summary>
        [DataMember(Name = "recommendation", EmitDefaultValue = true)]
        public RecommendationSettingsDto Recommendation { get; set; }

        /// <summary>
        /// Gets or Sets Sentiment
        /// </summary>
        [DataMember(Name = "sentiment", EmitDefaultValue = true)]
        public SentimentSettingsDto Sentiment { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public LinkSettingsDto Link { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = true)]
        public NoteSettingsDto Note { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public SourceSettingsDto Source { get; set; }

        /// <summary>
        /// Gets or Sets RelatedSymbols
        /// </summary>
        [DataMember(Name = "relatedSymbols", EmitDefaultValue = true)]
        public RelatedSymbolsSettingsDto RelatedSymbols { get; set; }

        /// <summary>
        /// Gets or Sets RelatedResearch
        /// </summary>
        [DataMember(Name = "relatedResearch", EmitDefaultValue = true)]
        public RelatedResearchSettingsDto RelatedResearch { get; set; }

        /// <summary>
        /// Gets or Sets RelatedContacts
        /// </summary>
        [DataMember(Name = "relatedContacts", EmitDefaultValue = true)]
        public RelatedContactsSettingsDto RelatedContacts { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", EmitDefaultValue = true)]
        public TeamSettingsDto Team { get; set; }

        /// <summary>
        /// Gets or Sets Organizer
        /// </summary>
        [DataMember(Name = "organizer", EmitDefaultValue = true)]
        public OrganizerSettingsDto Organizer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupFieldsDto {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  RelatedSymbols: ").Append(RelatedSymbols).Append("\n");
            sb.Append("  RelatedResearch: ").Append(RelatedResearch).Append("\n");
            sb.Append("  RelatedContacts: ").Append(RelatedContacts).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Organizer: ").Append(Organizer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupFieldsDto);
        }

        /// <summary>
        /// Returns true if GroupFieldsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupFieldsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupFieldsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Recommendation == input.Recommendation ||
                    (this.Recommendation != null &&
                    this.Recommendation.Equals(input.Recommendation))
                ) && 
                (
                    this.Sentiment == input.Sentiment ||
                    (this.Sentiment != null &&
                    this.Sentiment.Equals(input.Sentiment))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.RelatedSymbols == input.RelatedSymbols ||
                    (this.RelatedSymbols != null &&
                    this.RelatedSymbols.Equals(input.RelatedSymbols))
                ) && 
                (
                    this.RelatedResearch == input.RelatedResearch ||
                    (this.RelatedResearch != null &&
                    this.RelatedResearch.Equals(input.RelatedResearch))
                ) && 
                (
                    this.RelatedContacts == input.RelatedContacts ||
                    (this.RelatedContacts != null &&
                    this.RelatedContacts.Equals(input.RelatedContacts))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.Organizer == input.Organizer ||
                    (this.Organizer != null &&
                    this.Organizer.Equals(input.Organizer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Recommendation != null)
                {
                    hashCode = (hashCode * 59) + this.Recommendation.GetHashCode();
                }
                if (this.Sentiment != null)
                {
                    hashCode = (hashCode * 59) + this.Sentiment.GetHashCode();
                }
                if (this.Link != null)
                {
                    hashCode = (hashCode * 59) + this.Link.GetHashCode();
                }
                if (this.Note != null)
                {
                    hashCode = (hashCode * 59) + this.Note.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.RelatedSymbols != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedSymbols.GetHashCode();
                }
                if (this.RelatedResearch != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedResearch.GetHashCode();
                }
                if (this.RelatedContacts != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedContacts.GetHashCode();
                }
                if (this.Team != null)
                {
                    hashCode = (hashCode * 59) + this.Team.GetHashCode();
                }
                if (this.Organizer != null)
                {
                    hashCode = (hashCode * 59) + this.Organizer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
