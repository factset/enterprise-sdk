/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// SymbolsRelationShipSaveDto
    /// </summary>
    [DataContract(Name = "SymbolsRelationShipSaveDto")]
    public partial class SymbolsRelationShipSaveDto : IEquatable<SymbolsRelationShipSaveDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolsRelationShipSaveDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SymbolsRelationShipSaveDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolsRelationShipSaveDto" /> class.
        /// </summary>
        /// <param name="relationshipCode">relationshipCode.</param>
        /// <param name="parentToChildName">parentToChildName.</param>
        /// <param name="childToParentName">childToParentName.</param>
        /// <param name="peerName">peerName.</param>
        /// <param name="hideDates">hideDates (required) (default to true).</param>
        /// <param name="hideComment">hideComment (required) (default to true).</param>
        public SymbolsRelationShipSaveDto(bool hideDates, bool hideComment,string relationshipCode = default(string), string parentToChildName = default(string), string childToParentName = default(string), string peerName = default(string))
        {
            this.HideDates = hideDates;
            this.HideComment = hideComment;
            this.RelationshipCode = relationshipCode;
            this.ParentToChildName = parentToChildName;
            this.ChildToParentName = childToParentName;
            this.PeerName = peerName;
        }

        /// <summary>
        /// Gets or Sets RelationshipCode
        /// </summary>
        [DataMember(Name = "relationshipCode", EmitDefaultValue = true)]
        public string RelationshipCode { get; set; }

        /// <summary>
        /// Gets or Sets ParentToChildName
        /// </summary>
        [DataMember(Name = "parentToChildName", EmitDefaultValue = true)]
        public string ParentToChildName { get; set; }

        /// <summary>
        /// Gets or Sets ChildToParentName
        /// </summary>
        [DataMember(Name = "childToParentName", EmitDefaultValue = true)]
        public string ChildToParentName { get; set; }

        /// <summary>
        /// Gets or Sets PeerName
        /// </summary>
        [DataMember(Name = "peerName", EmitDefaultValue = true)]
        public string PeerName { get; set; }

        /// <summary>
        /// Gets or Sets HideDates
        /// </summary>
        [DataMember(Name = "hideDates", IsRequired = true, EmitDefaultValue = true)]
        public bool HideDates { get; set; }

        /// <summary>
        /// Gets or Sets HideComment
        /// </summary>
        [DataMember(Name = "hideComment", IsRequired = true, EmitDefaultValue = true)]
        public bool HideComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SymbolsRelationShipSaveDto {\n");
            sb.Append("  RelationshipCode: ").Append(RelationshipCode).Append("\n");
            sb.Append("  ParentToChildName: ").Append(ParentToChildName).Append("\n");
            sb.Append("  ChildToParentName: ").Append(ChildToParentName).Append("\n");
            sb.Append("  PeerName: ").Append(PeerName).Append("\n");
            sb.Append("  HideDates: ").Append(HideDates).Append("\n");
            sb.Append("  HideComment: ").Append(HideComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SymbolsRelationShipSaveDto);
        }

        /// <summary>
        /// Returns true if SymbolsRelationShipSaveDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolsRelationShipSaveDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolsRelationShipSaveDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RelationshipCode == input.RelationshipCode ||
                    (this.RelationshipCode != null &&
                    this.RelationshipCode.Equals(input.RelationshipCode))
                ) && 
                (
                    this.ParentToChildName == input.ParentToChildName ||
                    (this.ParentToChildName != null &&
                    this.ParentToChildName.Equals(input.ParentToChildName))
                ) && 
                (
                    this.ChildToParentName == input.ChildToParentName ||
                    (this.ChildToParentName != null &&
                    this.ChildToParentName.Equals(input.ChildToParentName))
                ) && 
                (
                    this.PeerName == input.PeerName ||
                    (this.PeerName != null &&
                    this.PeerName.Equals(input.PeerName))
                ) && 
                (
                    this.HideDates == input.HideDates ||
                    this.HideDates.Equals(input.HideDates)
                ) && 
                (
                    this.HideComment == input.HideComment ||
                    this.HideComment.Equals(input.HideComment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RelationshipCode != null)
                {
                    hashCode = (hashCode * 59) + this.RelationshipCode.GetHashCode();
                }
                if (this.ParentToChildName != null)
                {
                    hashCode = (hashCode * 59) + this.ParentToChildName.GetHashCode();
                }
                if (this.ChildToParentName != null)
                {
                    hashCode = (hashCode * 59) + this.ChildToParentName.GetHashCode();
                }
                if (this.PeerName != null)
                {
                    hashCode = (hashCode * 59) + this.PeerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HideDates.GetHashCode();
                hashCode = (hashCode * 59) + this.HideComment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // RelationshipCode (string) maxLength
            if (this.RelationshipCode != null && this.RelationshipCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RelationshipCode, length must be less than 3.", new [] { "RelationshipCode" });
            }

            // RelationshipCode (string) minLength
            if (this.RelationshipCode != null && this.RelationshipCode.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RelationshipCode, length must be greater than 0.", new [] { "RelationshipCode" });
            }

            // ParentToChildName (string) maxLength
            if (this.ParentToChildName != null && this.ParentToChildName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentToChildName, length must be less than 50.", new [] { "ParentToChildName" });
            }

            // ParentToChildName (string) minLength
            if (this.ParentToChildName != null && this.ParentToChildName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParentToChildName, length must be greater than 0.", new [] { "ParentToChildName" });
            }

            // ChildToParentName (string) maxLength
            if (this.ChildToParentName != null && this.ChildToParentName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChildToParentName, length must be less than 50.", new [] { "ChildToParentName" });
            }

            // ChildToParentName (string) minLength
            if (this.ChildToParentName != null && this.ChildToParentName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChildToParentName, length must be greater than 0.", new [] { "ChildToParentName" });
            }

            // PeerName (string) maxLength
            if (this.PeerName != null && this.PeerName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeerName, length must be less than 50.", new [] { "PeerName" });
            }

            // PeerName (string) minLength
            if (this.PeerName != null && this.PeerName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeerName, length must be greater than 0.", new [] { "PeerName" });
            }

            yield break;
        }
    }

}
