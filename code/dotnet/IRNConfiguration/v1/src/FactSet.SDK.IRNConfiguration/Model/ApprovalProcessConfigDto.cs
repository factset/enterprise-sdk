/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// ApprovalProcessConfigDto
    /// </summary>
    [DataContract(Name = "ApprovalProcessConfigDto")]
    public partial class ApprovalProcessConfigDto : IEquatable<ApprovalProcessConfigDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalProcessConfigDto" /> class.
        /// </summary>
        /// <param name="approvalLevels">approvalLevels.</param>
        /// <param name="viewerIds">viewerIds.</param>
        /// <param name="pendingNotesVisible">pendingNotesVisible.</param>
        /// <param name="deniedNotesVisible">deniedNotesVisible.</param>
        /// <param name="shouldSendEmailAlertsWhenSubmittedForApproval">shouldSendEmailAlertsWhenSubmittedForApproval.</param>
        /// <param name="shouldSendEmailAlertsWhenApproved">shouldSendEmailAlertsWhenApproved.</param>
        /// <param name="shouldSendEmailAlertsWhenDenied">shouldSendEmailAlertsWhenDenied.</param>
        /// <param name="shouldSendEmailAlertsToAuthor">shouldSendEmailAlertsToAuthor.</param>
        /// <param name="shouldSendEmailAlertsToApprovers">shouldSendEmailAlertsToApprovers.</param>
        /// <param name="shouldSendEmailAlertsToViewers">shouldSendEmailAlertsToViewers.</param>
        /// <param name="canAuthorSelfApprove">canAuthorSelfApprove.</param>
        /// <param name="canAuthorEditPending">canAuthorEditPending.</param>
        public ApprovalProcessConfigDto(List<ApprovalLevelConfigDto> approvalLevels = default(List<ApprovalLevelConfigDto>), List<Guid> viewerIds = default(List<Guid>), string pendingNotesVisible = default(string), string deniedNotesVisible = default(string), bool shouldSendEmailAlertsWhenSubmittedForApproval = default(bool), bool shouldSendEmailAlertsWhenApproved = default(bool), bool shouldSendEmailAlertsWhenDenied = default(bool), bool shouldSendEmailAlertsToAuthor = default(bool), bool shouldSendEmailAlertsToApprovers = default(bool), bool shouldSendEmailAlertsToViewers = default(bool), bool canAuthorSelfApprove = default(bool), bool canAuthorEditPending = default(bool))
        {
            this.ApprovalLevels = approvalLevels;
            this.ViewerIds = viewerIds;
            this.PendingNotesVisible = pendingNotesVisible;
            this.DeniedNotesVisible = deniedNotesVisible;
            this.ShouldSendEmailAlertsWhenSubmittedForApproval = shouldSendEmailAlertsWhenSubmittedForApproval;
            this.ShouldSendEmailAlertsWhenApproved = shouldSendEmailAlertsWhenApproved;
            this.ShouldSendEmailAlertsWhenDenied = shouldSendEmailAlertsWhenDenied;
            this.ShouldSendEmailAlertsToAuthor = shouldSendEmailAlertsToAuthor;
            this.ShouldSendEmailAlertsToApprovers = shouldSendEmailAlertsToApprovers;
            this.ShouldSendEmailAlertsToViewers = shouldSendEmailAlertsToViewers;
            this.CanAuthorSelfApprove = canAuthorSelfApprove;
            this.CanAuthorEditPending = canAuthorEditPending;
        }

        /// <summary>
        /// Gets or Sets ApprovalLevels
        /// </summary>
        [DataMember(Name = "approvalLevels", EmitDefaultValue = true)]
        public List<ApprovalLevelConfigDto> ApprovalLevels { get; set; }

        /// <summary>
        /// Gets or Sets ViewerIds
        /// </summary>
        [DataMember(Name = "viewerIds", EmitDefaultValue = true)]
        public List<Guid> ViewerIds { get; set; }

        /// <summary>
        /// Gets or Sets PendingNotesVisible
        /// </summary>
        [DataMember(Name = "pendingNotesVisible", EmitDefaultValue = true)]
        public string PendingNotesVisible { get; set; }

        /// <summary>
        /// Gets or Sets DeniedNotesVisible
        /// </summary>
        [DataMember(Name = "deniedNotesVisible", EmitDefaultValue = true)]
        public string DeniedNotesVisible { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsWhenSubmittedForApproval
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsWhenSubmittedForApproval", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsWhenSubmittedForApproval { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsWhenApproved
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsWhenApproved", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsWhenApproved { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsWhenDenied
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsWhenDenied", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsWhenDenied { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsToAuthor
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsToAuthor", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsToAuthor { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsToApprovers
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsToApprovers", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsToApprovers { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsToViewers
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsToViewers", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsToViewers { get; set; }

        /// <summary>
        /// Gets or Sets CanAuthorSelfApprove
        /// </summary>
        [DataMember(Name = "canAuthorSelfApprove", EmitDefaultValue = true)]
        public bool CanAuthorSelfApprove { get; set; }

        /// <summary>
        /// Gets or Sets CanAuthorEditPending
        /// </summary>
        [DataMember(Name = "canAuthorEditPending", EmitDefaultValue = true)]
        public bool CanAuthorEditPending { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalProcessConfigDto {\n");
            sb.Append("  ApprovalLevels: ").Append(ApprovalLevels).Append("\n");
            sb.Append("  ViewerIds: ").Append(ViewerIds).Append("\n");
            sb.Append("  PendingNotesVisible: ").Append(PendingNotesVisible).Append("\n");
            sb.Append("  DeniedNotesVisible: ").Append(DeniedNotesVisible).Append("\n");
            sb.Append("  ShouldSendEmailAlertsWhenSubmittedForApproval: ").Append(ShouldSendEmailAlertsWhenSubmittedForApproval).Append("\n");
            sb.Append("  ShouldSendEmailAlertsWhenApproved: ").Append(ShouldSendEmailAlertsWhenApproved).Append("\n");
            sb.Append("  ShouldSendEmailAlertsWhenDenied: ").Append(ShouldSendEmailAlertsWhenDenied).Append("\n");
            sb.Append("  ShouldSendEmailAlertsToAuthor: ").Append(ShouldSendEmailAlertsToAuthor).Append("\n");
            sb.Append("  ShouldSendEmailAlertsToApprovers: ").Append(ShouldSendEmailAlertsToApprovers).Append("\n");
            sb.Append("  ShouldSendEmailAlertsToViewers: ").Append(ShouldSendEmailAlertsToViewers).Append("\n");
            sb.Append("  CanAuthorSelfApprove: ").Append(CanAuthorSelfApprove).Append("\n");
            sb.Append("  CanAuthorEditPending: ").Append(CanAuthorEditPending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalProcessConfigDto);
        }

        /// <summary>
        /// Returns true if ApprovalProcessConfigDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalProcessConfigDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalProcessConfigDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApprovalLevels == input.ApprovalLevels ||
                    this.ApprovalLevels != null &&
                    input.ApprovalLevels != null &&
                    this.ApprovalLevels.SequenceEqual(input.ApprovalLevels)
                ) && 
                (
                    this.ViewerIds == input.ViewerIds ||
                    this.ViewerIds != null &&
                    input.ViewerIds != null &&
                    this.ViewerIds.SequenceEqual(input.ViewerIds)
                ) && 
                (
                    this.PendingNotesVisible == input.PendingNotesVisible ||
                    (this.PendingNotesVisible != null &&
                    this.PendingNotesVisible.Equals(input.PendingNotesVisible))
                ) && 
                (
                    this.DeniedNotesVisible == input.DeniedNotesVisible ||
                    (this.DeniedNotesVisible != null &&
                    this.DeniedNotesVisible.Equals(input.DeniedNotesVisible))
                ) && 
                (
                    this.ShouldSendEmailAlertsWhenSubmittedForApproval == input.ShouldSendEmailAlertsWhenSubmittedForApproval ||
                    this.ShouldSendEmailAlertsWhenSubmittedForApproval.Equals(input.ShouldSendEmailAlertsWhenSubmittedForApproval)
                ) && 
                (
                    this.ShouldSendEmailAlertsWhenApproved == input.ShouldSendEmailAlertsWhenApproved ||
                    this.ShouldSendEmailAlertsWhenApproved.Equals(input.ShouldSendEmailAlertsWhenApproved)
                ) && 
                (
                    this.ShouldSendEmailAlertsWhenDenied == input.ShouldSendEmailAlertsWhenDenied ||
                    this.ShouldSendEmailAlertsWhenDenied.Equals(input.ShouldSendEmailAlertsWhenDenied)
                ) && 
                (
                    this.ShouldSendEmailAlertsToAuthor == input.ShouldSendEmailAlertsToAuthor ||
                    this.ShouldSendEmailAlertsToAuthor.Equals(input.ShouldSendEmailAlertsToAuthor)
                ) && 
                (
                    this.ShouldSendEmailAlertsToApprovers == input.ShouldSendEmailAlertsToApprovers ||
                    this.ShouldSendEmailAlertsToApprovers.Equals(input.ShouldSendEmailAlertsToApprovers)
                ) && 
                (
                    this.ShouldSendEmailAlertsToViewers == input.ShouldSendEmailAlertsToViewers ||
                    this.ShouldSendEmailAlertsToViewers.Equals(input.ShouldSendEmailAlertsToViewers)
                ) && 
                (
                    this.CanAuthorSelfApprove == input.CanAuthorSelfApprove ||
                    this.CanAuthorSelfApprove.Equals(input.CanAuthorSelfApprove)
                ) && 
                (
                    this.CanAuthorEditPending == input.CanAuthorEditPending ||
                    this.CanAuthorEditPending.Equals(input.CanAuthorEditPending)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApprovalLevels != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalLevels.GetHashCode();
                }
                if (this.ViewerIds != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerIds.GetHashCode();
                }
                if (this.PendingNotesVisible != null)
                {
                    hashCode = (hashCode * 59) + this.PendingNotesVisible.GetHashCode();
                }
                if (this.DeniedNotesVisible != null)
                {
                    hashCode = (hashCode * 59) + this.DeniedNotesVisible.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsWhenSubmittedForApproval.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsWhenApproved.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsWhenDenied.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsToAuthor.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsToApprovers.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsToViewers.GetHashCode();
                hashCode = (hashCode * 59) + this.CanAuthorSelfApprove.GetHashCode();
                hashCode = (hashCode * 59) + this.CanAuthorEditPending.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
