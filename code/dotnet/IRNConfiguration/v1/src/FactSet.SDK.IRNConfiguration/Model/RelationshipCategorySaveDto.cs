/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// RelationshipCategorySaveDto
    /// </summary>
    [DataContract(Name = "RelationshipCategorySaveDto")]
    public partial class RelationshipCategorySaveDto : IEquatable<RelationshipCategorySaveDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipCategorySaveDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelationshipCategorySaveDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipCategorySaveDto" /> class.
        /// </summary>
        /// <param name="categoryName">categoryName (required).</param>
        /// <param name="isContactToContact">isContactToContact (default to false).</param>
        /// <param name="isContactToSymbol">isContactToSymbol (default to false).</param>
        public RelationshipCategorySaveDto(string categoryName,bool isContactToContact = false, bool isContactToSymbol = false)
        {
            // to ensure "categoryName" is required (not null)
            if (categoryName == null) {
                throw new ArgumentNullException("categoryName is a required property for RelationshipCategorySaveDto and cannot be null");
            }
            this.CategoryName = categoryName;
            this.IsContactToContact = isContactToContact;
            this.IsContactToSymbol = isContactToSymbol;
        }

        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name = "categoryName", IsRequired = true, EmitDefaultValue = false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Gets or Sets IsContactToContact
        /// </summary>
        [DataMember(Name = "isContactToContact", EmitDefaultValue = true)]
        public bool IsContactToContact { get; set; }

        /// <summary>
        /// Gets or Sets IsContactToSymbol
        /// </summary>
        [DataMember(Name = "isContactToSymbol", EmitDefaultValue = true)]
        public bool IsContactToSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelationshipCategorySaveDto {\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  IsContactToContact: ").Append(IsContactToContact).Append("\n");
            sb.Append("  IsContactToSymbol: ").Append(IsContactToSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelationshipCategorySaveDto);
        }

        /// <summary>
        /// Returns true if RelationshipCategorySaveDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RelationshipCategorySaveDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationshipCategorySaveDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.IsContactToContact == input.IsContactToContact ||
                    this.IsContactToContact.Equals(input.IsContactToContact)
                ) && 
                (
                    this.IsContactToSymbol == input.IsContactToSymbol ||
                    this.IsContactToSymbol.Equals(input.IsContactToSymbol)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryName != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsContactToContact.GetHashCode();
                hashCode = (hashCode * 59) + this.IsContactToSymbol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CategoryName (string) maxLength
            if (this.CategoryName != null && this.CategoryName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CategoryName, length must be less than 50.", new [] { "CategoryName" });
            }

            // CategoryName (string) minLength
            if (this.CategoryName != null && this.CategoryName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CategoryName, length must be greater than 0.", new [] { "CategoryName" });
            }

            yield break;
        }
    }

}
