/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// RatingConfigDto
    /// </summary>
    [DataContract(Name = "RatingConfigDto")]
    public partial class RatingConfigDto : IEquatable<RatingConfigDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingConfigDto" /> class.
        /// </summary>
        /// <param name="ratingsVisibleToAuthor">ratingsVisibleToAuthor.</param>
        /// <param name="ratingsVisibleToViewers">ratingsVisibleToViewers.</param>
        /// <param name="ratingsVisibleToAll">ratingsVisibleToAll.</param>
        /// <param name="viewerIds">viewerIds.</param>
        /// <param name="optionValues">optionValues.</param>
        public RatingConfigDto(bool ratingsVisibleToAuthor = default(bool), bool ratingsVisibleToViewers = default(bool), bool ratingsVisibleToAll = default(bool), List<Guid> viewerIds = default(List<Guid>), List<int> optionValues = default(List<int>))
        {
            this.RatingsVisibleToAuthor = ratingsVisibleToAuthor;
            this.RatingsVisibleToViewers = ratingsVisibleToViewers;
            this.RatingsVisibleToAll = ratingsVisibleToAll;
            this.ViewerIds = viewerIds;
            this.OptionValues = optionValues;
        }

        /// <summary>
        /// Gets or Sets RatingsVisibleToAuthor
        /// </summary>
        [DataMember(Name = "ratingsVisibleToAuthor", EmitDefaultValue = true)]
        public bool RatingsVisibleToAuthor { get; set; }

        /// <summary>
        /// Gets or Sets RatingsVisibleToViewers
        /// </summary>
        [DataMember(Name = "ratingsVisibleToViewers", EmitDefaultValue = true)]
        public bool RatingsVisibleToViewers { get; set; }

        /// <summary>
        /// Gets or Sets RatingsVisibleToAll
        /// </summary>
        [DataMember(Name = "ratingsVisibleToAll", EmitDefaultValue = true)]
        public bool RatingsVisibleToAll { get; set; }

        /// <summary>
        /// Gets or Sets ViewerIds
        /// </summary>
        [DataMember(Name = "viewerIds", EmitDefaultValue = true)]
        public List<Guid> ViewerIds { get; set; }

        /// <summary>
        /// Gets or Sets OptionValues
        /// </summary>
        [DataMember(Name = "optionValues", EmitDefaultValue = true)]
        public List<int> OptionValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RatingConfigDto {\n");
            sb.Append("  RatingsVisibleToAuthor: ").Append(RatingsVisibleToAuthor).Append("\n");
            sb.Append("  RatingsVisibleToViewers: ").Append(RatingsVisibleToViewers).Append("\n");
            sb.Append("  RatingsVisibleToAll: ").Append(RatingsVisibleToAll).Append("\n");
            sb.Append("  ViewerIds: ").Append(ViewerIds).Append("\n");
            sb.Append("  OptionValues: ").Append(OptionValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatingConfigDto);
        }

        /// <summary>
        /// Returns true if RatingConfigDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RatingConfigDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatingConfigDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RatingsVisibleToAuthor == input.RatingsVisibleToAuthor ||
                    this.RatingsVisibleToAuthor.Equals(input.RatingsVisibleToAuthor)
                ) && 
                (
                    this.RatingsVisibleToViewers == input.RatingsVisibleToViewers ||
                    this.RatingsVisibleToViewers.Equals(input.RatingsVisibleToViewers)
                ) && 
                (
                    this.RatingsVisibleToAll == input.RatingsVisibleToAll ||
                    this.RatingsVisibleToAll.Equals(input.RatingsVisibleToAll)
                ) && 
                (
                    this.ViewerIds == input.ViewerIds ||
                    this.ViewerIds != null &&
                    input.ViewerIds != null &&
                    this.ViewerIds.SequenceEqual(input.ViewerIds)
                ) && 
                (
                    this.OptionValues == input.OptionValues ||
                    this.OptionValues != null &&
                    input.OptionValues != null &&
                    this.OptionValues.SequenceEqual(input.OptionValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RatingsVisibleToAuthor.GetHashCode();
                hashCode = (hashCode * 59) + this.RatingsVisibleToViewers.GetHashCode();
                hashCode = (hashCode * 59) + this.RatingsVisibleToAll.GetHashCode();
                if (this.ViewerIds != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerIds.GetHashCode();
                }
                if (this.OptionValues != null)
                {
                    hashCode = (hashCode * 59) + this.OptionValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
