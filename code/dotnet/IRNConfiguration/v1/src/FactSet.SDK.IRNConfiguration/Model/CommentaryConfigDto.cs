/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// CommentaryConfigDto
    /// </summary>
    [DataContract(Name = "CommentaryConfigDto")]
    public partial class CommentaryConfigDto : IEquatable<CommentaryConfigDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentaryConfigDto" /> class.
        /// </summary>
        /// <param name="shouldSendEmailAlertsToAuthor">shouldSendEmailAlertsToAuthor.</param>
        /// <param name="shouldSendEmailAlertsToCommenters">shouldSendEmailAlertsToCommenters.</param>
        /// <param name="shouldSendEmailAlertsToAll">shouldSendEmailAlertsToAll.</param>
        public CommentaryConfigDto(bool shouldSendEmailAlertsToAuthor = default(bool), bool shouldSendEmailAlertsToCommenters = default(bool), bool shouldSendEmailAlertsToAll = default(bool))
        {
            this.ShouldSendEmailAlertsToAuthor = shouldSendEmailAlertsToAuthor;
            this.ShouldSendEmailAlertsToCommenters = shouldSendEmailAlertsToCommenters;
            this.ShouldSendEmailAlertsToAll = shouldSendEmailAlertsToAll;
        }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsToAuthor
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsToAuthor", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsToAuthor { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsToCommenters
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsToCommenters", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsToCommenters { get; set; }

        /// <summary>
        /// Gets or Sets ShouldSendEmailAlertsToAll
        /// </summary>
        [DataMember(Name = "shouldSendEmailAlertsToAll", EmitDefaultValue = true)]
        public bool ShouldSendEmailAlertsToAll { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommentaryConfigDto {\n");
            sb.Append("  ShouldSendEmailAlertsToAuthor: ").Append(ShouldSendEmailAlertsToAuthor).Append("\n");
            sb.Append("  ShouldSendEmailAlertsToCommenters: ").Append(ShouldSendEmailAlertsToCommenters).Append("\n");
            sb.Append("  ShouldSendEmailAlertsToAll: ").Append(ShouldSendEmailAlertsToAll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommentaryConfigDto);
        }

        /// <summary>
        /// Returns true if CommentaryConfigDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CommentaryConfigDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentaryConfigDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShouldSendEmailAlertsToAuthor == input.ShouldSendEmailAlertsToAuthor ||
                    this.ShouldSendEmailAlertsToAuthor.Equals(input.ShouldSendEmailAlertsToAuthor)
                ) && 
                (
                    this.ShouldSendEmailAlertsToCommenters == input.ShouldSendEmailAlertsToCommenters ||
                    this.ShouldSendEmailAlertsToCommenters.Equals(input.ShouldSendEmailAlertsToCommenters)
                ) && 
                (
                    this.ShouldSendEmailAlertsToAll == input.ShouldSendEmailAlertsToAll ||
                    this.ShouldSendEmailAlertsToAll.Equals(input.ShouldSendEmailAlertsToAll)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsToAuthor.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsToCommenters.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSendEmailAlertsToAll.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
