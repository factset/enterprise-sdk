/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// FormulaConfigDto
    /// </summary>
    [DataContract(Name = "FormulaConfigDto")]
    public partial class FormulaConfigDto : IEquatable<FormulaConfigDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormulaConfigDto" /> class.
        /// </summary>
        /// <param name="formula">formula.</param>
        /// <param name="formulaType">formulaType.</param>
        public FormulaConfigDto(string formula = default(string), string formulaType = default(string))
        {
            this.Formula = formula;
            this.FormulaType = formulaType;
        }

        /// <summary>
        /// Gets or Sets Formula
        /// </summary>
        [DataMember(Name = "formula", EmitDefaultValue = true)]
        public string Formula { get; set; }

        /// <summary>
        /// Gets or Sets FormulaType
        /// </summary>
        [DataMember(Name = "formulaType", EmitDefaultValue = true)]
        public string FormulaType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FormulaConfigDto {\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  FormulaType: ").Append(FormulaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormulaConfigDto);
        }

        /// <summary>
        /// Returns true if FormulaConfigDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FormulaConfigDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormulaConfigDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.FormulaType == input.FormulaType ||
                    (this.FormulaType != null &&
                    this.FormulaType.Equals(input.FormulaType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Formula != null)
                {
                    hashCode = (hashCode * 59) + this.Formula.GetHashCode();
                }
                if (this.FormulaType != null)
                {
                    hashCode = (hashCode * 59) + this.FormulaType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
