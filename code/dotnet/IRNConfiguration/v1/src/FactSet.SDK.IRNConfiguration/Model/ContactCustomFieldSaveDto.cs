/*
 * IRN API v1
 *
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.IRNConfiguration.Client.OpenAPIDateConverter;

namespace FactSet.SDK.IRNConfiguration.Model
{
    /// <summary>
    /// ContactCustomFieldSaveDto
    /// </summary>
    [DataContract(Name = "ContactCustomFieldSaveDto")]
    public partial class ContactCustomFieldSaveDto : IEquatable<ContactCustomFieldSaveDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public ContactCustomFieldType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCustomFieldSaveDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactCustomFieldSaveDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCustomFieldSaveDto" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="isHidden">isHidden (required) (default to false).</param>
        /// <param name="isMandatory">isMandatory (required) (default to false).</param>
        /// <param name="fieldFormula">fieldFormula.</param>
        /// <param name="contactCustomFieldOptions">contactCustomFieldOptions.</param>
        public ContactCustomFieldSaveDto(string code, string name, ContactCustomFieldType type, bool isHidden, bool isMandatory,ContactCustomFieldFormulaDto fieldFormula = default(ContactCustomFieldFormulaDto), List<ContactCustomFieldOptionSaveDto> contactCustomFieldOptions = default(List<ContactCustomFieldOptionSaveDto>))
        {
            // to ensure "code" is required (not null)
            if (code == null) {
                throw new ArgumentNullException("code is a required property for ContactCustomFieldSaveDto and cannot be null");
            }
            this.Code = code;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ContactCustomFieldSaveDto and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.IsHidden = isHidden;
            this.IsMandatory = isMandatory;
            this.FieldFormula = fieldFormula;
            this.ContactCustomFieldOptions = contactCustomFieldOptions;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsHidden
        /// </summary>
        [DataMember(Name = "isHidden", IsRequired = true, EmitDefaultValue = true)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or Sets IsMandatory
        /// </summary>
        [DataMember(Name = "isMandatory", IsRequired = true, EmitDefaultValue = true)]
        public bool IsMandatory { get; set; }

        /// <summary>
        /// Gets or Sets FieldFormula
        /// </summary>
        [DataMember(Name = "fieldFormula", EmitDefaultValue = true)]
        public ContactCustomFieldFormulaDto FieldFormula { get; set; }

        /// <summary>
        /// Gets or Sets ContactCustomFieldOptions
        /// </summary>
        [DataMember(Name = "contactCustomFieldOptions", EmitDefaultValue = true)]
        public List<ContactCustomFieldOptionSaveDto> ContactCustomFieldOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactCustomFieldSaveDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  IsMandatory: ").Append(IsMandatory).Append("\n");
            sb.Append("  FieldFormula: ").Append(FieldFormula).Append("\n");
            sb.Append("  ContactCustomFieldOptions: ").Append(ContactCustomFieldOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactCustomFieldSaveDto);
        }

        /// <summary>
        /// Returns true if ContactCustomFieldSaveDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactCustomFieldSaveDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactCustomFieldSaveDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.IsHidden == input.IsHidden ||
                    this.IsHidden.Equals(input.IsHidden)
                ) && 
                (
                    this.IsMandatory == input.IsMandatory ||
                    this.IsMandatory.Equals(input.IsMandatory)
                ) && 
                (
                    this.FieldFormula == input.FieldFormula ||
                    (this.FieldFormula != null &&
                    this.FieldFormula.Equals(input.FieldFormula))
                ) && 
                (
                    this.ContactCustomFieldOptions == input.ContactCustomFieldOptions ||
                    this.ContactCustomFieldOptions != null &&
                    input.ContactCustomFieldOptions != null &&
                    this.ContactCustomFieldOptions.SequenceEqual(input.ContactCustomFieldOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHidden.GetHashCode();
                hashCode = (hashCode * 59) + this.IsMandatory.GetHashCode();
                if (this.FieldFormula != null)
                {
                    hashCode = (hashCode * 59) + this.FieldFormula.GetHashCode();
                }
                if (this.ContactCustomFieldOptions != null)
                {
                    hashCode = (hashCode * 59) + this.ContactCustomFieldOptions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 32.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
