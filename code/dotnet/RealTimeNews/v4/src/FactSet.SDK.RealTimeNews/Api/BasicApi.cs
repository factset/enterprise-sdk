/*
 * Real-Time News API
 *
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeNews.Client;
using FactSet.SDK.RealTimeNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List of asset classes.
        /// </summary>
        /// <remarks>
        /// List of asset classes as defined by FactSet Digital Solutions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetBasicAssetClassList(List<string> attributes = default(List<string>));

        /// <summary>
        /// List of asset classes.
        /// </summary>
        /// <remarks>
        /// List of asset classes as defined by FactSet Digital Solutions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetBasicAssetClassListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// List of benchmark types.
        /// </summary>
        /// <remarks>
        /// List of benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetBasicBenchmarkTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of benchmark types.
        /// </summary>
        /// <remarks>
        /// List of benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetBasicBenchmarkTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of frequency types.
        /// </summary>
        /// <remarks>
        /// List of frequency types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetBasicFrequencyTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of frequency types.
        /// </summary>
        /// <remarks>
        /// List of frequency types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetBasicFrequencyTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Details for a language.
        /// </summary>
        /// <remarks>
        /// Details for a language.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetBasicLanguageGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a language.
        /// </summary>
        /// <remarks>
        /// Details for a language.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetBasicLanguageGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Details for a language identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a language identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetBasicLanguageGetByCode(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a language identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a language identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetBasicLanguageGetByCodeWithHttpInfo(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of languages.
        /// </summary>
        /// <remarks>
        /// List of languages.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetBasicLanguageList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of languages.
        /// </summary>
        /// <remarks>
        /// List of languages.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetBasicLanguageListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// Details of a market.
        /// </summary>
        /// <remarks>
        /// Details of a market.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetBasicMarketGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details of a market.
        /// </summary>
        /// <remarks>
        /// Details of a market.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetBasicMarketGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of market groups.
        /// </summary>
        /// <remarks>
        /// List of market groups.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 GetBasicMarketGroupList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of market groups.
        /// </summary>
        /// <remarks>
        /// List of market groups.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> GetBasicMarketGroupListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// List of market types.
        /// </summary>
        /// <remarks>
        /// List of market types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetBasicMarketTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of market types.
        /// </summary>
        /// <remarks>
        /// List of market types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetBasicMarketTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// List of media kinds.
        /// </summary>
        /// <remarks>
        /// List of media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetBasicMediaKindList(List<string> attributes = default(List<string>));

        /// <summary>
        /// List of media kinds.
        /// </summary>
        /// <remarks>
        /// List of media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetBasicMediaKindListWithHttpInfo(List<string> attributes = default(List<string>));
        /// <summary>
        /// Details for a continent.
        /// </summary>
        /// <remarks>
        /// Details for a continent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GetBasicRegionContinentGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a continent.
        /// </summary>
        /// <remarks>
        /// Details for a continent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GetBasicRegionContinentGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of continents.
        /// </summary>
        /// <remarks>
        /// List of continents.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GetBasicRegionContinentList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of continents.
        /// </summary>
        /// <remarks>
        /// List of continents.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GetBasicRegionContinentListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// Details for a country.
        /// </summary>
        /// <remarks>
        /// Details for a country.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GetBasicRegionCountryGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a country.
        /// </summary>
        /// <remarks>
        /// Details for a country.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GetBasicRegionCountryGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Details for a country identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a country identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GetBasicRegionCountryGetByCode(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a country identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a country identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GetBasicRegionCountryGetByCodeWithHttpInfo(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of countries.
        /// </summary>
        /// <remarks>
        /// List of countries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetBasicRegionCountryList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of countries.
        /// </summary>
        /// <remarks>
        /// List of countries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetBasicRegionCountryListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// Details for a region.
        /// </summary>
        /// <remarks>
        /// Details for a geographic, political, or economic region.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetBasicRegionGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a region.
        /// </summary>
        /// <remarks>
        /// Details for a geographic, political, or economic region.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetBasicRegionGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of regions.
        /// </summary>
        /// <remarks>
        /// List of geographic, political, and economic regions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetBasicRegionList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of regions.
        /// </summary>
        /// <remarks>
        /// List of geographic, political, and economic regions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetBasicRegionListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// Details of a timezone.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetBasicTimezoneGet(decimal id, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of a timezone.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetBasicTimezoneGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>));
        /// <summary>
        /// Details of a timezone identified by name.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GetBasicTimezoneGetByName(string name, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of a timezone identified by name.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GetBasicTimezoneGetByNameWithHttpInfo(string name, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of alternative units.
        /// </summary>
        /// <remarks>
        /// List of alternative units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GetBasicValueUnitAlternativeList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of alternative units.
        /// </summary>
        /// <remarks>
        /// List of alternative units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GetBasicValueUnitAlternativeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// Details of a fractional currency.
        /// </summary>
        /// <remarks>
        /// Details of a fractional currency.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetBasicValueUnitCurrencyFractionalGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details of a fractional currency.
        /// </summary>
        /// <remarks>
        /// Details of a fractional currency.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetBasicValueUnitCurrencyFractionalGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of fractional currencies.
        /// </summary>
        /// <remarks>
        /// List of fractional currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 GetBasicValueUnitCurrencyFractionalList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));

        /// <summary>
        /// List of fractional currencies.
        /// </summary>
        /// <remarks>
        /// List of fractional currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> GetBasicValueUnitCurrencyFractionalListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>));
        /// <summary>
        /// Details of a value unit.
        /// </summary>
        /// <remarks>
        /// Details of a value unit.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetBasicValueUnitGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details of a value unit.
        /// </summary>
        /// <remarks>
        /// Details of a value unit.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetBasicValueUnitGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of background text types.
        /// </summary>
        /// <remarks>
        /// List of background text types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PostBasicBackgroundTextTypeList(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest));

        /// <summary>
        /// List of background text types.
        /// </summary>
        /// <remarks>
        /// List of background text types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PostBasicBackgroundTextTypeListWithHttpInfo(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest));
        /// <summary>
        /// List of deliveries.
        /// </summary>
        /// <remarks>
        /// List of deliveries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PostBasicDeliveryList(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest));

        /// <summary>
        /// List of deliveries.
        /// </summary>
        /// <remarks>
        /// List of deliveries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PostBasicDeliveryListWithHttpInfo(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest));
        /// <summary>
        /// List of markets.
        /// </summary>
        /// <remarks>
        /// List of markets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 PostBasicMarketList(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest));

        /// <summary>
        /// List of markets.
        /// </summary>
        /// <remarks>
        /// List of markets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> PostBasicMarketListWithHttpInfo(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest));
        /// <summary>
        /// List of Internet media types.
        /// </summary>
        /// <remarks>
        /// List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 PostBasicMediaTypeList(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest));

        /// <summary>
        /// List of Internet media types.
        /// </summary>
        /// <remarks>
        /// List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> PostBasicMediaTypeListWithHttpInfo(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest));
        /// <summary>
        /// List of operating market identifier codes (MIC).
        /// </summary>
        /// <remarks>
        /// List of operating market identifier codes (MIC).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 PostBasicMicOperatingList(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest));

        /// <summary>
        /// List of operating market identifier codes (MIC).
        /// </summary>
        /// <remarks>
        /// List of operating market identifier codes (MIC).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> PostBasicMicOperatingListWithHttpInfo(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest));
        /// <summary>
        /// List of timezones.
        /// </summary>
        /// <remarks>
        /// List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 PostBasicTimezoneList(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest));

        /// <summary>
        /// List of timezones.
        /// </summary>
        /// <remarks>
        /// List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> PostBasicTimezoneListWithHttpInfo(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest));
        /// <summary>
        /// List of currencies.
        /// </summary>
        /// <remarks>
        /// List of currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 PostBasicValueUnitCurrencyList(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest));

        /// <summary>
        /// List of currencies.
        /// </summary>
        /// <remarks>
        /// List of currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> PostBasicValueUnitCurrencyListWithHttpInfo(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest));
        /// <summary>
        /// List of main currencies.
        /// </summary>
        /// <remarks>
        /// List of main currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 PostBasicValueUnitCurrencyMainList(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest));

        /// <summary>
        /// List of main currencies.
        /// </summary>
        /// <remarks>
        /// List of main currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> PostBasicValueUnitCurrencyMainListWithHttpInfo(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest));
        /// <summary>
        /// List of value units.
        /// </summary>
        /// <remarks>
        /// List of value units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 PostBasicValueUnitList(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest));

        /// <summary>
        /// List of value units.
        /// </summary>
        /// <remarks>
        /// List of value units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> PostBasicValueUnitListWithHttpInfo(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List of asset classes.
        /// </summary>
        /// <remarks>
        /// List of asset classes as defined by FactSet Digital Solutions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetBasicAssetClassListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of asset classes.
        /// </summary>
        /// <remarks>
        /// List of asset classes as defined by FactSet Digital Solutions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetBasicAssetClassListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of benchmark types.
        /// </summary>
        /// <remarks>
        /// List of benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetBasicBenchmarkTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of benchmark types.
        /// </summary>
        /// <remarks>
        /// List of benchmark types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetBasicBenchmarkTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of frequency types.
        /// </summary>
        /// <remarks>
        /// List of frequency types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetBasicFrequencyTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of frequency types.
        /// </summary>
        /// <remarks>
        /// List of frequency types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetBasicFrequencyTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details for a language.
        /// </summary>
        /// <remarks>
        /// Details for a language.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetBasicLanguageGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a language.
        /// </summary>
        /// <remarks>
        /// Details for a language.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetBasicLanguageGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details for a language identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a language identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetBasicLanguageGetByCodeAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a language identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a language identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetBasicLanguageGetByCodeWithHttpInfoAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of languages.
        /// </summary>
        /// <remarks>
        /// List of languages.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetBasicLanguageListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of languages.
        /// </summary>
        /// <remarks>
        /// List of languages.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetBasicLanguageListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a market.
        /// </summary>
        /// <remarks>
        /// Details of a market.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetBasicMarketGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a market.
        /// </summary>
        /// <remarks>
        /// Details of a market.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetBasicMarketGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of market groups.
        /// </summary>
        /// <remarks>
        /// List of market groups.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> GetBasicMarketGroupListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of market groups.
        /// </summary>
        /// <remarks>
        /// List of market groups.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetBasicMarketGroupListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of market types.
        /// </summary>
        /// <remarks>
        /// List of market types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetBasicMarketTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of market types.
        /// </summary>
        /// <remarks>
        /// List of market types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetBasicMarketTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of media kinds.
        /// </summary>
        /// <remarks>
        /// List of media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetBasicMediaKindListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of media kinds.
        /// </summary>
        /// <remarks>
        /// List of media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetBasicMediaKindListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details for a continent.
        /// </summary>
        /// <remarks>
        /// Details for a continent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GetBasicRegionContinentGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a continent.
        /// </summary>
        /// <remarks>
        /// Details for a continent.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetBasicRegionContinentGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of continents.
        /// </summary>
        /// <remarks>
        /// List of continents.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GetBasicRegionContinentListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of continents.
        /// </summary>
        /// <remarks>
        /// List of continents.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetBasicRegionContinentListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details for a country.
        /// </summary>
        /// <remarks>
        /// Details for a country.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GetBasicRegionCountryGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a country.
        /// </summary>
        /// <remarks>
        /// Details for a country.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetBasicRegionCountryGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details for a country identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a country identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GetBasicRegionCountryGetByCodeAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a country identified by code.
        /// </summary>
        /// <remarks>
        /// Details for a country identified by code.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetBasicRegionCountryGetByCodeWithHttpInfoAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of countries.
        /// </summary>
        /// <remarks>
        /// List of countries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetBasicRegionCountryListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of countries.
        /// </summary>
        /// <remarks>
        /// List of countries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetBasicRegionCountryListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details for a region.
        /// </summary>
        /// <remarks>
        /// Details for a geographic, political, or economic region.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetBasicRegionGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a region.
        /// </summary>
        /// <remarks>
        /// Details for a geographic, political, or economic region.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetBasicRegionGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of regions.
        /// </summary>
        /// <remarks>
        /// List of geographic, political, and economic regions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetBasicRegionListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of regions.
        /// </summary>
        /// <remarks>
        /// List of geographic, political, and economic regions.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetBasicRegionListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a timezone.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetBasicTimezoneGetAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a timezone.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetBasicTimezoneGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a timezone identified by name.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GetBasicTimezoneGetByNameAsync(string name, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a timezone identified by name.
        /// </summary>
        /// <remarks>
        /// Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetBasicTimezoneGetByNameWithHttpInfoAsync(string name, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of alternative units.
        /// </summary>
        /// <remarks>
        /// List of alternative units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GetBasicValueUnitAlternativeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of alternative units.
        /// </summary>
        /// <remarks>
        /// List of alternative units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetBasicValueUnitAlternativeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a fractional currency.
        /// </summary>
        /// <remarks>
        /// Details of a fractional currency.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetBasicValueUnitCurrencyFractionalGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a fractional currency.
        /// </summary>
        /// <remarks>
        /// Details of a fractional currency.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetBasicValueUnitCurrencyFractionalGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of fractional currencies.
        /// </summary>
        /// <remarks>
        /// List of fractional currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> GetBasicValueUnitCurrencyFractionalListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of fractional currencies.
        /// </summary>
        /// <remarks>
        /// List of fractional currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetBasicValueUnitCurrencyFractionalListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a value unit.
        /// </summary>
        /// <remarks>
        /// Details of a value unit.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetBasicValueUnitGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a value unit.
        /// </summary>
        /// <remarks>
        /// Details of a value unit.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetBasicValueUnitGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of background text types.
        /// </summary>
        /// <remarks>
        /// List of background text types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PostBasicBackgroundTextTypeListAsync(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of background text types.
        /// </summary>
        /// <remarks>
        /// List of background text types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PostBasicBackgroundTextTypeListWithHttpInfoAsync(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of deliveries.
        /// </summary>
        /// <remarks>
        /// List of deliveries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PostBasicDeliveryListAsync(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of deliveries.
        /// </summary>
        /// <remarks>
        /// List of deliveries.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostBasicDeliveryListWithHttpInfoAsync(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of markets.
        /// </summary>
        /// <remarks>
        /// List of markets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> PostBasicMarketListAsync(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of markets.
        /// </summary>
        /// <remarks>
        /// List of markets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> PostBasicMarketListWithHttpInfoAsync(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of Internet media types.
        /// </summary>
        /// <remarks>
        /// List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> PostBasicMediaTypeListAsync(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of Internet media types.
        /// </summary>
        /// <remarks>
        /// List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> PostBasicMediaTypeListWithHttpInfoAsync(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of operating market identifier codes (MIC).
        /// </summary>
        /// <remarks>
        /// List of operating market identifier codes (MIC).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> PostBasicMicOperatingListAsync(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of operating market identifier codes (MIC).
        /// </summary>
        /// <remarks>
        /// List of operating market identifier codes (MIC).
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> PostBasicMicOperatingListWithHttpInfoAsync(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of timezones.
        /// </summary>
        /// <remarks>
        /// List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> PostBasicTimezoneListAsync(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of timezones.
        /// </summary>
        /// <remarks>
        /// List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> PostBasicTimezoneListWithHttpInfoAsync(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of currencies.
        /// </summary>
        /// <remarks>
        /// List of currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> PostBasicValueUnitCurrencyListAsync(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of currencies.
        /// </summary>
        /// <remarks>
        /// List of currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> PostBasicValueUnitCurrencyListWithHttpInfoAsync(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of main currencies.
        /// </summary>
        /// <remarks>
        /// List of main currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> PostBasicValueUnitCurrencyMainListAsync(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of main currencies.
        /// </summary>
        /// <remarks>
        /// List of main currencies.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> PostBasicValueUnitCurrencyMainListWithHttpInfoAsync(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of value units.
        /// </summary>
        /// <remarks>
        /// List of value units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> PostBasicValueUnitListAsync(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of value units.
        /// </summary>
        /// <remarks>
        /// List of value units.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> PostBasicValueUnitListWithHttpInfoAsync(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicApi : IBasicApiSync, IBasicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasicApi : IBasicApi
    {
        private FactSet.SDK.RealTimeNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicAssetClassListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse200) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicBenchmarkTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2002) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicFrequencyTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2004) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicLanguageGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2005) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicLanguageGetByCodeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2006) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicLanguageListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2007) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicMarketGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2008) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicMarketGroupListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20010) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicMarketTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20011) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicMediaKindListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20012) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicRegionContinentGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20017) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicRegionContinentListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20018) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicRegionCountryGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20019) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicRegionCountryGetByCodeResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20020) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicRegionCountryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20021) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicRegionGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20015) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicRegionListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20016) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicTimezoneGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20022) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicTimezoneGetByNameResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20023) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicValueUnitAlternativeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20027) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicValueUnitCurrencyFractionalGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20029) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicValueUnitCurrencyFractionalListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20030) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetBasicValueUnitGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20025) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicBackgroundTextTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2001) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicDeliveryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2003) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicMarketListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse2009) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicMediaTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20013) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicMicOperatingListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20014) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicTimezoneListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20024) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicValueUnitCurrencyListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20028) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicValueUnitCurrencyMainListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20031) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostBasicValueUnitListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20026) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasicApi(FactSet.SDK.RealTimeNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasicApi(FactSet.SDK.RealTimeNews.Client.ISynchronousClient client, FactSet.SDK.RealTimeNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List of asset classes. List of asset classes as defined by FactSet Digital Solutions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetBasicAssetClassList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetBasicAssetClassListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of asset classes. List of asset classes as defined by FactSet Digital Solutions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetBasicAssetClassListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicAssetClassListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse200>("/basic/asset-class/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicAssetClassList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of asset classes. List of asset classes as defined by FactSet Digital Solutions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200>GetBasicAssetClassListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicAssetClassListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of asset classes. List of asset classes as defined by FactSet Digital Solutions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetBasicAssetClassListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicAssetClassListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/basic/asset-class/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicAssetClassList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of benchmark types. List of benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetBasicBenchmarkTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicBenchmarkTypeListWithHttpInfo(attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of benchmark types. List of benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetBasicBenchmarkTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicBenchmarkTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2002>("/basic/benchmark/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicBenchmarkTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of benchmark types. List of benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002>GetBasicBenchmarkTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicBenchmarkTypeListWithHttpInfoAsync(attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of benchmark types. List of benchmark types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetBasicBenchmarkTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicBenchmarkTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/basic/benchmark/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicBenchmarkTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of frequency types. List of frequency types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetBasicFrequencyTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicFrequencyTypeListWithHttpInfo(attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of frequency types. List of frequency types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetBasicFrequencyTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicFrequencyTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2004>("/basic/frequency/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicFrequencyTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of frequency types. List of frequency types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004>GetBasicFrequencyTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicFrequencyTypeListWithHttpInfoAsync(attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of frequency types. List of frequency types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetBasicFrequencyTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicFrequencyTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/basic/frequency/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicFrequencyTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details for a language. Details for a language.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetBasicLanguageGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicLanguageGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a language. Details for a language.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetBasicLanguageGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicLanguageGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2005>("/basic/language/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicLanguageGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a language. Details for a language.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005>GetBasicLanguageGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicLanguageGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a language. Details for a language.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetBasicLanguageGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicLanguageGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/basic/language/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicLanguageGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details for a language identified by code. Details for a language identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetBasicLanguageGetByCode(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicLanguageGetByCodeWithHttpInfo(code, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a language identified by code. Details for a language identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> GetBasicLanguageGetByCodeWithHttpInfo(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'code' when calling BasicApi->GetBasicLanguageGetByCode");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicLanguageGetByCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2006>("/basic/language/get-by-code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicLanguageGetByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a language identified by code. Details for a language identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006>GetBasicLanguageGetByCodeAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicLanguageGetByCodeWithHttpInfoAsync(code, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a language identified by code. Details for a language identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 639-1 code of the language.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetBasicLanguageGetByCodeWithHttpInfoAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'code' when calling BasicApi->GetBasicLanguageGetByCode");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicLanguageGetByCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/basic/language/get-by-code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicLanguageGetByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of languages. List of languages.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetBasicLanguageList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicLanguageListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of languages. List of languages.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> GetBasicLanguageListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicLanguageListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2007>("/basic/language/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicLanguageList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of languages. List of languages.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007>GetBasicLanguageListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicLanguageListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of languages. List of languages.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetBasicLanguageListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicLanguageListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/basic/language/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicLanguageList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a market. Details of a market.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetBasicMarketGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicMarketGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a market. Details of a market.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> GetBasicMarketGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicMarketGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse2008>("/basic/market/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMarketGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a market. Details of a market.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008>GetBasicMarketGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicMarketGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a market. Details of a market.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a market.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetBasicMarketGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicMarketGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/basic/market/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMarketGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of market groups. List of market groups.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 GetBasicMarketGroupList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicMarketGroupListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of market groups. List of market groups.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse<InlineResponse20010> GetBasicMarketGroupListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicMarketGroupListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20010>("/basic/market/group/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMarketGroupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of market groups. List of market groups.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010>GetBasicMarketGroupListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicMarketGroupListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of market groups. List of market groups.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name | | shortName | | -shortName |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetBasicMarketGroupListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicMarketGroupListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/basic/market/group/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMarketGroupList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of market types. List of market types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetBasicMarketTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicMarketTypeListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of market types. List of market types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> GetBasicMarketTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicMarketTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20011>("/basic/market/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMarketTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of market types. List of market types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011>GetBasicMarketTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicMarketTypeListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of market types. List of market types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetBasicMarketTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicMarketTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/basic/market/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMarketTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of media kinds. List of media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetBasicMediaKindList(List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetBasicMediaKindListWithHttpInfo(attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of media kinds. List of media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetBasicMediaKindListWithHttpInfo(List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicMediaKindListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20012>("/basic/media/kind/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMediaKindList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of media kinds. List of media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012>GetBasicMediaKindListAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicMediaKindListWithHttpInfoAsync(attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of media kinds. List of media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetBasicMediaKindListWithHttpInfoAsync(List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicMediaKindListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/basic/media/kind/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicMediaKindList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details for a continent. Details for a continent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GetBasicRegionContinentGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicRegionContinentGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a continent. Details for a continent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse<InlineResponse20017> GetBasicRegionContinentGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionContinentGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20017>("/basic/region/continent/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionContinentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a continent. Details for a continent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017>GetBasicRegionContinentGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicRegionContinentGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a continent. Details for a continent.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a continent.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetBasicRegionContinentGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionContinentGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/basic/region/continent/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionContinentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of continents. List of continents.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GetBasicRegionContinentList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicRegionContinentListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of continents. List of continents.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse<InlineResponse20018> GetBasicRegionContinentListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionContinentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20018>("/basic/region/continent/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionContinentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of continents. List of continents.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018>GetBasicRegionContinentListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicRegionContinentListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of continents. List of continents.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetBasicRegionContinentListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionContinentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/basic/region/continent/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionContinentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details for a country. Details for a country.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GetBasicRegionCountryGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicRegionCountryGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a country. Details for a country.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse<InlineResponse20019> GetBasicRegionCountryGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionCountryGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20019>("/basic/region/country/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionCountryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a country. Details for a country.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019>GetBasicRegionCountryGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicRegionCountryGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a country. Details for a country.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetBasicRegionCountryGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionCountryGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/basic/region/country/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionCountryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details for a country identified by code. Details for a country identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GetBasicRegionCountryGetByCode(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicRegionCountryGetByCodeWithHttpInfo(code, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a country identified by code. Details for a country identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse<InlineResponse20020> GetBasicRegionCountryGetByCodeWithHttpInfo(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'code' when calling BasicApi->GetBasicRegionCountryGetByCode");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionCountryGetByCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20020>("/basic/region/country/get-by-code", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionCountryGetByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a country identified by code. Details for a country identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020>GetBasicRegionCountryGetByCodeAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicRegionCountryGetByCodeWithHttpInfoAsync(code, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a country identified by code. Details for a country identified by code.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">ISO 3166-1 alpha-2 code of a country.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetBasicRegionCountryGetByCodeWithHttpInfoAsync(string code, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'code' when calling BasicApi->GetBasicRegionCountryGetByCode");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionCountryGetByCodeResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/basic/region/country/get-by-code", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionCountryGetByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of countries. List of countries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetBasicRegionCountryList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicRegionCountryListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of countries. List of countries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse<InlineResponse20021> GetBasicRegionCountryListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionCountryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20021>("/basic/region/country/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionCountryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of countries. List of countries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021>GetBasicRegionCountryListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicRegionCountryListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of countries. List of countries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetBasicRegionCountryListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionCountryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/basic/region/country/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionCountryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details for a region. Details for a geographic, political, or economic region.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetBasicRegionGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicRegionGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a region. Details for a geographic, political, or economic region.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse<InlineResponse20015> GetBasicRegionGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20015>("/basic/region/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a region. Details for a geographic, political, or economic region.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015>GetBasicRegionGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicRegionGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a region. Details for a geographic, political, or economic region.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a region.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetBasicRegionGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/basic/region/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of regions. List of geographic, political, and economic regions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetBasicRegionList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicRegionListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of regions. List of geographic, political, and economic regions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse<InlineResponse20016> GetBasicRegionListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20016>("/basic/region/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of regions. List of geographic, political, and economic regions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016>GetBasicRegionListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicRegionListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of regions. List of geographic, political, and economic regions.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 2 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | code | | -code | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetBasicRegionListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicRegionListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/basic/region/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicRegionList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a timezone. Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetBasicTimezoneGet(decimal id, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetBasicTimezoneGetWithHttpInfo(id, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a timezone. Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse<InlineResponse20022> GetBasicTimezoneGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicTimezoneGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20022>("/basic/timezone/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicTimezoneGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a timezone. Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022>GetBasicTimezoneGetAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicTimezoneGetWithHttpInfoAsync(id, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a timezone. Details of a timezone identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a timezone. An invalid or unsupported identifier will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetBasicTimezoneGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicTimezoneGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20022>("/basic/timezone/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicTimezoneGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a timezone identified by name. Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GetBasicTimezoneGetByName(string name, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetBasicTimezoneGetByNameWithHttpInfo(name, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a timezone identified by name. Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse<InlineResponse20023> GetBasicTimezoneGetByNameWithHttpInfo(string name, List<string> attributes = default(List<string>))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'name' when calling BasicApi->GetBasicTimezoneGetByName");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicTimezoneGetByNameResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20023>("/basic/timezone/get-by-name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicTimezoneGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a timezone identified by name. Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023>GetBasicTimezoneGetByNameAsync(string name, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicTimezoneGetByNameWithHttpInfoAsync(name, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a timezone identified by name. Details of a timezone identified by name, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of a timezone. The result is determined by a case-sensitive equality comparison with the stored timezone names. An invalid or unsupported name will result in an error.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetBasicTimezoneGetByNameWithHttpInfoAsync(string name, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'name' when calling BasicApi->GetBasicTimezoneGetByName");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicTimezoneGetByNameResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20023>("/basic/timezone/get-by-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicTimezoneGetByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of alternative units. List of alternative units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GetBasicValueUnitAlternativeList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicValueUnitAlternativeListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of alternative units. List of alternative units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse<InlineResponse20027> GetBasicValueUnitAlternativeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitAlternativeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20027>("/basic/value-unit/alternative/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitAlternativeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of alternative units. List of alternative units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027>GetBasicValueUnitAlternativeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicValueUnitAlternativeListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of alternative units. List of alternative units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetBasicValueUnitAlternativeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitAlternativeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20027>("/basic/value-unit/alternative/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitAlternativeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a fractional currency. Details of a fractional currency.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetBasicValueUnitCurrencyFractionalGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicValueUnitCurrencyFractionalGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a fractional currency. Details of a fractional currency.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse<InlineResponse20029> GetBasicValueUnitCurrencyFractionalGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitCurrencyFractionalGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20029>("/basic/value-unit/currency/fractional/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitCurrencyFractionalGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a fractional currency. Details of a fractional currency.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029>GetBasicValueUnitCurrencyFractionalGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicValueUnitCurrencyFractionalGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a fractional currency. Details of a fractional currency.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a fractional currency.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetBasicValueUnitCurrencyFractionalGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitCurrencyFractionalGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20029>("/basic/value-unit/currency/fractional/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitCurrencyFractionalGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of fractional currencies. List of fractional currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 GetBasicValueUnitCurrencyFractionalList(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetBasicValueUnitCurrencyFractionalListWithHttpInfo(attributes, metaLanguage, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of fractional currencies. List of fractional currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public ApiResponse<InlineResponse20030> GetBasicValueUnitCurrencyFractionalListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitCurrencyFractionalListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20030>("/basic/value-unit/currency/fractional/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitCurrencyFractionalList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of fractional currencies. List of fractional currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030>GetBasicValueUnitCurrencyFractionalListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicValueUnitCurrencyFractionalListWithHttpInfoAsync(attributes, metaLanguage, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of fractional currencies. List of fractional currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetBasicValueUnitCurrencyFractionalListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitCurrencyFractionalListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20030>("/basic/value-unit/currency/fractional/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitCurrencyFractionalList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a value unit. Details of a value unit.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetBasicValueUnitGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetBasicValueUnitGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a value unit. Details of a value unit.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse<InlineResponse20025> GetBasicValueUnitGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20025>("/basic/value-unit/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a value unit. Details of a value unit.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025>GetBasicValueUnitGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetBasicValueUnitGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a value unit. Details of a value unit.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a value unit.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetBasicValueUnitGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetBasicValueUnitGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20025>("/basic/value-unit/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicValueUnitGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of background text types. List of background text types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PostBasicBackgroundTextTypeList(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest))
        {
            var localVarResponse = PostBasicBackgroundTextTypeListWithHttpInfo(postBasicBackgroundTextTypeListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of background text types. List of background text types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> PostBasicBackgroundTextTypeListWithHttpInfo(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicBackgroundTextTypeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicBackgroundTextTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2001>("/basic/background-text/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicBackgroundTextTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of background text types. List of background text types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001>PostBasicBackgroundTextTypeListAsync(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicBackgroundTextTypeListWithHttpInfoAsync(postBasicBackgroundTextTypeListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of background text types. List of background text types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicBackgroundTextTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PostBasicBackgroundTextTypeListWithHttpInfoAsync(PostBasicBackgroundTextTypeListRequest postBasicBackgroundTextTypeListRequest = default(PostBasicBackgroundTextTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicBackgroundTextTypeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicBackgroundTextTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2001>("/basic/background-text/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicBackgroundTextTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of deliveries. List of deliveries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PostBasicDeliveryList(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest))
        {
            var localVarResponse = PostBasicDeliveryListWithHttpInfo(postBasicDeliveryListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of deliveries. List of deliveries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> PostBasicDeliveryListWithHttpInfo(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicDeliveryListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicDeliveryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2003>("/basic/delivery/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicDeliveryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of deliveries. List of deliveries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003>PostBasicDeliveryListAsync(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicDeliveryListWithHttpInfoAsync(postBasicDeliveryListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of deliveries. List of deliveries.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicDeliveryListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PostBasicDeliveryListWithHttpInfoAsync(PostBasicDeliveryListRequest postBasicDeliveryListRequest = default(PostBasicDeliveryListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicDeliveryListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicDeliveryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/basic/delivery/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicDeliveryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of markets. List of markets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 PostBasicMarketList(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest))
        {
            var localVarResponse = PostBasicMarketListWithHttpInfo(postBasicMarketListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of markets. List of markets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> PostBasicMarketListWithHttpInfo(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicMarketListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicMarketListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse2009>("/basic/market/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicMarketList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of markets. List of markets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009>PostBasicMarketListAsync(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicMarketListWithHttpInfoAsync(postBasicMarketListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of markets. List of markets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMarketListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> PostBasicMarketListWithHttpInfoAsync(PostBasicMarketListRequest postBasicMarketListRequest = default(PostBasicMarketListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicMarketListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicMarketListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2009>("/basic/market/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicMarketList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of Internet media types. List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 PostBasicMediaTypeList(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest))
        {
            var localVarResponse = PostBasicMediaTypeListWithHttpInfo(postBasicMediaTypeListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Internet media types. List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse<InlineResponse20013> PostBasicMediaTypeListWithHttpInfo(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicMediaTypeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicMediaTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20013>("/basic/media/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicMediaTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of Internet media types. List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013>PostBasicMediaTypeListAsync(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicMediaTypeListWithHttpInfoAsync(postBasicMediaTypeListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Internet media types. List of Internet media types. See http://www.iana.org/assignments/media-types/ for further details. Not all such Internet media types are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMediaTypeListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> PostBasicMediaTypeListWithHttpInfoAsync(PostBasicMediaTypeListRequest postBasicMediaTypeListRequest = default(PostBasicMediaTypeListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicMediaTypeListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicMediaTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20013>("/basic/media/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicMediaTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of operating market identifier codes (MIC). List of operating market identifier codes (MIC).
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 PostBasicMicOperatingList(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest))
        {
            var localVarResponse = PostBasicMicOperatingListWithHttpInfo(postBasicMicOperatingListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of operating market identifier codes (MIC). List of operating market identifier codes (MIC).
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse<InlineResponse20014> PostBasicMicOperatingListWithHttpInfo(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicMicOperatingListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicMicOperatingListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20014>("/basic/mic/operating/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicMicOperatingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of operating market identifier codes (MIC). List of operating market identifier codes (MIC).
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014>PostBasicMicOperatingListAsync(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicMicOperatingListWithHttpInfoAsync(postBasicMicOperatingListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of operating market identifier codes (MIC). List of operating market identifier codes (MIC).
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicMicOperatingListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> PostBasicMicOperatingListWithHttpInfoAsync(PostBasicMicOperatingListRequest postBasicMicOperatingListRequest = default(PostBasicMicOperatingListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicMicOperatingListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicMicOperatingListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20014>("/basic/mic/operating/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicMicOperatingList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of timezones. List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 PostBasicTimezoneList(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest))
        {
            var localVarResponse = PostBasicTimezoneListWithHttpInfo(postBasicTimezoneListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of timezones. List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse<InlineResponse20024> PostBasicTimezoneListWithHttpInfo(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicTimezoneListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicTimezoneListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20024>("/basic/timezone/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicTimezoneList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of timezones. List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024>PostBasicTimezoneListAsync(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicTimezoneListWithHttpInfoAsync(postBasicTimezoneListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of timezones. List of timezones identified by id, as specified by the Internet Assigned Numbers Authority. See http://www.iana.org/time-zones for further details. Not all such timezones are available on the MDG.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicTimezoneListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> PostBasicTimezoneListWithHttpInfoAsync(PostBasicTimezoneListRequest postBasicTimezoneListRequest = default(PostBasicTimezoneListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicTimezoneListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicTimezoneListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20024>("/basic/timezone/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicTimezoneList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of currencies. List of currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 PostBasicValueUnitCurrencyList(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest))
        {
            var localVarResponse = PostBasicValueUnitCurrencyListWithHttpInfo(postBasicValueUnitCurrencyListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of currencies. List of currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse<InlineResponse20028> PostBasicValueUnitCurrencyListWithHttpInfo(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicValueUnitCurrencyListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicValueUnitCurrencyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20028>("/basic/value-unit/currency/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicValueUnitCurrencyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of currencies. List of currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028>PostBasicValueUnitCurrencyListAsync(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicValueUnitCurrencyListWithHttpInfoAsync(postBasicValueUnitCurrencyListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of currencies. List of currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> PostBasicValueUnitCurrencyListWithHttpInfoAsync(PostBasicValueUnitCurrencyListRequest postBasicValueUnitCurrencyListRequest = default(PostBasicValueUnitCurrencyListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicValueUnitCurrencyListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicValueUnitCurrencyListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20028>("/basic/value-unit/currency/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicValueUnitCurrencyList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of main currencies. List of main currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 PostBasicValueUnitCurrencyMainList(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest))
        {
            var localVarResponse = PostBasicValueUnitCurrencyMainListWithHttpInfo(postBasicValueUnitCurrencyMainListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of main currencies. List of main currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse<InlineResponse20031> PostBasicValueUnitCurrencyMainListWithHttpInfo(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicValueUnitCurrencyMainListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicValueUnitCurrencyMainListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20031>("/basic/value-unit/currency/main/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicValueUnitCurrencyMainList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of main currencies. List of main currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031>PostBasicValueUnitCurrencyMainListAsync(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicValueUnitCurrencyMainListWithHttpInfoAsync(postBasicValueUnitCurrencyMainListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of main currencies. List of main currencies.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitCurrencyMainListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> PostBasicValueUnitCurrencyMainListWithHttpInfoAsync(PostBasicValueUnitCurrencyMainListRequest postBasicValueUnitCurrencyMainListRequest = default(PostBasicValueUnitCurrencyMainListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicValueUnitCurrencyMainListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicValueUnitCurrencyMainListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20031>("/basic/value-unit/currency/main/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicValueUnitCurrencyMainList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of value units. List of value units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 PostBasicValueUnitList(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest))
        {
            var localVarResponse = PostBasicValueUnitListWithHttpInfo(postBasicValueUnitListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of value units. List of value units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse<InlineResponse20026> PostBasicValueUnitListWithHttpInfo(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicValueUnitListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostBasicValueUnitListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20026>("/basic/value-unit/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicValueUnitList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of value units. List of value units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026>PostBasicValueUnitListAsync(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostBasicValueUnitListWithHttpInfoAsync(postBasicValueUnitListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of value units. List of value units.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBasicValueUnitListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> PostBasicValueUnitListWithHttpInfoAsync(PostBasicValueUnitListRequest postBasicValueUnitListRequest = default(PostBasicValueUnitListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postBasicValueUnitListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostBasicValueUnitListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20026>("/basic/value-unit/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostBasicValueUnitList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
