/*
 * Real-Time News API
 *
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeNews.Client;
using FactSet.SDK.RealTimeNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20036</returns>
        InlineResponse20036 GetCategoryDatasetList(List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        ApiResponse<InlineResponse20036> GetCategoryDatasetListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetCategoryGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetCategoryGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20037</returns>
        InlineResponse20037 GetCategoryInstrumentList(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        ApiResponse<InlineResponse20037> GetCategoryInstrumentListWithHttpInfo(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        InlineResponse20038 GetCategoryLevelGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        ApiResponse<InlineResponse20038> GetCategoryLevelGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GetCategoryList(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GetCategoryListWithHttpInfo(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 GetCategoryListByLevel(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> GetCategoryListByLevelWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 GetCategoryListBySystem(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> GetCategoryListBySystemWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20039</returns>
        InlineResponse20039 GetCategoryPathGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        ApiResponse<InlineResponse20039> GetCategoryPathGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20040</returns>
        InlineResponse20040 GetCategorySystemGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        ApiResponse<InlineResponse20040> GetCategorySystemGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        InlineResponse20041 GetCategorySystemList(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        ApiResponse<InlineResponse20041> GetCategorySystemListWithHttpInfo(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20042</returns>
        InlineResponse20042 GetCategorySystemTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        ApiResponse<InlineResponse20042> GetCategorySystemTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20036</returns>
        System.Threading.Tasks.Task<InlineResponse20036> GetCategoryDatasetListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of entitled category datasets.
        /// </summary>
        /// <remarks>
        /// List of entitled category datasets.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GetCategoryDatasetListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetCategoryGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a category.
        /// </summary>
        /// <remarks>
        /// Details of a category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetCategoryGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20037</returns>
        System.Threading.Tasks.Task<InlineResponse20037> GetCategoryInstrumentListAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <remarks>
        /// List of instruments where a specific dataset has assigned a given category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> GetCategoryInstrumentListWithHttpInfoAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20038</returns>
        System.Threading.Tasks.Task<InlineResponse20038> GetCategoryLevelGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a category level.
        /// </summary>
        /// <remarks>
        /// Details of a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GetCategoryLevelGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GetCategoryListAsync(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories.
        /// </summary>
        /// <remarks>
        /// List of categories.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetCategoryListWithHttpInfoAsync(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> GetCategoryListByLevelAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories assigned to a category level.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category level.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetCategoryListByLevelWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> GetCategoryListBySystemAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of categories assigned to a category system.
        /// </summary>
        /// <remarks>
        /// List of categories assigned to a category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetCategoryListBySystemWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20039</returns>
        System.Threading.Tasks.Task<InlineResponse20039> GetCategoryPathGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Path from the first level to the level of a specific category.
        /// </summary>
        /// <remarks>
        /// Path from the first level to the level of a specific category.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> GetCategoryPathGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20040</returns>
        System.Threading.Tasks.Task<InlineResponse20040> GetCategorySystemGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of an entitled category system.
        /// </summary>
        /// <remarks>
        /// Details of an entitled category system.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetCategorySystemGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20041</returns>
        System.Threading.Tasks.Task<InlineResponse20041> GetCategorySystemListAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of entitled category systems.
        /// </summary>
        /// <remarks>
        /// List of entitled category systems.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> GetCategorySystemListWithHttpInfoAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20042</returns>
        System.Threading.Tasks.Task<InlineResponse20042> GetCategorySystemTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of category system types.
        /// </summary>
        /// <remarks>
        /// List of category system types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetCategorySystemTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoryApi : ICategoryApiSync, ICategoryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoryApi : ICategoryApi
    {
        private FactSet.SDK.RealTimeNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryDatasetListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20036) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20032) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryInstrumentListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20037) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryLevelGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20038) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20033) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryListByLevelResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20034) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryListBySystemResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20035) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategoryPathGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20039) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategorySystemGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20040) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategorySystemListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20041) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetCategorySystemTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20042) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CategoryApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CategoryApi(FactSet.SDK.RealTimeNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CategoryApi(FactSet.SDK.RealTimeNews.Client.ISynchronousClient client, FactSet.SDK.RealTimeNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20036</returns>
        public InlineResponse20036 GetCategoryDatasetList(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategoryDatasetListWithHttpInfo(attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20036</returns>
        public ApiResponse<InlineResponse20036> GetCategoryDatasetListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryDatasetListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20036>("/category/dataset/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryDatasetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20036</returns>
        public async System.Threading.Tasks.Task<InlineResponse20036>GetCategoryDatasetListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryDatasetListWithHttpInfoAsync(attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category datasets. List of entitled category datasets.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20036)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20036>> GetCategoryDatasetListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryDatasetListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20036>("/category/dataset/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryDatasetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetCategoryGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategoryGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse<InlineResponse20032> GetCategoryGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20032>("/category/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032>GetCategoryGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category. Details of a category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetCategoryGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20032>("/category/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20037</returns>
        public InlineResponse20037 GetCategoryInstrumentList(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetCategoryInstrumentListWithHttpInfo(idCategory, idCategoryDataset, attributes, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20037</returns>
        public ApiResponse<InlineResponse20037> GetCategoryInstrumentListWithHttpInfo(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "idCategory", idCategory));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "idCategoryDataset", idCategoryDataset));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryInstrumentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20037>("/category/instrument/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryInstrumentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20037</returns>
        public async System.Threading.Tasks.Task<InlineResponse20037>GetCategoryInstrumentListAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryInstrumentListWithHttpInfoAsync(idCategory, idCategoryDataset, attributes, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of instruments where a specific dataset has assigned a given category. List of instruments where a specific dataset has assigned a given category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idCategory">Identifier of a category.</param>
        /// <param name="idCategoryDataset">Identifier of a category dataset.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20037)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20037>> GetCategoryInstrumentListWithHttpInfoAsync(decimal idCategory, decimal idCategoryDataset, List<string> attributes = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "idCategory", idCategory));
            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "idCategoryDataset", idCategoryDataset));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryInstrumentListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20037>("/category/instrument/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryInstrumentList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20038</returns>
        public InlineResponse20038 GetCategoryLevelGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategoryLevelGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20038</returns>
        public ApiResponse<InlineResponse20038> GetCategoryLevelGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryLevelGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20038>("/category/level/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryLevelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20038</returns>
        public async System.Threading.Tasks.Task<InlineResponse20038>GetCategoryLevelGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryLevelGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a category level. Details of a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20038)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20038>> GetCategoryLevelGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryLevelGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20038>("/category/level/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryLevelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GetCategoryList(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategoryListWithHttpInfo(ids, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse<InlineResponse20033> GetCategoryListWithHttpInfo(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'ids' when calling CategoryApi->GetCategoryList");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20033>("/category/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033>GetCategoryListAsync(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryListWithHttpInfoAsync(ids, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories. List of categories.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">List of categories belonging to the same category system.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetCategoryListWithHttpInfoAsync(List<decimal> ids, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'ids' when calling CategoryApi->GetCategoryList");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20033>("/category/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 GetCategoryListByLevel(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetCategoryListByLevelWithHttpInfo(id, attributes, metaLanguage, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse<InlineResponse20034> GetCategoryListByLevelWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListByLevelResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20034>("/category/list-by-level", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListByLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034>GetCategoryListByLevelAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryListByLevelWithHttpInfoAsync(id, attributes, metaLanguage, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category level. List of categories assigned to a category level.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category level. See attribute &#x60;levels&#x60; in endpoint &#x60;/category/system/get&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetCategoryListByLevelWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListByLevelResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20034>("/category/list-by-level", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListByLevel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 GetCategoryListBySystem(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetCategoryListBySystemWithHttpInfo(id, attributes, metaLanguage, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse<InlineResponse20035> GetCategoryListBySystemWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListBySystemResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20035>("/category/list-by-system", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListBySystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035>GetCategoryListBySystemAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryListBySystemWithHttpInfoAsync(id, attributes, metaLanguage, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of categories assigned to a category system. List of categories assigned to a category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetCategoryListBySystemWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryListBySystemResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20035>("/category/list-by-system", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryListBySystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20039</returns>
        public InlineResponse20039 GetCategoryPathGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategoryPathGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20039</returns>
        public ApiResponse<InlineResponse20039> GetCategoryPathGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategoryPathGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20039>("/category/path/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20039</returns>
        public async System.Threading.Tasks.Task<InlineResponse20039>GetCategoryPathGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategoryPathGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Path from the first level to the level of a specific category. Path from the first level to the level of a specific category.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20039)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20039>> GetCategoryPathGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategoryPathGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20039>("/category/path/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryPathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20040</returns>
        public InlineResponse20040 GetCategorySystemGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategorySystemGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20040</returns>
        public ApiResponse<InlineResponse20040> GetCategorySystemGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20040>("/category/system/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20040</returns>
        public async System.Threading.Tasks.Task<InlineResponse20040>GetCategorySystemGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategorySystemGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of an entitled category system. Details of an entitled category system.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a category system. See endpoint &#x60;/category/system/list&#x60; for valid values.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20040)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20040>> GetCategorySystemGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20040>("/category/system/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20041</returns>
        public InlineResponse20041 GetCategorySystemList(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategorySystemListWithHttpInfo(idType, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20041</returns>
        public ApiResponse<InlineResponse20041> GetCategorySystemListWithHttpInfo(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (idType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "idType", idType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20041>("/category/system/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20041</returns>
        public async System.Threading.Tasks.Task<InlineResponse20041>GetCategorySystemListAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategorySystemListWithHttpInfoAsync(idType, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of entitled category systems. List of entitled category systems.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idType">Filter for a specific category system type. See endpoint &#x60;/category/system/type/list&#x60; for valid values. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20041)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20041>> GetCategorySystemListWithHttpInfoAsync(decimal? idType = default(decimal?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (idType != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "idType", idType));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20041>("/category/system/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20042</returns>
        public InlineResponse20042 GetCategorySystemTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetCategorySystemTypeListWithHttpInfo(attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20042</returns>
        public ApiResponse<InlineResponse20042> GetCategorySystemTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20042>("/category/system/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20042</returns>
        public async System.Threading.Tasks.Task<InlineResponse20042>GetCategorySystemTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetCategorySystemTypeListWithHttpInfoAsync(attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of category system types. List of category system types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20042)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20042>> GetCategorySystemTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetCategorySystemTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20042>("/category/system/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategorySystemTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
