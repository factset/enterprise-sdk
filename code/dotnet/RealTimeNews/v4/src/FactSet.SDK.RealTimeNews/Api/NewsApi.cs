/*
 * Real-Time News API
 *
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.SDK.RealTimeNews.Client;
using FactSet.SDK.RealTimeNews.Model;
using FactSet.SDK.Utils.Authentication;

namespace FactSet.SDK.RealTimeNews.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Details for a news article.
        /// </summary>
        /// <remarks>
        /// Details for a news article.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20043</returns>
        InlineResponse20043 GetNewsArticleGet(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a news article.
        /// </summary>
        /// <remarks>
        /// Details for a news article.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        ApiResponse<InlineResponse20043> GetNewsArticleGetWithHttpInfo(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Details for a news article type.
        /// </summary>
        /// <remarks>
        /// Details for a news article type.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20050</returns>
        InlineResponse20050 GetNewsArticleTypeGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// Details for a news article type.
        /// </summary>
        /// <remarks>
        /// Details for a news article type.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        ApiResponse<InlineResponse20050> GetNewsArticleTypeGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// List of news article types.
        /// </summary>
        /// <remarks>
        /// List of news article types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20051</returns>
        InlineResponse20051 GetNewsArticleTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string));

        /// <summary>
        /// List of news article types.
        /// </summary>
        /// <remarks>
        /// List of news article types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        ApiResponse<InlineResponse20051> GetNewsArticleTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string));
        /// <summary>
        /// Details of a distributor.
        /// </summary>
        /// <remarks>
        /// Details of a distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20052</returns>
        InlineResponse20052 GetNewsDistributorGet(decimal id, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of a distributor.
        /// </summary>
        /// <remarks>
        /// Details of a distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        ApiResponse<InlineResponse20052> GetNewsDistributorGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of distributors.
        /// </summary>
        /// <remarks>
        /// List of distributors.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20053</returns>
        InlineResponse20053 GetNewsDistributorList(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of distributors.
        /// </summary>
        /// <remarks>
        /// List of distributors.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        ApiResponse<InlineResponse20053> GetNewsDistributorListWithHttpInfo(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// Details of a publisher.
        /// </summary>
        /// <remarks>
        /// Details of a publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20054</returns>
        InlineResponse20054 GetNewsPublisherGet(decimal id, List<string> attributes = default(List<string>));

        /// <summary>
        /// Details of a publisher.
        /// </summary>
        /// <remarks>
        /// Details of a publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        ApiResponse<InlineResponse20054> GetNewsPublisherGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>));
        /// <summary>
        /// List of publishers.
        /// </summary>
        /// <remarks>
        /// List of publishers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20055</returns>
        InlineResponse20055 GetNewsPublisherList(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));

        /// <summary>
        /// List of publishers.
        /// </summary>
        /// <remarks>
        /// List of publishers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        ApiResponse<InlineResponse20055> GetNewsPublisherListWithHttpInfo(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?));
        /// <summary>
        /// List of publishers provided by the given distributor.
        /// </summary>
        /// <remarks>
        /// List of publishers provided by the given distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20056</returns>
        InlineResponse20056 GetNewsPublisherListByDistributor(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>));

        /// <summary>
        /// List of publishers provided by the given distributor.
        /// </summary>
        /// <remarks>
        /// List of publishers provided by the given distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20056</returns>
        ApiResponse<InlineResponse20056> GetNewsPublisherListByDistributorWithHttpInfo(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>));
        /// <summary>
        /// List of news articles.
        /// </summary>
        /// <remarks>
        /// List of news articles.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20044</returns>
        InlineResponse20044 PostNewsArticleList(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest));

        /// <summary>
        /// List of news articles.
        /// </summary>
        /// <remarks>
        /// List of news articles.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        ApiResponse<InlineResponse20044> PostNewsArticleListWithHttpInfo(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest));
        /// <summary>
        /// List news articles of an article chain.
        /// </summary>
        /// <remarks>
        /// List news articles of an article chain.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <returns>InlineResponse20045</returns>
        InlineResponse20045 PostNewsArticleListByChain(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest);

        /// <summary>
        /// List news articles of an article chain.
        /// </summary>
        /// <remarks>
        /// List news articles of an article chain.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        ApiResponse<InlineResponse20045> PostNewsArticleListByChainWithHttpInfo(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest);
        /// <summary>
        /// News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <remarks>
        /// News articles for instruments that are constituents of the given indices.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <returns>InlineResponse20046</returns>
        InlineResponse20046 PostNewsArticleListByIndex(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest);

        /// <summary>
        /// News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <remarks>
        /// News articles for instruments that are constituents of the given indices.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        ApiResponse<InlineResponse20046> PostNewsArticleListByIndexWithHttpInfo(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest);
        /// <summary>
        /// News articles for instruments.
        /// </summary>
        /// <remarks>
        /// News articles for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <returns>InlineResponse20047</returns>
        InlineResponse20047 PostNewsArticleListByInstrument(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest);

        /// <summary>
        /// News articles for instruments.
        /// </summary>
        /// <remarks>
        /// News articles for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        ApiResponse<InlineResponse20047> PostNewsArticleListByInstrumentWithHttpInfo(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest);
        /// <summary>
        /// List news articles which contain media of specific media kinds.
        /// </summary>
        /// <remarks>
        /// List news articles which contain media of specific media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <returns>InlineResponse20048</returns>
        InlineResponse20048 PostNewsArticleListByMediaKind(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest);

        /// <summary>
        /// List news articles which contain media of specific media kinds.
        /// </summary>
        /// <remarks>
        /// List news articles which contain media of specific media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        ApiResponse<InlineResponse20048> PostNewsArticleListByMediaKindWithHttpInfo(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest);
        /// <summary>
        /// Search for news articles using a fulltext search.
        /// </summary>
        /// <remarks>
        /// Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20049</returns>
        InlineResponse20049 PostNewsArticleSearchByText(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest));

        /// <summary>
        /// Search for news articles using a fulltext search.
        /// </summary>
        /// <remarks>
        /// Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        ApiResponse<InlineResponse20049> PostNewsArticleSearchByTextWithHttpInfo(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest));
        /// <summary>
        /// Search for publishers.
        /// </summary>
        /// <remarks>
        /// Search for publishers by the name of the publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <returns>InlineResponse20057</returns>
        InlineResponse20057 PostNewsPublisherSearchByName(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest);

        /// <summary>
        /// Search for publishers.
        /// </summary>
        /// <remarks>
        /// Search for publishers by the name of the publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20057</returns>
        ApiResponse<InlineResponse20057> PostNewsPublisherSearchByNameWithHttpInfo(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Details for a news article.
        /// </summary>
        /// <remarks>
        /// Details for a news article.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20043</returns>
        System.Threading.Tasks.Task<InlineResponse20043> GetNewsArticleGetAsync(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a news article.
        /// </summary>
        /// <remarks>
        /// Details for a news article.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetNewsArticleGetWithHttpInfoAsync(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details for a news article type.
        /// </summary>
        /// <remarks>
        /// Details for a news article type.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20050</returns>
        System.Threading.Tasks.Task<InlineResponse20050> GetNewsArticleTypeGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details for a news article type.
        /// </summary>
        /// <remarks>
        /// Details for a news article type.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> GetNewsArticleTypeGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of news article types.
        /// </summary>
        /// <remarks>
        /// List of news article types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20051</returns>
        System.Threading.Tasks.Task<InlineResponse20051> GetNewsArticleTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of news article types.
        /// </summary>
        /// <remarks>
        /// List of news article types.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> GetNewsArticleTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a distributor.
        /// </summary>
        /// <remarks>
        /// Details of a distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20052</returns>
        System.Threading.Tasks.Task<InlineResponse20052> GetNewsDistributorGetAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a distributor.
        /// </summary>
        /// <remarks>
        /// Details of a distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> GetNewsDistributorGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of distributors.
        /// </summary>
        /// <remarks>
        /// List of distributors.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20053</returns>
        System.Threading.Tasks.Task<InlineResponse20053> GetNewsDistributorListAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of distributors.
        /// </summary>
        /// <remarks>
        /// List of distributors.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> GetNewsDistributorListWithHttpInfoAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Details of a publisher.
        /// </summary>
        /// <remarks>
        /// Details of a publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20054</returns>
        System.Threading.Tasks.Task<InlineResponse20054> GetNewsPublisherGetAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Details of a publisher.
        /// </summary>
        /// <remarks>
        /// Details of a publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> GetNewsPublisherGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of publishers.
        /// </summary>
        /// <remarks>
        /// List of publishers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20055</returns>
        System.Threading.Tasks.Task<InlineResponse20055> GetNewsPublisherListAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of publishers.
        /// </summary>
        /// <remarks>
        /// List of publishers.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> GetNewsPublisherListWithHttpInfoAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of publishers provided by the given distributor.
        /// </summary>
        /// <remarks>
        /// List of publishers provided by the given distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20056</returns>
        System.Threading.Tasks.Task<InlineResponse20056> GetNewsPublisherListByDistributorAsync(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of publishers provided by the given distributor.
        /// </summary>
        /// <remarks>
        /// List of publishers provided by the given distributor.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20056)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20056>> GetNewsPublisherListByDistributorWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of news articles.
        /// </summary>
        /// <remarks>
        /// List of news articles.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20044</returns>
        System.Threading.Tasks.Task<InlineResponse20044> PostNewsArticleListAsync(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of news articles.
        /// </summary>
        /// <remarks>
        /// List of news articles.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> PostNewsArticleListWithHttpInfoAsync(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List news articles of an article chain.
        /// </summary>
        /// <remarks>
        /// List news articles of an article chain.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20045</returns>
        System.Threading.Tasks.Task<InlineResponse20045> PostNewsArticleListByChainAsync(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List news articles of an article chain.
        /// </summary>
        /// <remarks>
        /// List news articles of an article chain.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> PostNewsArticleListByChainWithHttpInfoAsync(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <remarks>
        /// News articles for instruments that are constituents of the given indices.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20046</returns>
        System.Threading.Tasks.Task<InlineResponse20046> PostNewsArticleListByIndexAsync(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <remarks>
        /// News articles for instruments that are constituents of the given indices.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> PostNewsArticleListByIndexWithHttpInfoAsync(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// News articles for instruments.
        /// </summary>
        /// <remarks>
        /// News articles for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20047</returns>
        System.Threading.Tasks.Task<InlineResponse20047> PostNewsArticleListByInstrumentAsync(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// News articles for instruments.
        /// </summary>
        /// <remarks>
        /// News articles for instruments.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> PostNewsArticleListByInstrumentWithHttpInfoAsync(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List news articles which contain media of specific media kinds.
        /// </summary>
        /// <remarks>
        /// List news articles which contain media of specific media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20048</returns>
        System.Threading.Tasks.Task<InlineResponse20048> PostNewsArticleListByMediaKindAsync(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List news articles which contain media of specific media kinds.
        /// </summary>
        /// <remarks>
        /// List news articles which contain media of specific media kinds.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> PostNewsArticleListByMediaKindWithHttpInfoAsync(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for news articles using a fulltext search.
        /// </summary>
        /// <remarks>
        /// Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20049</returns>
        System.Threading.Tasks.Task<InlineResponse20049> PostNewsArticleSearchByTextAsync(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for news articles using a fulltext search.
        /// </summary>
        /// <remarks>
        /// Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> PostNewsArticleSearchByTextWithHttpInfoAsync(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for publishers.
        /// </summary>
        /// <remarks>
        /// Search for publishers by the name of the publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20057</returns>
        System.Threading.Tasks.Task<InlineResponse20057> PostNewsPublisherSearchByNameAsync(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for publishers.
        /// </summary>
        /// <remarks>
        /// Search for publishers by the name of the publisher.
        /// </remarks>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20057)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20057>> PostNewsPublisherSearchByNameWithHttpInfoAsync(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApi : INewsApiSync, INewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NewsApi : INewsApi
    {
        private FactSet.SDK.RealTimeNews.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        # region Response Type Disctionaries
        
        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsArticleGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20043) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsArticleTypeGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20050) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsArticleTypeListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20051) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsDistributorGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20052) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsDistributorListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20053) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsPublisherGetResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20054) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsPublisherListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20055) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> GetNewsPublisherListByDistributorResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20056) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNewsArticleListResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20044) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNewsArticleListByChainResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20045) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNewsArticleListByIndexResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20046) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNewsArticleListByInstrumentResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20047) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNewsArticleListByMediaKindResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20048) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNewsArticleSearchByTextResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20049) },
        };

        private static readonly Dictionary<HttpStatusCode, System.Type> PostNewsPublisherSearchByNameResponseTypeDictionary = new Dictionary<HttpStatusCode, System.Type>
        {
            { (HttpStatusCode)200, typeof(InlineResponse20057) },
        };

        # endregion Response Type Disctionaries

        # region Api Response Objects
        

        # endregion Api Response Objects

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi(string basePath)
        {
            this.Configuration = FactSet.SDK.RealTimeNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeNews.Client.GlobalConfiguration.Instance,
                new FactSet.SDK.RealTimeNews.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NewsApi(FactSet.SDK.RealTimeNews.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.SDK.RealTimeNews.Client.Configuration.MergeConfigurations(
                FactSet.SDK.RealTimeNews.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.SDK.RealTimeNews.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NewsApi(FactSet.SDK.RealTimeNews.Client.ISynchronousClient client, FactSet.SDK.RealTimeNews.Client.IAsynchronousClient asyncClient, FactSet.SDK.RealTimeNews.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.SDK.RealTimeNews.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.SDK.RealTimeNews.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.SDK.RealTimeNews.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Details for a news article. Details for a news article.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20043</returns>
        public InlineResponse20043 GetNewsArticleGet(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetNewsArticleGetWithHttpInfo(code, includeMedia, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a news article. Details for a news article.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20043</returns>
        public ApiResponse<InlineResponse20043> GetNewsArticleGetWithHttpInfo(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'code' when calling NewsApi->GetNewsArticleGet");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "includeMedia", includeMedia));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsArticleGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20043>("/news/article/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsArticleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a news article. Details for a news article.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20043</returns>
        public async System.Threading.Tasks.Task<InlineResponse20043>GetNewsArticleGetAsync(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsArticleGetWithHttpInfoAsync(code, includeMedia, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a news article. Details for a news article.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Identifier of a news article.</param>
        /// <param name="includeMedia">If true, media references are included if available. (optional, default to false)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20043)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20043>> GetNewsArticleGetWithHttpInfoAsync(string code, bool? includeMedia = default(bool?), List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'code' when calling NewsApi->GetNewsArticleGet");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            if (includeMedia != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "includeMedia", includeMedia));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsArticleGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20043>("/news/article/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsArticleGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details for a news article type. Details for a news article type.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20050</returns>
        public InlineResponse20050 GetNewsArticleTypeGet(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetNewsArticleTypeGetWithHttpInfo(id, attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a news article type. Details for a news article type.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20050</returns>
        public ApiResponse<InlineResponse20050> GetNewsArticleTypeGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsArticleTypeGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20050>("/news/article/type/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsArticleTypeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details for a news article type. Details for a news article type.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20050</returns>
        public async System.Threading.Tasks.Task<InlineResponse20050>GetNewsArticleTypeGetAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsArticleTypeGetWithHttpInfoAsync(id, attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details for a news article type. Details for a news article type.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a news article type.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20050)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20050>> GetNewsArticleTypeGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsArticleTypeGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20050>("/news/article/type/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsArticleTypeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of news article types. List of news article types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>InlineResponse20051</returns>
        public InlineResponse20051 GetNewsArticleTypeList(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            var localVarResponse = GetNewsArticleTypeListWithHttpInfo(attributes, metaLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of news article types. List of news article types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20051</returns>
        public ApiResponse<InlineResponse20051> GetNewsArticleTypeListWithHttpInfo(List<string> attributes = default(List<string>), string metaLanguage = default(string))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsArticleTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20051>("/news/article/type/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsArticleTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of news article types. List of news article types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20051</returns>
        public async System.Threading.Tasks.Task<InlineResponse20051>GetNewsArticleTypeListAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsArticleTypeListWithHttpInfoAsync(attributes, metaLanguage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of news article types. List of news article types.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="metaLanguage">ISO 639-1 code of the language. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20051)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20051>> GetNewsArticleTypeListWithHttpInfoAsync(List<string> attributes = default(List<string>), string metaLanguage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (metaLanguage != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "metaLanguage", metaLanguage));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsArticleTypeListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20051>("/news/article/type/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsArticleTypeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a distributor. Details of a distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20052</returns>
        public InlineResponse20052 GetNewsDistributorGet(decimal id, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsDistributorGetWithHttpInfo(id, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a distributor. Details of a distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20052</returns>
        public ApiResponse<InlineResponse20052> GetNewsDistributorGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsDistributorGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20052>("/news/distributor/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsDistributorGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a distributor. Details of a distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20052</returns>
        public async System.Threading.Tasks.Task<InlineResponse20052>GetNewsDistributorGetAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsDistributorGetWithHttpInfoAsync(id, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a distributor. Details of a distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20052)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20052>> GetNewsDistributorGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsDistributorGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20052>("/news/distributor/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsDistributorGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of distributors. List of distributors.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20053</returns>
        public InlineResponse20053 GetNewsDistributorList(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetNewsDistributorListWithHttpInfo(ids, attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of distributors. List of distributors.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20053</returns>
        public ApiResponse<InlineResponse20053> GetNewsDistributorListWithHttpInfo(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsDistributorListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20053>("/news/distributor/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsDistributorList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of distributors. List of distributors.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20053</returns>
        public async System.Threading.Tasks.Task<InlineResponse20053>GetNewsDistributorListAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsDistributorListWithHttpInfoAsync(ids, attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of distributors. List of distributors.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of distributors. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20053)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20053>> GetNewsDistributorListWithHttpInfoAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsDistributorListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20053>("/news/distributor/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsDistributorList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Details of a publisher. Details of a publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>InlineResponse20054</returns>
        public InlineResponse20054 GetNewsPublisherGet(decimal id, List<string> attributes = default(List<string>))
        {
            var localVarResponse = GetNewsPublisherGetWithHttpInfo(id, attributes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a publisher. Details of a publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20054</returns>
        public ApiResponse<InlineResponse20054> GetNewsPublisherGetWithHttpInfo(decimal id, List<string> attributes = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsPublisherGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20054>("/news/publisher/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsPublisherGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Details of a publisher. Details of a publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20054</returns>
        public async System.Threading.Tasks.Task<InlineResponse20054>GetNewsPublisherGetAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsPublisherGetWithHttpInfoAsync(id, attributes, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a publisher. Details of a publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a publisher.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20054)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20054>> GetNewsPublisherGetWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsPublisherGetResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20054>("/news/publisher/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsPublisherGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of publishers. List of publishers.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>InlineResponse20055</returns>
        public InlineResponse20055 GetNewsPublisherList(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            var localVarResponse = GetNewsPublisherListWithHttpInfo(ids, attributes, sort, paginationOffset, paginationLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of publishers. List of publishers.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <returns>ApiResponse of InlineResponse20055</returns>
        public ApiResponse<InlineResponse20055> GetNewsPublisherListWithHttpInfo(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsPublisherListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20055>("/news/publisher/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsPublisherList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of publishers. List of publishers.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20055</returns>
        public async System.Threading.Tasks.Task<InlineResponse20055>GetNewsPublisherListAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsPublisherListWithHttpInfoAsync(ids, attributes, sort, paginationOffset, paginationLimit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of publishers. List of publishers.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Identifiers of publishers. (optional)</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="paginationOffset">Non-negative number of entries to skip, or 0 (default). (optional, default to 0M)</param>
        /// <param name="paginationLimit">Non-negative maximum number of entries to return. (optional, default to 20M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20055)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20055>> GetNewsPublisherListWithHttpInfoAsync(List<decimal> ids = default(List<decimal>), List<string> attributes = default(List<string>), List<string> sort = default(List<string>), decimal? paginationOffset = default(decimal?), decimal? paginationLimit = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "ids", ids));
            }
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }
            if (paginationOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationOffset", paginationOffset));
            }
            if (paginationLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "_paginationLimit", paginationLimit));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsPublisherListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20055>("/news/publisher/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsPublisherList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of publishers provided by the given distributor. List of publishers provided by the given distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>InlineResponse20056</returns>
        public InlineResponse20056 GetNewsPublisherListByDistributor(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            var localVarResponse = GetNewsPublisherListByDistributorWithHttpInfo(id, attributes, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of publishers provided by the given distributor. List of publishers provided by the given distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <returns>ApiResponse of InlineResponse20056</returns>
        public ApiResponse<InlineResponse20056> GetNewsPublisherListByDistributorWithHttpInfo(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = GetNewsPublisherListByDistributorResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Get<
            InlineResponse20056>("/news/publisher/list-by-distributor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsPublisherListByDistributor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of publishers provided by the given distributor. List of publishers provided by the given distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20056</returns>
        public async System.Threading.Tasks.Task<InlineResponse20056>GetNewsPublisherListByDistributorAsync(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await GetNewsPublisherListByDistributorWithHttpInfoAsync(id, attributes, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of publishers provided by the given distributor. List of publishers provided by the given distributor.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of a distributor.</param>
        /// <param name="attributes">Limit the attributes returned in the response to the specified set. (optional)</param>
        /// <param name="sort">Sortable attributes. The sort order is ascending unless it is prefixed with a minus sign, in which case it is descending. A list of at most 1 (possibly prefixed) attribute name(s) is allowed. | Value | | - -- | | id | | -id | | name | | -name |   (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20056)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20056>> GetNewsPublisherListByDistributorWithHttpInfoAsync(decimal id, List<string> attributes = default(List<string>), List<string> sort = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (attributes != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_attributes", attributes));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(FactSet.SDK.RealTimeNews.Client.ClientUtils.ParameterToMultiMap("csv", "_sort", sort));
            }

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = GetNewsPublisherListByDistributorResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20056>("/news/publisher/list-by-distributor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewsPublisherListByDistributor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of news articles. List of news articles.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20044</returns>
        public InlineResponse20044 PostNewsArticleList(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest))
        {
            var localVarResponse = PostNewsArticleListWithHttpInfo(postNewsArticleListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of news articles. List of news articles.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20044</returns>
        public ApiResponse<InlineResponse20044> PostNewsArticleListWithHttpInfo(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20044>("/news/article/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List of news articles. List of news articles.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20044</returns>
        public async System.Threading.Tasks.Task<InlineResponse20044>PostNewsArticleListAsync(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNewsArticleListWithHttpInfoAsync(postNewsArticleListRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of news articles. List of news articles.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20044)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20044>> PostNewsArticleListWithHttpInfoAsync(PostNewsArticleListRequest postNewsArticleListRequest = default(PostNewsArticleListRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20044>("/news/article/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List news articles of an article chain. List news articles of an article chain.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <returns>InlineResponse20045</returns>
        public InlineResponse20045 PostNewsArticleListByChain(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest)
        {
            var localVarResponse = PostNewsArticleListByChainWithHttpInfo(postNewsArticleListByChainRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List news articles of an article chain. List news articles of an article chain.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20045</returns>
        public ApiResponse<InlineResponse20045> PostNewsArticleListByChainWithHttpInfo(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest)
        {
            // verify the required parameter 'postNewsArticleListByChainRequest' is set
            if (postNewsArticleListByChainRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByChainRequest' when calling NewsApi->PostNewsArticleListByChain");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByChainRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByChainResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20045>("/news/article/list-by-chain", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByChain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List news articles of an article chain. List news articles of an article chain.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20045</returns>
        public async System.Threading.Tasks.Task<InlineResponse20045>PostNewsArticleListByChainAsync(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNewsArticleListByChainWithHttpInfoAsync(postNewsArticleListByChainRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List news articles of an article chain. List news articles of an article chain.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByChainRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20045)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20045>> PostNewsArticleListByChainWithHttpInfoAsync(PostNewsArticleListByChainRequest postNewsArticleListByChainRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNewsArticleListByChainRequest' is set
            if (postNewsArticleListByChainRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByChainRequest' when calling NewsApi->PostNewsArticleListByChain");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByChainRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByChainResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20045>("/news/article/list-by-chain", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByChain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// News articles for instruments that are constituents of the given indices. News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <returns>InlineResponse20046</returns>
        public InlineResponse20046 PostNewsArticleListByIndex(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest)
        {
            var localVarResponse = PostNewsArticleListByIndexWithHttpInfo(postNewsArticleListByIndexRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News articles for instruments that are constituents of the given indices. News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20046</returns>
        public ApiResponse<InlineResponse20046> PostNewsArticleListByIndexWithHttpInfo(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest)
        {
            // verify the required parameter 'postNewsArticleListByIndexRequest' is set
            if (postNewsArticleListByIndexRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByIndexRequest' when calling NewsApi->PostNewsArticleListByIndex");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByIndexRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByIndexResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20046>("/news/article/list-by-index", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// News articles for instruments that are constituents of the given indices. News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20046</returns>
        public async System.Threading.Tasks.Task<InlineResponse20046>PostNewsArticleListByIndexAsync(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNewsArticleListByIndexWithHttpInfoAsync(postNewsArticleListByIndexRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News articles for instruments that are constituents of the given indices. News articles for instruments that are constituents of the given indices.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByIndexRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20046)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20046>> PostNewsArticleListByIndexWithHttpInfoAsync(PostNewsArticleListByIndexRequest postNewsArticleListByIndexRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNewsArticleListByIndexRequest' is set
            if (postNewsArticleListByIndexRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByIndexRequest' when calling NewsApi->PostNewsArticleListByIndex");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByIndexRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByIndexResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20046>("/news/article/list-by-index", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// News articles for instruments. News articles for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <returns>InlineResponse20047</returns>
        public InlineResponse20047 PostNewsArticleListByInstrument(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest)
        {
            var localVarResponse = PostNewsArticleListByInstrumentWithHttpInfo(postNewsArticleListByInstrumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News articles for instruments. News articles for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20047</returns>
        public ApiResponse<InlineResponse20047> PostNewsArticleListByInstrumentWithHttpInfo(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest)
        {
            // verify the required parameter 'postNewsArticleListByInstrumentRequest' is set
            if (postNewsArticleListByInstrumentRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByInstrumentRequest' when calling NewsApi->PostNewsArticleListByInstrument");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByInstrumentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20047>("/news/article/list-by-instrument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// News articles for instruments. News articles for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20047</returns>
        public async System.Threading.Tasks.Task<InlineResponse20047>PostNewsArticleListByInstrumentAsync(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNewsArticleListByInstrumentWithHttpInfoAsync(postNewsArticleListByInstrumentRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// News articles for instruments. News articles for instruments.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByInstrumentRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20047)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20047>> PostNewsArticleListByInstrumentWithHttpInfoAsync(PostNewsArticleListByInstrumentRequest postNewsArticleListByInstrumentRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNewsArticleListByInstrumentRequest' is set
            if (postNewsArticleListByInstrumentRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByInstrumentRequest' when calling NewsApi->PostNewsArticleListByInstrument");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByInstrumentRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByInstrumentResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20047>("/news/article/list-by-instrument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByInstrument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List news articles which contain media of specific media kinds. List news articles which contain media of specific media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <returns>InlineResponse20048</returns>
        public InlineResponse20048 PostNewsArticleListByMediaKind(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest)
        {
            var localVarResponse = PostNewsArticleListByMediaKindWithHttpInfo(postNewsArticleListByMediaKindRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List news articles which contain media of specific media kinds. List news articles which contain media of specific media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20048</returns>
        public ApiResponse<InlineResponse20048> PostNewsArticleListByMediaKindWithHttpInfo(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest)
        {
            // verify the required parameter 'postNewsArticleListByMediaKindRequest' is set
            if (postNewsArticleListByMediaKindRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByMediaKindRequest' when calling NewsApi->PostNewsArticleListByMediaKind");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByMediaKindRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByMediaKindResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20048>("/news/article/list-by-media-kind", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByMediaKind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// List news articles which contain media of specific media kinds. List news articles which contain media of specific media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20048</returns>
        public async System.Threading.Tasks.Task<InlineResponse20048>PostNewsArticleListByMediaKindAsync(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNewsArticleListByMediaKindWithHttpInfoAsync(postNewsArticleListByMediaKindRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List news articles which contain media of specific media kinds. List news articles which contain media of specific media kinds.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleListByMediaKindRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20048)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20048>> PostNewsArticleListByMediaKindWithHttpInfoAsync(PostNewsArticleListByMediaKindRequest postNewsArticleListByMediaKindRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNewsArticleListByMediaKindRequest' is set
            if (postNewsArticleListByMediaKindRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsArticleListByMediaKindRequest' when calling NewsApi->PostNewsArticleListByMediaKind");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleListByMediaKindRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleListByMediaKindResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20048>("/news/article/list-by-media-kind", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleListByMediaKind", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for news articles using a fulltext search. Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <returns>InlineResponse20049</returns>
        public InlineResponse20049 PostNewsArticleSearchByText(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest))
        {
            var localVarResponse = PostNewsArticleSearchByTextWithHttpInfo(postNewsArticleSearchByTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for news articles using a fulltext search. Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <returns>ApiResponse of InlineResponse20049</returns>
        public ApiResponse<InlineResponse20049> PostNewsArticleSearchByTextWithHttpInfo(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest))
        {
            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleSearchByTextRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleSearchByTextResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20049>("/news/article/search-by-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleSearchByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Search for news articles using a fulltext search. Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20049</returns>
        public async System.Threading.Tasks.Task<InlineResponse20049>PostNewsArticleSearchByTextAsync(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNewsArticleSearchByTextWithHttpInfoAsync(postNewsArticleSearchByTextRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for news articles using a fulltext search. Search for news articles using a fulltext search. All specified criteria need to be fulfilled for an article to match. Each criterion is handled according to its selectionType; \&quot;include\&quot; requires the criterion to evaluate to true, \&quot;exclude\&quot; requires the criterion to evaluate to false. A criterion is fulfilled when at least one of its values is found.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsArticleSearchByTextRequest">Request Body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20049)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20049>> PostNewsArticleSearchByTextWithHttpInfoAsync(PostNewsArticleSearchByTextRequest postNewsArticleSearchByTextRequest = default(PostNewsArticleSearchByTextRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsArticleSearchByTextRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNewsArticleSearchByTextResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20049>("/news/article/search-by-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsArticleSearchByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for publishers. Search for publishers by the name of the publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <returns>InlineResponse20057</returns>
        public InlineResponse20057 PostNewsPublisherSearchByName(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest)
        {
            var localVarResponse = PostNewsPublisherSearchByNameWithHttpInfo(postNewsPublisherSearchByNameRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for publishers. Search for publishers by the name of the publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <returns>ApiResponse of InlineResponse20057</returns>
        public ApiResponse<InlineResponse20057> PostNewsPublisherSearchByNameWithHttpInfo(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest)
        {
            // verify the required parameter 'postNewsPublisherSearchByNameRequest' is set
            if (postNewsPublisherSearchByNameRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsPublisherSearchByNameRequest' when calling NewsApi->PostNewsPublisherSearchByName");
            }

            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsPublisherSearchByNameRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null)
            {
                var token = this.Configuration.OAuth2Client.GetAccessTokenAsync().Result;
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }

            localVarRequestOptions.ResponseTypeDictionary = PostNewsPublisherSearchByNameResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = this.Client.Post<
            InlineResponse20057>("/news/publisher/search-by-name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsPublisherSearchByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
            return localVarResponse;
        }

        /// <summary>
        /// Search for publishers. Search for publishers by the name of the publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20057</returns>
        public async System.Threading.Tasks.Task<InlineResponse20057>PostNewsPublisherSearchByNameAsync(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var localVarResponse = await PostNewsPublisherSearchByNameWithHttpInfoAsync(postNewsPublisherSearchByNameRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for publishers. Search for publishers by the name of the publisher.
        /// </summary>
        /// <exception cref="FactSet.SDK.RealTimeNews.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postNewsPublisherSearchByNameRequest">Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20057)</returns>

        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20057>> PostNewsPublisherSearchByNameWithHttpInfoAsync(PostNewsPublisherSearchByNameRequest postNewsPublisherSearchByNameRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postNewsPublisherSearchByNameRequest' is set
            if (postNewsPublisherSearchByNameRequest == null)
            {
                throw new FactSet.SDK.RealTimeNews.Client.ApiException(400, "Missing required parameter 'postNewsPublisherSearchByNameRequest' when calling NewsApi->PostNewsPublisherSearchByName");
            }


            FactSet.SDK.RealTimeNews.Client.RequestOptions localVarRequestOptions = new FactSet.SDK.RealTimeNews.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FactSet.SDK.RealTimeNews.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postNewsPublisherSearchByNameRequest;

            // authentication (FactSetApiKey) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.SDK.RealTimeNews.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (FactSetOAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // FactSet Authentication Client required
            if (this.Configuration.OAuth2Client != null) {
                var token = await this.Configuration.OAuth2Client.GetAccessTokenAsync();
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + token);
            }


            localVarRequestOptions.ResponseTypeDictionary = PostNewsPublisherSearchByNameResponseTypeDictionary;

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20057>("/news/publisher/search-by-name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostNewsPublisherSearchByName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
