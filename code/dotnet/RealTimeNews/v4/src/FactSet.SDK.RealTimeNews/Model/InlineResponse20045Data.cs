/*
 * Real-Time News API
 *
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeNews.Model
{
    /// <summary>
    /// News articles, their publisher, and distributor as refrenced by the article chain.
    /// </summary>
    [DataContract(Name = "inline_response_200_45_data")]
    public partial class InlineResponse20045Data : IEquatable<InlineResponse20045Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20045Data" /> class.
        /// </summary>
        /// <param name="distributor">distributor.</param>
        /// <param name="publisher">publisher.</param>
        /// <param name="articles">News articles that match the filter criteria ordered by descending article time..</param>
        public InlineResponse20045Data(InlineResponse20045DataDistributor distributor = default(InlineResponse20045DataDistributor), InlineResponse20045DataPublisher publisher = default(InlineResponse20045DataPublisher), List<PostNewsArticleListByChainDataArticlesItems> articles = default(List<PostNewsArticleListByChainDataArticlesItems>))
        {
            this.Distributor = distributor;
            this.Publisher = publisher;
            this.Articles = articles;
        }

        /// <summary>
        /// Gets or Sets Distributor
        /// </summary>
        [DataMember(Name = "distributor", EmitDefaultValue = false)]
        public InlineResponse20045DataDistributor Distributor { get; set; }

        /// <summary>
        /// Gets or Sets Publisher
        /// </summary>
        [DataMember(Name = "publisher", EmitDefaultValue = false)]
        public InlineResponse20045DataPublisher Publisher { get; set; }

        /// <summary>
        /// News articles that match the filter criteria ordered by descending article time.
        /// </summary>
        /// <value>News articles that match the filter criteria ordered by descending article time.</value>
        [DataMember(Name = "articles", EmitDefaultValue = false)]
        public List<PostNewsArticleListByChainDataArticlesItems> Articles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20045Data {\n");
            sb.Append("  Distributor: ").Append(Distributor).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  Articles: ").Append(Articles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20045Data);
        }

        /// <summary>
        /// Returns true if InlineResponse20045Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20045Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20045Data input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Distributor == input.Distributor ||
                    (this.Distributor != null &&
                    this.Distributor.Equals(input.Distributor))
                ) && 
                (
                    this.Publisher == input.Publisher ||
                    (this.Publisher != null &&
                    this.Publisher.Equals(input.Publisher))
                ) && 
                (
                    this.Articles == input.Articles ||
                    this.Articles != null &&
                    input.Articles != null &&
                    this.Articles.SequenceEqual(input.Articles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distributor != null)
                {
                    hashCode = (hashCode * 59) + this.Distributor.GetHashCode();
                }
                if (this.Publisher != null)
                {
                    hashCode = (hashCode * 59) + this.Publisher.GetHashCode();
                }
                if (this.Articles != null)
                {
                    hashCode = (hashCode * 59) + this.Articles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
