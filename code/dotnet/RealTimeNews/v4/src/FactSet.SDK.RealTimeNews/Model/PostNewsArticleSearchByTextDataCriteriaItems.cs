/*
 * Real-Time News API
 *
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeNews.Model
{
    /// <summary>
    /// A list of objects. For semantical context see the description of the parent array.
    /// </summary>
    [DataContract(Name = "PostNewsArticleSearchByTextDataCriteriaItems")]
    public partial class PostNewsArticleSearchByTextDataCriteriaItems : IEquatable<PostNewsArticleSearchByTextDataCriteriaItems>, IValidatableObject
    {
        /// <summary>
        /// Specify how the criteria should be applied to the search. | Value | Description | | - -- | - -- | | include | Articles covering the given criteria are included in the result. | | exclude | Articles covering the given criteria are excluded from the result. |  
        /// </summary>
        /// <value>Specify how the criteria should be applied to the search. | Value | Description | | - -- | - -- | | include | Articles covering the given criteria are included in the result. | | exclude | Articles covering the given criteria are excluded from the result. |  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SelectionTypeEnum
        {
            /// <summary>
            /// Enum Include for value: include
            /// </summary>
            [EnumMember(Value = "include")]
            Include = 1,

            /// <summary>
            /// Enum Exclude for value: exclude
            /// </summary>
            [EnumMember(Value = "exclude")]
            Exclude = 2

        }


        /// <summary>
        /// Specify how the criteria should be applied to the search. | Value | Description | | - -- | - -- | | include | Articles covering the given criteria are included in the result. | | exclude | Articles covering the given criteria are excluded from the result. |  
        /// </summary>
        /// <value>Specify how the criteria should be applied to the search. | Value | Description | | - -- | - -- | | include | Articles covering the given criteria are included in the result. | | exclude | Articles covering the given criteria are excluded from the result. |  </value>
        [DataMember(Name = "selectionType", EmitDefaultValue = false)]
        public SelectionTypeEnum? SelectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostNewsArticleSearchByTextDataCriteriaItems" /> class.
        /// </summary>
        /// <param name="selectionType">Specify how the criteria should be applied to the search. | Value | Description | | - -- | - -- | | include | Articles covering the given criteria are included in the result. | | exclude | Articles covering the given criteria are excluded from the result. |   (default to SelectionTypeEnum.Include).</param>
        /// <param name="range">range.</param>
        /// <param name="indices">indices.</param>
        /// <param name="instruments">instruments.</param>
        /// <param name="types">types.</param>
        /// <param name="categories">categories.</param>
        /// <param name="regions">regions.</param>
        /// <param name="distributor">distributor.</param>
        /// <param name="publisher">publisher.</param>
        /// <param name="language">language.</param>
        public PostNewsArticleSearchByTextDataCriteriaItems(SelectionTypeEnum? selectionType = SelectionTypeEnum.Include, PostNewsArticleListByInstrumentRequestDataFilterRange range = default(PostNewsArticleListByInstrumentRequestDataFilterRange), PostNewsArticleSearchByTextDataCriteriaItemsIndices indices = default(PostNewsArticleSearchByTextDataCriteriaItemsIndices), PostNewsArticleSearchByTextDataCriteriaItemsInstruments instruments = default(PostNewsArticleSearchByTextDataCriteriaItemsInstruments), PostNewsArticleSearchByTextDataCriteriaItemsTypes types = default(PostNewsArticleSearchByTextDataCriteriaItemsTypes), PostNewsArticleSearchByTextDataCriteriaItemsCategories categories = default(PostNewsArticleSearchByTextDataCriteriaItemsCategories), PostNewsArticleSearchByTextDataCriteriaItemsRegions regions = default(PostNewsArticleSearchByTextDataCriteriaItemsRegions), PostNewsArticleSearchByTextDataCriteriaItemsDistributor distributor = default(PostNewsArticleSearchByTextDataCriteriaItemsDistributor), PostNewsArticleSearchByTextDataCriteriaItemsPublisher publisher = default(PostNewsArticleSearchByTextDataCriteriaItemsPublisher), PostNewsArticleSearchByTextDataCriteriaItemsLanguage language = default(PostNewsArticleSearchByTextDataCriteriaItemsLanguage))
        {
            this.SelectionType = selectionType;
            this.Range = range;
            this.Indices = indices;
            this.Instruments = instruments;
            this.Types = types;
            this.Categories = categories;
            this.Regions = regions;
            this.Distributor = distributor;
            this.Publisher = publisher;
            this.Language = language;
        }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name = "range", EmitDefaultValue = false)]
        public PostNewsArticleListByInstrumentRequestDataFilterRange Range { get; set; }

        /// <summary>
        /// Gets or Sets Indices
        /// </summary>
        [DataMember(Name = "indices", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsIndices Indices { get; set; }

        /// <summary>
        /// Gets or Sets Instruments
        /// </summary>
        [DataMember(Name = "instruments", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsInstruments Instruments { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name = "types", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsTypes Types { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsCategories Categories { get; set; }

        /// <summary>
        /// Gets or Sets Regions
        /// </summary>
        [DataMember(Name = "regions", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsRegions Regions { get; set; }

        /// <summary>
        /// Gets or Sets Distributor
        /// </summary>
        [DataMember(Name = "distributor", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsDistributor Distributor { get; set; }

        /// <summary>
        /// Gets or Sets Publisher
        /// </summary>
        [DataMember(Name = "publisher", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsPublisher Publisher { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public PostNewsArticleSearchByTextDataCriteriaItemsLanguage Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostNewsArticleSearchByTextDataCriteriaItems {\n");
            sb.Append("  SelectionType: ").Append(SelectionType).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Indices: ").Append(Indices).Append("\n");
            sb.Append("  Instruments: ").Append(Instruments).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  Distributor: ").Append(Distributor).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostNewsArticleSearchByTextDataCriteriaItems);
        }

        /// <summary>
        /// Returns true if PostNewsArticleSearchByTextDataCriteriaItems instances are equal
        /// </summary>
        /// <param name="input">Instance of PostNewsArticleSearchByTextDataCriteriaItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostNewsArticleSearchByTextDataCriteriaItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SelectionType == input.SelectionType ||
                    this.SelectionType.Equals(input.SelectionType)
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.Indices == input.Indices ||
                    (this.Indices != null &&
                    this.Indices.Equals(input.Indices))
                ) && 
                (
                    this.Instruments == input.Instruments ||
                    (this.Instruments != null &&
                    this.Instruments.Equals(input.Instruments))
                ) && 
                (
                    this.Types == input.Types ||
                    (this.Types != null &&
                    this.Types.Equals(input.Types))
                ) && 
                (
                    this.Categories == input.Categories ||
                    (this.Categories != null &&
                    this.Categories.Equals(input.Categories))
                ) && 
                (
                    this.Regions == input.Regions ||
                    (this.Regions != null &&
                    this.Regions.Equals(input.Regions))
                ) && 
                (
                    this.Distributor == input.Distributor ||
                    (this.Distributor != null &&
                    this.Distributor.Equals(input.Distributor))
                ) && 
                (
                    this.Publisher == input.Publisher ||
                    (this.Publisher != null &&
                    this.Publisher.Equals(input.Publisher))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SelectionType.GetHashCode();
                if (this.Range != null)
                {
                    hashCode = (hashCode * 59) + this.Range.GetHashCode();
                }
                if (this.Indices != null)
                {
                    hashCode = (hashCode * 59) + this.Indices.GetHashCode();
                }
                if (this.Instruments != null)
                {
                    hashCode = (hashCode * 59) + this.Instruments.GetHashCode();
                }
                if (this.Types != null)
                {
                    hashCode = (hashCode * 59) + this.Types.GetHashCode();
                }
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                if (this.Regions != null)
                {
                    hashCode = (hashCode * 59) + this.Regions.GetHashCode();
                }
                if (this.Distributor != null)
                {
                    hashCode = (hashCode * 59) + this.Distributor.GetHashCode();
                }
                if (this.Publisher != null)
                {
                    hashCode = (hashCode * 59) + this.Publisher.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
