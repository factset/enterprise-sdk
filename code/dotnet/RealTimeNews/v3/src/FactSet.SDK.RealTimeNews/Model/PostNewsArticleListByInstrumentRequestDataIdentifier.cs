/*
 * News API For Digital Portals
 *
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.RealTimeNews.Client.OpenAPIDateConverter;

namespace FactSet.SDK.RealTimeNews.Model
{
    /// <summary>
    /// Set of identifiers and their type.
    /// </summary>
    [DataContract(Name = "PostNewsArticleListByInstrumentRequest_data_identifier")]
    public partial class PostNewsArticleListByInstrumentRequestDataIdentifier : IEquatable<PostNewsArticleListByInstrumentRequestDataIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Type of the identifier.
        /// </summary>
        /// <value>Type of the identifier.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum IdInstrument for value: idInstrument
            /// </summary>
            [EnumMember(Value = "idInstrument")]
            IdInstrument = 1,

            /// <summary>
            /// Enum IdNotation for value: idNotation
            /// </summary>
            [EnumMember(Value = "idNotation")]
            IdNotation = 2,

            /// <summary>
            /// Enum FdsPermanentIdentifierSecurity for value: fdsPermanentIdentifierSecurity
            /// </summary>
            [EnumMember(Value = "fdsPermanentIdentifierSecurity")]
            FdsPermanentIdentifierSecurity = 3,

            /// <summary>
            /// Enum FdsPermanentIdentifierListing for value: fdsPermanentIdentifierListing
            /// </summary>
            [EnumMember(Value = "fdsPermanentIdentifierListing")]
            FdsPermanentIdentifierListing = 4,

            /// <summary>
            /// Enum FdsPermanentIdentifierRegional for value: fdsPermanentIdentifierRegional
            /// </summary>
            [EnumMember(Value = "fdsPermanentIdentifierRegional")]
            FdsPermanentIdentifierRegional = 5,

            /// <summary>
            /// Enum TickerExchange for value: tickerExchange
            /// </summary>
            [EnumMember(Value = "tickerExchange")]
            TickerExchange = 6,

            /// <summary>
            /// Enum TickerRegion for value: tickerRegion
            /// </summary>
            [EnumMember(Value = "tickerRegion")]
            TickerRegion = 7,

            /// <summary>
            /// Enum Sedol for value: sedol
            /// </summary>
            [EnumMember(Value = "sedol")]
            Sedol = 8,

            /// <summary>
            /// Enum Isin for value: isin
            /// </summary>
            [EnumMember(Value = "isin")]
            Isin = 9,

            /// <summary>
            /// Enum Wkn for value: wkn
            /// </summary>
            [EnumMember(Value = "wkn")]
            Wkn = 10,

            /// <summary>
            /// Enum Valor for value: valor
            /// </summary>
            [EnumMember(Value = "valor")]
            Valor = 11,

            /// <summary>
            /// Enum Cusip for value: cusip
            /// </summary>
            [EnumMember(Value = "cusip")]
            Cusip = 12

        }


        /// <summary>
        /// Type of the identifier.
        /// </summary>
        /// <value>Type of the identifier.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostNewsArticleListByInstrumentRequestDataIdentifier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostNewsArticleListByInstrumentRequestDataIdentifier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostNewsArticleListByInstrumentRequestDataIdentifier" /> class.
        /// </summary>
        /// <param name="values">Set of identifiers to resolve. (required).</param>
        /// <param name="type">Type of the identifier. (required).</param>
        public PostNewsArticleListByInstrumentRequestDataIdentifier(HashSet<string> values, TypeEnum type)
        {
            // to ensure "values" is required (not null)
            if (values == null) {
                throw new ArgumentNullException("values is a required property for PostNewsArticleListByInstrumentRequestDataIdentifier and cannot be null");
            }
            this.Values = values;
            this.Type = type;
        }

        /// <summary>
        /// Set of identifiers to resolve.
        /// </summary>
        /// <value>Set of identifiers to resolve.</value>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = false)]
        public HashSet<string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostNewsArticleListByInstrumentRequestDataIdentifier {\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostNewsArticleListByInstrumentRequestDataIdentifier);
        }

        /// <summary>
        /// Returns true if PostNewsArticleListByInstrumentRequestDataIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of PostNewsArticleListByInstrumentRequestDataIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostNewsArticleListByInstrumentRequestDataIdentifier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
