/*
 * Open:FactSet Marketplace API
 *
 * This API provides read-only access to marketplace products and partners.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetMarketplace.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetMarketplace.Model
{
    /// <summary>
    /// Related products object
    /// </summary>
    [DataContract(Name = "RelatedProducts")]
    public partial class RelatedProducts : IEquatable<RelatedProducts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedProducts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RelatedProducts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedProducts" /> class.
        /// </summary>
        /// <param name="id">Product unique identifier (required).</param>
        /// <param name="productPageUrl">URL of the product&#39;s page on the marketplace catalog. (required).</param>
        /// <param name="title">Product title (required).</param>
        public RelatedProducts(string id, string productPageUrl, string title)
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for RelatedProducts and cannot be null");
            }
            this.Id = id;
            // to ensure "productPageUrl" is required (not null)
            if (productPageUrl == null) {
                throw new ArgumentNullException("productPageUrl is a required property for RelatedProducts and cannot be null");
            }
            this.ProductPageUrl = productPageUrl;
            // to ensure "title" is required (not null)
            if (title == null) {
                throw new ArgumentNullException("title is a required property for RelatedProducts and cannot be null");
            }
            this.Title = title;
        }

        /// <summary>
        /// Product unique identifier
        /// </summary>
        /// <value>Product unique identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// URL of the product&#39;s page on the marketplace catalog.
        /// </summary>
        /// <value>URL of the product&#39;s page on the marketplace catalog.</value>
        [DataMember(Name = "productPageUrl", IsRequired = true, EmitDefaultValue = false)]
        public string ProductPageUrl { get; set; }

        /// <summary>
        /// Product title
        /// </summary>
        /// <value>Product title</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelatedProducts {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductPageUrl: ").Append(ProductPageUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelatedProducts);
        }

        /// <summary>
        /// Returns true if RelatedProducts instances are equal
        /// </summary>
        /// <param name="input">Instance of RelatedProducts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelatedProducts input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProductPageUrl == input.ProductPageUrl ||
                    (this.ProductPageUrl != null &&
                    this.ProductPageUrl.Equals(input.ProductPageUrl))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ProductPageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ProductPageUrl.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
