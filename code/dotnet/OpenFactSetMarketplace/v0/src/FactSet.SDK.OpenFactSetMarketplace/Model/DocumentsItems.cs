/*
 * Open:FactSet Marketplace API
 *
 * This API provides read-only access to marketplace products and partners.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetMarketplace.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetMarketplace.Model
{
    /// <summary>
    /// Product documentation object
    /// </summary>
    [DataContract(Name = "DocumentsItems")]
    public partial class DocumentsItems : IEquatable<DocumentsItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsItems" /> class.
        /// </summary>
        /// <param name="name">Document name.</param>
        /// <param name="section">String detailing which section of the product page this document should be displayed in, i.e. &#39;Documentation&#39; or &#39;Sample Data&#39;..</param>
        /// <param name="isPublic">Boolean flag indicating whether the document is publicly accessible without authentication..</param>
        /// <param name="isFile">Boolean flag indicating whether the document is a file for download or a URL..</param>
        /// <param name="url">Document URL.</param>
        /// <param name="fileName">Document file name, for file downloads..</param>
        public DocumentsItems(string name = default(string), string section = default(string), bool isPublic = default(bool), bool isFile = default(bool), string url = default(string), string fileName = default(string))
        {
            this.Name = name;
            this.Section = section;
            this.IsPublic = isPublic;
            this.IsFile = isFile;
            this.Url = url;
            this.FileName = fileName;
        }

        /// <summary>
        /// Document name
        /// </summary>
        /// <value>Document name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// String detailing which section of the product page this document should be displayed in, i.e. &#39;Documentation&#39; or &#39;Sample Data&#39;.
        /// </summary>
        /// <value>String detailing which section of the product page this document should be displayed in, i.e. &#39;Documentation&#39; or &#39;Sample Data&#39;.</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public string Section { get; set; }

        /// <summary>
        /// Boolean flag indicating whether the document is publicly accessible without authentication.
        /// </summary>
        /// <value>Boolean flag indicating whether the document is publicly accessible without authentication.</value>
        [DataMember(Name = "isPublic", EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Boolean flag indicating whether the document is a file for download or a URL.
        /// </summary>
        /// <value>Boolean flag indicating whether the document is a file for download or a URL.</value>
        [DataMember(Name = "isFile", EmitDefaultValue = true)]
        public bool IsFile { get; set; }

        /// <summary>
        /// Document URL
        /// </summary>
        /// <value>Document URL</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Document file name, for file downloads.
        /// </summary>
        /// <value>Document file name, for file downloads.</value>
        [DataMember(Name = "fileName", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentsItems {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsFile: ").Append(IsFile).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentsItems);
        }

        /// <summary>
        /// Returns true if DocumentsItems instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentsItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentsItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Section == input.Section ||
                    (this.Section != null &&
                    this.Section.Equals(input.Section))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    this.IsPublic.Equals(input.IsPublic)
                ) && 
                (
                    this.IsFile == input.IsFile ||
                    this.IsFile.Equals(input.IsFile)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Section != null)
                {
                    hashCode = (hashCode * 59) + this.Section.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPublic.GetHashCode();
                hashCode = (hashCode * 59) + this.IsFile.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
