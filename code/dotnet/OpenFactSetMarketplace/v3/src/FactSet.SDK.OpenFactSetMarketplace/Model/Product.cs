/*
 * Open:FactSet Marketplace API
 *
 * This API provides read-only access to marketplace products and partners.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetMarketplace.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetMarketplace.Model
{
    /// <summary>
    /// Product object
    /// </summary>
    [DataContract(Name = "Product")]
    public partial class Product : IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Product status pertaining to its availability on the Open:FactSet Marketplace
        /// </summary>
        /// <value>Product status pertaining to its availability on the Open:FactSet Marketplace</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductStatusEnum
        {
            /// <summary>
            /// Enum Available for value: available
            /// </summary>
            [EnumMember(Value = "available")]
            Available = 1,

            /// <summary>
            /// Enum Candidate for value: candidate
            /// </summary>
            [EnumMember(Value = "candidate")]
            Candidate = 2,

            /// <summary>
            /// Enum ComingSoon for value: comingSoon
            /// </summary>
            [EnumMember(Value = "comingSoon")]
            ComingSoon = 3,

            /// <summary>
            /// Enum DevelopmentQueue for value: developmentQueue
            /// </summary>
            [EnumMember(Value = "developmentQueue")]
            DevelopmentQueue = 4,

            /// <summary>
            /// Enum New for value: new
            /// </summary>
            [EnumMember(Value = "new")]
            New = 5,

            /// <summary>
            /// Enum Updated for value: updated
            /// </summary>
            [EnumMember(Value = "updated")]
            Updated = 6

        }


        /// <summary>
        /// Product status pertaining to its availability on the Open:FactSet Marketplace
        /// </summary>
        /// <value>Product status pertaining to its availability on the Open:FactSet Marketplace</value>
        [DataMember(Name = "productStatus", IsRequired = true, EmitDefaultValue = false)]
        public ProductStatusEnum ProductStatus { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DataFeed for value: dataFeed
            /// </summary>
            [EnumMember(Value = "dataFeed")]
            DataFeed = 1,

            /// <summary>
            /// Enum Api for value: api
            /// </summary>
            [EnumMember(Value = "api")]
            Api = 2,

            /// <summary>
            /// Enum Platform for value: platform
            /// </summary>
            [EnumMember(Value = "platform")]
            Platform = 3

        }



        /// <summary>
        /// Product type
        /// </summary>
        /// <value>Product type</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public List<TypeEnum> Type { get; set; }
        /// <summary>
        /// Product update frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.
        /// </summary>
        /// <value>Product update frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpdateFrequencyEnum
        {
            /// <summary>
            /// Enum Quarterly for value: quarterly
            /// </summary>
            [EnumMember(Value = "quarterly")]
            Quarterly = 1,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 2,

            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            [EnumMember(Value = "daily")]
            Daily = 3,

            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 4,

            /// <summary>
            /// Enum Annual for value: annual
            /// </summary>
            [EnumMember(Value = "annual")]
            Annual = 5,

            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 6,

            /// <summary>
            /// Enum Intraday for value: intraday
            /// </summary>
            [EnumMember(Value = "intraday")]
            Intraday = 7

        }


        /// <summary>
        /// Product update frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.
        /// </summary>
        /// <value>Product update frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.</value>
        [DataMember(Name = "updateFrequency", EmitDefaultValue = false)]
        public UpdateFrequencyEnum? UpdateFrequency { get; set; }
        /// <summary>
        /// Product delivery frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.
        /// </summary>
        /// <value>Product delivery frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeliveryFrequencyEnum
        {
            /// <summary>
            /// Enum IntradayDaily for value: intradayDaily
            /// </summary>
            [EnumMember(Value = "intradayDaily")]
            IntradayDaily = 1,

            /// <summary>
            /// Enum Quarterly for value: quarterly
            /// </summary>
            [EnumMember(Value = "quarterly")]
            Quarterly = 2,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 3,

            /// <summary>
            /// Enum Intraday for value: intraday
            /// </summary>
            [EnumMember(Value = "intraday")]
            Intraday = 4,

            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 5,

            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            [EnumMember(Value = "daily")]
            Daily = 6,

            /// <summary>
            /// Enum Annual for value: annual
            /// </summary>
            [EnumMember(Value = "annual")]
            Annual = 7,

            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 8

        }


        /// <summary>
        /// Product delivery frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.
        /// </summary>
        /// <value>Product delivery frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc.</value>
        [DataMember(Name = "deliveryFrequency", EmitDefaultValue = false)]
        public DeliveryFrequencyEnum? DeliveryFrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="id">Product unique identifier (required).</param>
        /// <param name="productPageUrl">URL of the product&#39;s page on the marketplace catalog. (required).</param>
        /// <param name="secondaryLink">Secondary link with additional information.</param>
        /// <param name="title">Product title (required).</param>
        /// <param name="description">Product description (required).</param>
        /// <param name="createDate">Product creation date (required).</param>
        /// <param name="partner">partner (required).</param>
        /// <param name="productStatus">Product status pertaining to its availability on the Open:FactSet Marketplace (required).</param>
        /// <param name="type">Product type (required).</param>
        /// <param name="documents">Product documents.</param>
        /// <param name="thirdPartyUrls">Product third party URLs.</param>
        /// <param name="primaryLink">Link to primary product information, which is separate from the product&#39;s product page URL..</param>
        /// <param name="previewLink">Link to additional information on the product, which is separate from the product&#39;s product page URL..</param>
        /// <param name="relatedProducts">Related products.</param>
        /// <param name="coverageTable">Product coverage table (HTML).</param>
        /// <param name="attributesGroups">Key-value pairs of product attributes that describe the product and its usage. These attributes groups are used to filter products on the marketplace catalog..</param>
        /// <param name="videoUrl">Product video URL.</param>
        /// <param name="navigatorUrl">Product Data Navigator URL, on https://open.factset.com/navigator/.</param>
        /// <param name="updateFrequency">Product update frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc..</param>
        /// <param name="deliveryFrequency">Product delivery frequency, i.e. &#39;Daily&#39;, &#39;Weekly&#39;, etc..</param>
        public Product(string id, string productPageUrl, string title, string description, DateTime createDate, ProductPartner partner, ProductStatusEnum productStatus, List<TypeEnum> type,string secondaryLink = default(string), List<DocumentsItems> documents = default(List<DocumentsItems>), List<ThirdPartyUrls> thirdPartyUrls = default(List<ThirdPartyUrls>), string primaryLink = default(string), string previewLink = default(string), List<RelatedProducts> relatedProducts = default(List<RelatedProducts>), string coverageTable = default(string), List<AttributesGroupsItem> attributesGroups = default(List<AttributesGroupsItem>), string videoUrl = default(string), string navigatorUrl = default(string), UpdateFrequencyEnum? updateFrequency = default(UpdateFrequencyEnum?), DeliveryFrequencyEnum? deliveryFrequency = default(DeliveryFrequencyEnum?))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Product and cannot be null");
            }
            this.Id = id;
            // to ensure "productPageUrl" is required (not null)
            if (productPageUrl == null) {
                throw new ArgumentNullException("productPageUrl is a required property for Product and cannot be null");
            }
            this.ProductPageUrl = productPageUrl;
            // to ensure "title" is required (not null)
            if (title == null) {
                throw new ArgumentNullException("title is a required property for Product and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for Product and cannot be null");
            }
            this.Description = description;
            this.CreateDate = createDate;
            // to ensure "partner" is required (not null)
            if (partner == null) {
                throw new ArgumentNullException("partner is a required property for Product and cannot be null");
            }
            this.Partner = partner;
            this.ProductStatus = productStatus;
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for Product and cannot be null");
            }
            this.Type = type;
            this.SecondaryLink = secondaryLink;
            this.Documents = documents;
            this.ThirdPartyUrls = thirdPartyUrls;
            this.PrimaryLink = primaryLink;
            this.PreviewLink = previewLink;
            this.RelatedProducts = relatedProducts;
            this.CoverageTable = coverageTable;
            this.AttributesGroups = attributesGroups;
            this.VideoUrl = videoUrl;
            this.NavigatorUrl = navigatorUrl;
            this.UpdateFrequency = updateFrequency;
            this.DeliveryFrequency = deliveryFrequency;
        }

        /// <summary>
        /// Product unique identifier
        /// </summary>
        /// <value>Product unique identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// URL of the product&#39;s page on the marketplace catalog.
        /// </summary>
        /// <value>URL of the product&#39;s page on the marketplace catalog.</value>
        [DataMember(Name = "productPageUrl", IsRequired = true, EmitDefaultValue = false)]
        public string ProductPageUrl { get; set; }

        /// <summary>
        /// Secondary link with additional information
        /// </summary>
        /// <value>Secondary link with additional information</value>
        [DataMember(Name = "secondaryLink", EmitDefaultValue = false)]
        public string SecondaryLink { get; set; }

        /// <summary>
        /// Product title
        /// </summary>
        /// <value>Product title</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Product description
        /// </summary>
        /// <value>Product description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Product creation date
        /// </summary>
        /// <value>Product creation date</value>
        [DataMember(Name = "createDate", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Partner
        /// </summary>
        [DataMember(Name = "partner", IsRequired = true, EmitDefaultValue = false)]
        public ProductPartner Partner { get; set; }

        /// <summary>
        /// Product documents
        /// </summary>
        /// <value>Product documents</value>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public List<DocumentsItems> Documents { get; set; }

        /// <summary>
        /// Product third party URLs
        /// </summary>
        /// <value>Product third party URLs</value>
        [DataMember(Name = "thirdPartyUrls", EmitDefaultValue = false)]
        public List<ThirdPartyUrls> ThirdPartyUrls { get; set; }

        /// <summary>
        /// Link to primary product information, which is separate from the product&#39;s product page URL.
        /// </summary>
        /// <value>Link to primary product information, which is separate from the product&#39;s product page URL.</value>
        [DataMember(Name = "primaryLink", EmitDefaultValue = false)]
        public string PrimaryLink { get; set; }

        /// <summary>
        /// Link to additional information on the product, which is separate from the product&#39;s product page URL.
        /// </summary>
        /// <value>Link to additional information on the product, which is separate from the product&#39;s product page URL.</value>
        [DataMember(Name = "previewLink", EmitDefaultValue = false)]
        public string PreviewLink { get; set; }

        /// <summary>
        /// Related products
        /// </summary>
        /// <value>Related products</value>
        [DataMember(Name = "relatedProducts", EmitDefaultValue = false)]
        public List<RelatedProducts> RelatedProducts { get; set; }

        /// <summary>
        /// Product coverage table (HTML)
        /// </summary>
        /// <value>Product coverage table (HTML)</value>
        [DataMember(Name = "coverageTable", EmitDefaultValue = false)]
        public string CoverageTable { get; set; }

        /// <summary>
        /// Key-value pairs of product attributes that describe the product and its usage. These attributes groups are used to filter products on the marketplace catalog.
        /// </summary>
        /// <value>Key-value pairs of product attributes that describe the product and its usage. These attributes groups are used to filter products on the marketplace catalog.</value>
        [DataMember(Name = "attributesGroups", EmitDefaultValue = false)]
        public List<AttributesGroupsItem> AttributesGroups { get; set; }

        /// <summary>
        /// Product video URL
        /// </summary>
        /// <value>Product video URL</value>
        [DataMember(Name = "videoUrl", EmitDefaultValue = false)]
        public string VideoUrl { get; set; }

        /// <summary>
        /// Product Data Navigator URL, on https://open.factset.com/navigator/
        /// </summary>
        /// <value>Product Data Navigator URL, on https://open.factset.com/navigator/</value>
        [DataMember(Name = "navigatorUrl", EmitDefaultValue = false)]
        public string NavigatorUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductPageUrl: ").Append(ProductPageUrl).Append("\n");
            sb.Append("  SecondaryLink: ").Append(SecondaryLink).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Partner: ").Append(Partner).Append("\n");
            sb.Append("  ProductStatus: ").Append(ProductStatus).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  ThirdPartyUrls: ").Append(ThirdPartyUrls).Append("\n");
            sb.Append("  PrimaryLink: ").Append(PrimaryLink).Append("\n");
            sb.Append("  PreviewLink: ").Append(PreviewLink).Append("\n");
            sb.Append("  RelatedProducts: ").Append(RelatedProducts).Append("\n");
            sb.Append("  CoverageTable: ").Append(CoverageTable).Append("\n");
            sb.Append("  AttributesGroups: ").Append(AttributesGroups).Append("\n");
            sb.Append("  VideoUrl: ").Append(VideoUrl).Append("\n");
            sb.Append("  NavigatorUrl: ").Append(NavigatorUrl).Append("\n");
            sb.Append("  UpdateFrequency: ").Append(UpdateFrequency).Append("\n");
            sb.Append("  DeliveryFrequency: ").Append(DeliveryFrequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProductPageUrl == input.ProductPageUrl ||
                    (this.ProductPageUrl != null &&
                    this.ProductPageUrl.Equals(input.ProductPageUrl))
                ) && 
                (
                    this.SecondaryLink == input.SecondaryLink ||
                    (this.SecondaryLink != null &&
                    this.SecondaryLink.Equals(input.SecondaryLink))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Partner == input.Partner ||
                    (this.Partner != null &&
                    this.Partner.Equals(input.Partner))
                ) && 
                (
                    this.ProductStatus == input.ProductStatus ||
                    this.ProductStatus.Equals(input.ProductStatus)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.SequenceEqual(input.Type)
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.ThirdPartyUrls == input.ThirdPartyUrls ||
                    this.ThirdPartyUrls != null &&
                    input.ThirdPartyUrls != null &&
                    this.ThirdPartyUrls.SequenceEqual(input.ThirdPartyUrls)
                ) && 
                (
                    this.PrimaryLink == input.PrimaryLink ||
                    (this.PrimaryLink != null &&
                    this.PrimaryLink.Equals(input.PrimaryLink))
                ) && 
                (
                    this.PreviewLink == input.PreviewLink ||
                    (this.PreviewLink != null &&
                    this.PreviewLink.Equals(input.PreviewLink))
                ) && 
                (
                    this.RelatedProducts == input.RelatedProducts ||
                    this.RelatedProducts != null &&
                    input.RelatedProducts != null &&
                    this.RelatedProducts.SequenceEqual(input.RelatedProducts)
                ) && 
                (
                    this.CoverageTable == input.CoverageTable ||
                    (this.CoverageTable != null &&
                    this.CoverageTable.Equals(input.CoverageTable))
                ) && 
                (
                    this.AttributesGroups == input.AttributesGroups ||
                    this.AttributesGroups != null &&
                    input.AttributesGroups != null &&
                    this.AttributesGroups.SequenceEqual(input.AttributesGroups)
                ) && 
                (
                    this.VideoUrl == input.VideoUrl ||
                    (this.VideoUrl != null &&
                    this.VideoUrl.Equals(input.VideoUrl))
                ) && 
                (
                    this.NavigatorUrl == input.NavigatorUrl ||
                    (this.NavigatorUrl != null &&
                    this.NavigatorUrl.Equals(input.NavigatorUrl))
                ) && 
                (
                    this.UpdateFrequency == input.UpdateFrequency ||
                    this.UpdateFrequency.Equals(input.UpdateFrequency)
                ) && 
                (
                    this.DeliveryFrequency == input.DeliveryFrequency ||
                    this.DeliveryFrequency.Equals(input.DeliveryFrequency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ProductPageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ProductPageUrl.GetHashCode();
                }
                if (this.SecondaryLink != null)
                {
                    hashCode = (hashCode * 59) + this.SecondaryLink.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CreateDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreateDate.GetHashCode();
                }
                if (this.Partner != null)
                {
                    hashCode = (hashCode * 59) + this.Partner.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Documents != null)
                {
                    hashCode = (hashCode * 59) + this.Documents.GetHashCode();
                }
                if (this.ThirdPartyUrls != null)
                {
                    hashCode = (hashCode * 59) + this.ThirdPartyUrls.GetHashCode();
                }
                if (this.PrimaryLink != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryLink.GetHashCode();
                }
                if (this.PreviewLink != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewLink.GetHashCode();
                }
                if (this.RelatedProducts != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedProducts.GetHashCode();
                }
                if (this.CoverageTable != null)
                {
                    hashCode = (hashCode * 59) + this.CoverageTable.GetHashCode();
                }
                if (this.AttributesGroups != null)
                {
                    hashCode = (hashCode * 59) + this.AttributesGroups.GetHashCode();
                }
                if (this.VideoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.VideoUrl.GetHashCode();
                }
                if (this.NavigatorUrl != null)
                {
                    hashCode = (hashCode * 59) + this.NavigatorUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdateFrequency.GetHashCode();
                hashCode = (hashCode * 59) + this.DeliveryFrequency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
