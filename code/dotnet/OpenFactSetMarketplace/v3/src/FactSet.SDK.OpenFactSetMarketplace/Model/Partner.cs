/*
 * Open:FactSet Marketplace API
 *
 * This API provides read-only access to marketplace products and partners.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.SDK.OpenFactSetMarketplace.Client.OpenAPIDateConverter;

namespace FactSet.SDK.OpenFactSetMarketplace.Model
{
    /// <summary>
    /// Partner object
    /// </summary>
    [DataContract(Name = "Partner")]
    public partial class Partner : IEquatable<Partner>, IValidatableObject
    {
        /// <summary>
        /// Partner type, describing the Partner&#39;s relationship with FactSet
        /// </summary>
        /// <value>Partner type, describing the Partner&#39;s relationship with FactSet</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CapabilityPartner for value: capabilityPartner
            /// </summary>
            [EnumMember(Value = "capabilityPartner")]
            CapabilityPartner = 1,

            /// <summary>
            /// Enum Consultant for value: consultant
            /// </summary>
            [EnumMember(Value = "consultant")]
            Consultant = 2,

            /// <summary>
            /// Enum OpenFactSetPartner for value: openFactSetPartner
            /// </summary>
            [EnumMember(Value = "openFactSetPartner")]
            OpenFactSetPartner = 3,

            /// <summary>
            /// Enum DataPartner for value: dataPartner
            /// </summary>
            [EnumMember(Value = "dataPartner")]
            DataPartner = 4,

            /// <summary>
            /// Enum TechnicalPartner for value: technicalPartner
            /// </summary>
            [EnumMember(Value = "technicalPartner")]
            TechnicalPartner = 5

        }


        /// <summary>
        /// Partner type, describing the Partner&#39;s relationship with FactSet
        /// </summary>
        /// <value>Partner type, describing the Partner&#39;s relationship with FactSet</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Partner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Partner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Partner" /> class.
        /// </summary>
        /// <param name="id">Partner unique identifier, used in the request URL (required).</param>
        /// <param name="partnerPageUrl">URL of the partner&#39;s page on the partner catalog. (required).</param>
        /// <param name="name">Partner name (required).</param>
        /// <param name="logo">Partner logo URL (required).</param>
        /// <param name="shortDescription">Partner short description (plain text), appearing on the partner&#39;s card within the FactSet Partner Catalog. (required).</param>
        /// <param name="fullDescription">Partner full description (HTML) (required).</param>
        /// <param name="workflow">An array of strings describing the Partner&#39;s workflow(s), used as categories on FactSet&#39;s Partner Catalog. (required).</param>
        /// <param name="type">Partner type, describing the Partner&#39;s relationship with FactSet (required).</param>
        /// <param name="videoUrl">Partner video URL.</param>
        /// <param name="socialMedia">socialMedia.</param>
        /// <param name="companyUrl">Partner company URL.</param>
        /// <param name="address">address.</param>
        public Partner(string id, string partnerPageUrl, string name, string logo, string shortDescription, string fullDescription, List<string> workflow, TypeEnum type,string videoUrl = default(string), PartnerSocialMedia socialMedia = default(PartnerSocialMedia), string companyUrl = default(string), PartnerAddress address = default(PartnerAddress))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Partner and cannot be null");
            }
            this.Id = id;
            // to ensure "partnerPageUrl" is required (not null)
            if (partnerPageUrl == null) {
                throw new ArgumentNullException("partnerPageUrl is a required property for Partner and cannot be null");
            }
            this.PartnerPageUrl = partnerPageUrl;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Partner and cannot be null");
            }
            this.Name = name;
            // to ensure "logo" is required (not null)
            if (logo == null) {
                throw new ArgumentNullException("logo is a required property for Partner and cannot be null");
            }
            this.Logo = logo;
            // to ensure "shortDescription" is required (not null)
            if (shortDescription == null) {
                throw new ArgumentNullException("shortDescription is a required property for Partner and cannot be null");
            }
            this.ShortDescription = shortDescription;
            // to ensure "fullDescription" is required (not null)
            if (fullDescription == null) {
                throw new ArgumentNullException("fullDescription is a required property for Partner and cannot be null");
            }
            this.FullDescription = fullDescription;
            // to ensure "workflow" is required (not null)
            if (workflow == null) {
                throw new ArgumentNullException("workflow is a required property for Partner and cannot be null");
            }
            this.Workflow = workflow;
            this.Type = type;
            this.VideoUrl = videoUrl;
            this.SocialMedia = socialMedia;
            this.CompanyUrl = companyUrl;
            this.Address = address;
        }

        /// <summary>
        /// Partner unique identifier, used in the request URL
        /// </summary>
        /// <value>Partner unique identifier, used in the request URL</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// URL of the partner&#39;s page on the partner catalog.
        /// </summary>
        /// <value>URL of the partner&#39;s page on the partner catalog.</value>
        [DataMember(Name = "partnerPageUrl", IsRequired = true, EmitDefaultValue = false)]
        public string PartnerPageUrl { get; set; }

        /// <summary>
        /// Partner name
        /// </summary>
        /// <value>Partner name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Partner logo URL
        /// </summary>
        /// <value>Partner logo URL</value>
        [DataMember(Name = "logo", IsRequired = true, EmitDefaultValue = false)]
        public string Logo { get; set; }

        /// <summary>
        /// Partner short description (plain text), appearing on the partner&#39;s card within the FactSet Partner Catalog.
        /// </summary>
        /// <value>Partner short description (plain text), appearing on the partner&#39;s card within the FactSet Partner Catalog.</value>
        [DataMember(Name = "shortDescription", IsRequired = true, EmitDefaultValue = false)]
        public string ShortDescription { get; set; }

        /// <summary>
        /// Partner full description (HTML)
        /// </summary>
        /// <value>Partner full description (HTML)</value>
        [DataMember(Name = "fullDescription", IsRequired = true, EmitDefaultValue = false)]
        public string FullDescription { get; set; }

        /// <summary>
        /// An array of strings describing the Partner&#39;s workflow(s), used as categories on FactSet&#39;s Partner Catalog.
        /// </summary>
        /// <value>An array of strings describing the Partner&#39;s workflow(s), used as categories on FactSet&#39;s Partner Catalog.</value>
        [DataMember(Name = "workflow", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Workflow { get; set; }

        /// <summary>
        /// Partner video URL
        /// </summary>
        /// <value>Partner video URL</value>
        [DataMember(Name = "videoUrl", EmitDefaultValue = false)]
        public string VideoUrl { get; set; }

        /// <summary>
        /// Gets or Sets SocialMedia
        /// </summary>
        [DataMember(Name = "socialMedia", EmitDefaultValue = false)]
        public PartnerSocialMedia SocialMedia { get; set; }

        /// <summary>
        /// Partner company URL
        /// </summary>
        /// <value>Partner company URL</value>
        [DataMember(Name = "companyUrl", EmitDefaultValue = false)]
        public string CompanyUrl { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public PartnerAddress Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Partner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartnerPageUrl: ").Append(PartnerPageUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  FullDescription: ").Append(FullDescription).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VideoUrl: ").Append(VideoUrl).Append("\n");
            sb.Append("  SocialMedia: ").Append(SocialMedia).Append("\n");
            sb.Append("  CompanyUrl: ").Append(CompanyUrl).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Partner);
        }

        /// <summary>
        /// Returns true if Partner instances are equal
        /// </summary>
        /// <param name="input">Instance of Partner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Partner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PartnerPageUrl == input.PartnerPageUrl ||
                    (this.PartnerPageUrl != null &&
                    this.PartnerPageUrl.Equals(input.PartnerPageUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.ShortDescription == input.ShortDescription ||
                    (this.ShortDescription != null &&
                    this.ShortDescription.Equals(input.ShortDescription))
                ) && 
                (
                    this.FullDescription == input.FullDescription ||
                    (this.FullDescription != null &&
                    this.FullDescription.Equals(input.FullDescription))
                ) && 
                (
                    this.Workflow == input.Workflow ||
                    this.Workflow != null &&
                    input.Workflow != null &&
                    this.Workflow.SequenceEqual(input.Workflow)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.VideoUrl == input.VideoUrl ||
                    (this.VideoUrl != null &&
                    this.VideoUrl.Equals(input.VideoUrl))
                ) && 
                (
                    this.SocialMedia == input.SocialMedia ||
                    (this.SocialMedia != null &&
                    this.SocialMedia.Equals(input.SocialMedia))
                ) && 
                (
                    this.CompanyUrl == input.CompanyUrl ||
                    (this.CompanyUrl != null &&
                    this.CompanyUrl.Equals(input.CompanyUrl))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PartnerPageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerPageUrl.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                if (this.ShortDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ShortDescription.GetHashCode();
                }
                if (this.FullDescription != null)
                {
                    hashCode = (hashCode * 59) + this.FullDescription.GetHashCode();
                }
                if (this.Workflow != null)
                {
                    hashCode = (hashCode * 59) + this.Workflow.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.VideoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.VideoUrl.GetHashCode();
                }
                if (this.SocialMedia != null)
                {
                    hashCode = (hashCode * 59) + this.SocialMedia.GetHashCode();
                }
                if (this.CompanyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyUrl.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
