/**
 * Trading API
 * Allow clients to trade orders.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelChildOrdersRoot from '../model/CancelChildOrdersRoot';
import ChildOrdersResponseRoot from '../model/ChildOrdersResponseRoot';
import ChildOrdersRoot from '../model/ChildOrdersRoot';
import ClientErrorResponse from '../model/ClientErrorResponse';
import CreateChildOrdersResponseRoot from '../model/CreateChildOrdersResponseRoot';
import ReplaceChildOrdersRoot from '../model/ReplaceChildOrdersRoot';

/**
* ChildOrders service.
* @module api/ChildOrdersApi
*/
export default class ChildOrdersApi {

    /**
    * Constructs a new ChildOrdersApi. 
    * @alias module:api/ChildOrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel Child Orders on Trading system
     * This endpoint is used to cancel a specific child order on Trading system.
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelChildOrdersRoot} opts.cancelChildOrdersRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChildOrdersResponseRoot} and HTTP response
     */
    cancelChildOrderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['cancelChildOrdersRoot'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ChildOrdersResponseRoot;

      return this.apiClient.callApi(
        '/child-orders/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel Child Orders on Trading system
     * This endpoint is used to cancel a specific child order on Trading system.
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelChildOrdersRoot} opts.cancelChildOrdersRoot 
     * @return { Promise.< module:model/ChildOrdersResponseRoot > } a Promise, with data of type {@link module:model/ChildOrdersResponseRoot }
     */
    cancelChildOrder(opts) {
      return this.cancelChildOrderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Child Orders on Trading system.
     * This endpoint is used to create child orders on Trading system.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChildOrdersRoot} opts.childOrdersRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateChildOrdersResponseRoot} and HTTP response
     */
    createChildOrderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['childOrdersRoot'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CreateChildOrdersResponseRoot;

      return this.apiClient.callApi(
        '/child-orders/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Child Orders on Trading system.
     * This endpoint is used to create child orders on Trading system.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChildOrdersRoot} opts.childOrdersRoot 
     * @return { Promise.< module:model/CreateChildOrdersResponseRoot > } a Promise, with data of type {@link module:model/CreateChildOrdersResponseRoot }
     */
    createChildOrder(opts) {
      return this.createChildOrderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Replace the Child Orders on Trading system.
     * This endpoint takes the child order to be replaced on the Trading system.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReplaceChildOrdersRoot} opts.replaceChildOrdersRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChildOrdersResponseRoot} and HTTP response
     */
    replaceChildOrderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['replaceChildOrdersRoot'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ChildOrdersResponseRoot;

      return this.apiClient.callApi(
        '/child-orders/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Replace the Child Orders on Trading system.
     * This endpoint takes the child order to be replaced on the Trading system.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReplaceChildOrdersRoot} opts.replaceChildOrdersRoot 
     * @return { Promise.< module:model/ChildOrdersResponseRoot > } a Promise, with data of type {@link module:model/ChildOrdersResponseRoot }
     */
    replaceChildOrder(opts) {
      return this.replaceChildOrderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





