/**
 * Open:Risk API
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.24.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse403 from '../model/InlineResponse403';
import InlineResponse404 from '../model/InlineResponse404';
import SupportedStats from '../model/SupportedStats';
import SupportedStatsNamesOnly from '../model/SupportedStatsNamesOnly';

/**
* About service.
* @module api/AboutApi
*/
export default class AboutApi {

    /**
    * Constructs a new AboutApi. 
    * @alias module:api/AboutApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get health of service
     * Health status of the service
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    healthStatusWithHttpInfo(version) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling healthStatus");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];


      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/linear/{version}/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get health of service
     * Health status of the service
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return { Promise.< module:model/InlineResponse2002 > } a Promise, with data of type {@link module:model/InlineResponse2002 }
     */
    healthStatus(version) {
      return this.healthStatusWithHttpInfo(version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get available risk models
     * Get the list of available risk models, including their respective model codes required for use with other routes.
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    listRiskModelsWithHttpInfo(version) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling listRiskModels");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];


      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/linear/{version}/riskmodels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get available risk models
     * Get the list of available risk models, including their respective model codes required for use with other routes.
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return { Promise.< module:model/InlineResponse200 > } a Promise, with data of type {@link module:model/InlineResponse200 }
     */
    listRiskModels(version) {
      return this.listRiskModelsWithHttpInfo(version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get risk model details
     * Get the metadata of the risk model for the corresponding modelCode. modelCode can be obtained via '/linear/{version}/riskmodels/' route.
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @param {String} modelCode Model code
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    riskModelMetadataWithHttpInfo(version, modelCode) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling riskModelMetadata");
      }
      // verify the required parameter 'modelCode' is set
      if (modelCode === undefined || modelCode === null) {
        throw new Error("Missing the required parameter 'modelCode' when calling riskModelMetadata");
      }

      let pathParams = {
        'version': version,
        'modelCode': modelCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];


      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/linear/{version}/riskmodels/{modelCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get risk model details
     * Get the metadata of the risk model for the corresponding modelCode. modelCode can be obtained via '/linear/{version}/riskmodels/' route.
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @param {String} modelCode Model code
     * @return { Promise.< module:model/InlineResponse2001 > } a Promise, with data of type {@link module:model/InlineResponse2001 }
     */
    riskModelMetadata(version, modelCode) {
      return this.riskModelMetadataWithHttpInfo(version, modelCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get available risk statistics details
     * All base risk statistic names and their respective support and/or requirement for certain name-settings statistics options (such as: correlated specific risk, covariance isolation method, etc.), available levels, and security group calculation methodology. When 'securityGroupMethod' is 'statSpecific', please refer to statistics documentation service for more information.
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SupportedStats} and HTTP response
     */
    statsWithHttpInfo(version) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling stats");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];


      let returnType = SupportedStats;

      return this.apiClient.callApi(
        '/linear/{version}/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get available risk statistics details
     * All base risk statistic names and their respective support and/or requirement for certain name-settings statistics options (such as: correlated specific risk, covariance isolation method, etc.), available levels, and security group calculation methodology. When 'securityGroupMethod' is 'statSpecific', please refer to statistics documentation service for more information.
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return { Promise.< module:model/SupportedStats > } a Promise, with data of type {@link module:model/SupportedStats }
     */
    stats(version) {
      return this.statsWithHttpInfo(version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get available risk statistics names
     * All available risk statistic names including statistics names containing risk statistics options such as CSR (correlated specific risk)
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SupportedStatsNamesOnly} and HTTP response
     */
    statsNamesOnlyWithHttpInfo(version) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling statsNamesOnly");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];


      let returnType = SupportedStatsNamesOnly;

      return this.apiClient.callApi(
        '/linear/{version}/stats-names-only', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get available risk statistics names
     * All available risk statistic names including statistics names containing risk statistics options such as CSR (correlated specific risk)
     * @param {String} version Semantic version number. See [this link here](https://regexr.com/47b7t) to test validate patterns.
     * @return { Promise.< module:model/SupportedStatsNamesOnly > } a Promise, with data of type {@link module:model/SupportedStatsNamesOnly }
     */
    statsNamesOnly(version) {
      return this.statsNamesOnlyWithHttpInfo(version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





