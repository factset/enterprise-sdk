/**
 * Open:Risk API
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.24.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RiskModelAppendDataValue from './RiskModelAppendDataValue';

/**
 * The RiskModelAppendData model module.
 * @module model/RiskModelAppendData
 */
class RiskModelAppendData {
    /**
     * Constructs a new <code>RiskModelAppendData</code>.
     * **(since 1.17.0)** Inline append data. This field can be used mainly for two purpose: 1) to supplement the risk model coverage when assets are not natively covered by a model, and 2) to intentionally override asset exposures and/or specific risk whenever there is misaligned view of an asset&#39;s risk profile between a model and a user.
     * @alias module:model/RiskModelAppendData
     * @param data {Array.<Object.<String, module:model/RiskModelAppendDataValue>>} List of all rows of the append data.
     * @param fields {Array.<String>} List of fields in append data. Must contain 'SYMBOL'. Index location will be used in 'data' elements as keys. The entire set of factor IDs and specific risk are not required. If any inputs of exposures or specific risk are missing, 0 will be inserted for those field.
     */
    constructor(data, fields) { 
        
        RiskModelAppendData.initialize(this, data, fields);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, fields) { 
        obj['data'] = data;
        obj['fields'] = fields;
    }

    /**
     * Constructs a <code>RiskModelAppendData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RiskModelAppendData} obj Optional instance to populate.
     * @return {module:model/RiskModelAppendData} The populated <code>RiskModelAppendData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RiskModelAppendData();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [Object]);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * List of all rows of the append data.
 * @member {Array.<Object.<String, module:model/RiskModelAppendDataValue>>} data
 */
RiskModelAppendData.prototype['data'] = undefined;

/**
 * List of fields in append data. Must contain 'SYMBOL'. Index location will be used in 'data' elements as keys. The entire set of factor IDs and specific risk are not required. If any inputs of exposures or specific risk are missing, 0 will be inserted for those field.
 * @member {Array.<String>} fields
 */
RiskModelAppendData.prototype['fields'] = undefined;






export default RiskModelAppendData;

