/**
 * Open:Risk API
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StatCalculationSettings model module.
 * @module model/StatCalculationSettings
 */
class StatCalculationSettings {
    /**
     * Constructs a new <code>StatCalculationSettings</code>.
     * Settings to modify an individual statistic&#39;s calculation. See also [OA:17698](https://my.apps.factset.com/oa/pages/17698#risk) and [OA:16097](https://my.apps.factset.com/oa/pages/16097#cov2) for cov*2.
     * @alias module:model/StatCalculationSettings
     */
    constructor() { 
        
        StatCalculationSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatCalculationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatCalculationSettings} obj Optional instance to populate.
     * @return {module:model/StatCalculationSettings} The populated <code>StatCalculationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatCalculationSettings();

            if (data.hasOwnProperty('useAbsoluteWeightsForLotExpansion')) {
                obj['useAbsoluteWeightsForLotExpansion'] = ApiClient.convertToType(data['useAbsoluteWeightsForLotExpansion'], 'Boolean');
            }
            if (data.hasOwnProperty('covarianceTimesTwo')) {
                obj['covarianceTimesTwo'] = ApiClient.convertToType(data['covarianceTimesTwo'], 'Boolean');
            }
            if (data.hasOwnProperty('covarianceTimesTwoTerm')) {
                obj['covarianceTimesTwoTerm'] = ApiClient.convertToType(data['covarianceTimesTwoTerm'], 'Boolean');
            }
            if (data.hasOwnProperty('correlatedSpecificRisk')) {
                obj['correlatedSpecificRisk'] = ApiClient.convertToType(data['correlatedSpecificRisk'], 'Boolean');
            }
            if (data.hasOwnProperty('sparse')) {
                obj['sparse'] = ApiClient.convertToType(data['sparse'], 'Boolean');
            }
            if (data.hasOwnProperty('horizon')) {
                obj['horizon'] = ApiClient.convertToType(data['horizon'], 'Number');
            }
            if (data.hasOwnProperty('daysPerYear')) {
                obj['daysPerYear'] = ApiClient.convertToType(data['daysPerYear'], 'Number');
            }
            if (data.hasOwnProperty('confidenceLevel')) {
                obj['confidenceLevel'] = ApiClient.convertToType(data['confidenceLevel'], 'Number');
            }
            if (data.hasOwnProperty('lamda')) {
                obj['lamda'] = ApiClient.convertToType(data['lamda'], 'Number');
            }
            if (data.hasOwnProperty('specificToFactorRatio')) {
                obj['specificToFactorRatio'] = ApiClient.convertToType(data['specificToFactorRatio'], 'Number');
            }
            if (data.hasOwnProperty('rapSys')) {
                obj['rapSys'] = ApiClient.convertToType(data['rapSys'], 'Number');
            }
            if (data.hasOwnProperty('rapUnsys')) {
                obj['rapUnsys'] = ApiClient.convertToType(data['rapUnsys'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * When this is set to true, use absolute value weights for multi-lot expansion, otherwise use the actual value weights.
 * @member {Boolean} useAbsoluteWeightsForLotExpansion
 * @default true
 */
StatCalculationSettings.prototype['useAbsoluteWeightsForLotExpansion'] = true;

/**
 * When this is set to true, calculate covariance multiplied by two.
 * @member {Boolean} covarianceTimesTwo
 * @default false
 */
StatCalculationSettings.prototype['covarianceTimesTwo'] = false;

/**
 * When this is set to true, calculate covariance multiplied by two term (Cov*2 term).
 * @member {Boolean} covarianceTimesTwoTerm
 * @default false
 */
StatCalculationSettings.prototype['covarianceTimesTwoTerm'] = false;

/**
 * When this is set to true, specific risk correlation adjustment will be applied to security level as well as portfolio level. An example case where stock specific correlation is supplied by risk models is the case between parent equity and ADR.
 * @member {Boolean} correlatedSpecificRisk
 * @default false
 */
StatCalculationSettings.prototype['correlatedSpecificRisk'] = false;

/**
 * When this is set to true, the matrix and vector output is in compressed sparse row matrix format. Vector is considered as a matrix with one row for compressed sparse row matrix output. This only applies for matrix and vector output, not for single data points e.g. stats at Portfolio level.
 * @member {Boolean} sparse
 * @default false
 */
StatCalculationSettings.prototype['sparse'] = false;

/**
 * Horizon (in days) to use in Value at Risk (VaR) stat calculations.
 * @member {Number} horizon
 */
StatCalculationSettings.prototype['horizon'] = undefined;

/**
 * Number of days per year (e.g. 250 or 365) to use in Value at Risk (VaR) stat calculations.
 * @member {Number} daysPerYear
 */
StatCalculationSettings.prototype['daysPerYear'] = undefined;

/**
 * Confidence level to use in Value at Risk (VaR) stat calculations.
 * @member {Number} confidenceLevel
 */
StatCalculationSettings.prototype['confidenceLevel'] = undefined;

/**
 * Lamda value to use in Implied Alpha Lamda stat calculations.
 * @member {Number} lamda
 */
StatCalculationSettings.prototype['lamda'] = undefined;

/**
 * Specific risk to factor risk ratio value to use in Implied Alpha stat calculations.
 * @member {Number} specificToFactorRatio
 */
StatCalculationSettings.prototype['specificToFactorRatio'] = undefined;

/**
 * Systematic RAP value to use in Implied Alpha RAP stat calculations.
 * @member {Number} rapSys
 */
StatCalculationSettings.prototype['rapSys'] = undefined;

/**
 * Unsystematic RAP value to use in Implied Alpha RAP stat calculations.
 * @member {Number} rapUnsys
 */
StatCalculationSettings.prototype['rapUnsys'] = undefined;






export default StatCalculationSettings;

