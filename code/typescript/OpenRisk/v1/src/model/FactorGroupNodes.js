/**
 * Open:Risk API
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.24.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactorGroup from './FactorGroup';
import RiskModelFactor from './RiskModelFactor';

/**
 * The FactorGroupNodes model module.
 * @module model/FactorGroupNodes
 */
class FactorGroupNodes {
    /**
     * Constructs a new <code>FactorGroupNodes</code>.
     * Either an individual factor or a grouping.
     * @alias module:model/FactorGroupNodes
     * @implements module:model/FactorGroup
     * @implements module:model/RiskModelFactor
     * @param nodes {Array.<module:model/FactorGroupNodes>} Recursively defined elements; base case array (i.e., lowest factor group) contains 'RiskModelFactor' objects only and no 'FactorGroup' objects
     * @param id {String} Factor ID from the risk model
     */
    constructor(nodes, id) { 
        FactorGroup.initialize(this, nodes);RiskModelFactor.initialize(this, id);
        FactorGroupNodes.initialize(this, nodes, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nodes, id) { 
        obj['nodes'] = nodes;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>FactorGroupNodes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactorGroupNodes} obj Optional instance to populate.
     * @return {module:model/FactorGroupNodes} The populated <code>FactorGroupNodes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactorGroupNodes();
            FactorGroup.constructFromObject(data, obj);
            RiskModelFactor.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], [FactorGroupNodes]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Name of this factor group
 * @member {String} name
 */
FactorGroupNodes.prototype['name'] = undefined;

/**
 * Recursively defined elements; base case array (i.e., lowest factor group) contains 'RiskModelFactor' objects only and no 'FactorGroup' objects
 * @member {Array.<module:model/FactorGroupNodes>} nodes
 */
FactorGroupNodes.prototype['nodes'] = undefined;

/**
 * Factor ID from the risk model
 * @member {String} id
 */
FactorGroupNodes.prototype['id'] = undefined;


// Implement FactorGroup interface:
/**
 * Name of this factor group
 * @member {String} name
 */
FactorGroup.prototype['name'] = undefined;
/**
 * Recursively defined elements; base case array (i.e., lowest factor group) contains 'RiskModelFactor' objects only and no 'FactorGroup' objects
 * @member {Array.<module:model/FactorGroupNodes>} nodes
 */
FactorGroup.prototype['nodes'] = undefined;
// Implement RiskModelFactor interface:
/**
 * Factor ID from the risk model
 * @member {String} id
 */
RiskModelFactor.prototype['id'] = undefined;




export default FactorGroupNodes;

