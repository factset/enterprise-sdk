/**
 * Open:Risk API
 * Service to calculate parametric linear risk statistics and generate risk model asset identifier mappings.
 *
 * The version of the OpenAPI document: 1.26.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResolvedDates model module.
 * @module model/ResolvedDates
 */
class ResolvedDates {
    /**
     * Constructs a new <code>ResolvedDates</code>.
     * **(since 1.11.0)** Absolute actual dates used adjusted according to calendar and lagging
     * @alias module:model/ResolvedDates
     * @param universeDate {Date} **(since 1.12.0)**  Date format YYYY-MM-DD.
     * @param covarianceDate {Date} **(since 1.12.0)**  Date format YYYY-MM-DD.
     * @param ssrDate {Date} **(since 1.12.0)**  Date format YYYY-MM-DD.
     */
    constructor(universeDate, covarianceDate, ssrDate) { 
        
        ResolvedDates.initialize(this, universeDate, covarianceDate, ssrDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, universeDate, covarianceDate, ssrDate) { 
        obj['universeDate'] = universeDate;
        obj['covarianceDate'] = covarianceDate;
        obj['ssrDate'] = ssrDate;
    }

    /**
     * Constructs a <code>ResolvedDates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResolvedDates} obj Optional instance to populate.
     * @return {module:model/ResolvedDates} The populated <code>ResolvedDates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResolvedDates();

            if (data.hasOwnProperty('universeDate')) {
                obj['universeDate'] = ApiClient.convertToType(data['universeDate'], 'Date');
            }
            if (data.hasOwnProperty('covarianceDate')) {
                obj['covarianceDate'] = ApiClient.convertToType(data['covarianceDate'], 'Date');
            }
            if (data.hasOwnProperty('ssrDate')) {
                obj['ssrDate'] = ApiClient.convertToType(data['ssrDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * **(since 1.12.0)**  Date format YYYY-MM-DD.
 * @member {Date} universeDate
 */
ResolvedDates.prototype['universeDate'] = undefined;

/**
 * **(since 1.12.0)**  Date format YYYY-MM-DD.
 * @member {Date} covarianceDate
 */
ResolvedDates.prototype['covarianceDate'] = undefined;

/**
 * **(since 1.12.0)**  Date format YYYY-MM-DD.
 * @member {Date} ssrDate
 */
ResolvedDates.prototype['ssrDate'] = undefined;






export default ResolvedDates;

