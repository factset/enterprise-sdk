/**
 * Tick History
 * Tick History provides dynamic access to historical tick data for a specific security for specific dates or date range.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateTimePeriod from './DateTimePeriod';

/**
 * The Level1RequestBody model module.
 * @module model/Level1RequestBody
 */
class Level1RequestBody {
    /**
     * Constructs a new <code>Level1RequestBody</code>.
     * Level1 request body elements
     * @alias module:model/Level1RequestBody
     * @param tickers {Array.<String>} The requested list of one or more tickers. <p> NOTE: Maximum 500 tickers per request.</p>.   
     * @param factsetExchangeCode {String} FactSet specific regional or composite exchange code and last exchange code. <p> NOTE:Does not support multiple factsetExchangeCodes</p>. 
     * @param dateTimeRange {module:model/DateTimePeriod} 
     */
    constructor(tickers, factsetExchangeCode, dateTimeRange) { 
        
        Level1RequestBody.initialize(this, tickers, factsetExchangeCode, dateTimeRange);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tickers, factsetExchangeCode, dateTimeRange) { 
        obj['tickers'] = tickers;
        obj['factsetExchangeCode'] = factsetExchangeCode;
        obj['dateTimeRange'] = dateTimeRange;
    }

    /**
     * Constructs a <code>Level1RequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Level1RequestBody} obj Optional instance to populate.
     * @return {module:model/Level1RequestBody} The populated <code>Level1RequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Level1RequestBody();

            if (data.hasOwnProperty('tickers')) {
                obj['tickers'] = ApiClient.convertToType(data['tickers'], ['String']);
            }
            if (data.hasOwnProperty('factsetExchangeCode')) {
                obj['factsetExchangeCode'] = ApiClient.convertToType(data['factsetExchangeCode'], 'String');
            }
            if (data.hasOwnProperty('dateTimeRange')) {
                obj['dateTimeRange'] = DateTimePeriod.constructFromObject(data['dateTimeRange']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], ['String']);
            }
            if (data.hasOwnProperty('single')) {
                obj['single'] = ApiClient.convertToType(data['single'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * The requested list of one or more tickers. <p> NOTE: Maximum 500 tickers per request.</p>.   
 * @member {Array.<String>} tickers
 */
Level1RequestBody.prototype['tickers'] = undefined;

/**
 * FactSet specific regional or composite exchange code and last exchange code. <p> NOTE:Does not support multiple factsetExchangeCodes</p>. 
 * @member {String} factsetExchangeCode
 */
Level1RequestBody.prototype['factsetExchangeCode'] = undefined;

/**
 * @member {module:model/DateTimePeriod} dateTimeRange
 */
Level1RequestBody.prototype['dateTimeRange'] = undefined;

/**
 * Fields for which data is requested 
 * @member {Array.<module:model/Level1RequestBody.FieldsEnum>} fields
 */
Level1RequestBody.prototype['fields'] = undefined;

/**
 * <p> This parameter only works for smaller date/time requests where the file size is upto 128MB.</P> single=true  Returns data in a single file. single=false Returns data in multiple files. <p> Note: If parameter is not used it take default value as false and returns data in multiple files.</p> 
 * @member {Boolean} single
 * @default false
 */
Level1RequestBody.prototype['single'] = false;





/**
 * Allowed values for the <code>fields</code> property.
 * @enum {String}
 * @readonly
 */
Level1RequestBody['FieldsEnum'] = {

    /**
     * value: "TICKER"
     * @const
     */
    "TICKER": "TICKER",

    /**
     * value: "ISO_CODE"
     * @const
     */
    "ISO_CODE": "ISO_CODE",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "TIME"
     * @const
     */
    "TIME": "TIME",

    /**
     * value: "MSG_TYPE"
     * @const
     */
    "MSG_TYPE": "MSG_TYPE",

    /**
     * value: "SEQUENCE"
     * @const
     */
    "SEQUENCE": "SEQUENCE",

    /**
     * value: "PRODUCT"
     * @const
     */
    "PRODUCT": "PRODUCT",

    /**
     * value: "BID"
     * @const
     */
    "BID": "BID",

    /**
     * value: "BID_TIME"
     * @const
     */
    "BID_TIME": "BID_TIME",

    /**
     * value: "BID_VOL"
     * @const
     */
    "BID_VOL": "BID_VOL",

    /**
     * value: "BID_EXCH"
     * @const
     */
    "BID_EXCH": "BID_EXCH",

    /**
     * value: "ASK"
     * @const
     */
    "ASK": "ASK",

    /**
     * value: "ASK_TIME"
     * @const
     */
    "ASK_TIME": "ASK_TIME",

    /**
     * value: "ASK_VOL"
     * @const
     */
    "ASK_VOL": "ASK_VOL",

    /**
     * value: "ASK_EXCH"
     * @const
     */
    "ASK_EXCH": "ASK_EXCH",

    /**
     * value: "LAST_PRICE"
     * @const
     */
    "LAST_PRICE": "LAST_PRICE",

    /**
     * value: "LAST_DATE"
     * @const
     */
    "LAST_DATE": "LAST_DATE",

    /**
     * value: "LAST_TIME"
     * @const
     */
    "LAST_TIME": "LAST_TIME",

    /**
     * value: "LAST_VOL"
     * @const
     */
    "LAST_VOL": "LAST_VOL",

    /**
     * value: "LAST_EXCH"
     * @const
     */
    "LAST_EXCH": "LAST_EXCH",

    /**
     * value: "MID"
     * @const
     */
    "MID": "MID",

    /**
     * value: "MID_TIME"
     * @const
     */
    "MID_TIME": "MID_TIME",

    /**
     * value: "CVOL"
     * @const
     */
    "CVOL": "CVOL",

    /**
     * value: "CCVOL"
     * @const
     */
    "CCVOL": "CCVOL",

    /**
     * value: "VWAP"
     * @const
     */
    "VWAP": "VWAP",

    /**
     * value: "YIELD_PRICE"
     * @const
     */
    "YIELD_PRICE": "YIELD_PRICE",

    /**
     * value: "BENCHMARK_YIELD"
     * @const
     */
    "BENCHMARK_YIELD": "BENCHMARK_YIELD",

    /**
     * value: "BENCHMARK_SPREAD"
     * @const
     */
    "BENCHMARK_SPREAD": "BENCHMARK_SPREAD",

    /**
     * value: "CURRENT_YIELD"
     * @const
     */
    "CURRENT_YIELD": "CURRENT_YIELD",

    /**
     * value: "TRADE_CONDITION"
     * @const
     */
    "TRADE_CONDITION": "TRADE_CONDITION",

    /**
     * value: "REPORTING_SIDE"
     * @const
     */
    "REPORTING_SIDE": "REPORTING_SIDE",

    /**
     * value: "ASK_YIELD"
     * @const
     */
    "ASK_YIELD": "ASK_YIELD",

    /**
     * value: "BID_YIELD"
     * @const
     */
    "BID_YIELD": "BID_YIELD",

    /**
     * value: "VENUE"
     * @const
     */
    "VENUE": "VENUE",

    /**
     * value: "BUY_ID"
     * @const
     */
    "BUY_ID": "BUY_ID",

    /**
     * value: "MID_YIELD"
     * @const
     */
    "MID_YIELD": "MID_YIELD",

    /**
     * value: "ORDER_CODE"
     * @const
     */
    "ORDER_CODE": "ORDER_CODE",

    /**
     * value: "SELL_ID"
     * @const
     */
    "SELL_ID": "SELL_ID",

    /**
     * value: "TRADED_PRICE"
     * @const
     */
    "TRADED_PRICE": "TRADED_PRICE",

    /**
     * value: "TRADED_VOL"
     * @const
     */
    "TRADED_VOL": "TRADED_VOL",

    /**
     * value: "TRADED_CONDITION"
     * @const
     */
    "TRADED_CONDITION": "TRADED_CONDITION",

    /**
     * value: "TRADED_YIELD"
     * @const
     */
    "TRADED_YIELD": "TRADED_YIELD",

    /**
     * value: "ORIG_SEQUENCE"
     * @const
     */
    "ORIG_SEQUENCE": "ORIG_SEQUENCE",

    /**
     * value: "SECURITY_TYPE"
     * @const
     */
    "SECURITY_TYPE": "SECURITY_TYPE",

    /**
     * value: "SECURITY_STATUS"
     * @const
     */
    "SECURITY_STATUS": "SECURITY_STATUS",

    /**
     * value: "MSG_BITMASK"
     * @const
     */
    "MSG_BITMASK": "MSG_BITMASK",

    /**
     * value: "ORDER_NUM"
     * @const
     */
    "ORDER_NUM": "ORDER_NUM",

    /**
     * value: "ISO"
     * @const
     */
    "ISO": "ISO"
};



export default Level1RequestBody;

