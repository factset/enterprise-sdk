/**
 * Tick History
 * Tick History provides dynamic access to historical tick data for a specific security for specific dates or date range.
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Files from './Files';

/**
 * The TickData model module.
 * @module model/TickData
 */
class TickData {
    /**
     * Constructs a new <code>TickData</code>.
     *  Returns Tick History Response.
     * @alias module:model/TickData
     */
    constructor() { 
        
        TickData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TickData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TickData} obj Optional instance to populate.
     * @return {module:model/TickData} The populated <code>TickData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TickData();

            if (data.hasOwnProperty('requestTimestamp')) {
                obj['requestTimestamp'] = ApiClient.convertToType(data['requestTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('updateTimestamp')) {
                obj['updateTimestamp'] = ApiClient.convertToType(data['updateTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('notAuthorizedTickers')) {
                obj['notAuthorizedTickers'] = ApiClient.convertToType(data['notAuthorizedTickers'], ['String']);
            }
            if (data.hasOwnProperty('invalidTickers')) {
                obj['invalidTickers'] = ApiClient.convertToType(data['invalidTickers'], ['String']);
            }
            if (data.hasOwnProperty('listOfFiles')) {
                obj['listOfFiles'] = ApiClient.convertToType(data['listOfFiles'], [Files]);
            }
        }
        return obj;
    }


}

/**
 * Timestamp of when request was made
 * @member {Date} requestTimestamp
 */
TickData.prototype['requestTimestamp'] = undefined;

/**
 * Timestamp when the file was last updated
 * @member {Date} updateTimestamp
 */
TickData.prototype['updateTimestamp'] = undefined;

/**
 * Returns not Authorized Tickers
 * @member {Array.<String>} notAuthorizedTickers
 */
TickData.prototype['notAuthorizedTickers'] = undefined;

/**
 * Returns invalid Tickers
 * @member {Array.<String>} invalidTickers
 */
TickData.prototype['invalidTickers'] = undefined;

/**
 * Contains list of Files
 * @member {Array.<module:model/Files>} listOfFiles
 */
TickData.prototype['listOfFiles'] = undefined;






export default TickData;

