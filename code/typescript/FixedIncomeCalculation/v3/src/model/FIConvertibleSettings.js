/**
 * FI API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3.13.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FIConvertibleSettings model module.
 * @module model/FIConvertibleSettings
 */
class FIConvertibleSettings {
    /**
     * Constructs a new <code>FIConvertibleSettings</code>.
     * @alias module:model/FIConvertibleSettings
     */
    constructor() { 
        
        FIConvertibleSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FIConvertibleSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FIConvertibleSettings} obj Optional instance to populate.
     * @return {module:model/FIConvertibleSettings} The populated <code>FIConvertibleSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FIConvertibleSettings();

            if (data.hasOwnProperty('equityPrice')) {
                obj['equityPrice'] = ApiClient.convertToType(data['equityPrice'], 'Number');
            }
            if (data.hasOwnProperty('equityIndexVolatility')) {
                obj['equityIndexVolatility'] = ApiClient.convertToType(data['equityIndexVolatility'], 'Number');
            }
            if (data.hasOwnProperty('equityDividendYield')) {
                obj['equityDividendYield'] = ApiClient.convertToType(data['equityDividendYield'], 'Number');
            }
            if (data.hasOwnProperty('volatilityCapMethod')) {
                obj['volatilityCapMethod'] = ApiClient.convertToType(data['volatilityCapMethod'], 'String');
            }
            if (data.hasOwnProperty('volatilityCapMethodValue')) {
                obj['volatilityCapMethodValue'] = ApiClient.convertToType(data['volatilityCapMethodValue'], 'Number');
            }
            if (data.hasOwnProperty('equityExchangeRate')) {
                obj['equityExchangeRate'] = ApiClient.convertToType(data['equityExchangeRate'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Equity Price
 * @member {Number} equityPrice
 */
FIConvertibleSettings.prototype['equityPrice'] = undefined;

/**
 * Equity Index Volatility
 * @member {Number} equityIndexVolatility
 */
FIConvertibleSettings.prototype['equityIndexVolatility'] = undefined;

/**
 * Equity Dividend Yield
 * @member {Number} equityDividendYield
 */
FIConvertibleSettings.prototype['equityDividendYield'] = undefined;

/**
 * Volatility CapMethod
 * @member {module:model/FIConvertibleSettings.VolatilityCapMethodEnum} volatilityCapMethod
 */
FIConvertibleSettings.prototype['volatilityCapMethod'] = undefined;

/**
 * Volatility CapMethod Value - (Required only when volatilityCapMethod is specifiedRate or multiplier)
 * @member {Number} volatilityCapMethodValue
 */
FIConvertibleSettings.prototype['volatilityCapMethodValue'] = undefined;

/**
 * Equity Exchange Rate
 * @member {Number} equityExchangeRate
 */
FIConvertibleSettings.prototype['equityExchangeRate'] = undefined;





/**
 * Allowed values for the <code>volatilityCapMethod</code> property.
 * @enum {String}
 * @readonly
 */
FIConvertibleSettings['VolatilityCapMethodEnum'] = {

    /**
     * value: "noCap"
     * @const
     */
    "noCap": "noCap",

    /**
     * value: "specifiedRate"
     * @const
     */
    "specifiedRate": "specifiedRate",

    /**
     * value: "multiplier"
     * @const
     */
    "multiplier": "multiplier"
};



export default FIConvertibleSettings;

