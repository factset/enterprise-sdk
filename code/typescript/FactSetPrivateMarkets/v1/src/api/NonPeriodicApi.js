/**
 * FactSet Private Markets API
 * FactSet Private Markets API encompasses Private Company Financials data to start. Private Company firmographics can be found in the FactSet Entity API. The future plans of this service will include additional Private Markets data, such as Private Equity/Venture Capital.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import NonPeriodicRequest from '../model/NonPeriodicRequest';
import NonPeriodicResponse from '../model/NonPeriodicResponse';

/**
* NonPeriodic service.
* @module api/NonPeriodicApi
*/
export default class NonPeriodicApi {

    /**
    * Constructs a new NonPeriodicApi. 
    * @alias module:api/NonPeriodicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns Private Company reference data for a list of ids.
     * Returns Private Company reference information. 
     * @param {Array.<String>} ids The requested FactSet Private Market Entity Identifier in XXXXXX-E format.<p>**Max Ids Limit set to 3000 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 
     * @param {Array.<String>} fields Private Markets Non-Periodic Fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NonPeriodicResponse} and HTTP response
     */
    getNonPeriodicWithHttpInfo(ids, fields) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getNonPeriodic");
      }
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling getNonPeriodic");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'fields': this.apiClient.buildCollectionParam(fields, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = NonPeriodicResponse;

      return this.apiClient.callApi(
        '/factset-private-markets/v1/non-periodic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Private Company reference data for a list of ids.
     * Returns Private Company reference information. 
     * @param {Array.<String>} ids The requested FactSet Private Market Entity Identifier in XXXXXX-E format.<p>**Max Ids Limit set to 3000 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 
     * @param {Array.<String>} fields Private Markets Non-Periodic Fields. 
     * @return { Promise.< module:model/NonPeriodicResponse > } a Promise, with data of type {@link module:model/NonPeriodicResponse }
     */
    getNonPeriodic(ids, fields) {
      return this.getNonPeriodicWithHttpInfo(ids, fields)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns Private Company reference data for a list of ids.
     * Returns a private markets reference object for the requested ids. 
     * @param {module:model/NonPeriodicRequest} nonPeriodicRequest Request Body to request a list of Private Market non-periodic objects.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NonPeriodicResponse} and HTTP response
     */
    getNonPeriodicForListWithHttpInfo(nonPeriodicRequest) {
      let postBody = nonPeriodicRequest;
      // verify the required parameter 'nonPeriodicRequest' is set
      if (nonPeriodicRequest === undefined || nonPeriodicRequest === null) {
        throw new Error("Missing the required parameter 'nonPeriodicRequest' when calling getNonPeriodicForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = NonPeriodicResponse;

      return this.apiClient.callApi(
        '/factset-private-markets/v1/non-periodic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Private Company reference data for a list of ids.
     * Returns a private markets reference object for the requested ids. 
     * @param {module:model/NonPeriodicRequest} nonPeriodicRequest Request Body to request a list of Private Market non-periodic objects.
     * @return { Promise.< module:model/NonPeriodicResponse > } a Promise, with data of type {@link module:model/NonPeriodicResponse }
     */
    getNonPeriodicForList(nonPeriodicRequest) {
      return this.getNonPeriodicForListWithHttpInfo(nonPeriodicRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





