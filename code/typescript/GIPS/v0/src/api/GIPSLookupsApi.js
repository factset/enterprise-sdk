/**
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIClientErrorResponse from '../model/APIClientErrorResponse';
import AccountDirectoriesRoot from '../model/AccountDirectoriesRoot';
import CurrencyRoot from '../model/CurrencyRoot';
import GIPSViewsRoot from '../model/GIPSViewsRoot';

/**
* GIPSLookups service.
* @module api/GIPSLookupsApi
*/
export default class GIPSLookupsApi {

    /**
    * Constructs a new GIPSLookupsApi. 
    * @alias module:api/GIPSLookupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get accounts
     * This endpoint requests all GIPS composites and sub-directories in the given directory which can be used in the GipsCalculationParameters schema. Please note that the endpoint returns all ACTMs and not all are GIPS Compliant.
     * @param {String} path The directory to get the accounts and sub-directories.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountDirectoriesRoot} and HTTP response
     */
    gipsGetAccountsWithHttpInfo(path) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling gipsGetAccounts");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = AccountDirectoriesRoot;

      return this.apiClient.callApi(
        '/accounts/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get accounts
     * This endpoint requests all GIPS composites and sub-directories in the given directory which can be used in the GipsCalculationParameters schema. Please note that the endpoint returns all ACTMs and not all are GIPS Compliant.
     * @param {String} path The directory to get the accounts and sub-directories.
     * @return { Promise.< module:model/AccountDirectoriesRoot > } a Promise, with data of type {@link module:model/AccountDirectoriesRoot }
     */
    gipsGetAccounts(path) {
      return this.gipsGetAccountsWithHttpInfo(path)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get currencies
     * This endpoint lists all the supported currencies that can be used in the GipsCalculationParameters schema.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CurrencyRoot} and HTTP response
     */
    gipsGetCurrenciesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CurrencyRoot;

      return this.apiClient.callApi(
        '/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get currencies
     * This endpoint lists all the supported currencies that can be used in the GipsCalculationParameters schema.
     * @return { Promise.< module:model/CurrencyRoot > } a Promise, with data of type {@link module:model/CurrencyRoot }
     */
    gipsGetCurrencies() {
      return this.gipsGetCurrenciesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get views
     * This endpoint lists all the views that can be used in the GipsCalculationParameters schema.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GIPSViewsRoot} and HTTP response
     */
    gipsGetViewsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = GIPSViewsRoot;

      return this.apiClient.callApi(
        '/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get views
     * This endpoint lists all the views that can be used in the GipsCalculationParameters schema.
     * @return { Promise.< module:model/GIPSViewsRoot > } a Promise, with data of type {@link module:model/GIPSViewsRoot }
     */
    gipsGetViews() {
      return this.gipsGetViewsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





