/**
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIClientErrorResponse from '../model/APIClientErrorResponse';
import CalculationStatusRoot from '../model/CalculationStatusRoot';
import CalculationsSummaryRoot from '../model/CalculationsSummaryRoot';
import FactSetProtobufStachV3StachV3Table from '../model/FactSetProtobufStachV3StachV3Table';
import GIPSCalculationParametersRoot from '../model/GIPSCalculationParametersRoot';

/**
* GIPSCalculations service.
* @module api/GIPSCalculationsApi
*/
export default class GIPSCalculationsApi {

    /**
    * Constructs a new GIPSCalculationsApi. 
    * @alias module:api/GIPSCalculationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel GIPS calculation by id
     * Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
     * @param {String} id from url, provided from the location header in the Create and Run GIPS calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelCalculationByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelCalculationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/calculations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel GIPS calculation by id
     * Use this endpoint to clear calculations from the queue. Note, calculations that are already running cannot be cancelled.
     * @param {String} id from url, provided from the location header in the Create and Run GIPS calculation endpoint
     * @return { Promise } a Promise
     */
    cancelCalculationById(id) {
      return this.cancelCalculationByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all calculations
     * This endpoints returns all calculation requests.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Page number to be viewed (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationsSummaryRoot} and HTTP response
     */
    gipsGetAllCalculationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageNumber': opts['pageNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CalculationsSummaryRoot;

      return this.apiClient.callApi(
        '/calculations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all calculations
     * This endpoints returns all calculation requests.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Page number to be viewed (default to 1)
     * @return { Promise.< module:model/CalculationsSummaryRoot > } a Promise, with data of type {@link module:model/CalculationsSummaryRoot }
     */
    gipsGetAllCalculations(opts) {
      return this.gipsGetAllCalculationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get GIPS calculation status by id
     * This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
     * @param {String} id from url, provided from the location header in the Create and Run GIPS calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationStatusRoot} and HTTP response
     */
    gipsGetCalculationStatusByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gipsGetCalculationStatusById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CalculationStatusRoot;

      return this.apiClient.callApi(
        '/calculations/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get GIPS calculation status by id
     * This is the endpoint to check on the progress of a previously requested calculation.  If the calculation has finished computing, the location header will point to the result url.
     * @param {String} id from url, provided from the location header in the Create and Run GIPS calculation endpoint
     * @return { Promise.< module:model/CalculationStatusRoot > } a Promise, with data of type {@link module:model/CalculationStatusRoot }
     */
    gipsGetCalculationStatusById(id) {
      return this.gipsGetCalculationStatusByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get GIPS calculation result by id
     * This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
     * @param {String} id from url, provided from the location header in the Get GIPS calculation status by id endpoint
     * @param {String} unitId from url, provided from the location header in the Get GIPS calculation status by id endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FactSetProtobufStachV3StachV3Table} and HTTP response
     */
    gipsGetCalculationUnitResultByIdWithHttpInfo(id, unitId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gipsGetCalculationUnitResultById");
      }
      // verify the required parameter 'unitId' is set
      if (unitId === undefined || unitId === null) {
        throw new Error("Missing the required parameter 'unitId' when calling gipsGetCalculationUnitResultById");
      }

      let pathParams = {
        'id': id,
        'unitId': unitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/stach.v3+json', 'application/json'];


      let returnType = FactSetProtobufStachV3StachV3Table;

      return this.apiClient.callApi(
        '/calculations/{id}/units/{unitId}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get GIPS calculation result by id
     * This is the endpoint to get the result of a previously requested calculation.  If the calculation has finished computing, the body of the response will contain the requested document in JSON.
     * @param {String} id from url, provided from the location header in the Get GIPS calculation status by id endpoint
     * @param {String} unitId from url, provided from the location header in the Get GIPS calculation status by id endpoint
     * @return { Promise.< module:model/FactSetProtobufStachV3StachV3Table > } a Promise, with data of type {@link module:model/FactSetProtobufStachV3StachV3Table }
     */
    gipsGetCalculationUnitResultById(id, unitId) {
      return this.gipsGetCalculationUnitResultByIdWithHttpInfo(id, unitId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create and Run GIPS calculation
     * This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts max-stale.
     * @param {module:model/GIPSCalculationParametersRoot} opts.gIPSCalculationParametersRoot The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationStatusRoot} and HTTP response
     */
    gipsPostAndCalculateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['gIPSCalculationParametersRoot'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-FactSet-Api-Long-Running-Deadline': opts['xFactSetApiLongRunningDeadline'],
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CalculationStatusRoot;

      return this.apiClient.callApi(
        '/calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create and Run GIPS calculation
     * This endpoint runs the GIPS calculation specified in the POST body parameters.  It can take upto 2 units.    Remarks:    * Any settings in POST body will act as a one-time override over the settings saved in the GIPS template.  Use this endpoint to trigger calculation requests.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xFactSetApiLongRunningDeadline The number of seconds the request will wait before sending back the response. If not provided, 20 will be used as default.
     * @param {String} opts.cacheControl Standard HTTP header.  Accepts max-stale.
     * @param {module:model/GIPSCalculationParametersRoot} opts.gIPSCalculationParametersRoot The request body contains the information needed to run a calculation, e.g. the GIPS composite. See the schema for more details.
     * @return { Promise.< module:model/CalculationStatusRoot > } a Promise, with data of type {@link module:model/CalculationStatusRoot }
     */
    gipsPostAndCalculate(opts) {
      return this.gipsPostAndCalculateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





