/**
 * GIPS API
 * Allow clients to use GIPS through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FactSetProtobufFormatV1NumberFormatTypesCurrencyStandardSpecifier from './FactSetProtobufFormatV1NumberFormatTypesCurrencyStandardSpecifier';
import FactSetProtobufFormatV1NumberFormatTypesDigits from './FactSetProtobufFormatV1NumberFormatTypesDigits';
import FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier from './FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier';
import FactSetProtobufFormatV1NumberFormatTypesNumericStandardSpecifier from './FactSetProtobufFormatV1NumberFormatTypesNumericStandardSpecifier';
import FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier from './FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier';
import FactSetProtobufFormatV1NumberFormatTypesRounding from './FactSetProtobufFormatV1NumberFormatTypesRounding';

/**
 * The FactSetProtobufFormatV1NumberFormat model module.
 * @module model/FactSetProtobufFormatV1NumberFormat
 */
class FactSetProtobufFormatV1NumberFormat {
    /**
     * Constructs a new <code>FactSetProtobufFormatV1NumberFormat</code>.
     * @alias module:model/FactSetProtobufFormatV1NumberFormat
     */
    constructor() { 
        
        FactSetProtobufFormatV1NumberFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FactSetProtobufFormatV1NumberFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FactSetProtobufFormatV1NumberFormat} obj Optional instance to populate.
     * @return {module:model/FactSetProtobufFormatV1NumberFormat} The populated <code>FactSetProtobufFormatV1NumberFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FactSetProtobufFormatV1NumberFormat();

            if (data.hasOwnProperty('currencySpecifier')) {
                obj['currencySpecifier'] = FactSetProtobufFormatV1NumberFormatTypesCurrencyStandardSpecifier.constructFromObject(data['currencySpecifier']);
            }
            if (data.hasOwnProperty('exponentialSpecifier')) {
                obj['exponentialSpecifier'] = FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier.constructFromObject(data['exponentialSpecifier']);
            }
            if (data.hasOwnProperty('numericSpecifier')) {
                obj['numericSpecifier'] = FactSetProtobufFormatV1NumberFormatTypesNumericStandardSpecifier.constructFromObject(data['numericSpecifier']);
            }
            if (data.hasOwnProperty('percentSpecifier')) {
                obj['percentSpecifier'] = FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier.constructFromObject(data['percentSpecifier']);
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('currencySymbol')) {
                obj['currencySymbol'] = ApiClient.convertToType(data['currencySymbol'], 'String');
            }
            if (data.hasOwnProperty('zeroValue')) {
                obj['zeroValue'] = ApiClient.convertToType(data['zeroValue'], 'String');
            }
            if (data.hasOwnProperty('digits')) {
                obj['digits'] = ApiClient.convertToType(data['digits'], ['String']);
            }
            if (data.hasOwnProperty('negativeSign')) {
                obj['negativeSign'] = ApiClient.convertToType(data['negativeSign'], 'String');
            }
            if (data.hasOwnProperty('positiveSign')) {
                obj['positiveSign'] = ApiClient.convertToType(data['positiveSign'], 'String');
            }
            if (data.hasOwnProperty('decimalDigits')) {
                obj['decimalDigits'] = ApiClient.convertToType(data['decimalDigits'], 'Number');
            }
            if (data.hasOwnProperty('decimalSeparator')) {
                obj['decimalSeparator'] = ApiClient.convertToType(data['decimalSeparator'], 'String');
            }
            if (data.hasOwnProperty('groupSeparator')) {
                obj['groupSeparator'] = ApiClient.convertToType(data['groupSeparator'], 'String');
            }
            if (data.hasOwnProperty('groupSizes')) {
                obj['groupSizes'] = ApiClient.convertToType(data['groupSizes'], ['Number']);
            }
            if (data.hasOwnProperty('negativeInfinitySymbol')) {
                obj['negativeInfinitySymbol'] = ApiClient.convertToType(data['negativeInfinitySymbol'], 'String');
            }
            if (data.hasOwnProperty('positiveInfinitySymbol')) {
                obj['positiveInfinitySymbol'] = ApiClient.convertToType(data['positiveInfinitySymbol'], 'String');
            }
            if (data.hasOwnProperty('nanSymbol')) {
                obj['nanSymbol'] = ApiClient.convertToType(data['nanSymbol'], 'String');
            }
            if (data.hasOwnProperty('percentSymbol')) {
                obj['percentSymbol'] = ApiClient.convertToType(data['percentSymbol'], 'String');
            }
            if (data.hasOwnProperty('perMilleSymbol')) {
                obj['perMilleSymbol'] = ApiClient.convertToType(data['perMilleSymbol'], 'String');
            }
            if (data.hasOwnProperty('digitSubstitution')) {
                obj['digitSubstitution'] = FactSetProtobufFormatV1NumberFormatTypesDigits.constructFromObject(data['digitSubstitution']);
            }
            if (data.hasOwnProperty('rounding')) {
                obj['rounding'] = FactSetProtobufFormatV1NumberFormatTypesRounding.constructFromObject(data['rounding']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/FactSetProtobufFormatV1NumberFormatTypesCurrencyStandardSpecifier} currencySpecifier
 */
FactSetProtobufFormatV1NumberFormat.prototype['currencySpecifier'] = undefined;

/**
 * @member {module:model/FactSetProtobufFormatV1NumberFormatTypesExponentialStandardSpecifier} exponentialSpecifier
 */
FactSetProtobufFormatV1NumberFormat.prototype['exponentialSpecifier'] = undefined;

/**
 * @member {module:model/FactSetProtobufFormatV1NumberFormatTypesNumericStandardSpecifier} numericSpecifier
 */
FactSetProtobufFormatV1NumberFormat.prototype['numericSpecifier'] = undefined;

/**
 * @member {module:model/FactSetProtobufFormatV1NumberFormatTypesPercentStandardSpecifier} percentSpecifier
 */
FactSetProtobufFormatV1NumberFormat.prototype['percentSpecifier'] = undefined;

/**
 * @member {String} currencyCode
 */
FactSetProtobufFormatV1NumberFormat.prototype['currencyCode'] = undefined;

/**
 * @member {String} currencySymbol
 */
FactSetProtobufFormatV1NumberFormat.prototype['currencySymbol'] = undefined;

/**
 * @member {String} zeroValue
 */
FactSetProtobufFormatV1NumberFormat.prototype['zeroValue'] = undefined;

/**
 * @member {Array.<String>} digits
 */
FactSetProtobufFormatV1NumberFormat.prototype['digits'] = undefined;

/**
 * @member {String} negativeSign
 */
FactSetProtobufFormatV1NumberFormat.prototype['negativeSign'] = undefined;

/**
 * @member {String} positiveSign
 */
FactSetProtobufFormatV1NumberFormat.prototype['positiveSign'] = undefined;

/**
 * @member {Number} decimalDigits
 */
FactSetProtobufFormatV1NumberFormat.prototype['decimalDigits'] = undefined;

/**
 * @member {String} decimalSeparator
 */
FactSetProtobufFormatV1NumberFormat.prototype['decimalSeparator'] = undefined;

/**
 * @member {String} groupSeparator
 */
FactSetProtobufFormatV1NumberFormat.prototype['groupSeparator'] = undefined;

/**
 * @member {Array.<Number>} groupSizes
 */
FactSetProtobufFormatV1NumberFormat.prototype['groupSizes'] = undefined;

/**
 * @member {String} negativeInfinitySymbol
 */
FactSetProtobufFormatV1NumberFormat.prototype['negativeInfinitySymbol'] = undefined;

/**
 * @member {String} positiveInfinitySymbol
 */
FactSetProtobufFormatV1NumberFormat.prototype['positiveInfinitySymbol'] = undefined;

/**
 * @member {String} nanSymbol
 */
FactSetProtobufFormatV1NumberFormat.prototype['nanSymbol'] = undefined;

/**
 * @member {String} percentSymbol
 */
FactSetProtobufFormatV1NumberFormat.prototype['percentSymbol'] = undefined;

/**
 * @member {String} perMilleSymbol
 */
FactSetProtobufFormatV1NumberFormat.prototype['perMilleSymbol'] = undefined;

/**
 * @member {module:model/FactSetProtobufFormatV1NumberFormatTypesDigits} digitSubstitution
 */
FactSetProtobufFormatV1NumberFormat.prototype['digitSubstitution'] = undefined;

/**
 * @member {module:model/FactSetProtobufFormatV1NumberFormatTypesRounding} rounding
 */
FactSetProtobufFormatV1NumberFormat.prototype['rounding'] = undefined;






export default FactSetProtobufFormatV1NumberFormat;

