/**
 * Global Filings API
 *  The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  The reference endpoints, such as sources, formTypes, timeZones, and categories, provide comprehensive lists of available sources, form types, time zones, and categories, respectively.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import InvestmentResearch from '../model/InvestmentResearch';
import ResponseCategies from '../model/ResponseCategies';
import ResponseCount from '../model/ResponseCount';
import ResponseFormtype from '../model/ResponseFormtype';
import ResponseSources from '../model/ResponseSources';
import ResponseTime from '../model/ResponseTime';

/**
* FilingsAPI service.
* @module api/FilingsAPIApi
*/
export default class FilingsAPIApi {

    /**
    * Constructs a new FilingsAPIApi. 
    * @alias module:api/FilingsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the count of filings for specified source.
     * Returns the count of filings documents along with other response fields.
     * @param {Array.<String>} sources Code for document source to include.This is a comma-separated list. Use the ```/reference/sources``` endpoint to get the list of available sources.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  **Note:** **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.**  (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseCount} and HTTP response
     */
    getCountWithHttpInfo(sources, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling getCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'sources': this.apiClient.buildCollectionParam(sources, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseCount;

      return this.apiClient.callApi(
        '/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the count of filings for specified source.
     * Returns the count of filings documents along with other response fields.
     * @param {Array.<String>} sources Code for document source to include.This is a comma-separated list. Use the ```/reference/sources``` endpoint to get the list of available sources.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  **Note:** **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.**  (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @return { Promise.< module:model/ResponseCount > } a Promise, with data of type {@link module:model/ResponseCount }
     */
    getCount(sources, opts) {
      return this.getCountWithHttpInfo(sources, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the filings documents and related metadata within FactSet coverage.
     * Returns the filings documents within FactSet coverage along with other response fields.
     * @param {Array.<String>} sources Code for document source to include.  This is a comma-separated list. Use the ```/reference/sources``` endpoint to get the list of available sources.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  **Note:** **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.**  (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return.
     * @param {String} opts.timeZone timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (default to 'America/New_York')
     * @param {module:model/String} opts.sort Sorting the results in chronological (oldest to newest) or reverse chronological (newest to oldest) order.    *  desc - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn't used in the query.       *   asc - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.  (default to 'desc')
     * @param {Array.<String>} opts.categories Code for categories to include.  This is a comma-separated list. Use the ```/reference/categories``` endpoint to get the list of available categories.  Default = All categories.
     * @param {module:model/Boolean} opts.primaryId Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (default to false)
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.
     * @param {String} opts.edgarFormType Restricts the search to include any form types of EDGAR.  **Note:This parameter applies exclusively to EDGAR searches; it is ignored when used with non-EDGAR sources.** 
     * @param {String} opts.edgarAccession A unique identifier given to each EDGAR filings document. e.g. accession=0001013237-21-000069&sources=EDG.  **Note:  When used in conjunction with the 'source' parameter set to 'EDGAR', the API considers this accession for data retrieval. For non-EDGAR sources, this parameter is ignored.**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestmentResearch} and HTTP response
     */
    getFilingsWithHttpInfo(sources, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling getFilings");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset'],
        'timeZone': opts['timeZone'],
        'sort': opts['sort'],
        'sources': this.apiClient.buildCollectionParam(sources, 'csv'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'csv'),
        'primaryId': opts['primaryId'],
        'searchText': opts['searchText'],
        'edgarFormType': opts['edgarFormType'],
        'edgarAccession': opts['edgarAccession']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InvestmentResearch;

      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the filings documents and related metadata within FactSet coverage.
     * Returns the filings documents within FactSet coverage along with other response fields.
     * @param {Array.<String>} sources Code for document source to include.  This is a comma-separated list. Use the ```/reference/sources``` endpoint to get the list of available sources.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @param {String} opts.startDate Start Date. Format is YYYYMMDD or relative +/- days (0,-1,etc).  **Note:** **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.**  (default to '0')
     * @param {String} opts.endDate End Date. Format is YYYYMMDD or relative +/- days (0,-1,etc). (default to '0')
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return.
     * @param {String} opts.timeZone timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. (default to 'America/New_York')
     * @param {module:model/String} opts.sort Sorting the results in chronological (oldest to newest) or reverse chronological (newest to oldest) order.    *  desc - sorting results in reverse chronological (descending) order. This is the default value if     the sort parameter isn't used in the query.       *   asc - sorting results in chronological (ascending) order. If a start date is not specified, the    API has a 10-year searching limitation.  (default to 'desc')
     * @param {Array.<String>} opts.categories Code for categories to include.  This is a comma-separated list. Use the ```/reference/categories``` endpoint to get the list of available categories.  Default = All categories.
     * @param {module:model/Boolean} opts.primaryId Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (default to false)
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.
     * @param {String} opts.edgarFormType Restricts the search to include any form types of EDGAR.  **Note:This parameter applies exclusively to EDGAR searches; it is ignored when used with non-EDGAR sources.** 
     * @param {String} opts.edgarAccession A unique identifier given to each EDGAR filings document. e.g. accession=0001013237-21-000069&sources=EDG.  **Note:  When used in conjunction with the 'source' parameter set to 'EDGAR', the API considers this accession for data retrieval. For non-EDGAR sources, this parameter is ignored.**
     * @return { Promise.< module:model/InvestmentResearch > } a Promise, with data of type {@link module:model/InvestmentResearch }
     */
    getFilings(sources, opts) {
      return this.getFilingsWithHttpInfo(sources, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the form types of EDGAR.
     *  Retrieves and delivers a comprehensive list of all available  `formTypes`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseFormtype} and HTTP response
     */
    getFormtypeWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseFormtype;

      return this.apiClient.callApi(
        '/reference/form-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the form types of EDGAR.
     *  Retrieves and delivers a comprehensive list of all available  `formTypes`.
     * @return { Promise.< module:model/ResponseFormtype > } a Promise, with data of type {@link module:model/ResponseFormtype }
     */
    getFormtype() {
      return this.getFormtypeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the sources.
     * Retrieves and delivers a comprehensive list of all available `sources`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseSources} and HTTP response
     */
    getSourcesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseSources;

      return this.apiClient.callApi(
        '/reference/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the sources.
     * Retrieves and delivers a comprehensive list of all available `sources`.
     * @return { Promise.< module:model/ResponseSources > } a Promise, with data of type {@link module:model/ResponseSources }
     */
    getSources() {
      return this.getSourcesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `timeZones`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseTime} and HTTP response
     */
    getTimezoneWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseTime;

      return this.apiClient.callApi(
        '/reference/time-zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `timeZones`.
     * @return { Promise.< module:model/ResponseTime > } a Promise, with data of type {@link module:model/ResponseTime }
     */
    getTimezone() {
      return this.getTimezoneWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseCategies} and HTTP response
     */
    getcategoriesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseCategies;

      return this.apiClient.callApi(
        '/reference/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`.
     * @return { Promise.< module:model/ResponseCategies > } a Promise, with data of type {@link module:model/ResponseCategies }
     */
    getcategories() {
      return this.getcategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





