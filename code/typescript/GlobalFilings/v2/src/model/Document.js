/**
 * Global Filings API
 *  The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  The meta endpoints, such as sources, formTypes, timeZones, and categories, provide comprehensive lists of available sources, form types, time zones, and categories, respectively.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Document model module.
 * @module model/Document
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * Array of data objects
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('primaryIds')) {
                obj['primaryIds'] = ApiClient.convertToType(data['primaryIds'], ['String']);
            }
            if (data.hasOwnProperty('allIds')) {
                obj['allIds'] = ApiClient.convertToType(data['allIds'], ['String']);
            }
            if (data.hasOwnProperty('filingsDateTime')) {
                obj['filingsDateTime'] = ApiClient.convertToType(data['filingsDateTime'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('filingsLink')) {
                obj['filingsLink'] = ApiClient.convertToType(data['filingsLink'], 'String');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('filingSize')) {
                obj['filingSize'] = ApiClient.convertToType(data['filingSize'], 'String');
            }
            if (data.hasOwnProperty('formTypes')) {
                obj['formTypes'] = ApiClient.convertToType(data['formTypes'], ['String']);
            }
            if (data.hasOwnProperty('accession')) {
                obj['accession'] = ApiClient.convertToType(data['accession'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Headline of the story, actual time and date of the event.
 * @member {String} headline
 */
Document.prototype['headline'] = undefined;

/**
 * Provides the source of the document, and the source value is one among those provided by the `/meta/sources` endpoint.
 * @member {String} source
 */
Document.prototype['source'] = undefined;

/**
 * Refers to the main company a particular document refers to.
 * @member {Array.<String>} primaryIds
 */
Document.prototype['primaryIds'] = undefined;

/**
 * Refers to all companies mentioned in the document. This could also include the primary company id as well.   **Note:** For the \"allIds\" and \"primaryIds\" fields:   - These identifiers can be either SEDOLs or CUSIPs, depending on the search criteria and the type of identifiers specified in your request.   - The API will return the corresponding identifiers based on the search parameters provided.
 * @member {Array.<String>} allIds
 */
Document.prototype['allIds'] = undefined;

/**
 * Publish date and time of the latest version (in ISO 8601 format, UTC).
 * @member {String} filingsDateTime
 */
Document.prototype['filingsDateTime'] = undefined;

/**
 * Categories are Country, Industry, and Subject codes. This is a comma-separated list retrieved from `/meta/categories`
 * @member {Array.<String>} categories
 */
Document.prototype['categories'] = undefined;

/**
 * A secure HTTPS link for downloading the associated document.
 * @member {String} filingsLink
 */
Document.prototype['filingsLink'] = undefined;

/**
 * Unique identifier for a document.
 * @member {String} documentId
 */
Document.prototype['documentId'] = undefined;

/**
 * Filings specific metadata providing info around the size of the document.
 * @member {String} filingSize
 */
Document.prototype['filingSize'] = undefined;

/**
 * Filings specific metadata providing info around the form type (e.g. 8K, 10K, etc.)
 * @member {Array.<String>} formTypes
 */
Document.prototype['formTypes'] = undefined;

/**
 * A unique identifier given to each EDGAR filings document.
 * @member {String} accession
 */
Document.prototype['accession'] = undefined;






export default Document;

