/**
 * Global Filings API
 *  The Filings API provides a comprehensive set of functionalities for searching and retrieving filing documents from various sources.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  In addition, a document count request will provide information on the number of stories available for a particular security.  The meta endpoints, such as sources, formTypes, timeZones, and categories, provide comprehensive lists of available sources, form types, time zones, and categories, respectively.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryResponse from '../model/CategoryResponse';
import ErrorResponse from '../model/ErrorResponse';
import FormTypeResponse from '../model/FormTypeResponse';
import SourceResponse from '../model/SourceResponse';
import TimeZoneResponse from '../model/TimeZoneResponse';

/**
* Meta service.
* @module api/MetaApi
*/
export default class MetaApi {

    /**
    * Constructs a new MetaApi. 
    * @alias module:api/MetaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the form types of specified sources.
     *  Retrieves and delivers a comprehensive list of all available  `formTypes`.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sources Code for document source to include.  This is a comma-separated list. Use the `/meta/sources` endpoint to get the list of available sources.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FormTypeResponse} and HTTP response
     */
    getFormtypeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sources': this.apiClient.buildCollectionParam(opts['sources'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FormTypeResponse;

      return this.apiClient.callApi(
        '/meta/form-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the form types of specified sources.
     *  Retrieves and delivers a comprehensive list of all available  `formTypes`.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sources Code for document source to include.  This is a comma-separated list. Use the `/meta/sources` endpoint to get the list of available sources.
     * @return { Promise.< module:model/FormTypeResponse > } a Promise, with data of type {@link module:model/FormTypeResponse }
     */
    getFormtype(opts) {
      return this.getFormtypeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the sources.
     * Retrieves and delivers a comprehensive list of all available `sources`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceResponse} and HTTP response
     */
    getSourcesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SourceResponse;

      return this.apiClient.callApi(
        '/meta/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the sources.
     * Retrieves and delivers a comprehensive list of all available `sources`.
     * @return { Promise.< module:model/SourceResponse > } a Promise, with data of type {@link module:model/SourceResponse }
     */
    getSources() {
      return this.getSourcesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `timeZones`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TimeZoneResponse} and HTTP response
     */
    getTimezoneWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TimeZoneResponse;

      return this.apiClient.callApi(
        '/meta/time-zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `timeZones`.
     * @return { Promise.< module:model/TimeZoneResponse > } a Promise, with data of type {@link module:model/TimeZoneResponse }
     */
    getTimezone() {
      return this.getTimezoneWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    getcategoriesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CategoryResponse;

      return this.apiClient.callApi(
        '/meta/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`.
     * @return { Promise.< module:model/CategoryResponse > } a Promise, with data of type {@link module:model/CategoryResponse }
     */
    getcategories() {
      return this.getcategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





