/**
 * Conversational API Powered by FactSet Mercury
 * ### OVERVIEW  The FactSet Conversational API allows clients to integrate core FactSet Mercury capabilities in chatbot experiences.  The Conversational API is powered by FactSet Mercury, FactSet's Generative Artificial Intelligence (GenAI) large language model. The Conversational API provides a variety of content and capabilities, including FactSet’s Federation layer (FactSet’s core GenAI-based technology), as well as more specific content and functionality tailored for financial services workflows.  The Conversational API provides answers to hundreds of natural language search queries and allows you to easily ask questions related to companies and markets research.  Some example supported prompts:  - Nintendo's highest closing stock price over the last 3 months - Has Yelp issued any guidance? - What are the key trends impacting costs for DaVita?  **For Information on Access to and Content Available via the Conversational API**  Please see the [Conversational API Online Assistant Page](https://my.apps.factset.com/oa/pages/23209). Here you can find instructions on how to set up access to the Conversational API, and the full list of content available.  #### Conversational API Consumer Workflow  The Conversational API is an asynchronous API that utilizes status polling to inform the consumer when a query response is complete. Please see the technical OpenAPI documentation below for specific information regarding consuming the API programmatically.  At a high level, the API consumer workflow is as follows:  1) Send a natural language query to the `/query` endpoint and start the response generation process. 2) Poll the status of the response generation process using the `/status` endpoint. 3) Once the status indicates a ready response, retrieve it using the `/result` endpoint.  - If your response contains a file ID, such as for an Excel chart or a [FactSet ActiveGraph](https://my.apps.factset.com/oa/pages/20355), retrieve it using the file ID at the `/download/file` endpoint. - To provide feedback on your response and help the Conversational API better serve you content, we encourage you to use the `/feedback` endpoint.   #### Receive updates on changes to the Conversational API Subscribe to our FactSet Notify by clicking \"Subscribe to notifications\" in the upper right above the API overview. You will receive email updates when any updates occur to the API  #### FAQ & Troubleshooting Please find FAQs and troubleshooting tips in the [FAQs section](https://my.apps.factset.com/oa/pages/23440) of the Conversational API OA page  ##### Current Limitations  - \"Natural language\" in this documentation refers to modern conversational English. Support for other languages is currently unavailable. - The Conversational API is currently limited to accept 10 natural language queries per minute and 200 per hour for an individual consumer. If you anticipate your needs to be greater than these limits, please reach out to FactSet Support. 
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceNotFoundErrorObject model module.
 * @module model/ResourceNotFoundErrorObject
 */
class ResourceNotFoundErrorObject {
    /**
     * Constructs a new <code>ResourceNotFoundErrorObject</code>.
     * Single error object returned in response to a request for a non-existent resource
     * @alias module:model/ResourceNotFoundErrorObject
     * @param id {String} Id of error
     * @param title {module:model/ResourceNotFoundErrorObject.TitleEnum} Title of error
     * @param code {module:model/ResourceNotFoundErrorObject.CodeEnum} Code of error
     * @param detail {String} Details of error
     */
    constructor(id, title, code, detail) { 
        
        ResourceNotFoundErrorObject.initialize(this, id, title, code, detail);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title, code, detail) { 
        obj['id'] = id;
        obj['title'] = title;
        obj['code'] = code;
        obj['detail'] = detail;
    }

    /**
     * Constructs a <code>ResourceNotFoundErrorObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceNotFoundErrorObject} obj Optional instance to populate.
     * @return {module:model/ResourceNotFoundErrorObject} The populated <code>ResourceNotFoundErrorObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceNotFoundErrorObject();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Id of error
 * @member {String} id
 */
ResourceNotFoundErrorObject.prototype['id'] = undefined;

/**
 * Title of error
 * @member {module:model/ResourceNotFoundErrorObject.TitleEnum} title
 */
ResourceNotFoundErrorObject.prototype['title'] = undefined;

/**
 * Code of error
 * @member {module:model/ResourceNotFoundErrorObject.CodeEnum} code
 */
ResourceNotFoundErrorObject.prototype['code'] = undefined;

/**
 * Details of error
 * @member {String} detail
 */
ResourceNotFoundErrorObject.prototype['detail'] = undefined;





/**
 * Allowed values for the <code>title</code> property.
 * @enum {String}
 * @readonly
 */
ResourceNotFoundErrorObject['TitleEnum'] = {

    /**
     * value: "Endpoint Not Found"
     * @const
     */
    "Endpoint Not Found": "Endpoint Not Found",

    /**
     * value: "Not Found"
     * @const
     */
    "Not Found": "Not Found"
};


/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
ResourceNotFoundErrorObject['CodeEnum'] = {

    /**
     * value: "endpointNotFound"
     * @const
     */
    "endpointNotFound": "endpointNotFound",

    /**
     * value: "conversational_api_resourceNotFound"
     * @const
     */
    "conversational_api_resourceNotFound": "conversational_api_resourceNotFound"
};



export default ResourceNotFoundErrorObject;

