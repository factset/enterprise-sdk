/**
 * Chart Generation Service
 * This is a service for generating charts in a node environment that were created using web charting and get back images in form of `PNGs` and `JPEGs` as response.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoriesErrorResponse from '../model/CategoriesErrorResponse';
import CategoryChartListErrorObject from '../model/CategoryChartListErrorObject';
import ChartListErrorResponse from '../model/ChartListErrorResponse';
import ErrorResponse from '../model/ErrorResponse';
import UnauthorizedResponse from '../model/UnauthorizedResponse';

/**
* ChartTemplates service.
* @module api/ChartTemplatesApi
*/
export default class ChartTemplatesApi {

    /**
    * Constructs a new ChartTemplatesApi. 
    * @alias module:api/ChartTemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a list of chart categories
     * Retrieve a list of all chart categories with getCategoryList() API call.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getCategoryListWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ['String'];

      return this.apiClient.callApi(
        '/catalog/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of chart categories
     * Retrieve a list of all chart categories with getCategoryList() API call.
     * @return { Promise.< Array.<String> > } a Promise, with data of type {@link Array.<String> }
     */
    getCategoryList() {
      return this.getCategoryListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of chart templates that can be used for getting the image from the service.
     * You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.categories A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CategoryChartListErrorObject>} and HTTP response
     */
    getChartListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'categories': opts['categories']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [CategoryChartListErrorObject];

      return this.apiClient.callApi(
        '/catalog/charts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of chart templates that can be used for getting the image from the service.
     * You can get all the charts present or can just get the information by categories. The response includes the name of the chart, description, tags and any additional input specific to that chart. Use the information from this response to determine what charts you want and get its image from /images endpoint. Additionally you can also get back a auto generated PDF for the categories you requested for.
     * @param {Object} opts Optional parameters
     * @param {String} opts.categories A comma delimited string of catgory names to limit the response to certain categories. If nothing is provided, all charts under every category would be listed out.
     * @return { Promise.< Array.<module:model/CategoryChartListErrorObject> > } a Promise, with data of type {@link Array.<module:model/CategoryChartListErrorObject> }
     */
    getChartList(opts) {
      return this.getChartListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get chart image back in PNG or JPEG formats
     * Get a chart image in PNG or JPEG formats with the images() API call.
     * @param {String} chart Path to the saved chart. For any of the default charts, the option should be `categoryName + '/' + chartName`. For charts under the Client or Personal directories, the option should be `directoryName + ':/' + pathTotheChart`.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker.
     * @param {String} opts.sd Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in `YYYYMMDD` format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \"zero date\" is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** `0D` is the most recent trading day, `-1D` is one trading day prior  **M:** `0M` is the last trading day of the most recent month, `-1M` is the last trading day of the prior month  **AY:** `0AY` is the most recent trading day, `-1AY` is one actual year (365 days) prior  **Y:** `0Y` is the last trading day of the company's most recent fiscal year, `-1Y` is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f).
     * @param {String} opts.ed Option for overriding the endDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options as described in the above `sd` option.
     * @param {Number} opts.width Option for setting the width of the image (default to 1056)
     * @param {Number} opts.height Option for setting the height of the image (default to 816)
     * @param {String} opts.freq A shorthand string for the overall frequency of the chart like `D` (daily), `W` (weekly), `Y` (yearly) and `Q` (Quarterly). This will default to frequency stored in the document.
     * @param {String} opts.ccy Currency ISO code for the overall currency of the chart. The API doesn't allow per series currency at this point in time.
     * @param {module:model/String} opts.split Option to specify the splits adjustment
     * @param {module:model/Number} opts.spin Numeric option to specify the spinOffs adjustment. Possible options include `0` (When we only want spits adjustment), `1` (spinOffs), `4` (spinOffs and cash dividends) and `9` (No adjustments)
     * @param {module:model/String} opts.cal Option for the calendarType of the chart (default to 'local')
     * @param {String} opts.title Option to customize the title. If you don't customize the title, then it displays by default the security name.
     * @param {Number} opts.fontSize Option to adjust chart's fontSize
     * @param {module:model/String} opts.type The type of image to be generated by the service (default to 'png')
     * @param {Boolean} opts.gridLines Option to toggle gridLines on/off on the chart (default to true)
     * @param {Number} opts.decimalPrecision Option to add custom decimal precision on the chart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    imagesWithHttpInfo(chart, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'chart' is set
      if (chart === undefined || chart === null) {
        throw new Error("Missing the required parameter 'chart' when calling images");
      }

      let pathParams = {
      };
      let queryParams = {
        'chart': chart,
        'ids': opts['ids'],
        'sd': opts['sd'],
        'ed': opts['ed'],
        'width': opts['width'],
        'height': opts['height'],
        'freq': opts['freq'],
        'ccy': opts['ccy'],
        'split': opts['split'],
        'spin': opts['spin'],
        'cal': opts['cal'],
        'title': opts['title'],
        'fontSize': opts['fontSize'],
        'type': opts['type'],
        'gridLines': opts['gridLines'],
        'decimalPrecision': opts['decimalPrecision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['img/png', 'img/jpeg', 'application/json'];


      let returnType = File;

      return this.apiClient.callApi(
        '/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get chart image back in PNG or JPEG formats
     * Get a chart image in PNG or JPEG formats with the images() API call.
     * @param {String} chart Path to the saved chart. For any of the default charts, the option should be `categoryName + '/' + chartName`. For charts under the Client or Personal directories, the option should be `directoryName + ':/' + pathTotheChart`.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.ids List of identifiers to be charted in a comma(,) separated string. Only the first one would be considered as primary and rest would be added as comps. Check the catalog for more information on which charts require a ticker.
     * @param {String} opts.sd Option for overriding the startDate of the chart.  #### Absolute Dates  For absolute dates, provide a string in `YYYYMMDD` format.  #### Relative Dates  Relative dates represent a date relative to the most recently-updated period. For example, 0 (zero) represents the most recently-updated period; -1 represents the time period prior to the most recently updated.\\ \\ The \"zero date\" is determined by the default time period or the natural frequency of the data being requested. Zero (0), when used with monthly data, indicates the most recent month-end. Negative one (-1), when used with annual data, indicates one fiscal year prior to the most recently-updated fiscal year.  #### Relative Date Options  **D:** `0D` is the most recent trading day, `-1D` is one trading day prior  **M:** `0M` is the last trading day of the most recent month, `-1M` is the last trading day of the prior month  **AY:** `0AY` is the most recent trading day, `-1AY` is one actual year (365 days) prior  **Y:** `0Y` is the last trading day of the company's most recent fiscal year, `-1Y` is the last trading day of the prior fiscal year\\ \\ For more information and examples, refer to our [date format documentation](https://my.apps.factset.com/oa/pages/1964#date_f).
     * @param {String} opts.ed Option for overriding the endDate of the chart. For absolute dates provide a string in `YYYYMMDD` format. We can also specify relative date options as described in the above `sd` option.
     * @param {Number} opts.width Option for setting the width of the image (default to 1056)
     * @param {Number} opts.height Option for setting the height of the image (default to 816)
     * @param {String} opts.freq A shorthand string for the overall frequency of the chart like `D` (daily), `W` (weekly), `Y` (yearly) and `Q` (Quarterly). This will default to frequency stored in the document.
     * @param {String} opts.ccy Currency ISO code for the overall currency of the chart. The API doesn't allow per series currency at this point in time.
     * @param {module:model/String} opts.split Option to specify the splits adjustment
     * @param {module:model/Number} opts.spin Numeric option to specify the spinOffs adjustment. Possible options include `0` (When we only want spits adjustment), `1` (spinOffs), `4` (spinOffs and cash dividends) and `9` (No adjustments)
     * @param {module:model/String} opts.cal Option for the calendarType of the chart (default to 'local')
     * @param {String} opts.title Option to customize the title. If you don't customize the title, then it displays by default the security name.
     * @param {Number} opts.fontSize Option to adjust chart's fontSize
     * @param {module:model/String} opts.type The type of image to be generated by the service (default to 'png')
     * @param {Boolean} opts.gridLines Option to toggle gridLines on/off on the chart (default to true)
     * @param {Number} opts.decimalPrecision Option to add custom decimal precision on the chart
     * @return { Promise.< File > } a Promise, with data of type {@link File }
     */
    images(chart, opts) {
      return this.imagesWithHttpInfo(chart, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





