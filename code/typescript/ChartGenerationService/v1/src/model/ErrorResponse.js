/**
 * Chart Generation Service
 * This is a service for generating charts in a node environment that were created using web charting and get back images in form of `PNGs` and `JPEGs` as response.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChartErrorResponseObject from './ChartErrorResponseObject';

/**
 * The ErrorResponse model module.
 * @module model/ErrorResponse
 */
class ErrorResponse {
    /**
     * Constructs a new <code>ErrorResponse</code>.
     * @alias module:model/ErrorResponse
     */
    constructor() { 
        
        ErrorResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorResponse} obj Optional instance to populate.
     * @return {module:model/ErrorResponse} The populated <code>ErrorResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorResponse();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ChartErrorResponseObject]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ErrorResponse.ErrorEnum} error
 */
ErrorResponse.prototype['error'] = undefined;

/**
 * @member {Array.<module:model/ChartErrorResponseObject>} errors
 */
ErrorResponse.prototype['errors'] = undefined;





/**
 * Allowed values for the <code>error</code> property.
 * @enum {String}
 * @readonly
 */
ErrorResponse['ErrorEnum'] = {

    /**
     * value: "Missing chart document"
     * @const
     */
    "Missing chart document": "Missing chart document",

    /**
     * value: "Failed to fetch saved chart document"
     * @const
     */
    "Failed to fetch saved chart document": "Failed to fetch saved chart document",

    /**
     * value: "Invalid chart width"
     * @const
     */
    "Invalid chart width": "Invalid chart width",

    /**
     * value: "Invalid chart height"
     * @const
     */
    "Invalid chart height": "Invalid chart height",

    /**
     * value: "Invalid showEolLabels option"
     * @const
     */
    "Invalid showEolLabels option": "Invalid showEolLabels option",

    /**
     * value: "Invalid show footer option"
     * @const
     */
    "Invalid show footer option": "Invalid show footer option",

    /**
     * value: "Invalid display frequency option"
     * @const
     */
    "Invalid display frequency option": "Invalid display frequency option",

    /**
     * value: "Invalid file type"
     * @const
     */
    "Invalid file type": "Invalid file type",

    /**
     * value: "Invalid frequency"
     * @const
     */
    "Invalid frequency": "Invalid frequency",

    /**
     * value: "Invalid timezone"
     * @const
     */
    "Invalid timezone": "Invalid timezone",

    /**
     * value: "Invalid ticker"
     * @const
     */
    "Invalid ticker": "Invalid ticker",

    /**
     * value: "Invalid chart title"
     * @const
     */
    "Invalid chart title": "Invalid chart title"
};



export default ErrorResponse;

