/**
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistogramData from './HistogramData';

/**
 * The StatisticsResponseData model module.
 * @module model/StatisticsResponseData
 */
class StatisticsResponseData {
    /**
     * Constructs a new <code>StatisticsResponseData</code>.
     * Aggregate statistics for a given field within the specified content sets.
     * @alias module:model/StatisticsResponseData
     */
    constructor() { 
        
        StatisticsResponseData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatisticsResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatisticsResponseData} obj Optional instance to populate.
     * @return {module:model/StatisticsResponseData} The populated <code>StatisticsResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatisticsResponseData();

            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('average')) {
                obj['average'] = ApiClient.convertToType(data['average'], 'Number');
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('median')) {
                obj['median'] = ApiClient.convertToType(data['median'], 'Number');
            }
            if (data.hasOwnProperty('stdDev')) {
                obj['stdDev'] = ApiClient.convertToType(data['stdDev'], 'Number');
            }
            if (data.hasOwnProperty('histogram')) {
                obj['histogram'] = ApiClient.convertToType(data['histogram'], [HistogramData]);
            }
        }
        return obj;
    }


}

/**
 * The minimum value of the field.
 * @member {Number} minimum
 */
StatisticsResponseData.prototype['minimum'] = undefined;

/**
 * The maximum value of the field.
 * @member {Number} maximum
 */
StatisticsResponseData.prototype['maximum'] = undefined;

/**
 * The average value of the field.
 * @member {Number} average
 */
StatisticsResponseData.prototype['average'] = undefined;

/**
 * The sum of the field values.
 * @member {Number} sum
 */
StatisticsResponseData.prototype['sum'] = undefined;

/**
 * The number of records.
 * @member {Number} count
 */
StatisticsResponseData.prototype['count'] = undefined;

/**
 * The median value of the field.
 * @member {Number} median
 */
StatisticsResponseData.prototype['median'] = undefined;

/**
 * The standard deviation of the field values.
 * @member {Number} stdDev
 */
StatisticsResponseData.prototype['stdDev'] = undefined;

/**
 * The histogram of the field values. The histogram is an array of 10 bins, each bin containing the minimum, maximum, and count of records in that bin. The bins are equally spaced between the minimum and maximum values of the field.
 * @member {Array.<module:model/HistogramData>} histogram
 */
StatisticsResponseData.prototype['histogram'] = undefined;






export default StatisticsResponseData;

