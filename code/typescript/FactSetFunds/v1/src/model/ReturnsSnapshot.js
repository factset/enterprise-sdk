/**
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReturnsSnapshot model module.
 * @module model/ReturnsSnapshot
 */
class ReturnsSnapshot {
    /**
     * Constructs a new <code>ReturnsSnapshot</code>.
     * @alias module:model/ReturnsSnapshot
     */
    constructor() { 
        
        ReturnsSnapshot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnsSnapshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnsSnapshot} obj Optional instance to populate.
     * @return {module:model/ReturnsSnapshot} The populated <code>ReturnsSnapshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnsSnapshot();

            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('oneWeek')) {
                obj['oneWeek'] = ApiClient.convertToType(data['oneWeek'], 'Number');
            }
            if (data.hasOwnProperty('oneMonth')) {
                obj['oneMonth'] = ApiClient.convertToType(data['oneMonth'], 'Number');
            }
            if (data.hasOwnProperty('threeMonth')) {
                obj['threeMonth'] = ApiClient.convertToType(data['threeMonth'], 'Number');
            }
            if (data.hasOwnProperty('yearToDate')) {
                obj['yearToDate'] = ApiClient.convertToType(data['yearToDate'], 'Number');
            }
            if (data.hasOwnProperty('oneYear')) {
                obj['oneYear'] = ApiClient.convertToType(data['oneYear'], 'Number');
            }
            if (data.hasOwnProperty('threeYear')) {
                obj['threeYear'] = ApiClient.convertToType(data['threeYear'], 'Number');
            }
            if (data.hasOwnProperty('threeYearAnnualized')) {
                obj['threeYearAnnualized'] = ApiClient.convertToType(data['threeYearAnnualized'], 'Number');
            }
            if (data.hasOwnProperty('fiveYear')) {
                obj['fiveYear'] = ApiClient.convertToType(data['fiveYear'], 'Number');
            }
            if (data.hasOwnProperty('fiveYearAnnualized')) {
                obj['fiveYearAnnualized'] = ApiClient.convertToType(data['fiveYearAnnualized'], 'Number');
            }
            if (data.hasOwnProperty('tenYear')) {
                obj['tenYear'] = ApiClient.convertToType(data['tenYear'], 'Number');
            }
            if (data.hasOwnProperty('tenYearAnnualized')) {
                obj['tenYearAnnualized'] = ApiClient.convertToType(data['tenYearAnnualized'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.
 * @member {String} fsymId
 */
ReturnsSnapshot.prototype['fsymId'] = undefined;

/**
 * The one-week return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} oneWeek
 */
ReturnsSnapshot.prototype['oneWeek'] = undefined;

/**
 * The one-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} oneMonth
 */
ReturnsSnapshot.prototype['oneMonth'] = undefined;

/**
 * The three-month return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} threeMonth
 */
ReturnsSnapshot.prototype['threeMonth'] = undefined;

/**
 * The year-to-date return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} yearToDate
 */
ReturnsSnapshot.prototype['yearToDate'] = undefined;

/**
 * The one-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} oneYear
 */
ReturnsSnapshot.prototype['oneYear'] = undefined;

/**
 * The three-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} threeYear
 */
ReturnsSnapshot.prototype['threeYear'] = undefined;

/**
 * The three-year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} threeYearAnnualized
 */
ReturnsSnapshot.prototype['threeYearAnnualized'] = undefined;

/**
 * The five-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} fiveYear
 */
ReturnsSnapshot.prototype['fiveYear'] = undefined;

/**
 * The five year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} fiveYearAnnualized
 */
ReturnsSnapshot.prototype['fiveYearAnnualized'] = undefined;

/**
 * The ten-year return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} tenYear
 */
ReturnsSnapshot.prototype['tenYear'] = undefined;

/**
 * The ten year annualized return for the requested id and date. The return type is determined by including or excluding dividends through the dividendAdjust parameter.
 * @member {Number} tenYearAnnualized
 */
ReturnsSnapshot.prototype['tenYearAnnualized'] = undefined;

/**
 * The date of the return in YYYY-MM-DD format.
 * @member {Date} date
 */
ReturnsSnapshot.prototype['date'] = undefined;

/**
 * The requested Id sent as input.
 * @member {String} requestId
 */
ReturnsSnapshot.prototype['requestId'] = undefined;






export default ReturnsSnapshot;

