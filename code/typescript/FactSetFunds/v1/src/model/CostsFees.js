/**
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CostsFees model module.
 * @module model/CostsFees
 */
class CostsFees {
    /**
     * Constructs a new <code>CostsFees</code>.
     * @alias module:model/CostsFees
     */
    constructor() { 
        
        CostsFees.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CostsFees</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CostsFees} obj Optional instance to populate.
     * @return {module:model/CostsFees} The populated <code>CostsFees</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CostsFees();

            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('managementExpenses')) {
                obj['managementExpenses'] = ApiClient.convertToType(data['managementExpenses'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('entryExpenses')) {
                obj['entryExpenses'] = ApiClient.convertToType(data['entryExpenses'], 'Number');
            }
            if (data.hasOwnProperty('exitExpenses')) {
                obj['exitExpenses'] = ApiClient.convertToType(data['exitExpenses'], 'Number');
            }
            if (data.hasOwnProperty('frontExpensesMax')) {
                obj['frontExpensesMax'] = ApiClient.convertToType(data['frontExpensesMax'], 'Number');
            }
            if (data.hasOwnProperty('backExpensesMax')) {
                obj['backExpensesMax'] = ApiClient.convertToType(data['backExpensesMax'], 'Number');
            }
            if (data.hasOwnProperty('expenseRatio')) {
                obj['expenseRatio'] = ApiClient.convertToType(data['expenseRatio'], 'Number');
            }
            if (data.hasOwnProperty('expenseRatioProspectus')) {
                obj['expenseRatioProspectus'] = ApiClient.convertToType(data['expenseRatioProspectus'], 'Number');
            }
            if (data.hasOwnProperty('initInvestmentMin')) {
                obj['initInvestmentMin'] = ApiClient.convertToType(data['initInvestmentMin'], 'Number');
            }
            if (data.hasOwnProperty('initInvestmentIra')) {
                obj['initInvestmentIra'] = ApiClient.convertToType(data['initInvestmentIra'], 'Number');
            }
            if (data.hasOwnProperty('swingPrice')) {
                obj['swingPrice'] = ApiClient.convertToType(data['swingPrice'], 'Number');
            }
            if (data.hasOwnProperty('swingPriceDate')) {
                obj['swingPriceDate'] = ApiClient.convertToType(data['swingPriceDate'], 'Date');
            }
            if (data.hasOwnProperty('sriPriips')) {
                obj['sriPriips'] = ApiClient.convertToType(data['sriPriips'], 'Number');
            }
            if (data.hasOwnProperty('srriUcits')) {
                obj['srriUcits'] = ApiClient.convertToType(data['srriUcits'], 'Number');
            }
            if (data.hasOwnProperty('performanceFee')) {
                obj['performanceFee'] = ApiClient.convertToType(data['performanceFee'], 'Number');
            }
            if (data.hasOwnProperty('tradingExpenseRatio')) {
                obj['tradingExpenseRatio'] = ApiClient.convertToType(data['tradingExpenseRatio'], 'Number');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * FactSet Security Identifier. Six alpha-numeric characters, excluding vowels, with a -S suffix (XXXXXX-S), resolved from the requestId of the Fund requested.
 * @member {String} fsymId
 */
CostsFees.prototype['fsymId'] = undefined;

/**
 * The management fee, or maintenance fee, is charged by the fund manager. This cost is usually between 0.5% and 2% of assets on average and is a periodic fee.
 * @member {Number} managementExpenses
 */
CostsFees.prototype['managementExpenses'] = undefined;

/**
 * The Expense Date expressed in YYYY-MM-DD.
 * @member {Date} date
 */
CostsFees.prototype['date'] = undefined;

/**
 * ISO3 Currency
 * @member {String} currency
 */
CostsFees.prototype['currency'] = undefined;

/**
 * The transaction entry fee or purchase fee collected from investors when they join or leave a scheme. The fee is paid to the fund
 * @member {Number} entryExpenses
 */
CostsFees.prototype['entryExpenses'] = undefined;

/**
 * The transaction exit fee is charged to investors when they redeem shares from a fund.
 * @member {Number} exitExpenses
 */
CostsFees.prototype['exitExpenses'] = undefined;

/**
 * The Maximum sales load or initial Sales Fee is a reduction made from each investment in the fund, the maximum paid is dependent on the size of the purchase, it decreases as the investment increases. Often associated with class 'A' shares of a mutual fund it is also known as Sales Charge, this is a fee paid when shares are purchased. Also known as a \"front-end load\", this fee typically goes to the brokers that sell the fund's shares.  (Under the Investment Company Act of 1940 is 9%. The maximum sales load under NASD Rules is 81‚ÅÑ2%).\" 
 * @member {Number} frontExpensesMax
 */
CostsFees.prototype['frontExpensesMax'] = undefined;

/**
 * The Back Expense Maximum
 * @member {Number} backExpensesMax
 */
CostsFees.prototype['backExpensesMax'] = undefined;

/**
 * The Expense Ratio
 * @member {Number} expenseRatio
 */
CostsFees.prototype['expenseRatio'] = undefined;

/**
 * The Expense Ratio Prospectus
 * @member {Number} expenseRatioProspectus
 */
CostsFees.prototype['expenseRatioProspectus'] = undefined;

/**
 * The Initial Investment Minimum
 * @member {Number} initInvestmentMin
 */
CostsFees.prototype['initInvestmentMin'] = undefined;

/**
 * The Initial Investment Individual Retirement Accounts
 * @member {Number} initInvestmentIra
 */
CostsFees.prototype['initInvestmentIra'] = undefined;

/**
 * Swing Price. Swing pricing occurs when a fund provider adjusts the net asset value (NAV) of a fund in order to pass on trading costs to purchasing or redeeming shareholders. This anti-dilution technique is used to protect long-term shareholder's interests.
 * @member {Number} swingPrice
 */
CostsFees.prototype['swingPrice'] = undefined;

/**
 * Swing Price Date. Swing pricing occurs when a fund provider adjusts the net asset value (NAV) of a fund in order to pass on trading costs to purchasing or redeeming shareholders. This anti-dilution technique is used to protect long-term shareholder's interests.
 * @member {Date} swingPriceDate
 */
CostsFees.prototype['swingPriceDate'] = undefined;

/**
 * The SRI (Summary Risk Indicator) illustrates PRIIPs' risk and reward profile by measuring the market and credit risk level. Returns 1 for low risk up to 7 for higher risk.
 * @member {Number} sriPriips
 */
CostsFees.prototype['sriPriips'] = undefined;

/**
 * Synthetic Risk and Reward Indicator illustrates a UCITS or NURS (Non-UCITS Retail Scheme) fund's risk and reward profile by measuring the market risk level. Returns 1 for low risk up to 7 for high risk.
 * @member {Number} srriUcits
 */
CostsFees.prototype['srriUcits'] = undefined;

/**
 * Represents fees made to an investment manager as a percentage of investment profits for generating positive returns.
 * @member {Number} performanceFee
 */
CostsFees.prototype['performanceFee'] = undefined;

/**
 * Represents the amount of trading commissions incurred to manage the portfolio as a percentage of the total assets of the fund.
 * @member {Number} tradingExpenseRatio
 */
CostsFees.prototype['tradingExpenseRatio'] = undefined;

/**
 * The requested Id sent as input.
 * @member {String} requestId
 */
CostsFees.prototype['requestId'] = undefined;






export default CostsFees;

