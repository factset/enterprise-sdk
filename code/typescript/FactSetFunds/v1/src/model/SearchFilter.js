/**
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JoinType from './JoinType';
import SearchCriterion from './SearchCriterion';

/**
 * The SearchFilter model module.
 * @module model/SearchFilter
 */
class SearchFilter {
    /**
     * Constructs a new <code>SearchFilter</code>.
     * Filter object
     * @alias module:model/SearchFilter
     * @param criteria {Array.<module:model/SearchCriterion>} Criteria to filter by
     */
    constructor(criteria) { 
        
        SearchFilter.initialize(this, criteria);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, criteria) { 
        obj['criteria'] = criteria;
    }

    /**
     * Constructs a <code>SearchFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchFilter} obj Optional instance to populate.
     * @return {module:model/SearchFilter} The populated <code>SearchFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchFilter();

            if (data.hasOwnProperty('joinType')) {
                obj['joinType'] = JoinType.constructFromObject(data['joinType']);
            }
            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], [SearchCriterion]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/JoinType} joinType
 */
SearchFilter.prototype['joinType'] = undefined;

/**
 * Criteria to filter by
 * @member {Array.<module:model/SearchCriterion>} criteria
 */
SearchFilter.prototype['criteria'] = undefined;






export default SearchFilter;

