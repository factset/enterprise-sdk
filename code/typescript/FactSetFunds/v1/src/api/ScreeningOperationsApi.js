/**
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentSetsResponse from '../model/ContentSetsResponse';
import CreateContentSetRequest from '../model/CreateContentSetRequest';
import CreateContentSetResponse from '../model/CreateContentSetResponse';
import DistinctCountRequest from '../model/DistinctCountRequest';
import DistinctCountResponse from '../model/DistinctCountResponse';
import ErrorResponse from '../model/ErrorResponse';
import ErrorResponseScreener from '../model/ErrorResponseScreener';
import FieldsResponse from '../model/FieldsResponse';
import SearchRequest from '../model/SearchRequest';
import SearchResponse from '../model/SearchResponse';
import StatisticsRequest from '../model/StatisticsRequest';
import StatisticsResponse from '../model/StatisticsResponse';

/**
* ScreeningOperations service.
* @module api/ScreeningOperationsApi
*/
export default class ScreeningOperationsApi {

    /**
    * Constructs a new ScreeningOperationsApi. 
    * @alias module:api/ScreeningOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new custom content set with required fields from the default content sets.
     * Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The `/screener/content-sets` and `/screener/fields` endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
     * @param {module:model/CreateContentSetRequest} createContentSetRequest Request object for create content-set endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateContentSetResponse} and HTTP response
     */
    createContentSetWithHttpInfo(createContentSetRequest) {
      let postBody = createContentSetRequest;
      // verify the required parameter 'createContentSetRequest' is set
      if (createContentSetRequest === undefined || createContentSetRequest === null) {
        throw new Error("Missing the required parameter 'createContentSetRequest' when calling createContentSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CreateContentSetResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/screener/content-sets/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new custom content set with required fields from the default content sets.
     * Create a custom content set with the required set of fields. These fields are taken from the default content sets provided in the request.  The name for a custom content-set must be unique. The list of displayNames within each custom content-set must also be unique. Display names can be used as fieldName in other endpoints to perform screening operations.  The `/screener/content-sets` and `/screener/fields` endpoints provide the authoritative lists of available content sets and fields. Use these endpoints to construct custom content sets and ensure that all content set names and displayName values are unique. 
     * @param {module:model/CreateContentSetRequest} createContentSetRequest Request object for create content-set endpoint.
     * @return { Promise.< module:model/CreateContentSetResponse > } a Promise, with data of type {@link module:model/CreateContentSetResponse }
     */
    createContentSet(createContentSetRequest) {
      return this.createContentSetWithHttpInfo(createContentSetRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a custom content set.
     * Delete a custom content set by providing the content set name.
     * @param {String} name The name of the content set to be deleted.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteContentSetWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteContentSet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/factset-funds/v1/screener/content-sets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a custom content set.
     * Delete a custom content set by providing the content set name.
     * @param {String} name The name of the content set to be deleted.
     * @return { Promise } a Promise
     */
    deleteContentSet(name) {
      return this.deleteContentSetWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the content sets that are permissioned for the user.
     * Gets the content sets that are permissioned for the user. for example: `Factset Fundamentals`, `Factset Funds`, etc. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContentSetsResponse} and HTTP response
     */
    getContentSetsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ContentSetsResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/screener/content-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the content sets that are permissioned for the user.
     * Gets the content sets that are permissioned for the user. for example: `Factset Fundamentals`, `Factset Funds`, etc. 
     * @return { Promise.< module:model/ContentSetsResponse > } a Promise, with data of type {@link module:model/ContentSetsResponse }
     */
    getContentSets() {
      return this.getContentSetsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the number of records for a given field spread across all possible values.
     * Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
     * @param {module:model/DistinctCountRequest} distinctCountRequest Request object for `distinct-count`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DistinctCountResponse} and HTTP response
     */
    getDistinctCountWithHttpInfo(distinctCountRequest) {
      let postBody = distinctCountRequest;
      // verify the required parameter 'distinctCountRequest' is set
      if (distinctCountRequest === undefined || distinctCountRequest === null) {
        throw new Error("Missing the required parameter 'distinctCountRequest' when calling getDistinctCount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = DistinctCountResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/screener/distinct-count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the number of records for a given field spread across all possible values.
     * Returns the number of records for a given field spread across all possible values that match the given criteria. Only string fields are supported. 
     * @param {module:model/DistinctCountRequest} distinctCountRequest Request object for `distinct-count`.
     * @return { Promise.< module:model/DistinctCountResponse > } a Promise, with data of type {@link module:model/DistinctCountResponse }
     */
    getDistinctCount(distinctCountRequest) {
      return this.getDistinctCountWithHttpInfo(distinctCountRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of fields available for given content set.
     * Gets the list of fields available for a given content set (or combination of content sets). For example: `Factset Fundamentals`, `Factset Funds`, etc.  Both default and custom content sets are supported. 
     * @param {Array.<String>} contentSets The content sets from which the fields are requested. For example: `Factset Fundamentals`,  `Factset Funds`, etc. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FieldsResponse} and HTTP response
     */
    getFieldsWithHttpInfo(contentSets) {
      let postBody = null;
      // verify the required parameter 'contentSets' is set
      if (contentSets === undefined || contentSets === null) {
        throw new Error("Missing the required parameter 'contentSets' when calling getFields");
      }

      let pathParams = {
      };
      let queryParams = {
        'contentSets': this.apiClient.buildCollectionParam(contentSets, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FieldsResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/screener/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of fields available for given content set.
     * Gets the list of fields available for a given content set (or combination of content sets). For example: `Factset Fundamentals`, `Factset Funds`, etc.  Both default and custom content sets are supported. 
     * @param {Array.<String>} contentSets The content sets from which the fields are requested. For example: `Factset Fundamentals`,  `Factset Funds`, etc. 
     * @return { Promise.< module:model/FieldsResponse > } a Promise, with data of type {@link module:model/FieldsResponse }
     */
    getFields(contentSets) {
      return this.getFieldsWithHttpInfo(contentSets)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all the records that match the given criteria.
     * Returns the records that match the given criteria. The request object for `Search` allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses `displayName`. 
     * @param {module:model/SearchRequest} searchRequest Request object for `Search`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchResponse} and HTTP response
     */
    getScreenerDataWithHttpInfo(searchRequest) {
      let postBody = searchRequest;
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling getScreenerData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SearchResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/screener/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all the records that match the given criteria.
     * Returns the records that match the given criteria. The request object for `Search` allows the user to get back data for fields of their choosing. Along with the fields requested, a unique identifier such as the ticker symbol will be returned in the response.  Custom search of fields actually uses `displayName`. 
     * @param {module:model/SearchRequest} searchRequest Request object for `Search`.
     * @return { Promise.< module:model/SearchResponse > } a Promise, with data of type {@link module:model/SearchResponse }
     */
    getScreenerData(searchRequest) {
      return this.getScreenerDataWithHttpInfo(searchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the statistics and histogram data for a given field within the specified content sets.
     * Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
     * @param {module:model/StatisticsRequest} statisticsRequest Request object for `Statistics`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StatisticsResponse} and HTTP response
     */
    getStatisticsWithHttpInfo(statisticsRequest) {
      let postBody = statisticsRequest;
      // verify the required parameter 'statisticsRequest' is set
      if (statisticsRequest === undefined || statisticsRequest === null) {
        throw new Error("Missing the required parameter 'statisticsRequest' when calling getStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = StatisticsResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/screener/statistics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the statistics and histogram data for a given field within the specified content sets.
     * Returns the statistics for a given field within the specified content sets. Only numerical fields are supported. If histogram flag is set to true, histogram data is also returned. 
     * @param {module:model/StatisticsRequest} statisticsRequest Request object for `Statistics`.
     * @return { Promise.< module:model/StatisticsResponse > } a Promise, with data of type {@link module:model/StatisticsResponse }
     */
    getStatistics(statisticsRequest) {
      return this.getStatisticsWithHttpInfo(statisticsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





