/**
 * FactSet Funds API
 * FactSet Mutual Funds data offers over 50 fund- and share class-specific data points for mutual funds listed in the United States. <p>FactSet Mutual Funds Reference provides fund-specific reference information as well as FactSet's proprietary classification system. It includes but is not limited to the following coverage    * Fund descriptions    * A seven-tier classification system   * Leverage information   * Fees and expenses    * Portfolio managers       FactSet Mutual Funds Time Series provides quantitative data items on a historical basis. It includes but is not limited to the following coverage    * Net asset value   * Fund flows    * Assets under management   * Total return  <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import FundsPricesRequest from '../model/FundsPricesRequest';
import FundsPricesResponse from '../model/FundsPricesResponse';
import FundsReturnsRequest from '../model/FundsReturnsRequest';
import FundsReturnsResponse from '../model/FundsReturnsResponse';
import FundsReturnsSnapshotRequest from '../model/FundsReturnsSnapshotRequest';
import FundsReturnsSnapshotResponse from '../model/FundsReturnsSnapshotResponse';
import ReturnsRangeRequest from '../model/ReturnsRangeRequest';
import ReturnsRangeResponse from '../model/ReturnsRangeResponse';

/**
* PricesReturns service.
* @module api/PricesReturnsApi
*/
export default class PricesReturnsApi {

    /**
    * Constructs a new PricesReturnsApi. 
    * @alias module:api/PricesReturnsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Fund Prices (NAV) for a requested time-series
     * Get Fund Prices (NAV) for a requested date range and list of ids. 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The `start date` requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {String} opts.endDate The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {module:model/String} opts.frequency Controls the display frequency of the data returned.   * **D** = Daily   * **W** = Weekly, based on the last day of the week of the start date.   * **M** = Monthly, based on the last trading day of the month.   * **AM** = Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** = Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** = Fiscal Quarter of the company.   * **AY** = Actual Annual, based on the start date.   * **CY** = Calendar Annual, based on the last trading day of the calendar year.   * **FY** = Fiscal Annual, based on the last trading day of the company's fiscal year.     (default to 'M')
     * @param {String} opts.currency Controls the Currency conversion of the Fund. By default, the currency will use the funds local currency. For a list of currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (default to 'LOCAL')
     * @param {module:model/String} opts.dataType The Data Type of the NAV expressed as Raw or Rolled values. (default to 'ROLL')
     * @param {module:model/String} opts.splitAdjust The price adjustment split or unsplit. (default to 'SPLIT')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundsPricesResponse} and HTTP response
     */
    getFundsPricesWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getFundsPrices");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'frequency': opts['frequency'],
        'currency': opts['currency'],
        'dataType': opts['dataType'],
        'splitAdjust': opts['splitAdjust']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FundsPricesResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Prices (NAV) for a requested time-series
     * Get Fund Prices (NAV) for a requested date range and list of ids. 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The `start date` requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {String} opts.endDate The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {module:model/String} opts.frequency Controls the display frequency of the data returned.   * **D** = Daily   * **W** = Weekly, based on the last day of the week of the start date.   * **M** = Monthly, based on the last trading day of the month.   * **AM** = Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** = Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** = Fiscal Quarter of the company.   * **AY** = Actual Annual, based on the start date.   * **CY** = Calendar Annual, based on the last trading day of the calendar year.   * **FY** = Fiscal Annual, based on the last trading day of the company's fiscal year.     (default to 'M')
     * @param {String} opts.currency Controls the Currency conversion of the Fund. By default, the currency will use the funds local currency. For a list of currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (default to 'LOCAL')
     * @param {module:model/String} opts.dataType The Data Type of the NAV expressed as Raw or Rolled values. (default to 'ROLL')
     * @param {module:model/String} opts.splitAdjust The price adjustment split or unsplit. (default to 'SPLIT')
     * @return { Promise.< module:model/FundsPricesResponse > } a Promise, with data of type {@link module:model/FundsPricesResponse }
     */
    getFundsPrices(ids, opts) {
      return this.getFundsPricesWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fund Prices (NAV) for a requested date range and large list of ids.
     * Fetch fund prices (NAV) as of a requested date range and a large list of ids.  
     * @param {module:model/FundsPricesRequest} fundsPricesRequest The Prices request body, allowing the user to specify a list of ids.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundsPricesResponse} and HTTP response
     */
    getFundsPricesForListWithHttpInfo(fundsPricesRequest) {
      let postBody = fundsPricesRequest;
      // verify the required parameter 'fundsPricesRequest' is set
      if (fundsPricesRequest === undefined || fundsPricesRequest === null) {
        throw new Error("Missing the required parameter 'fundsPricesRequest' when calling getFundsPricesForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = FundsPricesResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/prices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Prices (NAV) for a requested date range and large list of ids.
     * Fetch fund prices (NAV) as of a requested date range and a large list of ids.  
     * @param {module:model/FundsPricesRequest} fundsPricesRequest The Prices request body, allowing the user to specify a list of ids.
     * @return { Promise.< module:model/FundsPricesResponse > } a Promise, with data of type {@link module:model/FundsPricesResponse }
     */
    getFundsPricesForList(fundsPricesRequest) {
      return this.getFundsPricesForListWithHttpInfo(fundsPricesRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fund Returns for a requested time-series
     * Get Fund NAV Returns over a time-series for the requested date range and frequency. <p>The simple Total Return NAV shows the fund's total return level by reinvesting distributions so that ex-date NAVs are increased by the distribution amount and compounded thereafter. Total return NAV compounds daily and is calculated from the first available NAV date of each fund. The total return NAV series reflects the value that an investor would own if it had purchased one share at the inception date and reinvested all dividends on a Gross basis.</p><p> Control the dividends to include or exclude using the dividendAdjust parameter. The first available NAV date of each fund can be found in the /summary endpoint as `priceFristDate`. Visit [OA #21437](https://my.apps.factset.com/oa/pages/21437) for more details.</p> 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The `start date` requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {String} opts.endDate The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {module:model/String} opts.frequency Controls the display frequency of the data returned.   * **D** = Daily   * **W** = Weekly, based on the last day of the week of the start date.   * **M** = Monthly, based on the last trading day of the month.   * **AM** = Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** = Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** = Fiscal Quarter of the company.   * **AY** = Actual Annual, based on the start date.   * **CY** = Calendar Annual, based on the last trading day of the calendar year.   * **FY** = Fiscal Annual, based on the last trading day of the company's fiscal year.     (default to 'M')
     * @param {String} opts.currency Controls the Currency conversion of the Fund. By default, the currency will use the funds local currency. For a list of currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (default to 'LOCAL')
     * @param {module:model/String} opts.dividendAdjust Controls the dividend inclusion for the NAV returns calculations, where -  * DIV = Include Dividends, Total Return * NO_DIV = Exclude Dividends, Simple Return  (default to 'DIV')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundsReturnsResponse} and HTTP response
     */
    getFundsReturnsWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getFundsReturns");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'frequency': opts['frequency'],
        'currency': opts['currency'],
        'dividendAdjust': opts['dividendAdjust']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FundsReturnsResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/returns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Returns for a requested time-series
     * Get Fund NAV Returns over a time-series for the requested date range and frequency. <p>The simple Total Return NAV shows the fund's total return level by reinvesting distributions so that ex-date NAVs are increased by the distribution amount and compounded thereafter. Total return NAV compounds daily and is calculated from the first available NAV date of each fund. The total return NAV series reflects the value that an investor would own if it had purchased one share at the inception date and reinvested all dividends on a Gross basis.</p><p> Control the dividends to include or exclude using the dividendAdjust parameter. The first available NAV date of each fund can be found in the /summary endpoint as `priceFristDate`. Visit [OA #21437](https://my.apps.factset.com/oa/pages/21437) for more details.</p> 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The `start date` requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {String} opts.endDate The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {module:model/String} opts.frequency Controls the display frequency of the data returned.   * **D** = Daily   * **W** = Weekly, based on the last day of the week of the start date.   * **M** = Monthly, based on the last trading day of the month.   * **AM** = Monthly, based on the start date (e.g., if the start date is June 16, data is displayed for June 16, May 16, April 16 etc.).   * **CQ** = Quarterly based on the last trading day of the calendar quarter (March, June, September, or December).   * **FQ** = Fiscal Quarter of the company.   * **AY** = Actual Annual, based on the start date.   * **CY** = Calendar Annual, based on the last trading day of the calendar year.   * **FY** = Fiscal Annual, based on the last trading day of the company's fiscal year.     (default to 'M')
     * @param {String} opts.currency Controls the Currency conversion of the Fund. By default, the currency will use the funds local currency. For a list of currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  (default to 'LOCAL')
     * @param {module:model/String} opts.dividendAdjust Controls the dividend inclusion for the NAV returns calculations, where -  * DIV = Include Dividends, Total Return * NO_DIV = Exclude Dividends, Simple Return  (default to 'DIV')
     * @return { Promise.< module:model/FundsReturnsResponse > } a Promise, with data of type {@link module:model/FundsReturnsResponse }
     */
    getFundsReturns(ids, opts) {
      return this.getFundsReturnsWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fund Returns for a requested time-series and large list of ids
     * Get Fund NAV Returns over a time-series for the requested date range and frequency. <p>The simple Total Return NAV shows the fund's total return level by reinvesting distributions so that ex-date NAVs are increased by the distribution amount and compounded thereafter. Total return NAV compounds daily and is calculated from the first available NAV date of each fund. The total return NAV series reflects the value that an investor would own if it had purchased one share at the inception date and reinvested all dividends on a Gross basis.</p><p> Control the dividends to include or exclude using the dividendAdjust parameter. The first available NAV date of each fund can be found in the /summary endpoint as `priceFristDate`. Visit [OA #21437](https://my.apps.factset.com/oa/pages/21437) for more details.</p> 
     * @param {module:model/FundsReturnsRequest} fundsReturnsRequest The Returns request body, allowing the user to specify a list of ids.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundsReturnsResponse} and HTTP response
     */
    getFundsReturnsForListWithHttpInfo(fundsReturnsRequest) {
      let postBody = fundsReturnsRequest;
      // verify the required parameter 'fundsReturnsRequest' is set
      if (fundsReturnsRequest === undefined || fundsReturnsRequest === null) {
        throw new Error("Missing the required parameter 'fundsReturnsRequest' when calling getFundsReturnsForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = FundsReturnsResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/returns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Returns for a requested time-series and large list of ids
     * Get Fund NAV Returns over a time-series for the requested date range and frequency. <p>The simple Total Return NAV shows the fund's total return level by reinvesting distributions so that ex-date NAVs are increased by the distribution amount and compounded thereafter. Total return NAV compounds daily and is calculated from the first available NAV date of each fund. The total return NAV series reflects the value that an investor would own if it had purchased one share at the inception date and reinvested all dividends on a Gross basis.</p><p> Control the dividends to include or exclude using the dividendAdjust parameter. The first available NAV date of each fund can be found in the /summary endpoint as `priceFristDate`. Visit [OA #21437](https://my.apps.factset.com/oa/pages/21437) for more details.</p> 
     * @param {module:model/FundsReturnsRequest} fundsReturnsRequest The Returns request body, allowing the user to specify a list of ids.
     * @return { Promise.< module:model/FundsReturnsResponse > } a Promise, with data of type {@link module:model/FundsReturnsResponse }
     */
    getFundsReturnsForList(fundsReturnsRequest) {
      return this.getFundsReturnsForListWithHttpInfo(fundsReturnsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fund Returns for a user-defined date range
     * Get Fund Returns between a specified startDate and endDate. The service will compute the return between those two periods to retrieve the single value and does not create a time-series. Control the return type to include or exclude dividends by using the dividendAdjust parameter. 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to the day prior to today's previous close. The `startDate` cannot be equal to the `endDate` as no return can be computed. Additionally, the `startDate` MUST be equal to or greater than the `priceFirstDate` found within the `/summary` endpoint. 
     * @param {String} opts.endDate The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {module:model/String} opts.dividendAdjust Controls the dividend inclusion for the NAV returns calculations, where -  * DIV = Include Dividends, Total Return * NO_DIV = Exclude Dividends, Simple Return  (default to 'DIV')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReturnsRangeResponse} and HTTP response
     */
    getFundsReturnsRangeWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getFundsReturnsRange");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'dividendAdjust': opts['dividendAdjust']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ReturnsRangeResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/returns-range', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Returns for a user-defined date range
     * Get Fund Returns between a specified startDate and endDate. The service will compute the return between those two periods to retrieve the single value and does not create a time-series. Control the return type to include or exclude dividends by using the dividendAdjust parameter. 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate The start date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to the day prior to today's previous close. The `startDate` cannot be equal to the `endDate` as no return can be computed. Additionally, the `startDate` MUST be equal to or greater than the `priceFirstDate` found within the `/summary` endpoint. 
     * @param {String} opts.endDate The end date requested for a given date range in **YYYY-MM-DD** format. If left blank, the API will default to latest available completed period. 
     * @param {module:model/String} opts.dividendAdjust Controls the dividend inclusion for the NAV returns calculations, where -  * DIV = Include Dividends, Total Return * NO_DIV = Exclude Dividends, Simple Return  (default to 'DIV')
     * @return { Promise.< module:model/ReturnsRangeResponse > } a Promise, with data of type {@link module:model/ReturnsRangeResponse }
     */
    getFundsReturnsRange(ids, opts) {
      return this.getFundsReturnsRangeWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fund Returns over pre-defined time horizons as of a specific date for large list of ids.
     * Get Fund Returns between a specified startDate and endDate. The service will compute the return between those two periods to retrieve the single value and does not create a time-series. Control the return type to include or exclude dividends by using the dividendAdjust parameter. 
     * @param {module:model/ReturnsRangeRequest} returnsRangeRequest The Returns Range request body, allowing the user to specify a list of ids.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReturnsRangeResponse} and HTTP response
     */
    getFundsReturnsRangeForListWithHttpInfo(returnsRangeRequest) {
      let postBody = returnsRangeRequest;
      // verify the required parameter 'returnsRangeRequest' is set
      if (returnsRangeRequest === undefined || returnsRangeRequest === null) {
        throw new Error("Missing the required parameter 'returnsRangeRequest' when calling getFundsReturnsRangeForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ReturnsRangeResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/returns-range', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Returns over pre-defined time horizons as of a specific date for large list of ids.
     * Get Fund Returns between a specified startDate and endDate. The service will compute the return between those two periods to retrieve the single value and does not create a time-series. Control the return type to include or exclude dividends by using the dividendAdjust parameter. 
     * @param {module:model/ReturnsRangeRequest} returnsRangeRequest The Returns Range request body, allowing the user to specify a list of ids.
     * @return { Promise.< module:model/ReturnsRangeResponse > } a Promise, with data of type {@link module:model/ReturnsRangeResponse }
     */
    getFundsReturnsRangeForList(returnsRangeRequest) {
      return this.getFundsReturnsRangeForListWithHttpInfo(returnsRangeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fund Returns over pre-defined time horizons as of a specific date.
     * Get Fund Returns over pre-defined time horizons as of a specific date. Use the date parameter to set the perspective date, and adjust the return type to include or exclude dividends using the dividendAdjust parameter. Returns Ranges include -  * oneWeek * oneMonth * threeMonth * yearToDate * oneYear * threeYear * threeYearAnnualized * fiveYear * fiveYearAnnualized * tenYear * tenYearAnnualized 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.date The date requested for a given date range in YYYY-MM-DD format. The date MUST be equal to or less than the `priceRecentDate` found within the /summary endpoint. 
     * @param {module:model/String} opts.dividendAdjust Controls the dividend inclusion for the NAV returns calculations, where -  * DIV = Include Dividends, Total Return * NO_DIV = Exclude Dividends, Simple Return  (default to 'DIV')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundsReturnsSnapshotResponse} and HTTP response
     */
    getFundsReturnsSnapshotWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getFundsReturnsSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'date': opts['date'],
        'dividendAdjust': opts['dividendAdjust']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FundsReturnsSnapshotResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/returns-snapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Returns over pre-defined time horizons as of a specific date.
     * Get Fund Returns over pre-defined time horizons as of a specific date. Use the date parameter to set the perspective date, and adjust the return type to include or exclude dividends using the dividendAdjust parameter. Returns Ranges include -  * oneWeek * oneMonth * threeMonth * yearToDate * oneYear * threeYear * threeYearAnnualized * fiveYear * fiveYearAnnualized * tenYear * tenYearAnnualized 
     * @param {Array.<String>} ids The requested fund identifier. FactSet Identifiers, tickers, CUSIP, SEDOL, and ISIN are accepted inputs. <p>***ids limit** =  1000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {String} opts.date The date requested for a given date range in YYYY-MM-DD format. The date MUST be equal to or less than the `priceRecentDate` found within the /summary endpoint. 
     * @param {module:model/String} opts.dividendAdjust Controls the dividend inclusion for the NAV returns calculations, where -  * DIV = Include Dividends, Total Return * NO_DIV = Exclude Dividends, Simple Return  (default to 'DIV')
     * @return { Promise.< module:model/FundsReturnsSnapshotResponse > } a Promise, with data of type {@link module:model/FundsReturnsSnapshotResponse }
     */
    getFundsReturnsSnapshot(ids, opts) {
      return this.getFundsReturnsSnapshotWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fund Returns over pre-defined time horizons as of a specific date.
     * Get Fund Returns over pre-defined time horizons as of a specific date. Use the date parameter to set the perspective date, and adjust the return type to include or exclude dividends using the dividendAdjust parameter. Returns Ranges include -  * oneWeek * oneMonth * threeMonth * yearToDate * oneYear * threeYear * threeYearAnnualized * fiveYear * fiveYearAnnualized  * tenYear * tenYearAnnualized 
     * @param {module:model/FundsReturnsSnapshotRequest} fundsReturnsSnapshotRequest The Returns Snapshot request body, allowing the user to specify a list of ids.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundsReturnsSnapshotResponse} and HTTP response
     */
    getFundsReturnsSnapshotForListWithHttpInfo(fundsReturnsSnapshotRequest) {
      let postBody = fundsReturnsSnapshotRequest;
      // verify the required parameter 'fundsReturnsSnapshotRequest' is set
      if (fundsReturnsSnapshotRequest === undefined || fundsReturnsSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'fundsReturnsSnapshotRequest' when calling getFundsReturnsSnapshotForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = FundsReturnsSnapshotResponse;

      return this.apiClient.callApi(
        '/factset-funds/v1/returns-snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fund Returns over pre-defined time horizons as of a specific date.
     * Get Fund Returns over pre-defined time horizons as of a specific date. Use the date parameter to set the perspective date, and adjust the return type to include or exclude dividends using the dividendAdjust parameter. Returns Ranges include -  * oneWeek * oneMonth * threeMonth * yearToDate * oneYear * threeYear * threeYearAnnualized * fiveYear * fiveYearAnnualized  * tenYear * tenYearAnnualized 
     * @param {module:model/FundsReturnsSnapshotRequest} fundsReturnsSnapshotRequest The Returns Snapshot request body, allowing the user to specify a list of ids.
     * @return { Promise.< module:model/FundsReturnsSnapshotResponse > } a Promise, with data of type {@link module:model/FundsReturnsSnapshotResponse }
     */
    getFundsReturnsSnapshotForList(fundsReturnsSnapshotRequest) {
      return this.getFundsReturnsSnapshotForListWithHttpInfo(fundsReturnsSnapshotRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





