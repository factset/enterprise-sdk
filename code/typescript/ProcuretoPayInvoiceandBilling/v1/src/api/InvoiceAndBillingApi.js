/**
 * Invoice and Billing Endpoints
 * API endpoints for managing and downloading FactSet Invoices
 *
 * The version of the OpenAPI document: 1K
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InvoiceDetails from '../model/InvoiceDetails';

/**
* InvoiceAndBilling service.
* @module api/InvoiceAndBillingApi
*/
export default class InvoiceAndBillingApi {

    /**
    * Constructs a new InvoiceAndBillingApi. 
    * @alias module:api/InvoiceAndBillingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns Fits report by given FITSID
     * @param {String} fitsID FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    getFitsReportGetWithHttpInfo(fitsID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fitsID' is set
      if (fitsID === undefined || fitsID === null) {
        throw new Error("Missing the required parameter 'fitsID' when calling getFitsReportGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fitsID': fitsID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];


      let returnType = [Object];

      let basePaths = ['https://api-sandbox.factset.com/procuretopay/invoice-and-billing/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/getFitsReport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Returns Fits report by given FITSID
     * @param {String} fitsID FITSID can be determined by concatenating the AccountNumber + two-digit year (e.g 21 for 2021) and two-digit month (e.g. 01 for January). Available AccountNumbers are available from the /listInvoices endpoint.
     * @return { Promise.< Array.<Object> > } a Promise, with data of type {@link Array.<Object> }
     */
    getFitsReportGet(fitsID, opts) {
      return this.getFitsReportGetWithHttpInfo(fitsID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns PDF of specific invoice
     * A .PDF File
     * @param {String} invoiceId Invoice code you wish to download
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getInvoiceGetWithHttpInfo(invoiceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling getInvoiceGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'invoiceId': invoiceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['appliction/pdf', 'application/json; charset=utf-8', 'text/plain'];


      let returnType = File;

      let basePaths = ['https://api-sandbox.factset.com/procuretopay/invoice-and-billing/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/getInvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Returns PDF of specific invoice
     * A .PDF File
     * @param {String} invoiceId Invoice code you wish to download
     * @return { Promise.< File > } a Promise, with data of type {@link File }
     */
    getInvoiceGet(invoiceId, opts) {
      return this.getInvoiceGetWithHttpInfo(invoiceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns details on specific invoice.
     * @param {String} invoiceId Invoice code to query. See /listInvoices endpoint for list of available invoices to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvoiceDetails} and HTTP response
     */
    invoiceDetailsGetWithHttpInfo(invoiceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling invoiceDetailsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'invoiceId': invoiceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];


      let returnType = InvoiceDetails;

      let basePaths = ['https://api-sandbox.factset.com/procuretopay/invoice-and-billing/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/invoiceDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Returns details on specific invoice.
     * @param {String} invoiceId Invoice code to query. See /listInvoices endpoint for list of available invoices to query.
     * @return { Promise.< module:model/InvoiceDetails > } a Promise, with data of type {@link module:model/InvoiceDetails }
     */
    invoiceDetailsGet(invoiceId, opts) {
      return this.invoiceDetailsGetWithHttpInfo(invoiceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all available invoices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    listInvoicesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8', 'text/plain'];


      let returnType = [Object];

      let basePaths = ['https://api-sandbox.factset.com/procuretopay/invoice-and-billing/'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/listInvoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath
      );
    }

    /**
     * Returns all available invoices
     * @return { Promise.< Array.<Object> > } a Promise, with data of type {@link Array.<Object> }
     */
    listInvoicesGet(opts) {
      return this.listInvoicesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





