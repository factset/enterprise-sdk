/**
 * BookBuilder
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AvailableReportsList from '../model/AvailableReportsList';
import CreateBookFromTemplatePostRequest from '../model/CreateBookFromTemplatePostRequest';
import CreateBookPostRequest from '../model/CreateBookPostRequest';
import EnableBookInfo from '../model/EnableBookInfo';
import EnableBookInfoFromTemplate from '../model/EnableBookInfoFromTemplate';
import InvalidAvailableReportRequest from '../model/InvalidAvailableReportRequest';
import InvalidCreateBookFromTemplateRequest from '../model/InvalidCreateBookFromTemplateRequest';
import InvalidCreateBookRequest from '../model/InvalidCreateBookRequest';

/**
* BooksCreation service.
* @module api/BooksCreationApi
*/
export default class BooksCreationApi {

    /**
    * Constructs a new BooksCreationApi. 
    * @alias module:api/BooksCreationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Kicks off request to create a book with reports of your choice
     * This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
     * @param {module:model/CreateBookPostRequest} createBookPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnableBookInfo} and HTTP response
     */
    createBookWithHttpInfo(createBookPostRequest) {
      let postBody = createBookPostRequest;
      // verify the required parameter 'createBookPostRequest' is set
      if (createBookPostRequest === undefined || createBookPostRequest === null) {
        throw new Error("Missing the required parameter 'createBookPostRequest' when calling createBook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = EnableBookInfo;

      return this.apiClient.callApi(
        '/create-book', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Kicks off request to create a book with reports of your choice
     * This end point retrieves book name and book_id for the PDF book you create. All the book options such as name of the book, ticker, pagination options, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
     * @param {module:model/CreateBookPostRequest} createBookPostRequest 
     * @return { Promise.< module:model/EnableBookInfo > } a Promise, with data of type {@link module:model/EnableBookInfo }
     */
    createBook(createBookPostRequest) {
      return this.createBookWithHttpInfo(createBookPostRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Kicks off request to create a book with template
     * This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet's default template.</br></br>Please try out the below template ids to quickly get the FactSet curated books</br></br>Company Quick Book - <b>g_20210415065838185</b></br>Post-Earnings Call - <b>g_20210415070044785</b> </br>Public Information Book(PIB) - <b>g_20210415070353151</b></br></br> Take a look at the example books attached under API documentation below.</br></br>If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.</br> </br>Once a Raw Transcript is published, FactSet's editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call's completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
     * @param {module:model/CreateBookFromTemplatePostRequest} createBookFromTemplatePostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnableBookInfoFromTemplate} and HTTP response
     */
    createBookFromTemplateWithHttpInfo(createBookFromTemplatePostRequest) {
      let postBody = createBookFromTemplatePostRequest;
      // verify the required parameter 'createBookFromTemplatePostRequest' is set
      if (createBookFromTemplatePostRequest === undefined || createBookFromTemplatePostRequest === null) {
        throw new Error("Missing the required parameter 'createBookFromTemplatePostRequest' when calling createBookFromTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = EnableBookInfoFromTemplate;

      return this.apiClient.callApi(
        '/create-book-from-template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Kicks off request to create a book with template
     * This endpoint retrieves book status, book name, and book ID for ticker requested in JSON format. This end-point excepts ticker and template_id as inputs. If the template_id input is not used, a book will be created with FactSet's default template.</br></br>Please try out the below template ids to quickly get the FactSet curated books</br></br>Company Quick Book - <b>g_20210415065838185</b></br>Post-Earnings Call - <b>g_20210415070044785</b> </br>Public Information Book(PIB) - <b>g_20210415070353151</b></br></br> Take a look at the example books attached under API documentation below.</br></br>If you are scheduling Post Earnings Call curated book, please note that in contains Corrected Transcript that takes a little while to be available.</br> </br>Once a Raw Transcript is published, FactSet's editors review the call to produce a Corrected Transcript. They listen to the entire audio file again to confirm that all of the terms and numbers are correctly transcribed. FactSet aims to publish a Corrected Transcript within six times the length of the event, measured from the beginning of the event. That means for a typical one-hour call, FactSet will produce a Corrected Transcript within approximately five hours of the call's completion. Visit [OA 13208](https://my.apps.factset.com/oa/pages/13208)
     * @param {module:model/CreateBookFromTemplatePostRequest} createBookFromTemplatePostRequest 
     * @return { Promise.< module:model/EnableBookInfoFromTemplate > } a Promise, with data of type {@link module:model/EnableBookInfoFromTemplate }
     */
    createBookFromTemplate(createBookFromTemplatePostRequest) {
      return this.createBookFromTemplateWithHttpInfo(createBookFromTemplatePostRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * This endpoint retrieves all available sections and reports based on a ticker.
     * This endpoint retrieves all available sections and reports for a specified ticker. The only parameter required is the ticker.
     * @param {String} ticker A string representing a specific ticker of Public, Private companies and Mutual Funds. This ticker must be provided in the URL path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AvailableReportsList} and HTTP response
     */
    getAvailableReportsWithHttpInfo(ticker) {
      let postBody = null;
      // verify the required parameter 'ticker' is set
      if (ticker === undefined || ticker === null) {
        throw new Error("Missing the required parameter 'ticker' when calling getAvailableReports");
      }

      let pathParams = {
        'ticker': ticker
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = AvailableReportsList;

      return this.apiClient.callApi(
        '/available-report/{ticker}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * This endpoint retrieves all available sections and reports based on a ticker.
     * This endpoint retrieves all available sections and reports for a specified ticker. The only parameter required is the ticker.
     * @param {String} ticker A string representing a specific ticker of Public, Private companies and Mutual Funds. This ticker must be provided in the URL path.
     * @return { Promise.< module:model/AvailableReportsList > } a Promise, with data of type {@link module:model/AvailableReportsList }
     */
    getAvailableReports(ticker) {
      return this.getAvailableReportsWithHttpInfo(ticker)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





