/**
 * BookBuilder
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTemplatePostRequest from '../model/CreateTemplatePostRequest';
import EnableTemplateInfoPost from '../model/EnableTemplateInfoPost';
import InvalidTemplateRequest from '../model/InvalidTemplateRequest';

/**
* TemplatesCreation service.
* @module api/TemplatesCreationApi
*/
export default class TemplatesCreationApi {

    /**
    * Constructs a new TemplatesCreationApi. 
    * @alias module:api/TemplatesCreationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Kick off request to create template with reports of your choice
     * This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
     * @param {module:model/CreateTemplatePostRequest} createTemplatePostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnableTemplateInfoPost} and HTTP response
     */
    createTemplateWithHttpInfo(createTemplatePostRequest) {
      let postBody = createTemplatePostRequest;
      // verify the required parameter 'createTemplatePostRequest' is set
      if (createTemplatePostRequest === undefined || createTemplatePostRequest === null) {
        throw new Error("Missing the required parameter 'createTemplatePostRequest' when calling createTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = EnableTemplateInfoPost;

      return this.apiClient.callApi(
        '/create-template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Kick off request to create template with reports of your choice
     * This end point retrieves template name and template_id of the template you create. All the book options such as name of the template, type, and reports can be specified in the request body. Please refer to the documentation for valid section ids and report ids.
     * @param {module:model/CreateTemplatePostRequest} createTemplatePostRequest 
     * @return { Promise.< module:model/EnableTemplateInfoPost > } a Promise, with data of type {@link module:model/EnableTemplateInfoPost }
     */
    createTemplate(createTemplatePostRequest) {
      return this.createTemplateWithHttpInfo(createTemplatePostRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





