/**
 * BookBuilder
 * The BookBuilder API is a powerful tool that combines detailed reports for companies of interest. Save time by using a single source of knowledge instead of relying on multiple APIs to create a presentation ready PDF, also known as a Public Information Book(PIB). </br></br> Consistently create books with the same content/reports for different companies by defining templates with the set of reports saved for re-use. Or, use templates that are created by FactSet for quick use. </br></br> With our powerful API endpoints, you can get the information on companies of interest quickly where and when you need it. </br></br> 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BookInfo from '../model/BookInfo';
import BookProcessingResponseItem from '../model/BookProcessingResponseItem';
import EnableBookDownload from '../model/EnableBookDownload';
import InvalidDownloadBookAwsRequest from '../model/InvalidDownloadBookAwsRequest';

/**
* BooksFetch service.
* @module api/BooksFetchApi
*/
export default class BooksFetchApi {

    /**
    * Constructs a new BooksFetchApi. 
    * @alias module:api/BooksFetchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieves book in PDF format
     * This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. <br><br> NOTE -- The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. <br><br><b><i>The actual endpoint is </b><font color=blue>https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}</font></i>
     * @param {String} bookId A string representing the unique ID for a specific book. This ID must be provided in the URL path.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnableBookDownload} and HTTP response
     */
    downloadBookWithHttpInfo(bookId) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling downloadBook");
      }

      let pathParams = {
        'book_id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];

      let returnType = DownloadBookResponseWrapperTypeMap;
      
      return this.apiClient.callApi(
        '/download-api-book-aws/{book_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves book in PDF format
     * This endpoint uses the BookId returned from any of the request above. Returns the URL to load the book for the book ID requested. The URL will be in JSON format, the final book will be in PDF format. <br><br> NOTE -- The execution of this endpoint requires an extra step within the developer portal due to authentication limitations. When using the actual API, a successful response for this endpoint will be the PDF book rather than the URL to the PDF. <br><br><b><i>The actual endpoint is </b><font color=blue>https://api.factset.com/book-builder-api/v1/download-api-book/{book_id}</font></i>
     * @param {String} bookId A string representing the unique ID for a specific book. This ID must be provided in the URL path.
     * @return { Promise.< DownloadBookResponseWrapper > } a Promise, with data of type {@link DownloadBookResponseWrapper }
     */
    downloadBook(bookId) {
      return this.downloadBookWithHttpInfo(bookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check out the books that are in the book library
     * Retrieves the list of books that were previously created and are available in the client's book library
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BookInfo>} and HTTP response
     */
    getBookListWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [BookInfo];

      return this.apiClient.callApi(
        '/book-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check out the books that are in the book library
     * Retrieves the list of books that were previously created and are available in the client's book library
     * @return { Promise.< Array.<module:model/BookInfo> > } a Promise, with data of type {@link Array.<module:model/BookInfo> }
     */
    getBookList() {
      return this.getBookListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}


const DownloadBookResponseWrapperTypeMap = {
  200: EnableBookDownload,
  202: [BookProcessingResponseItem],
  400: InvalidDownloadBookAwsRequest,
  401: String,
  503: InvalidDownloadBookAwsRequest,

  _createResponseWrapper(statusCode, response) {
    return new DownloadBookResponseWrapper(statusCode, response);
  }
};



/**
 * Wrapper to support GET /download-api-book-aws/{book_id} returning different types
 * per status code.
 *
 * <p>
 * Responses:
 * <ul>
 *   <li>200 : {@code EnableBookDownload }<br>Successful response contains URL to load the book for the BookID requested</li>
 * 
 *   <li>202 : {@code [BookProcessingResponseItem] }<br>Book is processing. Please check back later.</li>
 * </ul>
 *
 * </p>
 * Example:
 * <pre>{@code
 * const response = ...;
 * switch (response.statusCode) {
 *   case 200:
 *     EnableBookDownload data200 = response.getResponse200();
 *     break;
 *   case 202:
 *     [BookProcessingResponseItem] data202 = response.getResponse202();
 *     break;
 *  }
 * }</pre>
 *
 * @alias module:DownloadBookResponseWrapper
 * @class
 */
export class DownloadBookResponseWrapper {

  /**
   * @param {number} statusCode
   * @param {*} response
   */
  constructor(statusCode, response) {
    /**
     * @type {number}
     */
    this.statusCode = statusCode;

    /**
     * @type {*}
     */
    this.response = response;
  }

  
  /**
   * @returns { EnableBookDownload }
   */
  getResponse200() {
    if (this.statusCode !== 200) {
      throw new Error("Invalid response getter called. getResponse200 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
  /**
   * @returns { [BookProcessingResponseItem] }
   */
  getResponse202() {
    if (this.statusCode !== 202) {
      throw new Error("Invalid response getter called. getResponse202 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
}


