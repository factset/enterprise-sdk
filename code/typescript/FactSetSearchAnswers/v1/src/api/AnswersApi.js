/**
 * FactSet Search Answers API
 * The FactSet Search Answers API provides answers to search queries, reflecting the data shown within FactSet Search Answers, and allowing you to easily add financial data to your widgets, lookups, bots, and assistants. The API understands a fixed amount of search terms and returns structured data from FactSetâ€™s many data sources. Possible answers include Price of a Company, Top 10 Year-to-Date Gainers, Revenue per Passenger Mile, and many more.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdaptiveCardAnswerSuccessResponse from '../model/AdaptiveCardAnswerSuccessResponse';
import AnswerFailureResponse from '../model/AnswerFailureResponse';
import DataAnswerSuccessResponse from '../model/DataAnswerSuccessResponse';

/**
* Answers service.
* @module api/AnswersApi
*/
export default class AnswersApi {

    /**
    * Constructs a new AnswersApi. 
    * @alias module:api/AnswersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Fetch FactSet answer in Adaptive Card format
     * Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
     * @param {String} query Query for desired answer (e.g., \"fds price\")
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeThumbnail Includes thumbnail of Adaptive Card in response (default to false)
     * @param {Boolean} opts.disableNoAnswerResponses Disables no-result answer responses (no-results and answer without data) (default to true)
     * @param {String} opts.theme Theme for desired answer (e.g., \"Light\", \"Dark\") (default to 'Light')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AdaptiveCardAnswerSuccessResponse} and HTTP response
     */
    searchForAdaptiveCardAnswerWithHttpInfo(query, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchForAdaptiveCardAnswer");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'includeThumbnail': opts['includeThumbnail'],
        'disableNoAnswerResponses': opts['disableNoAnswerResponses'],
        'theme': opts['theme']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = AdaptiveCardAnswerSuccessResponse;

      return this.apiClient.callApi(
        '/search/answers/v1/adaptive-card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch FactSet answer in Adaptive Card format
     * Returns an answer to the specified query (if valid answer exists) in the Adaptive Card format (https://adaptivecards.io/).
     * @param {String} query Query for desired answer (e.g., \"fds price\")
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeThumbnail Includes thumbnail of Adaptive Card in response (default to false)
     * @param {Boolean} opts.disableNoAnswerResponses Disables no-result answer responses (no-results and answer without data) (default to true)
     * @param {String} opts.theme Theme for desired answer (e.g., \"Light\", \"Dark\") (default to 'Light')
     * @return { Promise.< module:model/AdaptiveCardAnswerSuccessResponse > } a Promise, with data of type {@link module:model/AdaptiveCardAnswerSuccessResponse }
     */
    searchForAdaptiveCardAnswer(query, opts) {
      return this.searchForAdaptiveCardAnswerWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch FactSet answer in data format
     * Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
     * @param {String} query Query for desired answer (e.g., \"fds price\")
     * @param {Object} opts Optional parameters
     * @param {String} opts.consumingApplication Name of application consuming the API (used for analytics purposes) (default to 'Developer Portal')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataAnswerSuccessResponse} and HTTP response
     */
    searchForDataAnswerWithHttpInfo(query, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchForDataAnswer");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'consumingApplication': opts['consumingApplication']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = DataAnswerSuccessResponse;

      return this.apiClient.callApi(
        '/search/answers/v1/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch FactSet answer in data format
     * Returns an answer to the specified query (if a valid answer exists). Returns the answer data only (as JSON), without any markup information.
     * @param {String} query Query for desired answer (e.g., \"fds price\")
     * @param {Object} opts Optional parameters
     * @param {String} opts.consumingApplication Name of application consuming the API (used for analytics purposes) (default to 'Developer Portal')
     * @return { Promise.< module:model/DataAnswerSuccessResponse > } a Promise, with data of type {@link module:model/DataAnswerSuccessResponse }
     */
    searchForDataAnswer(query, opts) {
      return this.searchForDataAnswerWithHttpInfo(query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





