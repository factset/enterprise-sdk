/**
 * Investment Research API
 *  The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.    
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssetTypesResponse from '../model/AssetTypesResponse';
import CategoriesResponse from '../model/CategoriesResponse';
import ErrorResponse from '../model/ErrorResponse';
import ResearchAnalystResponse from '../model/ResearchAnalystResponse';
import ResearchContributorResponse from '../model/ResearchContributorResponse';
import SecurityTypesResponse from '../model/SecurityTypesResponse';
import TimeZonesResponse from '../model/TimeZonesResponse';

/**
* Meta service.
* @module api/MetaApi
*/
export default class MetaApi {

    /**
    * Constructs a new MetaApi. 
    * @alias module:api/MetaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the codes indicating asset types.
     * Retrieves and delivers a comprehensive list all codes indicating asset types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetTypesResponse} and HTTP response
     */
    getAssetTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = AssetTypesResponse;

      return this.apiClient.callApi(
        '/meta/asset-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the codes indicating asset types.
     * Retrieves and delivers a comprehensive list all codes indicating asset types.
     * @return { Promise.< module:model/AssetTypesResponse > } a Promise, with data of type {@link module:model/AssetTypesResponse }
     */
    getAssetTypes() {
      return this.getAssetTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoriesResponse} and HTTP response
     */
    getCategoriesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CategoriesResponse;

      return this.apiClient.callApi(
        '/meta/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`.
     * @return { Promise.< module:model/CategoriesResponse > } a Promise, with data of type {@link module:model/CategoriesResponse }
     */
    getCategories() {
      return this.getCategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the research analysts' details.
     * Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
     * @param {Number} contributorId Contributor id. Use the ```/meta/research-contributors``` endpoint to get the list of permissioned contributors.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResearchAnalystResponse} and HTTP response
     */
    getResearchAnalystWithHttpInfo(contributorId) {
      let postBody = null;
      // verify the required parameter 'contributorId' is set
      if (contributorId === undefined || contributorId === null) {
        throw new Error("Missing the required parameter 'contributorId' when calling getResearchAnalyst");
      }

      let pathParams = {
      };
      let queryParams = {
        'contributorId': contributorId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResearchAnalystResponse;

      return this.apiClient.callApi(
        '/meta/research-analysts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the research analysts' details.
     * Retrieves and delivers a comprehensive list of all the analysts available for the individual Contributor. The results will provide an analyst name and the analyst’s id number.
     * @param {Number} contributorId Contributor id. Use the ```/meta/research-contributors``` endpoint to get the list of permissioned contributors.
     * @return { Promise.< module:model/ResearchAnalystResponse > } a Promise, with data of type {@link module:model/ResearchAnalystResponse }
     */
    getResearchAnalyst(contributorId) {
      return this.getResearchAnalystWithHttpInfo(contributorId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the research contributors' details.
     * Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResearchContributorResponse} and HTTP response
     */
    getResearchContributorWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResearchContributorResponse;

      return this.apiClient.callApi(
        '/meta/research-contributors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the research contributors' details.
     * Retrieves and delivers a comprehensive list of all the Contributor IDs that your firm is permissioned to view.
     * @return { Promise.< module:model/ResearchContributorResponse > } a Promise, with data of type {@link module:model/ResearchContributorResponse }
     */
    getResearchContributor() {
      return this.getResearchContributorWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the codes indicating security types.
     * Retrieves and delivers a comprehensive list all codes indicating security types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityTypesResponse} and HTTP response
     */
    getSecurityTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SecurityTypesResponse;

      return this.apiClient.callApi(
        '/meta/security-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the codes indicating security types.
     * Retrieves and delivers a comprehensive list all codes indicating security types.
     * @return { Promise.< module:model/SecurityTypesResponse > } a Promise, with data of type {@link module:model/SecurityTypesResponse }
     */
    getSecurityTypes() {
      return this.getSecurityTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `time-zones`supported by API.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TimeZonesResponse} and HTTP response
     */
    getTimezonesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TimeZonesResponse;

      return this.apiClient.callApi(
        '/meta/time-zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `time-zones`supported by API.
     * @return { Promise.< module:model/TimeZonesResponse > } a Promise, with data of type {@link module:model/TimeZonesResponse }
     */
    getTimezones() {
      return this.getTimezonesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





