/**
 * Investment Research API
 *  The Investment Research API provides a comprehensive set of functionalities for searching and retrieving research reports and documents from various contributors.  This API is designed to expose document search and document retrieval functionality. A document search will allow a request to query FactSet document databases based on certain search criteria specified in the request.  FactSet collects research reports and models from brokers, independent research providers, market research firms, rating agencies, and other publishers of research. These documents are processed and made available to clients within about two minutes of receipt.  FactSet delivers this content through two main products:  **FactSet Research Connect** – real-time research for investment managers entitled by the contributors to access the content.  **FactSet Aftermarket Research** – delayed research for investment bankers permitted by contributors to purchase the research.  The meta endpoints namely time-zones, categories, research-contributors, research-analysts, security-types and asset-types provide comprehensive lists of data that is used in the research endpoints.    
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Document model module.
 * @module model/Document
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * Response
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('primaryIds')) {
                obj['primaryIds'] = ApiClient.convertToType(data['primaryIds'], ['String']);
            }
            if (data.hasOwnProperty('allIds')) {
                obj['allIds'] = ApiClient.convertToType(data['allIds'], ['String']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('storyDateTime')) {
                obj['storyDateTime'] = ApiClient.convertToType(data['storyDateTime'], 'Date');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('contributorName')) {
                obj['contributorName'] = ApiClient.convertToType(data['contributorName'], 'String');
            }
            if (data.hasOwnProperty('contributorId')) {
                obj['contributorId'] = ApiClient.convertToType(data['contributorId'], 'Number');
            }
            if (data.hasOwnProperty('analystName')) {
                obj['analystName'] = ApiClient.convertToType(data['analystName'], ['String']);
            }
            if (data.hasOwnProperty('analystId')) {
                obj['analystId'] = ApiClient.convertToType(data['analystId'], ['Number']);
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], 'Number');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('reportFoci')) {
                obj['reportFoci'] = ApiClient.convertToType(data['reportFoci'], ['String']);
            }
            if (data.hasOwnProperty('assetClasses')) {
                obj['assetClasses'] = ApiClient.convertToType(data['assetClasses'], ['String']);
            }
            if (data.hasOwnProperty('assetTypes')) {
                obj['assetTypes'] = ApiClient.convertToType(data['assetTypes'], ['String']);
            }
            if (data.hasOwnProperty('coverageActions')) {
                obj['coverageActions'] = ApiClient.convertToType(data['coverageActions'], ['String']);
            }
            if (data.hasOwnProperty('compilationIndicators')) {
                obj['compilationIndicators'] = ApiClient.convertToType(data['compilationIndicators'], 'Boolean');
            }
            if (data.hasOwnProperty('disciplines')) {
                obj['disciplines'] = ApiClient.convertToType(data['disciplines'], ['String']);
            }
            if (data.hasOwnProperty('issuerTypes')) {
                obj['issuerTypes'] = ApiClient.convertToType(data['issuerTypes'], ['String']);
            }
            if (data.hasOwnProperty('periodicities')) {
                obj['periodicities'] = ApiClient.convertToType(data['periodicities'], ['String']);
            }
            if (data.hasOwnProperty('purposes')) {
                obj['purposes'] = ApiClient.convertToType(data['purposes'], ['String']);
            }
            if (data.hasOwnProperty('ratingActions')) {
                obj['ratingActions'] = ApiClient.convertToType(data['ratingActions'], ['String']);
            }
            if (data.hasOwnProperty('researchApproaches')) {
                obj['researchApproaches'] = ApiClient.convertToType(data['researchApproaches'], ['String']);
            }
            if (data.hasOwnProperty('securityTypes')) {
                obj['securityTypes'] = ApiClient.convertToType(data['securityTypes'], ['String']);
            }
            if (data.hasOwnProperty('targetActions')) {
                obj['targetActions'] = ApiClient.convertToType(data['targetActions'], ['String']);
            }
            if (data.hasOwnProperty('weightingActions')) {
                obj['weightingActions'] = ApiClient.convertToType(data['weightingActions'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Concise title or summary of the research story or document.
 * @member {String} headline
 */
Document.prototype['headline'] = undefined;

/**
 * Provides source of the document.  • FRC – FactSet Research Connect   • AMR – Aftermarket Research
 * @member {String} source
 */
Document.prototype['source'] = undefined;

/**
 * Refers to the main company a particular document refers to.
 * @member {Array.<String>} primaryIds
 */
Document.prototype['primaryIds'] = undefined;

/**
 * Refers to all companies mentioned in the document. This could also include the primary company id as well.
 * @member {Array.<String>} allIds
 */
Document.prototype['allIds'] = undefined;

/**
 * Provides the category of the document, list is provided by the `/meta/categories` endpoint.
 * @member {Array.<String>} categories
 */
Document.prototype['categories'] = undefined;

/**
 * Publish date and time of the latest version, in RFC 3339 format (a subset of ISO 8601), e.g., 2024-07-03T14:00:00Z (UTC).
 * @member {Date} storyDateTime
 */
Document.prototype['storyDateTime'] = undefined;

/**
 * The link to download the document.
 * @member {String} link
 */
Document.prototype['link'] = undefined;

/**
 * Research specific metadata providing the name of the research contributor.
 * @member {String} contributorName
 */
Document.prototype['contributorName'] = undefined;

/**
 * Research specific metadata providing the ID of the research contributor.
 * @member {Number} contributorId
 */
Document.prototype['contributorId'] = undefined;

/**
 * Research specific metadata providing the name of the analyst(s) who wrote the research.
 * @member {Array.<String>} analystName
 */
Document.prototype['analystName'] = undefined;

/**
 * Research specific metadata providing the ID of the analyst(s) who wrote the research.
 * @member {Array.<Number>} analystId
 */
Document.prototype['analystId'] = undefined;

/**
 * Total number of pages in the document.
 * @member {Number} pages
 */
Document.prototype['pages'] = undefined;

/**
 * Unique identifier for a document.
 * @member {String} documentId
 */
Document.prototype['documentId'] = undefined;

/**
 * One or more classification codes indicating the primary focus of the document.
 * @member {Array.<String>} reportFoci
 */
Document.prototype['reportFoci'] = undefined;

/**
 * One or more codes indicating asset classes covered in the document.
 * @member {Array.<String>} assetClasses
 */
Document.prototype['assetClasses'] = undefined;

/**
 * One or more codes indicating asset types.
 * @member {Array.<String>} assetTypes
 */
Document.prototype['assetTypes'] = undefined;

/**
 * One or more codes indicating coverage actions.
 * @member {Array.<String>} coverageActions
 */
Document.prototype['coverageActions'] = undefined;

/**
 * An indication of whether the document contains new material or is a compilation/summary of separately published material.
 * @member {Boolean} compilationIndicators
 */
Document.prototype['compilationIndicators'] = undefined;

/**
 * One or more codes indicating the disciplines reflected in the document.
 * @member {Array.<String>} disciplines
 */
Document.prototype['disciplines'] = undefined;

/**
 * One or more codes indicating issuer types covered in the document.
 * @member {Array.<String>} issuerTypes
 */
Document.prototype['issuerTypes'] = undefined;

/**
 * One or more codes indicating the fixed time interval at which the document is published.
 * @member {Array.<String>} periodicities
 */
Document.prototype['periodicities'] = undefined;

/**
 * One or more codes indicating the report purpose of the document.
 * @member {Array.<String>} purposes
 */
Document.prototype['purposes'] = undefined;

/**
 * One or more codes indicating rating actions discussed in the document.
 * @member {Array.<String>} ratingActions
 */
Document.prototype['ratingActions'] = undefined;

/**
 * One or more codes indicating the research perspective provided in the document.
 * @member {Array.<String>} researchApproaches
 */
Document.prototype['researchApproaches'] = undefined;

/**
 * One or more codes indicating security types.
 * @member {Array.<String>} securityTypes
 */
Document.prototype['securityTypes'] = undefined;

/**
 * One or more codes indicating target price actions discussed in the document.
 * @member {Array.<String>} targetActions
 */
Document.prototype['targetActions'] = undefined;

/**
 * One or more codes indicating weighting actions discussed in the document.
 * @member {Array.<String>} weightingActions
 */
Document.prototype['weightingActions'] = undefined;






export default Document;

