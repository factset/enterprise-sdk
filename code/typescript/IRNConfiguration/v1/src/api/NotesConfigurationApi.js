/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthorConfigDto from '../model/AuthorConfigDto';
import ClientSalesRepresentativeDto from '../model/ClientSalesRepresentativeDto';
import CustomFieldConfigDto from '../model/CustomFieldConfigDto';
import GroupConfigDto from '../model/GroupConfigDto';
import ProblemDetails from '../model/ProblemDetails';
import RecommendationConfigDto from '../model/RecommendationConfigDto';
import SentimentConfigDto from '../model/SentimentConfigDto';
import SubjectConfigDto from '../model/SubjectConfigDto';
import SubjectSummaryDto from '../model/SubjectSummaryDto';
import TeamConfigDto from '../model/TeamConfigDto';
import TeamSummaryDto from '../model/TeamSummaryDto';
import UserConfigDto from '../model/UserConfigDto';

/**
* NotesConfiguration service.
* @module api/NotesConfigurationApi
*/
export default class NotesConfigurationApi {

    /**
    * Constructs a new NotesConfigurationApi. 
    * @alias module:api/NotesConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get all assigned FactSet users
     * Get all assigned FactSet users in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserConfigDto>} and HTTP response
     */
    getAssignedFactSetUsersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [UserConfigDto];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all assigned FactSet users
     * Get all assigned FactSet users in your group
     * @return { Promise.< Array.<module:model/UserConfigDto> > } a Promise, with data of type {@link Array.<module:model/UserConfigDto> }
     */
    getAssignedFactSetUsers() {
      return this.getAssignedFactSetUsersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Authors
     * Get all Authors
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions If set to true, permissions will be ignored. Default is false. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AuthorConfigDto>} and HTTP response
     */
    getAuthorsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [AuthorConfigDto];

      return this.apiClient.callApi(
        '/authors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Authors
     * Get all Authors
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions If set to true, permissions will be ignored. Default is false. (default to false)
     * @return { Promise.< Array.<module:model/AuthorConfigDto> > } a Promise, with data of type {@link Array.<module:model/AuthorConfigDto> }
     */
    getAuthors(opts) {
      return this.getAuthorsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Client Sales Representative
     * Get the client sales representative for the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientSalesRepresentativeDto} and HTTP response
     */
    getClientsSalesRepresentativeWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ClientSalesRepresentativeDto;

      return this.apiClient.callApi(
        '/group/client-sales-representative', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Client Sales Representative
     * Get the client sales representative for the group
     * @return { Promise.< module:model/ClientSalesRepresentativeDto > } a Promise, with data of type {@link module:model/ClientSalesRepresentativeDto }
     */
    getClientsSalesRepresentative() {
      return this.getClientsSalesRepresentativeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Custom Fields
     * Get all customfields configured in your group
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CustomFieldConfigDto>} and HTTP response
     */
    getCustomFieldsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [CustomFieldConfigDto];

      return this.apiClient.callApi(
        '/custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Custom Fields
     * Get all customfields configured in your group
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return { Promise.< Array.<module:model/CustomFieldConfigDto> > } a Promise, with data of type {@link Array.<module:model/CustomFieldConfigDto> }
     */
    getCustomFields(opts) {
      return this.getCustomFieldsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Group details
     * Get all the group details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupConfigDto} and HTTP response
     */
    getGroupWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = GroupConfigDto;

      return this.apiClient.callApi(
        '/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Group details
     * Get all the group details
     * @return { Promise.< module:model/GroupConfigDto > } a Promise, with data of type {@link module:model/GroupConfigDto }
     */
    getGroup() {
      return this.getGroupWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Recommendations
     * Get all recommendations configured in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RecommendationConfigDto>} and HTTP response
     */
    getRecommendationsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [RecommendationConfigDto];

      return this.apiClient.callApi(
        '/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Recommendations
     * Get all recommendations configured in your group
     * @return { Promise.< Array.<module:model/RecommendationConfigDto> > } a Promise, with data of type {@link Array.<module:model/RecommendationConfigDto> }
     */
    getRecommendations() {
      return this.getRecommendationsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Sentiments
     * Get all sentiments configured in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SentimentConfigDto>} and HTTP response
     */
    getSentimentsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [SentimentConfigDto];

      return this.apiClient.callApi(
        '/sentiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Sentiments
     * Get all sentiments configured in your group
     * @return { Promise.< Array.<module:model/SentimentConfigDto> > } a Promise, with data of type {@link Array.<module:model/SentimentConfigDto> }
     */
    getSentiments() {
      return this.getSentimentsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Subject details for the given Id provided
     * Get all details of a given subject
     * @param {String} subjectId Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubjectConfigDto} and HTTP response
     */
    getSubjectWithHttpInfo(subjectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling getSubject");
      }

      let pathParams = {
        'subjectId': subjectId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SubjectConfigDto;

      return this.apiClient.callApi(
        '/subjects/{subjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Subject details for the given Id provided
     * Get all details of a given subject
     * @param {String} subjectId Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return { Promise.< module:model/SubjectConfigDto > } a Promise, with data of type {@link module:model/SubjectConfigDto }
     */
    getSubject(subjectId, opts) {
      return this.getSubjectWithHttpInfo(subjectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Subjects
     * Get all subjects configured in your group
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SubjectSummaryDto>} and HTTP response
     */
    getSubjectsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [SubjectSummaryDto];

      return this.apiClient.callApi(
        '/subjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Subjects
     * Get all subjects configured in your group
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions  (default to false)
     * @return { Promise.< Array.<module:model/SubjectSummaryDto> > } a Promise, with data of type {@link Array.<module:model/SubjectSummaryDto> }
     */
    getSubjects(opts) {
      return this.getSubjectsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Team details for the given Id provided
     * Get all details of a given team
     * @param {String} teamId Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions If set to true, permissions will be ignored. Default is false. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TeamConfigDto} and HTTP response
     */
    getTeamWithHttpInfo(teamId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling getTeam");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TeamConfigDto;

      return this.apiClient.callApi(
        '/teams/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Team details for the given Id provided
     * Get all details of a given team
     * @param {String} teamId Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions If set to true, permissions will be ignored. Default is false. (default to false)
     * @return { Promise.< module:model/TeamConfigDto > } a Promise, with data of type {@link module:model/TeamConfigDto }
     */
    getTeam(teamId, opts) {
      return this.getTeamWithHttpInfo(teamId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Teams
     * Get all teams configured in your group
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions If set to true, permissions will be ignored. Default is false. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TeamSummaryDto>} and HTTP response
     */
    getTeamsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-IRN-Ignore-Permissions': opts['xIRNIgnorePermissions']
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [TeamSummaryDto];

      return this.apiClient.callApi(
        '/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Teams
     * Get all teams configured in your group
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.xIRNIgnorePermissions If set to true, permissions will be ignored. Default is false. (default to false)
     * @return { Promise.< Array.<module:model/TeamSummaryDto> > } a Promise, with data of type {@link Array.<module:model/TeamSummaryDto> }
     */
    getTeams(opts) {
      return this.getTeamsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





