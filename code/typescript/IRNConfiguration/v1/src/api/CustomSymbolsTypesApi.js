/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomSymbolCustomFieldConfigDto from '../model/CustomSymbolCustomFieldConfigDto';
import CustomSymbolTypeDetailDto from '../model/CustomSymbolTypeDetailDto';
import CustomSymbolTypeDto from '../model/CustomSymbolTypeDto';
import NewItemDto from '../model/NewItemDto';
import ProblemDetails from '../model/ProblemDetails';
import ReorderCustomSymbolTypeDto from '../model/ReorderCustomSymbolTypeDto';
import SaveCustomSymbolTypeDto from '../model/SaveCustomSymbolTypeDto';
import UpdateCustomSymbolTypeDto from '../model/UpdateCustomSymbolTypeDto';

/**
* CustomSymbolsTypes service.
* @module api/CustomSymbolsTypesApi
*/
export default class CustomSymbolsTypesApi {

    /**
    * Constructs a new CustomSymbolsTypesApi. 
    * @alias module:api/CustomSymbolsTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Custom symbol type
     * Create a custom symbol type with given name
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveCustomSymbolTypeDto} opts.saveCustomSymbolTypeDto saveCustomSymbolTypeDto object to save
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewItemDto} and HTTP response
     */
    createCustomSymbolTypeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['saveCustomSymbolTypeDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = NewItemDto;

      return this.apiClient.callApi(
        '/custom-symbol-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Custom symbol type
     * Create a custom symbol type with given name
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveCustomSymbolTypeDto} opts.saveCustomSymbolTypeDto saveCustomSymbolTypeDto object to save
     * @return { Promise.< module:model/NewItemDto > } a Promise, with data of type {@link module:model/NewItemDto }
     */
    createCustomSymbolType(opts) {
      return this.createCustomSymbolTypeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Custom symbol type
     * Delete a custom symbol type based on guid
     * @param {String} customSymbolTypeId customSymbolTypeId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCustomSymbolTypeAsyncWithHttpInfo(customSymbolTypeId) {
      let postBody = null;
      // verify the required parameter 'customSymbolTypeId' is set
      if (customSymbolTypeId === undefined || customSymbolTypeId === null) {
        throw new Error("Missing the required parameter 'customSymbolTypeId' when calling deleteCustomSymbolTypeAsync");
      }

      let pathParams = {
        'customSymbolTypeId': customSymbolTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/custom-symbol-types/{customSymbolTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Custom symbol type
     * Delete a custom symbol type based on guid
     * @param {String} customSymbolTypeId customSymbolTypeId to delete associated record
     * @return { Promise } a Promise
     */
    deleteCustomSymbolTypeAsync(customSymbolTypeId) {
      return this.deleteCustomSymbolTypeAsyncWithHttpInfo(customSymbolTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific Custom symbol type's details
     * Get details of a given custom symbol type
     * @param {String} customSymbolTypeId customSymbolTypeId to get associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomSymbolTypeDetailDto} and HTTP response
     */
    getCustomSymbolTypeWithHttpInfo(customSymbolTypeId) {
      let postBody = null;
      // verify the required parameter 'customSymbolTypeId' is set
      if (customSymbolTypeId === undefined || customSymbolTypeId === null) {
        throw new Error("Missing the required parameter 'customSymbolTypeId' when calling getCustomSymbolType");
      }

      let pathParams = {
        'customSymbolTypeId': customSymbolTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CustomSymbolTypeDetailDto;

      return this.apiClient.callApi(
        '/custom-symbol-types/{customSymbolTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a specific Custom symbol type's details
     * Get details of a given custom symbol type
     * @param {String} customSymbolTypeId customSymbolTypeId to get associated record
     * @return { Promise.< module:model/CustomSymbolTypeDetailDto > } a Promise, with data of type {@link module:model/CustomSymbolTypeDetailDto }
     */
    getCustomSymbolType(customSymbolTypeId) {
      return this.getCustomSymbolTypeWithHttpInfo(customSymbolTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all the custom symbol types
     * Get all custom symbol types configured in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CustomSymbolTypeDto>} and HTTP response
     */
    getCustomSymbolTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [CustomSymbolTypeDto];

      return this.apiClient.callApi(
        '/custom-symbol-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all the custom symbol types
     * Get all custom symbol types configured in your group
     * @return { Promise.< Array.<module:model/CustomSymbolTypeDto> > } a Promise, with data of type {@link Array.<module:model/CustomSymbolTypeDto> }
     */
    getCustomSymbolTypes() {
      return this.getCustomSymbolTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Custom fields for Custom Symbol type
     * Get all custom fields configured for custom symbols configured in your group
     * @param {String} customSymbolTypeId customSymbolTypeId to get associated Custom fileds
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CustomSymbolCustomFieldConfigDto>} and HTTP response
     */
    getSymbolCustomFieldsForCustomSymbolTypeWithHttpInfo(customSymbolTypeId) {
      let postBody = null;
      // verify the required parameter 'customSymbolTypeId' is set
      if (customSymbolTypeId === undefined || customSymbolTypeId === null) {
        throw new Error("Missing the required parameter 'customSymbolTypeId' when calling getSymbolCustomFieldsForCustomSymbolType");
      }

      let pathParams = {
        'customSymbolTypeId': customSymbolTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [CustomSymbolCustomFieldConfigDto];

      return this.apiClient.callApi(
        '/custom-symbol-types/{customSymbolTypeId}/custom-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Custom fields for Custom Symbol type
     * Get all custom fields configured for custom symbols configured in your group
     * @param {String} customSymbolTypeId customSymbolTypeId to get associated Custom fileds
     * @return { Promise.< Array.<module:model/CustomSymbolCustomFieldConfigDto> > } a Promise, with data of type {@link Array.<module:model/CustomSymbolCustomFieldConfigDto> }
     */
    getSymbolCustomFieldsForCustomSymbolType(customSymbolTypeId) {
      return this.getSymbolCustomFieldsForCustomSymbolTypeWithHttpInfo(customSymbolTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a Custom symbol type
     * Update a custom symbol type configuration
     * @param {String} customSymbolTypeId customSymbolTypeId to update associated record
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateCustomSymbolTypeDto} opts.updateCustomSymbolTypeDto updateCustomSymbolTypeDto object to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateCustomSymbolTypeWithHttpInfo(customSymbolTypeId, opts) {
      opts = opts || {};
      let postBody = opts['updateCustomSymbolTypeDto'];
      // verify the required parameter 'customSymbolTypeId' is set
      if (customSymbolTypeId === undefined || customSymbolTypeId === null) {
        throw new Error("Missing the required parameter 'customSymbolTypeId' when calling updateCustomSymbolType");
      }

      let pathParams = {
        'customSymbolTypeId': customSymbolTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/custom-symbol-types/{customSymbolTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a Custom symbol type
     * Update a custom symbol type configuration
     * @param {String} customSymbolTypeId customSymbolTypeId to update associated record
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateCustomSymbolTypeDto} opts.updateCustomSymbolTypeDto updateCustomSymbolTypeDto object to update
     * @return { Promise } a Promise
     */
    updateCustomSymbolType(customSymbolTypeId, opts) {
      return this.updateCustomSymbolTypeWithHttpInfo(customSymbolTypeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reorder custom symbol types
     * Reorder custom symbol types that are configured in your group
     * @param {Object} opts Optional parameters
     * @param {module:model/ReorderCustomSymbolTypeDto} opts.reorderCustomSymbolTypeDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateCustomSymbolTypeOrderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['reorderCustomSymbolTypeDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/custom-symbol-types/reorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reorder custom symbol types
     * Reorder custom symbol types that are configured in your group
     * @param {Object} opts Optional parameters
     * @param {module:model/ReorderCustomSymbolTypeDto} opts.reorderCustomSymbolTypeDto 
     * @return { Promise } a Promise
     */
    updateCustomSymbolTypeOrder(opts) {
      return this.updateCustomSymbolTypeOrderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





