/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewItemDto from '../model/NewItemDto';
import ProblemDetails from '../model/ProblemDetails';
import SymbolsRelationShipSaveDto from '../model/SymbolsRelationShipSaveDto';
import SymbolsRelationshipDto from '../model/SymbolsRelationshipDto';

/**
* CustomSymbolsRelationships service.
* @module api/CustomSymbolsRelationshipsApi
*/
export default class CustomSymbolsRelationshipsApi {

    /**
    * Constructs a new CustomSymbolsRelationshipsApi. 
    * @alias module:api/CustomSymbolsRelationshipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a symbol relationship
     * Create a symbol relationship with given name
     * @param {Object} opts Optional parameters
     * @param {module:model/SymbolsRelationShipSaveDto} opts.symbolsRelationShipSaveDto symbolsRelationshipSaveDto object to save
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewItemDto} and HTTP response
     */
    createSymbolRelationshipTypeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['symbolsRelationShipSaveDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = NewItemDto;

      return this.apiClient.callApi(
        '/symbols-relationships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a symbol relationship
     * Create a symbol relationship with given name
     * @param {Object} opts Optional parameters
     * @param {module:model/SymbolsRelationShipSaveDto} opts.symbolsRelationShipSaveDto symbolsRelationshipSaveDto object to save
     * @return { Promise.< module:model/NewItemDto > } a Promise, with data of type {@link module:model/NewItemDto }
     */
    createSymbolRelationshipType(opts) {
      return this.createSymbolRelationshipTypeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a symbol relationship
     * Delete a symbol relationship based on guid
     * @param {String} symbolsRelationshipId symbolsRelationshipId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSymbolsRelationshipWithHttpInfo(symbolsRelationshipId) {
      let postBody = null;
      // verify the required parameter 'symbolsRelationshipId' is set
      if (symbolsRelationshipId === undefined || symbolsRelationshipId === null) {
        throw new Error("Missing the required parameter 'symbolsRelationshipId' when calling deleteSymbolsRelationship");
      }

      let pathParams = {
        'symbolsRelationshipId': symbolsRelationshipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/symbols-relationships/{symbolsRelationshipId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a symbol relationship
     * Delete a symbol relationship based on guid
     * @param {String} symbolsRelationshipId symbolsRelationshipId to delete associated record
     * @return { Promise } a Promise
     */
    deleteSymbolsRelationship(symbolsRelationshipId) {
      return this.deleteSymbolsRelationshipWithHttpInfo(symbolsRelationshipId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a symbol relationship
     * Update a symbol relationship
     * @param {String} symbolsRelationshipId symbolsRelationshipId to update associated record
     * @param {Object} opts Optional parameters
     * @param {module:model/SymbolsRelationShipSaveDto} opts.symbolsRelationShipSaveDto SymbolsRelationShipSaveDto object to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    editSymbolsRelationshipWithHttpInfo(symbolsRelationshipId, opts) {
      opts = opts || {};
      let postBody = opts['symbolsRelationShipSaveDto'];
      // verify the required parameter 'symbolsRelationshipId' is set
      if (symbolsRelationshipId === undefined || symbolsRelationshipId === null) {
        throw new Error("Missing the required parameter 'symbolsRelationshipId' when calling editSymbolsRelationship");
      }

      let pathParams = {
        'symbolsRelationshipId': symbolsRelationshipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/symbols-relationships/{symbolsRelationshipId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a symbol relationship
     * Update a symbol relationship
     * @param {String} symbolsRelationshipId symbolsRelationshipId to update associated record
     * @param {Object} opts Optional parameters
     * @param {module:model/SymbolsRelationShipSaveDto} opts.symbolsRelationShipSaveDto SymbolsRelationShipSaveDto object to update
     * @return { Promise } a Promise
     */
    editSymbolsRelationship(symbolsRelationshipId, opts) {
      return this.editSymbolsRelationshipWithHttpInfo(symbolsRelationshipId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all the Symbols Relationships
     * Get all symbols relationships configured in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SymbolsRelationshipDto>} and HTTP response
     */
    getSymbolsRelationshipsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [SymbolsRelationshipDto];

      return this.apiClient.callApi(
        '/symbols-relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all the Symbols Relationships
     * Get all symbols relationships configured in your group
     * @return { Promise.< Array.<module:model/SymbolsRelationshipDto> > } a Promise, with data of type {@link Array.<module:model/SymbolsRelationshipDto> }
     */
    getSymbolsRelationships() {
      return this.getSymbolsRelationshipsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





