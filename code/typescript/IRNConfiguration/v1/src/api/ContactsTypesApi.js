/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactTypeDto from '../model/ContactTypeDto';
import NewItemDto from '../model/NewItemDto';
import ProblemDetails from '../model/ProblemDetails';

/**
* ContactsTypes service.
* @module api/ContactsTypesApi
*/
export default class ContactsTypesApi {

    /**
    * Constructs a new ContactsTypesApi. 
    * @alias module:api/ContactsTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create contact types
     * Create contact type with given name
     * @param {String} body Contact type name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewItemDto} and HTTP response
     */
    createContactTypeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createContactType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = NewItemDto;

      return this.apiClient.callApi(
        '/contact-types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create contact types
     * Create contact type with given name
     * @param {String} body Contact type name
     * @return { Promise.< module:model/NewItemDto > } a Promise, with data of type {@link module:model/NewItemDto }
     */
    createContactType(body) {
      return this.createContactTypeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a contact type
     * Delete a contact type based on guid
     * @param {String} contactTypeId contactTypeId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteContactTypeWithHttpInfo(contactTypeId) {
      let postBody = null;
      // verify the required parameter 'contactTypeId' is set
      if (contactTypeId === undefined || contactTypeId === null) {
        throw new Error("Missing the required parameter 'contactTypeId' when calling deleteContactType");
      }

      let pathParams = {
        'contactTypeId': contactTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/contact-types/{contactTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a contact type
     * Delete a contact type based on guid
     * @param {String} contactTypeId contactTypeId to delete associated record
     * @return { Promise } a Promise
     */
    deleteContactType(contactTypeId) {
      return this.deleteContactTypeWithHttpInfo(contactTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of the contact types configured in your group
     * Get all contact types configured in your group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContactTypeDto>} and HTTP response
     */
    getContactTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [ContactTypeDto];

      return this.apiClient.callApi(
        '/contact-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get list of the contact types configured in your group
     * Get all contact types configured in your group
     * @return { Promise.< Array.<module:model/ContactTypeDto> > } a Promise, with data of type {@link Array.<module:model/ContactTypeDto> }
     */
    getContactTypes() {
      return this.getContactTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a contact type
     * Update a contact type
     * @param {String} contactTypeId contactTypeId to update associated record
     * @param {String} body Updated contact type name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateContactTypeWithHttpInfo(contactTypeId, body) {
      let postBody = body;
      // verify the required parameter 'contactTypeId' is set
      if (contactTypeId === undefined || contactTypeId === null) {
        throw new Error("Missing the required parameter 'contactTypeId' when calling updateContactType");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContactType");
      }

      let pathParams = {
        'contactTypeId': contactTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/contact-types/{contactTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a contact type
     * Update a contact type
     * @param {String} contactTypeId contactTypeId to update associated record
     * @param {String} body Updated contact type name
     * @return { Promise } a Promise
     */
    updateContactType(contactTypeId, body) {
      return this.updateContactTypeWithHttpInfo(contactTypeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





