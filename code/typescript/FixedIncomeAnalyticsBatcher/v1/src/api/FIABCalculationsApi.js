/**
 * FIAB API
 * Allow clients to fetch FIAB Analytics through APIs.
 *
 * The version of the OpenAPI document: 1.3.7
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FIABCalculationParameters from '../model/FIABCalculationParameters';
import FIABCalculationStatus from '../model/FIABCalculationStatus';
import FIABCalculationStatusSummary from '../model/FIABCalculationStatusSummary';

/**
* FIABCalculations service.
* @module api/FIABCalculationsApi
*/
export default class FIABCalculationsApi {

    /**
    * Constructs a new FIABCalculationsApi. 
    * @alias module:api/FIABCalculationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get FIAB calculation by id
     * This is the endpoint to check on the progress of a previously requested calculation.
     * @param {String} id from url, provided from the location header in the Run FIAB Calculation endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FIABCalculationStatus} and HTTP response
     */
    getFIABCalculationByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFIABCalculationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FIABCalculationStatus;

      return this.apiClient.callApi(
        '/calculations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get FIAB calculation by id
     * This is the endpoint to check on the progress of a previously requested calculation.
     * @param {String} id from url, provided from the location header in the Run FIAB Calculation endpoint
     * @return { Promise.< module:model/FIABCalculationStatus > } a Promise, with data of type {@link module:model/FIABCalculationStatus }
     */
    getFIABCalculationById(id) {
      return this.getFIABCalculationByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all FIAB calculation summaries
     * This endpoints returns all FIAB calculation requests.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: FIABCalculationStatusSummary}>} and HTTP response
     */
    getFIABCalculationStatusSummariesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = {'String': FIABCalculationStatusSummary};

      return this.apiClient.callApi(
        '/calculations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all FIAB calculation summaries
     * This endpoints returns all FIAB calculation requests.
     * @return { Promise.< Object.<String, module:model/{String: FIABCalculationStatusSummary}> > } a Promise, with data of type {@link Object.<String, module:model/{String: FIABCalculationStatusSummary}> }
     */
    getFIABCalculationStatusSummaries() {
      return this.getFIABCalculationStatusSummariesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run FIAB calculation
     * This endpoint creates a new FIAB calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the URL to check the status of the calculation request.    Remarks:  * Any settings in POST body will act as a one-time override over the settings saved in the FIAB template.
     * @param {Object} opts Optional parameters
     * @param {module:model/FIABCalculationParameters} opts.fIABCalculationParameters 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    runFIABCalculationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['fIABCalculationParameters'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = [];


      let returnType = null;

      return this.apiClient.callApi(
        '/calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Run FIAB calculation
     * This endpoint creates a new FIAB calculation.  This must be used first before get status or cancelling endpoints with a calculation id.  A successful response will contain the URL to check the status of the calculation request.    Remarks:  * Any settings in POST body will act as a one-time override over the settings saved in the FIAB template.
     * @param {Object} opts Optional parameters
     * @param {module:model/FIABCalculationParameters} opts.fIABCalculationParameters 
     * @return { Promise } a Promise
     */
    runFIABCalculation(opts) {
      return this.runFIABCalculationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





