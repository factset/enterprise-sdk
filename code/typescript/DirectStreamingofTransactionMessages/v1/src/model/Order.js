/**
 * dsotm API
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalField from './AdditionalField';

/**
 * The Order model module.
 * @module model/Order
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * Order transaction attributes
     * @alias module:model/Order
     * @param orderDate {String} Order date which is in the format YYYY-MM-DD
     * @param transactionId {String} Unique Id of the order
     * @param transactionStatus {module:model/Order.TransactionStatusEnum} Status of the Order
     * @param account {String} Path of the account
     * @param symbol {String} Symbol corresponding to the traded instrument
     * @param instrumentName {String} Name or description of the traded instrument
     * @param side {module:model/Order.SideEnum} Side of the order
     * @param unitType {module:model/Order.UnitTypeEnum} Unit type of the order. Indicates if the trade is driven by quantity or value
     * @param quantity {Number} Quantity of the instrument traded
     * @param gross {Number} Cash value of the transaction
     * @param currency {String} The iso currency code of cash valued fields, Net Amount and Gross Amount
     */
    constructor(orderDate, transactionId, transactionStatus, account, symbol, instrumentName, side, unitType, quantity, gross, currency) { 
        
        Order.initialize(this, orderDate, transactionId, transactionStatus, account, symbol, instrumentName, side, unitType, quantity, gross, currency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderDate, transactionId, transactionStatus, account, symbol, instrumentName, side, unitType, quantity, gross, currency) { 
        obj['orderDate'] = orderDate;
        obj['transactionId'] = transactionId;
        obj['transactionStatus'] = transactionStatus;
        obj['account'] = account;
        obj['symbol'] = symbol;
        obj['instrumentName'] = instrumentName;
        obj['side'] = side;
        obj['unitType'] = unitType;
        obj['quantity'] = quantity;
        obj['gross'] = gross;
        obj['currency'] = currency;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('orderDate')) {
                obj['orderDate'] = ApiClient.convertToType(data['orderDate'], 'String');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('transactionStatus')) {
                obj['transactionStatus'] = ApiClient.convertToType(data['transactionStatus'], 'String');
            }
            if (data.hasOwnProperty('orderType')) {
                obj['orderType'] = ApiClient.convertToType(data['orderType'], 'String');
            }
            if (data.hasOwnProperty('limitPrice')) {
                obj['limitPrice'] = ApiClient.convertToType(data['limitPrice'], 'Number');
            }
            if (data.hasOwnProperty('stopPrice')) {
                obj['stopPrice'] = ApiClient.convertToType(data['stopPrice'], 'Number');
            }
            if (data.hasOwnProperty('tif')) {
                obj['tif'] = ApiClient.convertToType(data['tif'], 'String');
            }
            if (data.hasOwnProperty('tifDate')) {
                obj['tifDate'] = ApiClient.convertToType(data['tifDate'], 'String');
            }
            if (data.hasOwnProperty('settlementType')) {
                obj['settlementType'] = ApiClient.convertToType(data['settlementType'], 'String');
            }
            if (data.hasOwnProperty('settlementDate')) {
                obj['settlementDate'] = ApiClient.convertToType(data['settlementDate'], 'String');
            }
            if (data.hasOwnProperty('fundTeam')) {
                obj['fundTeam'] = ApiClient.convertToType(data['fundTeam'], 'String');
            }
            if (data.hasOwnProperty('tradingTeam')) {
                obj['tradingTeam'] = ApiClient.convertToType(data['tradingTeam'], 'String');
            }
            if (data.hasOwnProperty('trader')) {
                obj['trader'] = ApiClient.convertToType(data['trader'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('instrumentName')) {
                obj['instrumentName'] = ApiClient.convertToType(data['instrumentName'], 'String');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], 'String');
            }
            if (data.hasOwnProperty('unitType')) {
                obj['unitType'] = ApiClient.convertToType(data['unitType'], 'String');
            }
            if (data.hasOwnProperty('transactionLeaves')) {
                obj['transactionLeaves'] = ApiClient.convertToType(data['transactionLeaves'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('gross')) {
                obj['gross'] = ApiClient.convertToType(data['gross'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('complianceStatus')) {
                obj['complianceStatus'] = ApiClient.convertToType(data['complianceStatus'], 'String');
            }
            if (data.hasOwnProperty('addedDateTime')) {
                obj['addedDateTime'] = ApiClient.convertToType(data['addedDateTime'], 'String');
            }
            if (data.hasOwnProperty('updatedDateTime')) {
                obj['updatedDateTime'] = ApiClient.convertToType(data['updatedDateTime'], 'String');
            }
            if (data.hasOwnProperty('additionalFields')) {
                obj['additionalFields'] = ApiClient.convertToType(data['additionalFields'], [AdditionalField]);
            }
        }
        return obj;
    }


}

/**
 * Order date which is in the format YYYY-MM-DD
 * @member {String} orderDate
 */
Order.prototype['orderDate'] = undefined;

/**
 * Unique Id of the order
 * @member {String} transactionId
 */
Order.prototype['transactionId'] = undefined;

/**
 * Id of the order as assigned by the OMS. If not specified then transactionId is used.
 * @member {String} orderId
 */
Order.prototype['orderId'] = undefined;

/**
 * Status of the Order
 * @member {module:model/Order.TransactionStatusEnum} transactionStatus
 */
Order.prototype['transactionStatus'] = undefined;

/**
 * Order type indicating the price type of the Order
 * @member {module:model/Order.OrderTypeEnum} orderType
 */
Order.prototype['orderType'] = undefined;

/**
 * Price related to limit and stopLimit order types
 * @member {Number} limitPrice
 */
Order.prototype['limitPrice'] = undefined;

/**
 * Price related to stop and stopLimit order types
 * @member {Number} stopPrice
 */
Order.prototype['stopPrice'] = undefined;

/**
 * Time In Force of the Order
 * @member {module:model/Order.TifEnum} tif
 */
Order.prototype['tif'] = undefined;

/**
 * Time In Force date for goodTilDate orders in YYYY-MM-DD format
 * @member {String} tifDate
 */
Order.prototype['tifDate'] = undefined;

/**
 * Indicates order settlement period
 * @member {module:model/Order.SettlementTypeEnum} settlementType
 */
Order.prototype['settlementType'] = undefined;

/**
 * Settlement date in YYYY-MM-DD format
 * @member {String} settlementDate
 */
Order.prototype['settlementDate'] = undefined;

/**
 * Fund Team Id of the Order
 * @member {String} fundTeam
 */
Order.prototype['fundTeam'] = undefined;

/**
 * Trading Team Id of the Order
 * @member {String} tradingTeam
 */
Order.prototype['tradingTeam'] = undefined;

/**
 * User Id of assigned trader.
 * @member {String} trader
 */
Order.prototype['trader'] = undefined;

/**
 * Path of the account
 * @member {String} account
 */
Order.prototype['account'] = undefined;

/**
 * Symbol corresponding to the traded instrument
 * @member {String} symbol
 */
Order.prototype['symbol'] = undefined;

/**
 * Name or description of the traded instrument
 * @member {String} instrumentName
 */
Order.prototype['instrumentName'] = undefined;

/**
 * Side of the order
 * @member {module:model/Order.SideEnum} side
 */
Order.prototype['side'] = undefined;

/**
 * Unit type of the order. Indicates if the trade is driven by quantity or value
 * @member {module:model/Order.UnitTypeEnum} unitType
 */
Order.prototype['unitType'] = undefined;

/**
 * Shares that have been ordered and not executed
 * @member {Number} transactionLeaves
 */
Order.prototype['transactionLeaves'] = undefined;

/**
 * Quantity of the instrument traded
 * @member {Number} quantity
 */
Order.prototype['quantity'] = undefined;

/**
 * Cash value of the transaction
 * @member {Number} gross
 */
Order.prototype['gross'] = undefined;

/**
 * The transaction price
 * @member {Number} price
 */
Order.prototype['price'] = undefined;

/**
 * The iso currency code of cash valued fields, Net Amount and Gross Amount
 * @member {String} currency
 */
Order.prototype['currency'] = undefined;

/**
 * Compliance check status
 * @member {module:model/Order.ComplianceStatusEnum} complianceStatus
 */
Order.prototype['complianceStatus'] = undefined;

/**
 * Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
 * @member {String} addedDateTime
 */
Order.prototype['addedDateTime'] = undefined;

/**
 * Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
 * @member {String} updatedDateTime
 */
Order.prototype['updatedDateTime'] = undefined;

/**
 * List of additional fields which can be used for dynamically populating other ofdb fields
 * @member {Array.<module:model/AdditionalField>} additionalFields
 */
Order.prototype['additionalFields'] = undefined;





/**
 * Allowed values for the <code>transactionStatus</code> property.
 * @enum {String}
 * @readonly
 */
Order['TransactionStatusEnum'] = {

    /**
     * value: "pendingApproval"
     * @const
     */
    "pendingApproval": "pendingApproval",

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "placed"
     * @const
     */
    "placed": "placed",

    /**
     * value: "partialFilled"
     * @const
     */
    "partialFilled": "partialFilled",

    /**
     * value: "filled"
     * @const
     */
    "filled": "filled",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "booked"
     * @const
     */
    "booked": "booked"
};


/**
 * Allowed values for the <code>orderType</code> property.
 * @enum {String}
 * @readonly
 */
Order['OrderTypeEnum'] = {

    /**
     * value: "market"
     * @const
     */
    "market": "market",

    /**
     * value: "limit"
     * @const
     */
    "limit": "limit",

    /**
     * value: "stopLimit"
     * @const
     */
    "stopLimit": "stopLimit",

    /**
     * value: "stop"
     * @const
     */
    "stop": "stop"
};


/**
 * Allowed values for the <code>tif</code> property.
 * @enum {String}
 * @readonly
 */
Order['TifEnum'] = {

    /**
     * value: "goodTilCancel"
     * @const
     */
    "goodTilCancel": "goodTilCancel",

    /**
     * value: "goodTilDate"
     * @const
     */
    "goodTilDate": "goodTilDate",

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "week"
     * @const
     */
    "week": "week",

    /**
     * value: "atMarketOpen"
     * @const
     */
    "atMarketOpen": "atMarketOpen",

    /**
     * value: "atMarketClose"
     * @const
     */
    "atMarketClose": "atMarketClose",

    /**
     * value: "immediateOrCancel"
     * @const
     */
    "immediateOrCancel": "immediateOrCancel",

    /**
     * value: "fillOrKill"
     * @const
     */
    "fillOrKill": "fillOrKill",

    /**
     * value: "goodTilCrossing"
     * @const
     */
    "goodTilCrossing": "goodTilCrossing"
};


/**
 * Allowed values for the <code>settlementType</code> property.
 * @enum {String}
 * @readonly
 */
Order['SettlementTypeEnum'] = {

    /**
     * value: "regular"
     * @const
     */
    "regular": "regular",

    /**
     * value: "cash"
     * @const
     */
    "cash": "cash",

    /**
     * value: "nextDay"
     * @const
     */
    "nextDay": "nextDay",

    /**
     * value: "tPlus2"
     * @const
     */
    "tPlus2": "tPlus2",

    /**
     * value: "tPlus3"
     * @const
     */
    "tPlus3": "tPlus3",

    /**
     * value: "tPlus4"
     * @const
     */
    "tPlus4": "tPlus4",

    /**
     * value: "future"
     * @const
     */
    "future": "future",

    /**
     * value: "whenIssued"
     * @const
     */
    "whenIssued": "whenIssued",

    /**
     * value: "sellersOption"
     * @const
     */
    "sellersOption": "sellersOption",

    /**
     * value: "tPlus5"
     * @const
     */
    "tPlus5": "tPlus5"
};


/**
 * Allowed values for the <code>side</code> property.
 * @enum {String}
 * @readonly
 */
Order['SideEnum'] = {

    /**
     * value: "buy"
     * @const
     */
    "buy": "buy",

    /**
     * value: "buyCover"
     * @const
     */
    "buyCover": "buyCover",

    /**
     * value: "sell"
     * @const
     */
    "sell": "sell",

    /**
     * value: "sellShort"
     * @const
     */
    "sellShort": "sellShort"
};


/**
 * Allowed values for the <code>unitType</code> property.
 * @enum {String}
 * @readonly
 */
Order['UnitTypeEnum'] = {

    /**
     * value: "quantity"
     * @const
     */
    "quantity": "quantity",

    /**
     * value: "value"
     * @const
     */
    "value": "value"
};


/**
 * Allowed values for the <code>complianceStatus</code> property.
 * @enum {String}
 * @readonly
 */
Order['ComplianceStatusEnum'] = {

    /**
     * value: "unchecked"
     * @const
     */
    "unchecked": "unchecked",

    /**
     * value: "pass"
     * @const
     */
    "pass": "pass",

    /**
     * value: "fail"
     * @const
     */
    "fail": "fail",

    /**
     * value: "warn"
     * @const
     */
    "warn": "warn"
};



export default Order;

