/**
 * DSOTM API
 * Allow clients to send transactions data to FactSet.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExecutionParameters model module.
 * @module model/ExecutionParameters
 */
class ExecutionParameters {
    /**
     * Constructs a new <code>ExecutionParameters</code>.
     * @alias module:model/ExecutionParameters
     * @param transactionStatus {String} Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled.
     * @param net {Number} Cash value of the transaction, net of brokerage costs.
     * @param settlementDate {String} Settlement date in YYYY-MM-DD format
     * @param settlementCurrencyISO {String} Currency code for Settlement Value
     * @param settlementValue {Number} Cash value of the transaction in settlement currency
     * @param transactionId {String} Unique Id for the transaction
     * @param portfolio {String} Path of the portfolio (Ex: Client:/folder1/testing.ofdb)
     * @param symbol {String} Symbol corresponding to the traded instrument.
     * @param description {String} Description
     * @param tradeType {String} Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.
     * @param unitType {String} Unit type could be one of Quantity or Value.
     * @param quantity {Number} Quantity of the instrument traded.
     * @param gross {Number} Cash value of the transaction
     * @param currencyISO {String} The currency code of cash valued fields, Net Amount and Gross Amount.
     * @param tradeDate {String} Trade date which is in the format YYYY-MM-DD
     */
    constructor(transactionStatus, net, settlementDate, settlementCurrencyISO, settlementValue, transactionId, portfolio, symbol, description, tradeType, unitType, quantity, gross, currencyISO, tradeDate) { 
        
        ExecutionParameters.initialize(this, transactionStatus, net, settlementDate, settlementCurrencyISO, settlementValue, transactionId, portfolio, symbol, description, tradeType, unitType, quantity, gross, currencyISO, tradeDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactionStatus, net, settlementDate, settlementCurrencyISO, settlementValue, transactionId, portfolio, symbol, description, tradeType, unitType, quantity, gross, currencyISO, tradeDate) { 
        obj['transactionStatus'] = transactionStatus;
        obj['net'] = net;
        obj['settlementDate'] = settlementDate;
        obj['settlementCurrencyISO'] = settlementCurrencyISO;
        obj['settlementValue'] = settlementValue;
        obj['transactionId'] = transactionId;
        obj['portfolio'] = portfolio;
        obj['symbol'] = symbol;
        obj['description'] = description;
        obj['tradeType'] = tradeType;
        obj['unitType'] = unitType;
        obj['quantity'] = quantity;
        obj['gross'] = gross;
        obj['currencyISO'] = currencyISO;
        obj['tradeDate'] = tradeDate;
    }

    /**
     * Constructs a <code>ExecutionParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecutionParameters} obj Optional instance to populate.
     * @return {module:model/ExecutionParameters} The populated <code>ExecutionParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecutionParameters();

            if (data.hasOwnProperty('transactionStatus')) {
                obj['transactionStatus'] = ApiClient.convertToType(data['transactionStatus'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('net')) {
                obj['net'] = ApiClient.convertToType(data['net'], 'Number');
            }
            if (data.hasOwnProperty('settlementDate')) {
                obj['settlementDate'] = ApiClient.convertToType(data['settlementDate'], 'String');
            }
            if (data.hasOwnProperty('settlementCurrencyISO')) {
                obj['settlementCurrencyISO'] = ApiClient.convertToType(data['settlementCurrencyISO'], 'String');
            }
            if (data.hasOwnProperty('settlementValue')) {
                obj['settlementValue'] = ApiClient.convertToType(data['settlementValue'], 'Number');
            }
            if (data.hasOwnProperty('foreignExchangeRate')) {
                obj['foreignExchangeRate'] = ApiClient.convertToType(data['foreignExchangeRate'], 'Number');
            }
            if (data.hasOwnProperty('broker')) {
                obj['broker'] = ApiClient.convertToType(data['broker'], 'String');
            }
            if (data.hasOwnProperty('custodian')) {
                obj['custodian'] = ApiClient.convertToType(data['custodian'], 'String');
            }
            if (data.hasOwnProperty('accruedInterest')) {
                obj['accruedInterest'] = ApiClient.convertToType(data['accruedInterest'], 'Number');
            }
            if (data.hasOwnProperty('commission')) {
                obj['commission'] = ApiClient.convertToType(data['commission'], 'Number');
            }
            if (data.hasOwnProperty('clearingCommission')) {
                obj['clearingCommission'] = ApiClient.convertToType(data['clearingCommission'], 'Number');
            }
            if (data.hasOwnProperty('localTax')) {
                obj['localTax'] = ApiClient.convertToType(data['localTax'], 'Number');
            }
            if (data.hasOwnProperty('localFee')) {
                obj['localFee'] = ApiClient.convertToType(data['localFee'], 'Number');
            }
            if (data.hasOwnProperty('brokerFee')) {
                obj['brokerFee'] = ApiClient.convertToType(data['brokerFee'], 'Number');
            }
            if (data.hasOwnProperty('exchangeFee')) {
                obj['exchangeFee'] = ApiClient.convertToType(data['exchangeFee'], 'Number');
            }
            if (data.hasOwnProperty('miscellaneousFee')) {
                obj['miscellaneousFee'] = ApiClient.convertToType(data['miscellaneousFee'], 'Number');
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('portfolio')) {
                obj['portfolio'] = ApiClient.convertToType(data['portfolio'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tradeType')) {
                obj['tradeType'] = ApiClient.convertToType(data['tradeType'], 'String');
            }
            if (data.hasOwnProperty('unitType')) {
                obj['unitType'] = ApiClient.convertToType(data['unitType'], 'String');
            }
            if (data.hasOwnProperty('transactionLeaves')) {
                obj['transactionLeaves'] = ApiClient.convertToType(data['transactionLeaves'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('gross')) {
                obj['gross'] = ApiClient.convertToType(data['gross'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('currencyISO')) {
                obj['currencyISO'] = ApiClient.convertToType(data['currencyISO'], 'String');
            }
            if (data.hasOwnProperty('tradeDate')) {
                obj['tradeDate'] = ApiClient.convertToType(data['tradeDate'], 'String');
            }
            if (data.hasOwnProperty('addedDateTime')) {
                obj['addedDateTime'] = ApiClient.convertToType(data['addedDateTime'], 'String');
            }
            if (data.hasOwnProperty('updatedDateTime')) {
                obj['updatedDateTime'] = ApiClient.convertToType(data['updatedDateTime'], 'String');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Transaction Status of an Execution could be any of the following values: Executed, Booked, Cancelled.
 * @member {String} transactionStatus
 */
ExecutionParameters.prototype['transactionStatus'] = undefined;

/**
 * Unique Id of the placement which spawned this execution
 * @member {String} parentId
 */
ExecutionParameters.prototype['parentId'] = undefined;

/**
 * Cash value of the transaction, net of brokerage costs.
 * @member {Number} net
 */
ExecutionParameters.prototype['net'] = undefined;

/**
 * Settlement date in YYYY-MM-DD format
 * @member {String} settlementDate
 */
ExecutionParameters.prototype['settlementDate'] = undefined;

/**
 * Currency code for Settlement Value
 * @member {String} settlementCurrencyISO
 */
ExecutionParameters.prototype['settlementCurrencyISO'] = undefined;

/**
 * Cash value of the transaction in settlement currency
 * @member {Number} settlementValue
 */
ExecutionParameters.prototype['settlementValue'] = undefined;

/**
 * FX rate to convert the net, gross fields to reporting currency.
 * @member {Number} foreignExchangeRate
 */
ExecutionParameters.prototype['foreignExchangeRate'] = undefined;

/**
 * Execution broker id.
 * @member {String} broker
 */
ExecutionParameters.prototype['broker'] = undefined;

/**
 * Execution custodian Id.
 * @member {String} custodian
 */
ExecutionParameters.prototype['custodian'] = undefined;

/**
 * Execution accrued interest.
 * @member {Number} accruedInterest
 */
ExecutionParameters.prototype['accruedInterest'] = undefined;

/**
 * Execution commission value.
 * @member {Number} commission
 */
ExecutionParameters.prototype['commission'] = undefined;

/**
 * Execution clearing commission value.
 * @member {Number} clearingCommission
 */
ExecutionParameters.prototype['clearingCommission'] = undefined;

/**
 * Execution local tax value.
 * @member {Number} localTax
 */
ExecutionParameters.prototype['localTax'] = undefined;

/**
 * Execution local fee value.
 * @member {Number} localFee
 */
ExecutionParameters.prototype['localFee'] = undefined;

/**
 * Execution broker fee value.
 * @member {Number} brokerFee
 */
ExecutionParameters.prototype['brokerFee'] = undefined;

/**
 * Execution exchange fee value.
 * @member {Number} exchangeFee
 */
ExecutionParameters.prototype['exchangeFee'] = undefined;

/**
 * Execution miscellaneous fee value.
 * @member {Number} miscellaneousFee
 */
ExecutionParameters.prototype['miscellaneousFee'] = undefined;

/**
 * Unique Id for the transaction
 * @member {String} transactionId
 */
ExecutionParameters.prototype['transactionId'] = undefined;

/**
 * Unique Id of the order which originated the record
 * @member {String} orderId
 */
ExecutionParameters.prototype['orderId'] = undefined;

/**
 * Path of the portfolio (Ex: Client:/folder1/testing.ofdb)
 * @member {String} portfolio
 */
ExecutionParameters.prototype['portfolio'] = undefined;

/**
 * Symbol corresponding to the traded instrument.
 * @member {String} symbol
 */
ExecutionParameters.prototype['symbol'] = undefined;

/**
 * Description
 * @member {String} description
 */
ExecutionParameters.prototype['description'] = undefined;

/**
 * Trade type could be any of the following values BL, BC, SL, SS.  which stands for Buy Long, Buy to cover, Sell Long and Sell Short respectively.
 * @member {String} tradeType
 */
ExecutionParameters.prototype['tradeType'] = undefined;

/**
 * Unit type could be one of Quantity or Value.
 * @member {String} unitType
 */
ExecutionParameters.prototype['unitType'] = undefined;

/**
 * Shares that have been ordered and not executed
 * @member {Number} transactionLeaves
 */
ExecutionParameters.prototype['transactionLeaves'] = undefined;

/**
 * Quantity of the instrument traded.
 * @member {Number} quantity
 */
ExecutionParameters.prototype['quantity'] = undefined;

/**
 * Cash value of the transaction
 * @member {Number} gross
 */
ExecutionParameters.prototype['gross'] = undefined;

/**
 * The transaction price
 * @member {Number} price
 */
ExecutionParameters.prototype['price'] = undefined;

/**
 * The currency code of cash valued fields, Net Amount and Gross Amount.
 * @member {String} currencyISO
 */
ExecutionParameters.prototype['currencyISO'] = undefined;

/**
 * Trade date which is in the format YYYY-MM-DD
 * @member {String} tradeDate
 */
ExecutionParameters.prototype['tradeDate'] = undefined;

/**
 * Date and time expressed in UTC when the transaction was first added in the format YYYY-MM-DDTHH:MM:SS.FFF
 * @member {String} addedDateTime
 */
ExecutionParameters.prototype['addedDateTime'] = undefined;

/**
 * Date and time expressed in UTC when the transaction was last updated in the format YYYY-MM-DDTHH:MM:SS.FFF
 * @member {String} updatedDateTime
 */
ExecutionParameters.prototype['updatedDateTime'] = undefined;

/**
 * @member {String} entity
 */
ExecutionParameters.prototype['entity'] = undefined;

/**
 * @member {String} status
 */
ExecutionParameters.prototype['status'] = undefined;






export default ExecutionParameters;

