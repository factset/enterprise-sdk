/**
 * Signals API
 * Collection of endpoints for providing Signal Events, Definitions and Metadata
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DateTimeInterval model module.
 * @module model/DateTimeInterval
 */
class DateTimeInterval {
    /**
     * Constructs a new <code>DateTimeInterval</code>.
     * Represents a valid date/time (UTC) interval. The upper bound of the interval is represented by the attribute **gt** or **gte**. The lower bound of the interval is presented by **lt** or **lte** The interval can contain either of the bounds or both. e.g. { \&quot;gt\&quot;: \&quot;2021-05-01T00:00:00.000Z\&quot;, \&quot;lt\&quot;: \&quot;2021-05-08T00:00:00.000Z\&quot; } 
     * @alias module:model/DateTimeInterval
     */
    constructor() { 
        
        DateTimeInterval.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DateTimeInterval</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DateTimeInterval} obj Optional instance to populate.
     * @return {module:model/DateTimeInterval} The populated <code>DateTimeInterval</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DateTimeInterval();

            if (data.hasOwnProperty('gt')) {
                obj['gt'] = ApiClient.convertToType(data['gt'], 'Date');
            }
            if (data.hasOwnProperty('gte')) {
                obj['gte'] = ApiClient.convertToType(data['gte'], 'Date');
            }
            if (data.hasOwnProperty('lt')) {
                obj['lt'] = ApiClient.convertToType(data['lt'], 'Date');
            }
            if (data.hasOwnProperty('lte')) {
                obj['lte'] = ApiClient.convertToType(data['lte'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * A date/time string in ISO 8601 format.
 * @member {Date} gt
 */
DateTimeInterval.prototype['gt'] = undefined;

/**
 * A date/time string in ISO 8601 format.
 * @member {Date} gte
 */
DateTimeInterval.prototype['gte'] = undefined;

/**
 * A date/time string in ISO 8601 format.
 * @member {Date} lt
 */
DateTimeInterval.prototype['lt'] = undefined;

/**
 * A date/time string in ISO 8601 format.
 * @member {Date} lte
 */
DateTimeInterval.prototype['lte'] = undefined;






export default DateTimeInterval;

