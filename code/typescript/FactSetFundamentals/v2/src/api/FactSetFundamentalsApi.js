/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchStatusResponse from '../model/BatchStatusResponse';
import ErrorResponse from '../model/ErrorResponse';
import FundamentalsRequest from '../model/FundamentalsRequest';
import FundamentalsResponse from '../model/FundamentalsResponse';

/**
* FactSetFundamentals service.
* @module api/FactSetFundamentalsApi
*/
export default class FactSetFundamentalsApi {

    /**
    * Constructs a new FactSetFundamentalsApi. 
    * @alias module:api/FactSetFundamentalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns Company Fundamental Data.
     * Retrieves FactSet Fundamental standardized data for specified securities. Use the ```/metrics``` endpoint to retrieve a full list of valid metrics or data items.   The ```/fundamentals``` endpoint currently supports Long Running asynchronous requests up to **20 minutes** via batch parameter. Id limit is set to 5000 ids per request when using batch capability and 250 ids per request without batching (1 metric per ID, for 1 day in both the cases). This feature is available for all users. 
     * @param {module:model/FundamentalsRequest} fundamentalsRequest Request object for requesting fundamentals data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FundamentalsResponse} and HTTP response
     */
    getFdsFundamentalsForListWithHttpInfo(fundamentalsRequest) {
      let postBody = fundamentalsRequest;
      // verify the required parameter 'fundamentalsRequest' is set
      if (fundamentalsRequest === undefined || fundamentalsRequest === null) {
        throw new Error("Missing the required parameter 'fundamentalsRequest' when calling getFdsFundamentalsForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];

      let returnType = GetFdsFundamentalsForListResponseWrapperTypeMap;
      
      return this.apiClient.callApi(
        '/fundamentals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Company Fundamental Data.
     * Retrieves FactSet Fundamental standardized data for specified securities. Use the ```/metrics``` endpoint to retrieve a full list of valid metrics or data items.   The ```/fundamentals``` endpoint currently supports Long Running asynchronous requests up to **20 minutes** via batch parameter. Id limit is set to 5000 ids per request when using batch capability and 250 ids per request without batching (1 metric per ID, for 1 day in both the cases). This feature is available for all users. 
     * @param {module:model/FundamentalsRequest} fundamentalsRequest Request object for requesting fundamentals data
     * @return { Promise.< GetFdsFundamentalsForListResponseWrapper > } a Promise, with data of type {@link GetFdsFundamentalsForListResponseWrapper }
     */
    getFdsFundamentalsForList(fundamentalsRequest) {
      return this.getFdsFundamentalsForListWithHttpInfo(fundamentalsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}


const GetFdsFundamentalsForListResponseWrapperTypeMap = {
  200: FundamentalsResponse,
  202: BatchStatusResponse,
  400: ErrorResponse,
  401: ErrorResponse,
  403: ErrorResponse,
  415: ErrorResponse,
  500: ErrorResponse,

  _createResponseWrapper(statusCode, response) {
    return new GetFdsFundamentalsForListResponseWrapper(statusCode, response);
  }
};



/**
 * Wrapper to support POST /fundamentals returning different types
 * per status code.
 *
 * <p>
 * Responses:
 * <ul>
 *   <li>200 : {@code FundamentalsResponse }<br>Fundamental data items</li>
 * 
 *   <li>202 : {@code BatchStatusResponse }<br>Batch request has been accepted.</li>
 * </ul>
 *
 * </p>
 * Example:
 * <pre>{@code
 * const response = ...;
 * switch (response.statusCode) {
 *   case 200:
 *     FundamentalsResponse data200 = response.getResponse200();
 *     break;
 *   case 202:
 *     BatchStatusResponse data202 = response.getResponse202();
 *     break;
 *  }
 * }</pre>
 *
 * @alias module:GetFdsFundamentalsForListResponseWrapper
 * @class
 */
export class GetFdsFundamentalsForListResponseWrapper {

  /**
   * @param {number} statusCode
   * @param {*} response
   */
  constructor(statusCode, response) {
    /**
     * @type {number}
     */
    this.statusCode = statusCode;

    /**
     * @type {*}
     */
    this.response = response;
  }

  
  /**
   * @returns { FundamentalsResponse }
   */
  getResponse200() {
    if (this.statusCode !== 200) {
      throw new Error("Invalid response getter called. getResponse200 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
  /**
   * @returns { BatchStatusResponse }
   */
  getResponse202() {
    if (this.statusCode !== 202) {
      throw new Error("Invalid response getter called. getResponse202 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
}


