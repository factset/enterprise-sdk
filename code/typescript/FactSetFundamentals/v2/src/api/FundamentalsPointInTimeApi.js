/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchStatusResponse from '../model/BatchStatusResponse';
import ErrorResponse from '../model/ErrorResponse';
import FundamentalsPITRequest from '../model/FundamentalsPITRequest';
import OneOfintegerDateTime from '../model/OneOfintegerDateTime';
import PeriodsRequest from '../model/PeriodsRequest';

/**
* FundamentalsPointInTime service.
* @module api/FundamentalsPointInTimeApi
*/
export default class FundamentalsPointInTimeApi {

    /**
    * Constructs a new FundamentalsPointInTimeApi. 
    * @alias module:api/FundamentalsPointInTimeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Fiscal Periods: Retrieve fiscal period details for multiple securities using POST.
     * This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period's information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a `202 Accepted` response with a `Location` header pointing to the `/batch-status` endpoint. Use the `id` from the status response to check for completion and retrieve the result from the `/batch-result` endpoint. **All timestamps are in UTC.** 
     * @param {module:model/PeriodsRequest} periodsRequest Request object containing parameters for the fiscal periods request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchStatusResponse} and HTTP response
     */
    postFundamentalsFiscalPeriodsWithHttpInfo(periodsRequest) {
      let postBody = periodsRequest;
      // verify the required parameter 'periodsRequest' is set
      if (periodsRequest === undefined || periodsRequest === null) {
        throw new Error("Missing the required parameter 'periodsRequest' when calling postFundamentalsFiscalPeriods");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = BatchStatusResponse;

      return this.apiClient.callApi(
        '/periods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fiscal Periods: Retrieve fiscal period details for multiple securities using POST.
     * This endpoint initiates an asynchronous batch job to fetch detailed information about fiscal periods. The request allows filtering for fiscal periods ending within a specified calendar date range. The response provides Point-in-Time (PIT) details, showing when each period's information was first published and when it was superseded. This is crucial for historical backtesting. All requests will return a `202 Accepted` response with a `Location` header pointing to the `/batch-status` endpoint. Use the `id` from the status response to check for completion and retrieve the result from the `/batch-result` endpoint. **All timestamps are in UTC.** 
     * @param {module:model/PeriodsRequest} periodsRequest Request object containing parameters for the fiscal periods request.
     * @return { Promise.< module:model/BatchStatusResponse > } a Promise, with data of type {@link module:model/BatchStatusResponse }
     */
    postFundamentalsFiscalPeriods(periodsRequest) {
      return this.postFundamentalsFiscalPeriodsWithHttpInfo(periodsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Point-in-Time data for multiple securities.
     * This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a `202 Accepted` response with a `Location` header pointing to the `/batch-status` endpoint. Use the `id` from the status response to check for completion and retrieve the result from the `/batch-result` endpoint. **All timestamps are in UTC.** 
     * @param {module:model/FundamentalsPITRequest} fundamentalsPITRequest Request object containing parameters for the PIT fundamentals request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchStatusResponse} and HTTP response
     */
    postFundamentalsPITDataWithHttpInfo(fundamentalsPITRequest) {
      let postBody = fundamentalsPITRequest;
      // verify the required parameter 'fundamentalsPITRequest' is set
      if (fundamentalsPITRequest === undefined || fundamentalsPITRequest === null) {
        throw new Error("Missing the required parameter 'fundamentalsPITRequest' when calling postFundamentalsPITData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = BatchStatusResponse;

      return this.apiClient.callApi(
        '/point-in-time', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Point-in-Time data for multiple securities.
     * This endpoint initiates an asynchronous batch job to fetch Point-in-Time (PIT) data. PIT data allows you to view fundamentals data as it was known on a specific date. This is crucial for backtesting trading strategies, performing academic research, and avoiding lookahead bias. All requests will return a `202 Accepted` response with a `Location` header pointing to the `/batch-status` endpoint. Use the `id` from the status response to check for completion and retrieve the result from the `/batch-result` endpoint. **All timestamps are in UTC.** 
     * @param {module:model/FundamentalsPITRequest} fundamentalsPITRequest Request object containing parameters for the PIT fundamentals request.
     * @return { Promise.< module:model/BatchStatusResponse > } a Promise, with data of type {@link module:model/BatchStatusResponse }
     */
    postFundamentalsPITData(fundamentalsPITRequest) {
      return this.postFundamentalsPITDataWithHttpInfo(fundamentalsPITRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





