/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PerShare model module.
 * @module model/PerShare
 */
class PerShare {
    /**
     * Constructs a new <code>PerShare</code>.
     * @alias module:model/PerShare
     */
    constructor() { 
        
        PerShare.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PerShare</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PerShare} obj Optional instance to populate.
     * @return {module:model/PerShare} The populated <code>PerShare</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PerShare();

            if (data.hasOwnProperty('bookValuePerShare')) {
                obj['bookValuePerShare'] = ApiClient.convertToType(data['bookValuePerShare'], 'Number');
            }
            if (data.hasOwnProperty('cashFlowPerShare')) {
                obj['cashFlowPerShare'] = ApiClient.convertToType(data['cashFlowPerShare'], 'Number');
            }
            if (data.hasOwnProperty('cashPerShare')) {
                obj['cashPerShare'] = ApiClient.convertToType(data['cashPerShare'], 'Number');
            }
            if (data.hasOwnProperty('earningsPerShare')) {
                obj['earningsPerShare'] = ApiClient.convertToType(data['earningsPerShare'], 'Number');
            }
            if (data.hasOwnProperty('revenuePerShare')) {
                obj['revenuePerShare'] = ApiClient.convertToType(data['revenuePerShare'], 'Number');
            }
            if (data.hasOwnProperty('salesPerShare')) {
                obj['salesPerShare'] = ApiClient.convertToType(data['salesPerShare'], 'Number');
            }
            if (data.hasOwnProperty('trailingTwelveMonthEarningsPerShare')) {
                obj['trailingTwelveMonthEarningsPerShare'] = ApiClient.convertToType(data['trailingTwelveMonthEarningsPerShare'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Book value per common share is a formula used to calculate the per share value of a company based on common shareholders' equity in the company
 * @member {Number} bookValuePerShare
 */
PerShare.prototype['bookValuePerShare'] = undefined;

/**
 * Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a companyâ€™s net income with the costs of depreciation and amortization added back
 * @member {Number} cashFlowPerShare
 */
PerShare.prototype['cashFlowPerShare'] = undefined;

/**
 * Cash Per Share of Security
 * @member {Number} cashPerShare
 */
PerShare.prototype['cashPerShare'] = undefined;

/**
 * Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock
 * @member {Number} earningsPerShare
 */
PerShare.prototype['earningsPerShare'] = undefined;

/**
 * The portion of a company's revenue that is allocated to each share of common stock.
 * @member {Number} revenuePerShare
 */
PerShare.prototype['revenuePerShare'] = undefined;

/**
 * Sales per share is a ratio that computes the total revenue earned per share over a designated period
 * @member {Number} salesPerShare
 */
PerShare.prototype['salesPerShare'] = undefined;

/**
 * Earnings per share over the last 12 months.
 * @member {Number} trailingTwelveMonthEarningsPerShare
 */
PerShare.prototype['trailingTwelveMonthEarningsPerShare'] = undefined;






export default PerShare;

