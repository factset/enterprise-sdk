/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dividend model module.
 * @module model/Dividend
 */
class Dividend {
    /**
     * Constructs a new <code>Dividend</code>.
     * @alias module:model/Dividend
     */
    constructor() { 
        
        Dividend.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dividend</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dividend} obj Optional instance to populate.
     * @return {module:model/Dividend} The populated <code>Dividend</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dividend();

            if (data.hasOwnProperty('annualDividendPerShare')) {
                obj['annualDividendPerShare'] = ApiClient.convertToType(data['annualDividendPerShare'], 'Number');
            }
            if (data.hasOwnProperty('distributionFrequency')) {
                obj['distributionFrequency'] = ApiClient.convertToType(data['distributionFrequency'], 'String');
            }
            if (data.hasOwnProperty('dividendPerShare')) {
                obj['dividendPerShare'] = ApiClient.convertToType(data['dividendPerShare'], 'Number');
            }
            if (data.hasOwnProperty('exDividendDate')) {
                obj['exDividendDate'] = ApiClient.convertToType(data['exDividendDate'], 'Date');
            }
            if (data.hasOwnProperty('indicativeDividendRate')) {
                obj['indicativeDividendRate'] = ApiClient.convertToType(data['indicativeDividendRate'], 'String');
            }
            if (data.hasOwnProperty('payableDate')) {
                obj['payableDate'] = ApiClient.convertToType(data['payableDate'], 'Date');
            }
            if (data.hasOwnProperty('recordDate')) {
                obj['recordDate'] = ApiClient.convertToType(data['recordDate'], 'Date');
            }
            if (data.hasOwnProperty('yield')) {
                obj['yield'] = ApiClient.convertToType(data['yield'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Dividend is the distribution of reward from a portion of company's earnings, and is paid to a class of its shareholders each year for every share they own.
 * @member {Number} annualDividendPerShare
 */
Dividend.prototype['annualDividendPerShare'] = undefined;

/**
 * Distribution frequency is how often a dividend is paid by an individual stock, distribution frequency can vary from monthly to annually.
 * @member {String} distributionFrequency
 */
Dividend.prototype['distributionFrequency'] = undefined;

/**
 * Dividend is the distribution of reward from a portion of company's earnings, and is paid to a class of its shareholders for every share they own each time the company distributes dividends, which could be quarterly, semi-annually, or annually depending on the company's dividend policy.
 * @member {Number} dividendPerShare
 */
Dividend.prototype['dividendPerShare'] = undefined;

/**
 * The date on which the dividend eligibility expires is called the ex-dividend date
 * @member {Date} exDividendDate
 */
Dividend.prototype['exDividendDate'] = undefined;

/**
 * Indicated dividend Rate projects the annual dividend return of a stock based on its most recent dividend, the number of dividends issued each year, and the current share price
 * @member {String} indicativeDividendRate
 */
Dividend.prototype['indicativeDividendRate'] = undefined;

/**
 * The company issues the payment of the dividend on the payment date, which is when the money gets credited to investor's account
 * @member {Date} payableDate
 */
Dividend.prototype['payableDate'] = undefined;

/**
 * The record date is the cut-off date in order to determine which shareholders are eligible to receive a dividend or distribution
 * @member {Date} recordDate
 */
Dividend.prototype['recordDate'] = undefined;

/**
 * Dividend yield is the financial ratio that shows how much a company pays out in dividends each year relative to its stock price
 * @member {Number} yield
 */
Dividend.prototype['yield'] = undefined;






export default Dividend;

