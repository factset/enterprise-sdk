/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrequencyEnum from './FrequencyEnum';
import PeriodicityEnum from './PeriodicityEnum';
import UpdateType from './UpdateType';

/**
 * The FundamentalsPITRequestBody model module.
 * @module model/FundamentalsPITRequestBody
 */
class FundamentalsPITRequestBody {
    /**
     * Constructs a new <code>FundamentalsPITRequestBody</code>.
     * Parameters for requesting Point-in-Time fundamentals data via POST.
     * @alias module:model/FundamentalsPITRequestBody
     * @param ids {Array.<String>} Array of identifiers supported in async requests to `/point-in-time` and `/periods` endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.
     * @param fiscalPeriodStart {Date} Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with `fiscalPeriodEnd` for a range, or alone for the earliest period.
     * @param metrics {Array.<String>} An array of fundamentals metric identifiers. Use the `/metrics` endpoint for a complete list of available metric identifiers.
     */
    constructor(ids, fiscalPeriodStart, metrics) { 
        
        FundamentalsPITRequestBody.initialize(this, ids, fiscalPeriodStart, metrics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ids, fiscalPeriodStart, metrics) { 
        obj['ids'] = ids;
        obj['fiscalPeriodStart'] = fiscalPeriodStart;
        obj['metrics'] = metrics;
    }

    /**
     * Constructs a <code>FundamentalsPITRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FundamentalsPITRequestBody} obj Optional instance to populate.
     * @return {module:model/FundamentalsPITRequestBody} The populated <code>FundamentalsPITRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FundamentalsPITRequestBody();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['String']);
            }
            if (data.hasOwnProperty('periodicity')) {
                obj['periodicity'] = PeriodicityEnum.constructFromObject(data['periodicity']);
            }
            if (data.hasOwnProperty('fiscalPeriodStart')) {
                obj['fiscalPeriodStart'] = ApiClient.convertToType(data['fiscalPeriodStart'], 'Date');
            }
            if (data.hasOwnProperty('fiscalPeriodEnd')) {
                obj['fiscalPeriodEnd'] = ApiClient.convertToType(data['fiscalPeriodEnd'], 'Date');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], ['String']);
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = FrequencyEnum.constructFromObject(data['frequency']);
            }
            if (data.hasOwnProperty('pitStart')) {
                obj['pitStart'] = ApiClient.convertToType(data['pitStart'], 'Date');
            }
            if (data.hasOwnProperty('pitEnd')) {
                obj['pitEnd'] = ApiClient.convertToType(data['pitEnd'], 'Date');
            }
            if (data.hasOwnProperty('updateType')) {
                obj['updateType'] = UpdateType.constructFromObject(data['updateType']);
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Array of identifiers supported in async requests to `/point-in-time` and `/periods` endpoints.  Accepted types: Tickers, SEDOLs, ISINs, CUSIPs, FactSet Permanent Security, Regional, and Entity Identifiers.
 * @member {Array.<String>} ids
 */
FundamentalsPITRequestBody.prototype['ids'] = undefined;

/**
 * @member {module:model/PeriodicityEnum} periodicity
 */
FundamentalsPITRequestBody.prototype['periodicity'] = undefined;

/**
 * Filters for fiscal periods ending on or after this date (YYYY-MM-DD). Used with `fiscalPeriodEnd` for a range, or alone for the earliest period.
 * @member {Date} fiscalPeriodStart
 */
FundamentalsPITRequestBody.prototype['fiscalPeriodStart'] = undefined;

/**
 * Filters for fiscal periods ending on or before this date (YYYY-MM-DD). Used with `fiscalPeriodStart` for a range, or alone for the latest period.
 * @member {Date} fiscalPeriodEnd
 */
FundamentalsPITRequestBody.prototype['fiscalPeriodEnd'] = undefined;

/**
 * An array of fundamentals metric identifiers. Use the `/metrics` endpoint for a complete list of available metric identifiers.
 * @member {Array.<String>} metrics
 */
FundamentalsPITRequestBody.prototype['metrics'] = undefined;

/**
 * @member {module:model/FrequencyEnum} frequency
 */
FundamentalsPITRequestBody.prototype['frequency'] = undefined;

/**
 * Filters PIT snapshots taken on or after this UTC date and time. * Use ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. * If `pitStart` and `pitEnd` are omitted, the full PIT history is returned (respecting `frequency` if provided). * For a specific point in time, provide the same value for both `pitStart` and `pitEnd`. 
 * @member {Date} pitStart
 */
FundamentalsPITRequestBody.prototype['pitStart'] = undefined;

/**
 * Filters PIT snapshots taken on or before this UTC date and time. * Use ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. * Must be used with `pitStart` to define a range. * For a specific point in time, use the same value for both `pitStart` and `pitEnd`. 
 * @member {Date} pitEnd
 */
FundamentalsPITRequestBody.prototype['pitEnd'] = undefined;

/**
 * @member {module:model/UpdateType} updateType
 */
FundamentalsPITRequestBody.prototype['updateType'] = undefined;

/**
 * Optional flag to restrict results to securities that were active on the snapshot (PIT) date.  When set to true, applies point-in-time filtering based on the security's active date range. Prevents inclusion of future-dated entities.
 * @member {Boolean} active
 * @default true
 */
FundamentalsPITRequestBody.prototype['active'] = true;






export default FundamentalsPITRequestBody;

