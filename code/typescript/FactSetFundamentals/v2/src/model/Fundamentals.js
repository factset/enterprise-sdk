/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompanyReportErrorObject from './CompanyReportErrorObject';
import Dividend from './Dividend';
import PerShare from './PerShare';
import Ratios from './Ratios';

/**
 * The Fundamentals model module.
 * @module model/Fundamentals
 */
class Fundamentals {
    /**
     * Constructs a new <code>Fundamentals</code>.
     * Factset Fundamental Response item
     * @alias module:model/Fundamentals
     */
    constructor() { 
        
        Fundamentals.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Fundamentals</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Fundamentals} obj Optional instance to populate.
     * @return {module:model/Fundamentals} The populated <code>Fundamentals</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Fundamentals();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = CompanyReportErrorObject.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('asOfDate')) {
                obj['asOfDate'] = ApiClient.convertToType(data['asOfDate'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('periodicity')) {
                obj['periodicity'] = ApiClient.convertToType(data['periodicity'], 'String');
            }
            if (data.hasOwnProperty('perShare')) {
                obj['perShare'] = PerShare.constructFromObject(data['perShare']);
            }
            if (data.hasOwnProperty('ratios')) {
                obj['ratios'] = Ratios.constructFromObject(data['ratios']);
            }
            if (data.hasOwnProperty('dividend')) {
                obj['dividend'] = Dividend.constructFromObject(data['dividend']);
            }
            if (data.hasOwnProperty('enterpriseValue')) {
                obj['enterpriseValue'] = ApiClient.convertToType(data['enterpriseValue'], 'Number');
            }
            if (data.hasOwnProperty('fiveYearAverageYield')) {
                obj['fiveYearAverageYield'] = ApiClient.convertToType(data['fiveYearAverageYield'], 'Number');
            }
            if (data.hasOwnProperty('fiveYearDividendGrowthRate')) {
                obj['fiveYearDividendGrowthRate'] = ApiClient.convertToType(data['fiveYearDividendGrowthRate'], 'Number');
            }
            if (data.hasOwnProperty('floatingSharesOutstanding')) {
                obj['floatingSharesOutstanding'] = ApiClient.convertToType(data['floatingSharesOutstanding'], 'Number');
            }
            if (data.hasOwnProperty('netIncome')) {
                obj['netIncome'] = ApiClient.convertToType(data['netIncome'], 'Number');
            }
            if (data.hasOwnProperty('numberOfEmployees')) {
                obj['numberOfEmployees'] = ApiClient.convertToType(data['numberOfEmployees'], 'Number');
            }
            if (data.hasOwnProperty('salesPerEmployee')) {
                obj['salesPerEmployee'] = ApiClient.convertToType(data['salesPerEmployee'], 'Number');
            }
            if (data.hasOwnProperty('shareHolderEquity')) {
                obj['shareHolderEquity'] = ApiClient.convertToType(data['shareHolderEquity'], 'Number');
            }
            if (data.hasOwnProperty('threeYearAverageYield')) {
                obj['threeYearAverageYield'] = ApiClient.convertToType(data['threeYearAverageYield'], 'Number');
            }
            if (data.hasOwnProperty('threeYearDividendGrowthRate')) {
                obj['threeYearDividendGrowthRate'] = ApiClient.convertToType(data['threeYearDividendGrowthRate'], 'Number');
            }
            if (data.hasOwnProperty('totalAssets')) {
                obj['totalAssets'] = ApiClient.convertToType(data['totalAssets'], 'Number');
            }
            if (data.hasOwnProperty('totalRevenue')) {
                obj['totalRevenue'] = ApiClient.convertToType(data['totalRevenue'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
Fundamentals.prototype['requestId'] = undefined;

/**
 * @member {module:model/CompanyReportErrorObject} error
 */
Fundamentals.prototype['error'] = undefined;

/**
 * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
 * @member {String} fsymId
 */
Fundamentals.prototype['fsymId'] = undefined;

/**
 * Date on which the specified fundamentals data or information is accurate or relevant.
 * @member {Date} asOfDate
 */
Fundamentals.prototype['asOfDate'] = undefined;

/**
 * Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
 * @member {String} currency
 */
Fundamentals.prototype['currency'] = undefined;

/**
 * Periodicity or frequency of the fiscal periods.
 * @member {String} periodicity
 */
Fundamentals.prototype['periodicity'] = undefined;

/**
 * @member {module:model/PerShare} perShare
 */
Fundamentals.prototype['perShare'] = undefined;

/**
 * @member {module:model/Ratios} ratios
 */
Fundamentals.prototype['ratios'] = undefined;

/**
 * @member {module:model/Dividend} dividend
 */
Fundamentals.prototype['dividend'] = undefined;

/**
 * Enterprise Value (EV) is the measure of a company's total value for the period and date(s) requested in local currency by default
 * @member {Number} enterpriseValue
 */
Fundamentals.prototype['enterpriseValue'] = undefined;

/**
 * Average of the dividend yield with yield calculated for each of the past five years
 * @member {Number} fiveYearAverageYield
 */
Fundamentals.prototype['fiveYearAverageYield'] = undefined;

/**
 * The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over five years of time
 * @member {Number} fiveYearDividendGrowthRate
 */
Fundamentals.prototype['fiveYearDividendGrowthRate'] = undefined;

/**
 * Represents the number of shares outstanding less closely held shares for the period and date(s) requested
 * @member {Number} floatingSharesOutstanding
 */
Fundamentals.prototype['floatingSharesOutstanding'] = undefined;

/**
 * This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses
 * @member {Number} netIncome
 */
Fundamentals.prototype['netIncome'] = undefined;

/**
 * Represents the number of employees under the company's payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.
 * @member {Number} numberOfEmployees
 */
Fundamentals.prototype['numberOfEmployees'] = undefined;

/**
 * Revenue per employee is a ratio that is calculated as a company's total revenue divided by its current number of employees
 * @member {Number} salesPerEmployee
 */
Fundamentals.prototype['salesPerEmployee'] = undefined;

/**
 * Shareholder equity represents the amount of financing the company experiences through common and preferred shares
 * @member {Number} shareHolderEquity
 */
Fundamentals.prototype['shareHolderEquity'] = undefined;

/**
 * Average of the dividend yield with yield calculated for each of the past three years
 * @member {Number} threeYearAverageYield
 */
Fundamentals.prototype['threeYearAverageYield'] = undefined;

/**
 * The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over three years of time
 * @member {Number} threeYearDividendGrowthRate
 */
Fundamentals.prototype['threeYearDividendGrowthRate'] = undefined;

/**
 * Total amount of assets owned by entity.
 * @member {Number} totalAssets
 */
Fundamentals.prototype['totalAssets'] = undefined;

/**
 * Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.
 * @member {Number} totalRevenue
 */
Fundamentals.prototype['totalRevenue'] = undefined;






export default Fundamentals;

