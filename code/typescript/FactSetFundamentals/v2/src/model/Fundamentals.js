/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompanyReportErrorObject from './CompanyReportErrorObject';
import Dividend from './Dividend';

/**
 * The Fundamentals model module.
 * @module model/Fundamentals
 */
class Fundamentals {
    /**
     * Constructs a new <code>Fundamentals</code>.
     * Factset Fundamental Response item
     * @alias module:model/Fundamentals
     */
    constructor() { 
        
        Fundamentals.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Fundamentals</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Fundamentals} obj Optional instance to populate.
     * @return {module:model/Fundamentals} The populated <code>Fundamentals</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Fundamentals();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = CompanyReportErrorObject.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('asOfDate')) {
                obj['asOfDate'] = ApiClient.convertToType(data['asOfDate'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('assetTurnoverRatio')) {
                obj['assetTurnoverRatio'] = ApiClient.convertToType(data['assetTurnoverRatio'], 'Number');
            }
            if (data.hasOwnProperty('bookValuePerShare')) {
                obj['bookValuePerShare'] = ApiClient.convertToType(data['bookValuePerShare'], 'Number');
            }
            if (data.hasOwnProperty('cashFlowPerShare')) {
                obj['cashFlowPerShare'] = ApiClient.convertToType(data['cashFlowPerShare'], 'Number');
            }
            if (data.hasOwnProperty('cashPerShare')) {
                obj['cashPerShare'] = ApiClient.convertToType(data['cashPerShare'], 'Number');
            }
            if (data.hasOwnProperty('currentRatio')) {
                obj['currentRatio'] = ApiClient.convertToType(data['currentRatio'], 'Number');
            }
            if (data.hasOwnProperty('dividend')) {
                obj['dividend'] = Dividend.constructFromObject(data['dividend']);
            }
            if (data.hasOwnProperty('earningsPerShare')) {
                obj['earningsPerShare'] = ApiClient.convertToType(data['earningsPerShare'], 'Number');
            }
            if (data.hasOwnProperty('ebitMargin')) {
                obj['ebitMargin'] = ApiClient.convertToType(data['ebitMargin'], 'Number');
            }
            if (data.hasOwnProperty('ebitdaMargin')) {
                obj['ebitdaMargin'] = ApiClient.convertToType(data['ebitdaMargin'], 'Number');
            }
            if (data.hasOwnProperty('enterpriseValue')) {
                obj['enterpriseValue'] = ApiClient.convertToType(data['enterpriseValue'], 'Number');
            }
            if (data.hasOwnProperty('fiveYearAverageYield')) {
                obj['fiveYearAverageYield'] = ApiClient.convertToType(data['fiveYearAverageYield'], 'Number');
            }
            if (data.hasOwnProperty('fiveYearDividendGrowthRate')) {
                obj['fiveYearDividendGrowthRate'] = ApiClient.convertToType(data['fiveYearDividendGrowthRate'], 'Number');
            }
            if (data.hasOwnProperty('floatingSharesOutstanding')) {
                obj['floatingSharesOutstanding'] = ApiClient.convertToType(data['floatingSharesOutstanding'], 'Number');
            }
            if (data.hasOwnProperty('grossMargin')) {
                obj['grossMargin'] = ApiClient.convertToType(data['grossMargin'], 'Number');
            }
            if (data.hasOwnProperty('inventoryTurnover')) {
                obj['inventoryTurnover'] = ApiClient.convertToType(data['inventoryTurnover'], 'Number');
            }
            if (data.hasOwnProperty('longTermDebtToEquity')) {
                obj['longTermDebtToEquity'] = ApiClient.convertToType(data['longTermDebtToEquity'], 'Number');
            }
            if (data.hasOwnProperty('netIncome')) {
                obj['netIncome'] = ApiClient.convertToType(data['netIncome'], 'Number');
            }
            if (data.hasOwnProperty('numberOfEmployees')) {
                obj['numberOfEmployees'] = ApiClient.convertToType(data['numberOfEmployees'], 'Number');
            }
            if (data.hasOwnProperty('payoutRatio')) {
                obj['payoutRatio'] = ApiClient.convertToType(data['payoutRatio'], 'Number');
            }
            if (data.hasOwnProperty('pretaxMargin')) {
                obj['pretaxMargin'] = ApiClient.convertToType(data['pretaxMargin'], 'Number');
            }
            if (data.hasOwnProperty('priceToBookRatio')) {
                obj['priceToBookRatio'] = ApiClient.convertToType(data['priceToBookRatio'], 'Number');
            }
            if (data.hasOwnProperty('priceToCashFlowRatio')) {
                obj['priceToCashFlowRatio'] = ApiClient.convertToType(data['priceToCashFlowRatio'], 'Number');
            }
            if (data.hasOwnProperty('priceToEarningsRatio')) {
                obj['priceToEarningsRatio'] = ApiClient.convertToType(data['priceToEarningsRatio'], 'Number');
            }
            if (data.hasOwnProperty('priceToSalesRatio')) {
                obj['priceToSalesRatio'] = ApiClient.convertToType(data['priceToSalesRatio'], 'Number');
            }
            if (data.hasOwnProperty('quickRatio')) {
                obj['quickRatio'] = ApiClient.convertToType(data['quickRatio'], 'Number');
            }
            if (data.hasOwnProperty('returnOnAssets')) {
                obj['returnOnAssets'] = ApiClient.convertToType(data['returnOnAssets'], 'Number');
            }
            if (data.hasOwnProperty('returnOnEquity')) {
                obj['returnOnEquity'] = ApiClient.convertToType(data['returnOnEquity'], 'Number');
            }
            if (data.hasOwnProperty('returnOnInvestedCapital')) {
                obj['returnOnInvestedCapital'] = ApiClient.convertToType(data['returnOnInvestedCapital'], 'Number');
            }
            if (data.hasOwnProperty('revenuePerShare')) {
                obj['revenuePerShare'] = ApiClient.convertToType(data['revenuePerShare'], 'Number');
            }
            if (data.hasOwnProperty('salesPerEmployee')) {
                obj['salesPerEmployee'] = ApiClient.convertToType(data['salesPerEmployee'], 'Number');
            }
            if (data.hasOwnProperty('salesPerShare')) {
                obj['salesPerShare'] = ApiClient.convertToType(data['salesPerShare'], 'Number');
            }
            if (data.hasOwnProperty('shareHolderEquity')) {
                obj['shareHolderEquity'] = ApiClient.convertToType(data['shareHolderEquity'], 'Number');
            }
            if (data.hasOwnProperty('threeYearAverageYield')) {
                obj['threeYearAverageYield'] = ApiClient.convertToType(data['threeYearAverageYield'], 'Number');
            }
            if (data.hasOwnProperty('threeYearDividendGrowthRate')) {
                obj['threeYearDividendGrowthRate'] = ApiClient.convertToType(data['threeYearDividendGrowthRate'], 'Number');
            }
            if (data.hasOwnProperty('totalAssets')) {
                obj['totalAssets'] = ApiClient.convertToType(data['totalAssets'], 'Number');
            }
            if (data.hasOwnProperty('totalDebtToEquity')) {
                obj['totalDebtToEquity'] = ApiClient.convertToType(data['totalDebtToEquity'], 'Number');
            }
            if (data.hasOwnProperty('totalRevenue')) {
                obj['totalRevenue'] = ApiClient.convertToType(data['totalRevenue'], 'Number');
            }
            if (data.hasOwnProperty('trailingTwelveMonthEarningsPerShare')) {
                obj['trailingTwelveMonthEarningsPerShare'] = ApiClient.convertToType(data['trailingTwelveMonthEarningsPerShare'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
Fundamentals.prototype['requestId'] = undefined;

/**
 * @member {module:model/CompanyReportErrorObject} error
 */
Fundamentals.prototype['error'] = undefined;

/**
 * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet.
 * @member {String} fsymId
 */
Fundamentals.prototype['fsymId'] = undefined;

/**
 * Date on which the specified fundamentals data or information is accurate or relevant.
 * @member {Date} asOfDate
 */
Fundamentals.prototype['asOfDate'] = undefined;

/**
 * Currency code for the data. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
 * @member {String} currency
 */
Fundamentals.prototype['currency'] = undefined;

/**
 * The asset turnover ratio measures the value of a company's sales or revenues relative to the value of its assets
 * @member {Number} assetTurnoverRatio
 */
Fundamentals.prototype['assetTurnoverRatio'] = undefined;

/**
 * Book value per common share is a formula used to calculate the per share value of a company based on common shareholders' equity in the company
 * @member {Number} bookValuePerShare
 */
Fundamentals.prototype['bookValuePerShare'] = undefined;

/**
 * Cash flow per share is calculated as a ratio, indicating the amount of cash a business generates based on a company's net income with the costs of depreciation and amortization added back
 * @member {Number} cashFlowPerShare
 */
Fundamentals.prototype['cashFlowPerShare'] = undefined;

/**
 * Cash Per Share of Security
 * @member {Number} cashPerShare
 */
Fundamentals.prototype['cashPerShare'] = undefined;

/**
 * The current ratio is a liquidity ratio that measures a company's ability to pay short-term and long-term obligations. The ratio is calculated by comparing current assets to current liabilities
 * @member {Number} currentRatio
 */
Fundamentals.prototype['currentRatio'] = undefined;

/**
 * @member {module:model/Dividend} dividend
 */
Fundamentals.prototype['dividend'] = undefined;

/**
 * Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock
 * @member {Number} earningsPerShare
 */
Fundamentals.prototype['earningsPerShare'] = undefined;

/**
 * EBIT margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest and tax (EBIT) divided by total revenue
 * @member {Number} ebitMargin
 */
Fundamentals.prototype['ebitMargin'] = undefined;

/**
 * EBITDA margin is an assessment of a firm's operating profitability as a percentage of its total revenue. It is equal to earnings before interest, tax, depreciation and amortization (EBITDA) divided by total revenue
 * @member {Number} ebitdaMargin
 */
Fundamentals.prototype['ebitdaMargin'] = undefined;

/**
 * Enterprise Value (EV) is the measure of a company's total value for the period and date(s) requested in local currency by default
 * @member {Number} enterpriseValue
 */
Fundamentals.prototype['enterpriseValue'] = undefined;

/**
 * Average of the dividend yield with yield calculated for each of the past five years
 * @member {Number} fiveYearAverageYield
 */
Fundamentals.prototype['fiveYearAverageYield'] = undefined;

/**
 * The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over five years of time
 * @member {Number} fiveYearDividendGrowthRate
 */
Fundamentals.prototype['fiveYearDividendGrowthRate'] = undefined;

/**
 * Represents the number of shares outstanding less closely held shares for the period and date(s) requested
 * @member {Number} floatingSharesOutstanding
 */
Fundamentals.prototype['floatingSharesOutstanding'] = undefined;

/**
 * Gross profit margin is the proportion of money left over from revenues after accounting for the cost of goods sold, calculated by dividing gross profit by revenues.
 * @member {Number} grossMargin
 */
Fundamentals.prototype['grossMargin'] = undefined;

/**
 * Inventory turnover is a ratio showing how many times a company has sold and replaced inventory during a given period
 * @member {Number} inventoryTurnover
 */
Fundamentals.prototype['inventoryTurnover'] = undefined;

/**
 * Long-term debt consists of loans and financial obligations lasting over one year. The Debt/Equity (D/E) Ratio is calculated by dividing a company's total liabilities lasting over one year by its shareholder equity
 * @member {Number} longTermDebtToEquity
 */
Fundamentals.prototype['longTermDebtToEquity'] = undefined;

/**
 * This equals to net earnings (profit) calculated as sales less cost of goods sold, selling, general and administrative expenses, operating expenses, depreciation, interest, taxes and other expenses
 * @member {Number} netIncome
 */
Fundamentals.prototype['netIncome'] = undefined;

/**
 * Represents the number of employees under the company's payroll as reported by the management to the shareholders within 90 days of the fiscal year-end.
 * @member {Number} numberOfEmployees
 */
Fundamentals.prototype['numberOfEmployees'] = undefined;

/**
 * The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company
 * @member {Number} payoutRatio
 */
Fundamentals.prototype['payoutRatio'] = undefined;

/**
 * The pretax margin is the ratio of a company's pre-tax earnings to its total sales
 * @member {Number} pretaxMargin
 */
Fundamentals.prototype['pretaxMargin'] = undefined;

/**
 * Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share (BVPS) .
 * @member {Number} priceToBookRatio
 */
Fundamentals.prototype['priceToBookRatio'] = undefined;

/**
 * The price-to-cash flow ratio is a stock valuation indicator or multiple that measures the value of a stock's price relative to its operating cash flow per share.
 * @member {Number} priceToCashFlowRatio
 */
Fundamentals.prototype['priceToCashFlowRatio'] = undefined;

/**
 * The price-to-earnings ratio (P/E ratio) is the ratio for valuing a company that measures its current share price relative to its per-share earnings
 * @member {Number} priceToEarningsRatio
 */
Fundamentals.prototype['priceToEarningsRatio'] = undefined;

/**
 * The price-to-sales ratio (P/S ratio) is a valuation ratio that compares a company's stock price to its revenues
 * @member {Number} priceToSalesRatio
 */
Fundamentals.prototype['priceToSalesRatio'] = undefined;

/**
 * The quick ratio measures the dollar amount of liquid assets available with the company against the dollar amount of its current liabilities
 * @member {Number} quickRatio
 */
Fundamentals.prototype['quickRatio'] = undefined;

/**
 * Return on net assets (RONA) is a measure of financial performance calculated as net income divided by the sum of fixed assets and net working capital
 * @member {Number} returnOnAssets
 */
Fundamentals.prototype['returnOnAssets'] = undefined;

/**
 * Return on equity (ROE) is a measure of financial performance calculated as net income divided by shareholders' equity
 * @member {Number} returnOnEquity
 */
Fundamentals.prototype['returnOnEquity'] = undefined;

/**
 * Return on Investment (ROI) measures how well an investment is performing
 * @member {Number} returnOnInvestedCapital
 */
Fundamentals.prototype['returnOnInvestedCapital'] = undefined;

/**
 * The portion of a company's revenue that is allocated to each share of common stock.
 * @member {Number} revenuePerShare
 */
Fundamentals.prototype['revenuePerShare'] = undefined;

/**
 * Revenue per employee is a ratio that is calculated as a company's total revenue divided by its current number of employees
 * @member {Number} salesPerEmployee
 */
Fundamentals.prototype['salesPerEmployee'] = undefined;

/**
 * Sales per share is a ratio that computes the total revenue earned per share over a designated period
 * @member {Number} salesPerShare
 */
Fundamentals.prototype['salesPerShare'] = undefined;

/**
 * Shareholder equity represents the amount of financing the company experiences through common and preferred shares
 * @member {Number} shareHolderEquity
 */
Fundamentals.prototype['shareHolderEquity'] = undefined;

/**
 * Average of the dividend yield with yield calculated for each of the past three years
 * @member {Number} threeYearAverageYield
 */
Fundamentals.prototype['threeYearAverageYield'] = undefined;

/**
 * The dividend growth rate is the annualized percentage rate of growth that a particular stock's dividend undergoes over three years of time
 * @member {Number} threeYearDividendGrowthRate
 */
Fundamentals.prototype['threeYearDividendGrowthRate'] = undefined;

/**
 * Total amount of assets owned by entity.
 * @member {Number} totalAssets
 */
Fundamentals.prototype['totalAssets'] = undefined;

/**
 * The Debt/Equity (D/E) Ratio is calculated by dividing a company's total liabilities by its shareholder equity
 * @member {Number} totalDebtToEquity
 */
Fundamentals.prototype['totalDebtToEquity'] = undefined;

/**
 * Revenue is the amount of money (in Million) that a company actually receives during a specific period, including discounts and deductions for returned merchandise.
 * @member {Number} totalRevenue
 */
Fundamentals.prototype['totalRevenue'] = undefined;

/**
 * Earnings per share over the last 12 months.
 * @member {Number} trailingTwelveMonthEarningsPerShare
 */
Fundamentals.prototype['trailingTwelveMonthEarningsPerShare'] = undefined;






export default Fundamentals;

