/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.4.1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address model module.
 * @module model/Address
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * @alias module:model/Address
     */
    constructor() { 
        
        Address.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('streetLine1')) {
                obj['streetLine1'] = ApiClient.convertToType(data['streetLine1'], 'String');
            }
            if (data.hasOwnProperty('streetLine2')) {
                obj['streetLine2'] = ApiClient.convertToType(data['streetLine2'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateName')) {
                obj['stateName'] = ApiClient.convertToType(data['stateName'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Street line where the company head quarters are located
 * @member {String} streetLine1
 */
Address.prototype['streetLine1'] = undefined;

/**
 * Additional Street line where the company head quarters are located, if available
 * @member {String} streetLine2
 */
Address.prototype['streetLine2'] = undefined;

/**
 * City where the company head quarters are located
 * @member {String} city
 */
Address.prototype['city'] = undefined;

/**
 * State code for which state the company head quarters are located
 * @member {String} state
 */
Address.prototype['state'] = undefined;

/**
 * Full State Name of the state where the company head quarters are located
 * @member {String} stateName
 */
Address.prototype['stateName'] = undefined;

/**
 * Full Country Name of the country where the company head quarters are located
 * @member {String} country
 */
Address.prototype['country'] = undefined;

/**
 * Zipcode of the city where the company head quarters are located
 * @member {String} zip
 */
Address.prototype['zip'] = undefined;

/**
 * Phone number of the company
 * @member {String} phoneNumber
 */
Address.prototype['phoneNumber'] = undefined;

/**
 * Website of the company
 * @member {String} website
 */
Address.prototype['website'] = undefined;






export default Address;

