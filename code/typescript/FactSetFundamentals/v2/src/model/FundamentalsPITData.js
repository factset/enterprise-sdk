/**
 * FactSet Fundamentals API
 * Gain access to current, comprehensive, and comparative information on securities in worldwide developed and emerging markets. In addition to the latest reported data, this API provides Point-in-Time (PIT) views to access fundamentals data as it was known on any given date. Composed of annual and interim/quarterly data, detailed historical financial statement content, per-share data, and calculated ratios, FactSet Fundamentals provides you with the information you need for a global investment perspective.<p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 2.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FundamentalValue from './FundamentalValue';

/**
 * The FundamentalsPITData model module.
 * @module model/FundamentalsPITData
 */
class FundamentalsPITData {
    /**
     * Constructs a new <code>FundamentalsPITData</code>.
     * Represents a single value for a fundamental metric as it was known during a specific Point-in-Time window for a given security and fiscal period.
     * @alias module:model/FundamentalsPITData
     */
    constructor() { 
        
        FundamentalsPITData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FundamentalsPITData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FundamentalsPITData} obj Optional instance to populate.
     * @return {module:model/FundamentalsPITData} The populated <code>FundamentalsPITData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FundamentalsPITData();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('periodicity')) {
                obj['periodicity'] = ApiClient.convertToType(data['periodicity'], 'String');
            }
            if (data.hasOwnProperty('fiscalPeriod')) {
                obj['fiscalPeriod'] = ApiClient.convertToType(data['fiscalPeriod'], 'Number');
            }
            if (data.hasOwnProperty('fiscalYear')) {
                obj['fiscalYear'] = ApiClient.convertToType(data['fiscalYear'], 'Number');
            }
            if (data.hasOwnProperty('fiscalEndDate')) {
                obj['fiscalEndDate'] = ApiClient.convertToType(data['fiscalEndDate'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = FundamentalValue.constructFromObject(data['value']);
            }
            if (data.hasOwnProperty('updateType')) {
                obj['updateType'] = ApiClient.convertToType(data['updateType'], 'String');
            }
            if (data.hasOwnProperty('pitStart')) {
                obj['pitStart'] = ApiClient.convertToType(data['pitStart'], 'Date');
            }
            if (data.hasOwnProperty('pitEnd')) {
                obj['pitEnd'] = ApiClient.convertToType(data['pitEnd'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * The identifier provided in the input request that corresponds to this data point.
 * @member {String} requestId
 */
FundamentalsPITData.prototype['requestId'] = undefined;

/**
 * FactSet Regional Security Identifier representing the specific data series for the requested `requestId`.
 * @member {String} fsymId
 */
FundamentalsPITData.prototype['fsymId'] = undefined;

/**
 * The identifier of the fundamental metric being reported (e.g., `FF_SALES`).
 * @member {String} metric
 */
FundamentalsPITData.prototype['metric'] = undefined;

/**
 * Periodicity of this data point (e.g., `QTR`, `ANN`).
 * @member {String} periodicity
 */
FundamentalsPITData.prototype['periodicity'] = undefined;

/**
 * Integer representing the fiscal period. For `QTR` periodicity, possible values are 1, 2, 3, or 4. For `SEMI` periodicity, possible values are 1 or 2.
 * @member {Number} fiscalPeriod
 */
FundamentalsPITData.prototype['fiscalPeriod'] = undefined;

/**
 * Fiscal year of the reported period, expressed in a YYYY format.
 * @member {Number} fiscalYear
 */
FundamentalsPITData.prototype['fiscalYear'] = undefined;

/**
 * The official ending date of the fiscal period (YYYY-MM-DD).
 * @member {Date} fiscalEndDate
 */
FundamentalsPITData.prototype['fiscalEndDate'] = undefined;

/**
 * Currency of the reported `value`, expressed as a 3-character ISO 4217 code. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
 * @member {String} currency
 */
FundamentalsPITData.prototype['currency'] = undefined;

/**
 * @member {module:model/FundamentalValue} value
 */
FundamentalsPITData.prototype['value'] = undefined;

/**
 * Indicates the status of the source filing when this data point was recorded (`Preliminary` or `Final`).
 * @member {module:model/FundamentalsPITData.UpdateTypeEnum} updateType
 */
FundamentalsPITData.prototype['updateType'] = undefined;

/**
 * Start of Point-in-Time (inclusive, in UTC) during which this value was current. Format: ISO 8601 `YYYY-MM-DDTHH:MM:SSZ`. If frequency is weekly (w) or monthly (m), this will be null. 
 * @member {Date} pitStart
 */
FundamentalsPITData.prototype['pitStart'] = undefined;

/**
 * End of Point-in-Time (inclusive, in UTC). Format: ISO 8601 `YYYY-MM-DDTHH:MM:SSZ`. If value is `null` -> this value is current (latest active snapshot). If frequency is weekly or monthly, and this is an end-of-week or end-of-month snapshot -> `pitStart` will be null. 
 * @member {Date} pitEnd
 */
FundamentalsPITData.prototype['pitEnd'] = undefined;





/**
 * Allowed values for the <code>updateType</code> property.
 * @enum {String}
 * @readonly
 */
FundamentalsPITData['UpdateTypeEnum'] = {

    /**
     * value: "Preliminary"
     * @const
     */
    "Preliminary": "Preliminary",

    /**
     * value: "Final"
     * @const
     */
    "Final": "Final"
};



export default FundamentalsPITData;

