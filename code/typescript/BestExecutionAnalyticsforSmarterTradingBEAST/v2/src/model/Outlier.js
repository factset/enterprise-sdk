/**
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Outlier model module.
 * @module model/Outlier
 */
class Outlier {
    /**
     * Constructs a new <code>Outlier</code>.
     * The Outlier object
     * @alias module:model/Outlier
     */
    constructor() { 
        
        Outlier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Outlier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Outlier} obj Optional instance to populate.
     * @return {module:model/Outlier} The populated <code>Outlier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Outlier();

            if (data.hasOwnProperty('securityId')) {
                obj['securityId'] = ApiClient.convertToType(data['securityId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('compositeId')) {
                obj['compositeId'] = ApiClient.convertToType(data['compositeId'], 'String');
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'Number');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('refValue')) {
                obj['refValue'] = ApiClient.convertToType(data['refValue'], 'Number');
            }
            if (data.hasOwnProperty('dateId')) {
                obj['dateId'] = ApiClient.convertToType(data['dateId'], 'String');
            }
            if (data.hasOwnProperty('broker')) {
                obj['broker'] = ApiClient.convertToType(data['broker'], 'String');
            }
            if (data.hasOwnProperty('trader')) {
                obj['trader'] = ApiClient.convertToType(data['trader'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('isin')) {
                obj['isin'] = ApiClient.convertToType(data['isin'], 'String');
            }
            if (data.hasOwnProperty('winsorized')) {
                obj['winsorized'] = ApiClient.convertToType(data['winsorized'], 'Number');
            }
            if (data.hasOwnProperty('outlier')) {
                obj['outlier'] = ApiClient.convertToType(data['outlier'], 'Boolean');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('timeZoneName')) {
                obj['timeZoneName'] = ApiClient.convertToType(data['timeZoneName'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Security Id
 * @member {String} securityId
 */
Outlier.prototype['securityId'] = undefined;

/**
 * Order Id
 * @member {String} orderId
 */
Outlier.prototype['orderId'] = undefined;

/**
 * Composite Id
 * @member {String} compositeId
 */
Outlier.prototype['compositeId'] = undefined;

/**
 * Order type
 * @member {module:model/Outlier.MessageTypeEnum} messageType
 */
Outlier.prototype['messageType'] = undefined;

/**
 * Metric
 * @member {Number} metric
 */
Outlier.prototype['metric'] = undefined;

/**
 * Side
 * @member {String} side
 */
Outlier.prototype['side'] = undefined;

/**
 * Volume
 * @member {Number} volume
 */
Outlier.prototype['volume'] = undefined;

/**
 * Price
 * @member {Number} price
 */
Outlier.prototype['price'] = undefined;

/**
 * Value
 * @member {Number} value
 */
Outlier.prototype['value'] = undefined;

/**
 * Ref Value
 * @member {Number} refValue
 */
Outlier.prototype['refValue'] = undefined;

/**
 * Date
 * @member {String} dateId
 */
Outlier.prototype['dateId'] = undefined;

/**
 * Broker
 * @member {String} broker
 */
Outlier.prototype['broker'] = undefined;

/**
 * Trader
 * @member {String} trader
 */
Outlier.prototype['trader'] = undefined;

/**
 * Currency
 * @member {String} currency
 */
Outlier.prototype['currency'] = undefined;

/**
 * The two character ISO country code
 * @member {String} country
 */
Outlier.prototype['country'] = undefined;

/**
 * Isin
 * @member {String} isin
 */
Outlier.prototype['isin'] = undefined;

/**
 * Winsorized
 * @member {Number} winsorized
 */
Outlier.prototype['winsorized'] = undefined;

/**
 * Outlier flag
 * @member {Boolean} outlier
 */
Outlier.prototype['outlier'] = undefined;

/**
 * Duration
 * @member {Number} duration
 */
Outlier.prototype['duration'] = undefined;

/**
 * The timezone identifier as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
 * @member {String} timeZone
 */
Outlier.prototype['timeZone'] = undefined;

/**
 * The timezone abbreviation as defined in the list of tz database timezones  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
 * @member {String} timeZoneName
 */
Outlier.prototype['timeZoneName'] = undefined;

/**
 * Symbol
 * @member {String} symbol
 */
Outlier.prototype['symbol'] = undefined;

/**
 * The two character ISO country code of the trading region. EMEA is used for the European trading region
 * @member {String} region
 */
Outlier.prototype['region'] = undefined;





/**
 * Allowed values for the <code>messageType</code> property.
 * @enum {String}
 * @readonly
 */
Outlier['MessageTypeEnum'] = {

    /**
     * value: "undefined"
     * @const
     */
    "undefined": "undefined",

    /**
     * value: "parent"
     * @const
     */
    "parent": "parent",

    /**
     * value: "child"
     * @const
     */
    "child": "child"
};



export default Outlier;

