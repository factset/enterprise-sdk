/**
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CostImpactResponseRoot from '../model/CostImpactResponseRoot';
import ErrorResponse from '../model/ErrorResponse';

/**
* MarketImpact service.
* @module api/MarketImpactApi
*/
export default class MarketImpactApi {

    /**
    * Constructs a new MarketImpactApi. 
    * @alias module:api/MarketImpactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Cost Impact
     * Get Cost Impact
     * @param {String} securityId ISIN for European securities, otherwise TICKER
     * @param {String} region The two character ISO country code of the trading region. EMEA is used for the European trading region
     * @param {String} currency The ISO 4217 currency code
     * @param {Number} orderVolume Order Volume
     * @param {Object} opts Optional parameters
     * @param {String} opts.strategy Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom
     * @param {String} opts.date Date in the format YYYY-MM-DD
     * @param {String} opts.isin International securities identification number
     * @param {String} opts.startTime Start Time in the format HH:MM:SS
     * @param {String} opts.endTime End Time in the format HH:MM:SS
     * @param {Number} opts.frontLoadHalfLife Front Load Half Life
     * @param {Number} opts.rearLoadHalfLife Rear Load Half Life
     * @param {Number} opts.rearRatio Rear Ratio
     * @param {Number} opts.riskAversion Risk Aversion
     * @param {Boolean} opts.applyMomentum Flag to apply stock momentum. Specify true to include momentum
     * @param {String} opts.side Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CostImpactResponseRoot} and HTTP response
     */
    getCostImpactWithHttpInfo(securityId, region, currency, orderVolume, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'securityId' is set
      if (securityId === undefined || securityId === null) {
        throw new Error("Missing the required parameter 'securityId' when calling getCostImpact");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling getCostImpact");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getCostImpact");
      }
      // verify the required parameter 'orderVolume' is set
      if (orderVolume === undefined || orderVolume === null) {
        throw new Error("Missing the required parameter 'orderVolume' when calling getCostImpact");
      }

      let pathParams = {
      };
      let queryParams = {
        'securityId': securityId,
        'region': region,
        'currency': currency,
        'orderVolume': orderVolume,
        'strategy': opts['strategy'],
        'date': opts['date'],
        'isin': opts['isin'],
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'frontLoadHalfLife': opts['frontLoadHalfLife'],
        'rearLoadHalfLife': opts['rearLoadHalfLife'],
        'rearRatio': opts['rearRatio'],
        'riskAversion': opts['riskAversion'],
        'applyMomentum': opts['applyMomentum'],
        'side': opts['side']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CostImpactResponseRoot;

      return this.apiClient.callApi(
        '/tca/market-impact/cost-impact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Cost Impact
     * Get Cost Impact
     * @param {String} securityId ISIN for European securities, otherwise TICKER
     * @param {String} region The two character ISO country code of the trading region. EMEA is used for the European trading region
     * @param {String} currency The ISO 4217 currency code
     * @param {Number} orderVolume Order Volume
     * @param {Object} opts Optional parameters
     * @param {String} opts.strategy Specify the strategy, choices are: Optimal, VWAP, TWAP, Custom
     * @param {String} opts.date Date in the format YYYY-MM-DD
     * @param {String} opts.isin International securities identification number
     * @param {String} opts.startTime Start Time in the format HH:MM:SS
     * @param {String} opts.endTime End Time in the format HH:MM:SS
     * @param {Number} opts.frontLoadHalfLife Front Load Half Life
     * @param {Number} opts.rearLoadHalfLife Rear Load Half Life
     * @param {Number} opts.rearRatio Rear Ratio
     * @param {Number} opts.riskAversion Risk Aversion
     * @param {Boolean} opts.applyMomentum Flag to apply stock momentum. Specify true to include momentum
     * @param {String} opts.side Indicate whether a buyer or seller. Only applies when applyMomentum is true. Example: Buy or Sell.
     * @return { Promise.< module:model/CostImpactResponseRoot > } a Promise, with data of type {@link module:model/CostImpactResponseRoot }
     */
    getCostImpact(securityId, region, currency, orderVolume, opts) {
      return this.getCostImpactWithHttpInfo(securityId, region, currency, orderVolume, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





