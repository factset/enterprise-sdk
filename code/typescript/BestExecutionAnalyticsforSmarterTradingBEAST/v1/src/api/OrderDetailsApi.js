/**
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import IndexETFResponseRoot from '../model/IndexETFResponseRoot';
import IntraOrderStatResponseRoot from '../model/IntraOrderStatResponseRoot';
import InvestmentTimingResponseRoot from '../model/InvestmentTimingResponseRoot';
import OrderFillCountResponseRoot from '../model/OrderFillCountResponseRoot';
import OrderInfoResponseRoot from '../model/OrderInfoResponseRoot';
import PriceTimeFillResponseRoot from '../model/PriceTimeFillResponseRoot';
import PriceTimeQuoteResponseRoot from '../model/PriceTimeQuoteResponseRoot';
import PriceTimeTradeResponseRoot from '../model/PriceTimeTradeResponseRoot';
import VolumePriceResponseRoot from '../model/VolumePriceResponseRoot';
import VolumeTimeResponseRoot from '../model/VolumeTimeResponseRoot';
import VolumeVenueResponseRoot from '../model/VolumeVenueResponseRoot';

/**
* OrderDetails service.
* @module api/OrderDetailsApi
*/
export default class OrderDetailsApi {

    /**
    * Constructs a new OrderDetailsApi. 
    * @alias module:api/OrderDetailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Order Fill Count
     * Get specified order fill count
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderFillCountResponseRoot} and HTTP response
     */
    getOrderFillCountWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderFillCount");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderFillCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = OrderFillCountResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/fill-count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Order Fill Count
     * Get specified order fill count
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/OrderFillCountResponseRoot > } a Promise, with data of type {@link module:model/OrderFillCountResponseRoot }
     */
    getOrderFillCount(orderId, date) {
      return this.getOrderFillCountWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Index ETF data
     * Get Index ETF data
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexETFResponseRoot} and HTTP response
     */
    getOrderIndexETFWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderIndexETF");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderIndexETF");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = IndexETFResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/index-etf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Index ETF data
     * Get Index ETF data
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/IndexETFResponseRoot > } a Promise, with data of type {@link module:model/IndexETFResponseRoot }
     */
    getOrderIndexETF(orderId, date) {
      return this.getOrderIndexETFWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Order Information
     * Get specified order information
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderInfoResponseRoot} and HTTP response
     */
    getOrderInfoWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderInfo");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = OrderInfoResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/order-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Order Information
     * Get specified order information
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/OrderInfoResponseRoot > } a Promise, with data of type {@link module:model/OrderInfoResponseRoot }
     */
    getOrderInfo(orderId, date) {
      return this.getOrderInfoWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Intra Order Stats
     * Get Intra Order Stats
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntraOrderStatResponseRoot} and HTTP response
     */
    getOrderIntraStatsWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderIntraStats");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderIntraStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = IntraOrderStatResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/intra-order-stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Intra Order Stats
     * Get Intra Order Stats
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/IntraOrderStatResponseRoot > } a Promise, with data of type {@link module:model/IntraOrderStatResponseRoot }
     */
    getOrderIntraStats(orderId, date) {
      return this.getOrderIntraStatsWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Order Investment Timings
     * Get Order Investment Timings
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestmentTimingResponseRoot} and HTTP response
     */
    getOrderInvestmentTimingWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderInvestmentTiming");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderInvestmentTiming");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InvestmentTimingResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/investment-timing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Order Investment Timings
     * Get Order Investment Timings
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/InvestmentTimingResponseRoot > } a Promise, with data of type {@link module:model/InvestmentTimingResponseRoot }
     */
    getOrderInvestmentTiming(orderId, date) {
      return this.getOrderInvestmentTimingWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Price Time Fills
     * Get Price Time Fills
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PriceTimeFillResponseRoot} and HTTP response
     */
    getOrderPriceTimeFillsWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderPriceTimeFills");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderPriceTimeFills");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = PriceTimeFillResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/price-time-fills', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Price Time Fills
     * Get Price Time Fills
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/PriceTimeFillResponseRoot > } a Promise, with data of type {@link module:model/PriceTimeFillResponseRoot }
     */
    getOrderPriceTimeFills(orderId, date) {
      return this.getOrderPriceTimeFillsWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Price Time Quotes
     * Get Price Time Quotes
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PriceTimeQuoteResponseRoot} and HTTP response
     */
    getOrderPriceTimeQuotesWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderPriceTimeQuotes");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderPriceTimeQuotes");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = PriceTimeQuoteResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/price-time-quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Price Time Quotes
     * Get Price Time Quotes
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/PriceTimeQuoteResponseRoot > } a Promise, with data of type {@link module:model/PriceTimeQuoteResponseRoot }
     */
    getOrderPriceTimeQuotes(orderId, date) {
      return this.getOrderPriceTimeQuotesWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Price Time Trades
     * Get Price Time Trades
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PriceTimeTradeResponseRoot} and HTTP response
     */
    getOrderPriceTimeTradesWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderPriceTimeTrades");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderPriceTimeTrades");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = PriceTimeTradeResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/price-time-trades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Price Time Trades
     * Get Price Time Trades
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/PriceTimeTradeResponseRoot > } a Promise, with data of type {@link module:model/PriceTimeTradeResponseRoot }
     */
    getOrderPriceTimeTrades(orderId, date) {
      return this.getOrderPriceTimeTradesWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Order Volume Prices
     * Get Order Volume Prices
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumePriceResponseRoot} and HTTP response
     */
    getOrderVolumePriceWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderVolumePrice");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderVolumePrice");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = VolumePriceResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/volume-price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Order Volume Prices
     * Get Order Volume Prices
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/VolumePriceResponseRoot > } a Promise, with data of type {@link module:model/VolumePriceResponseRoot }
     */
    getOrderVolumePrice(orderId, date) {
      return this.getOrderVolumePriceWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Order Volume Times
     * Get Order Volume Times
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeTimeResponseRoot} and HTTP response
     */
    getOrderVolumeTimeWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderVolumeTime");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderVolumeTime");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = VolumeTimeResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/volume-time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Order Volume Times
     * Get Order Volume Times
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/VolumeTimeResponseRoot > } a Promise, with data of type {@link module:model/VolumeTimeResponseRoot }
     */
    getOrderVolumeTime(orderId, date) {
      return this.getOrderVolumeTimeWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Order Volume Venues
     * Get Order Volume Venues
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VolumeVenueResponseRoot} and HTTP response
     */
    getOrderVolumeVenueWithHttpInfo(orderId, date) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderVolumeVenue");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getOrderVolumeVenue");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = VolumeVenueResponseRoot;

      return this.apiClient.callApi(
        '/tca/order/volume-venue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Order Volume Venues
     * Get Order Volume Venues
     * @param {String} orderId The Order Id
     * @param {String} date The Order Date in the format YYYY-MM-DD
     * @return { Promise.< module:model/VolumeVenueResponseRoot > } a Promise, with data of type {@link module:model/VolumeVenueResponseRoot }
     */
    getOrderVolumeVenue(orderId, date) {
      return this.getOrderVolumeVenueWithHttpInfo(orderId, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





