/**
 * Best Execution Analytics for Smarter Trading (BEAST) API
 * Enables clients to programmatically access the underlying data which powers the BEAST Liquidity Analytics (LA) and Transaction Cost Analysis (TCA) applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FieldValuesResponse model module.
 * @module model/FieldValuesResponse
 */
class FieldValuesResponse {
    /**
     * Constructs a new <code>FieldValuesResponse</code>.
     * Field Values response object
     * @alias module:model/FieldValuesResponse
     */
    constructor() { 
        
        FieldValuesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldValuesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldValuesResponse} obj Optional instance to populate.
     * @return {module:model/FieldValuesResponse} The populated <code>FieldValuesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldValuesResponse();

            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], ['String']);
            }
            if (data.hasOwnProperty('trader')) {
                obj['trader'] = ApiClient.convertToType(data['trader'], ['String']);
            }
            if (data.hasOwnProperty('strategy')) {
                obj['strategy'] = ApiClient.convertToType(data['strategy'], ['String']);
            }
            if (data.hasOwnProperty('broker')) {
                obj['broker'] = ApiClient.convertToType(data['broker'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Symbol field values
 * @member {Array.<String>} symbol
 */
FieldValuesResponse.prototype['symbol'] = undefined;

/**
 * Country field values
 * @member {Array.<String>} country
 */
FieldValuesResponse.prototype['country'] = undefined;

/**
 * Trader field values
 * @member {Array.<String>} trader
 */
FieldValuesResponse.prototype['trader'] = undefined;

/**
 * Strategy field values
 * @member {Array.<String>} strategy
 */
FieldValuesResponse.prototype['strategy'] = undefined;

/**
 * Broker field values
 * @member {Array.<String>} broker
 */
FieldValuesResponse.prototype['broker'] = undefined;






export default FieldValuesResponse;

