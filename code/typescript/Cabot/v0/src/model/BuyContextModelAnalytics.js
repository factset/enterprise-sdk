/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuyContextModelAnalyticsContext from './BuyContextModelAnalyticsContext';

/**
 * The BuyContextModelAnalytics model module.
 * @module model/BuyContextModelAnalytics
 */
class BuyContextModelAnalytics {
    /**
     * Constructs a new <code>BuyContextModelAnalytics</code>.
     * @alias module:model/BuyContextModelAnalytics
     */
    constructor() { 
        
        BuyContextModelAnalytics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuyContextModelAnalytics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuyContextModelAnalytics} obj Optional instance to populate.
     * @return {module:model/BuyContextModelAnalytics} The populated <code>BuyContextModelAnalytics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuyContextModelAnalytics();

            if (data.hasOwnProperty('affect')) {
                obj['affect'] = ApiClient.convertToType(data['affect'], 'Number');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = BuyContextModelAnalyticsContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} affect
 */
BuyContextModelAnalytics.prototype['affect'] = undefined;

/**
 * @member {module:model/BuyContextModelAnalyticsContext} context
 */
BuyContextModelAnalytics.prototype['context'] = undefined;

/**
 * The relevance of an attribute with regard to the manager’s buy process is quantified and listed from largest to smallest. A large range indicates that the attribute is not pertinent, or targeted, in the manager’s buy process. A small range indicates that a particular level of the attribute (high, lower average) is targeted in the manager’s buy process.
 * @member {Number} range
 */
BuyContextModelAnalytics.prototype['range'] = undefined;






export default BuyContextModelAnalytics;

