/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HitRateModelAnalyticsLosers from './HitRateModelAnalyticsLosers';
import HitRateModelAnalyticsWinners from './HitRateModelAnalyticsWinners';

/**
 * The HitRateModelAnalytics model module.
 * @module model/HitRateModelAnalytics
 */
class HitRateModelAnalytics {
    /**
     * Constructs a new <code>HitRateModelAnalytics</code>.
     * @alias module:model/HitRateModelAnalytics
     */
    constructor() { 
        
        HitRateModelAnalytics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HitRateModelAnalytics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HitRateModelAnalytics} obj Optional instance to populate.
     * @return {module:model/HitRateModelAnalytics} The populated <code>HitRateModelAnalytics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HitRateModelAnalytics();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('losers')) {
                obj['losers'] = HitRateModelAnalyticsLosers.constructFromObject(data['losers']);
            }
            if (data.hasOwnProperty('winLossRatio')) {
                obj['winLossRatio'] = ApiClient.convertToType(data['winLossRatio'], 'Number');
            }
            if (data.hasOwnProperty('winners')) {
                obj['winners'] = HitRateModelAnalyticsWinners.constructFromObject(data['winners']);
            }
        }
        return obj;
    }


}

/**
 * The total number of positions used in the denominator of the hit rate calculation.
 * @member {Number} count
 */
HitRateModelAnalytics.prototype['count'] = undefined;

/**
 * @member {module:model/HitRateModelAnalyticsLosers} losers
 */
HitRateModelAnalytics.prototype['losers'] = undefined;

/**
 * The win/loss ratio computes the relative benefit of winners versus losers. A win/loss ratio of greater than 100% indicates that the average winner generated greater benefit (i.e., positive contribution) then was lost by the average loser (i.e., negative contribution), and vice versa. This ratio may be examined at the portfolio level, or by classification.
 * @member {Number} winLossRatio
 */
HitRateModelAnalytics.prototype['winLossRatio'] = undefined;

/**
 * @member {module:model/HitRateModelAnalyticsWinners} winners
 */
HitRateModelAnalytics.prototype['winners'] = undefined;






export default HitRateModelAnalytics;

