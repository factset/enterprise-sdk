/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResultsModelAnalyticsRisk model module.
 * @module model/ResultsModelAnalyticsRisk
 */
class ResultsModelAnalyticsRisk {
    /**
     * Constructs a new <code>ResultsModelAnalyticsRisk</code>.
     * @alias module:model/ResultsModelAnalyticsRisk
     */
    constructor() { 
        
        ResultsModelAnalyticsRisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResultsModelAnalyticsRisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResultsModelAnalyticsRisk} obj Optional instance to populate.
     * @return {module:model/ResultsModelAnalyticsRisk} The populated <code>ResultsModelAnalyticsRisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResultsModelAnalyticsRisk();

            if (data.hasOwnProperty('alpha')) {
                obj['alpha'] = ApiClient.convertToType(data['alpha'], 'Number');
            }
            if (data.hasOwnProperty('beta')) {
                obj['beta'] = ApiClient.convertToType(data['beta'], 'Number');
            }
            if (data.hasOwnProperty('rSquared')) {
                obj['rSquared'] = ApiClient.convertToType(data['rSquared'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Alpha describes portfolio results adjusted for style and market factors. It provides insight into portfolio management independent from whether its style was in favor or out of favor (i.e., benefiting from a tailwind or fighting a headwind).
 * @member {Number} alpha
 */
ResultsModelAnalyticsRisk.prototype['alpha'] = undefined;

/**
 * Beta is also referred to as systematic risk, in that it expresses portfolio volatility in relationship to market or benchmark volatility. A beta of greater than 1.0 indicates that the portfolio is being managed in such a way that it exhibits more systemic risk than its benchmark and vice versa.
 * @member {Number} beta
 */
ResultsModelAnalyticsRisk.prototype['beta'] = undefined;

/**
 * In investing, R squared is generally interpreted as the percentage of a portfolio's movements that can be explained by movements in the benchmark. An R squared of 1.0 implies that the portfolio's return is completely explained by movements in the benchmark.
 * @member {Number} rSquared
 */
ResultsModelAnalyticsRisk.prototype['rSquared'] = undefined;






export default ResultsModelAnalyticsRisk;

