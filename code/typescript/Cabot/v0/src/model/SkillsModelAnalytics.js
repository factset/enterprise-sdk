/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SkillsModelAnalytics model module.
 * @module model/SkillsModelAnalytics
 */
class SkillsModelAnalytics {
    /**
     * Constructs a new <code>SkillsModelAnalytics</code>.
     * @alias module:model/SkillsModelAnalytics
     */
    constructor() { 
        
        SkillsModelAnalytics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SkillsModelAnalytics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkillsModelAnalytics} obj Optional instance to populate.
     * @return {module:model/SkillsModelAnalytics} The populated <code>SkillsModelAnalytics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkillsModelAnalytics();

            if (data.hasOwnProperty('buySkill')) {
                obj['buySkill'] = ApiClient.convertToType(data['buySkill'], 'Number');
            }
            if (data.hasOwnProperty('sellSkill')) {
                obj['sellSkill'] = ApiClient.convertToType(data['sellSkill'], 'Number');
            }
            if (data.hasOwnProperty('sizingSkill')) {
                obj['sizingSkill'] = ApiClient.convertToType(data['sizingSkill'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * This measures effectiveness in name selection.
 * @member {Number} buySkill
 */
SkillsModelAnalytics.prototype['buySkill'] = undefined;

/**
 * This quantifies the effectiveness of the sell discipline (final sells). It considers the impact from selling younger positions (i.e., too quickly, too slowly, done well) and from selling older positions (i.e., too quickly, too slowly, done well).
 * @member {Number} sellSkill
 */
SkillsModelAnalytics.prototype['sellSkill'] = undefined;

/**
 * This quantifies the benefit of active sizing decisions including initial position build up and subsequent trims and adds.
 * @member {Number} sizingSkill
 */
SkillsModelAnalytics.prototype['sizingSkill'] = undefined;






export default SkillsModelAnalytics;

