/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConstructionModelAnalyticsActiveWeights from './ConstructionModelAnalyticsActiveWeights';
import ConstructionModelAnalyticsPositionCount from './ConstructionModelAnalyticsPositionCount';

/**
 * The ConstructionModelAnalytics model module.
 * @module model/ConstructionModelAnalytics
 */
class ConstructionModelAnalytics {
    /**
     * Constructs a new <code>ConstructionModelAnalytics</code>.
     * @alias module:model/ConstructionModelAnalytics
     */
    constructor() { 
        
        ConstructionModelAnalytics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConstructionModelAnalytics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConstructionModelAnalytics} obj Optional instance to populate.
     * @return {module:model/ConstructionModelAnalytics} The populated <code>ConstructionModelAnalytics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConstructionModelAnalytics();

            if (data.hasOwnProperty('activeShare')) {
                obj['activeShare'] = ApiClient.convertToType(data['activeShare'], 'Number');
            }
            if (data.hasOwnProperty('activeWeights')) {
                obj['activeWeights'] = ConstructionModelAnalyticsActiveWeights.constructFromObject(data['activeWeights']);
            }
            if (data.hasOwnProperty('positionCount')) {
                obj['positionCount'] = ConstructionModelAnalyticsPositionCount.constructFromObject(data['positionCount']);
            }
            if (data.hasOwnProperty('turnover')) {
                obj['turnover'] = ApiClient.convertToType(data['turnover'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Active Share is a measure of the percentage of stock holdings in a portfolio that differs from the benchmark index. At the extremes, a portfolio with no holdings in common with the benchmark would have 100% active share, while a portfolio that is identical to the benchmark would have 0% active share.
 * @member {Number} activeShare
 */
ConstructionModelAnalytics.prototype['activeShare'] = undefined;

/**
 * @member {module:model/ConstructionModelAnalyticsActiveWeights} activeWeights
 */
ConstructionModelAnalytics.prototype['activeWeights'] = undefined;

/**
 * @member {module:model/ConstructionModelAnalyticsPositionCount} positionCount
 */
ConstructionModelAnalytics.prototype['positionCount'] = undefined;

/**
 * This is a measure of the degree to which the bets in the portfolio change over time. It is computed by summing the weight of all sells over the analysis timeframe and dividing this quantity by the same timeframe to produce an annualized value.
 * @member {Number} turnover
 */
ConstructionModelAnalytics.prototype['turnover'] = undefined;






export default ConstructionModelAnalytics;

