/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResultsModelAnalyticsRatios model module.
 * @module model/ResultsModelAnalyticsRatios
 */
class ResultsModelAnalyticsRatios {
    /**
     * Constructs a new <code>ResultsModelAnalyticsRatios</code>.
     * @alias module:model/ResultsModelAnalyticsRatios
     */
    constructor() { 
        
        ResultsModelAnalyticsRatios.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResultsModelAnalyticsRatios</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResultsModelAnalyticsRatios} obj Optional instance to populate.
     * @return {module:model/ResultsModelAnalyticsRatios} The populated <code>ResultsModelAnalyticsRatios</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResultsModelAnalyticsRatios();

            if (data.hasOwnProperty('informationRatio')) {
                obj['informationRatio'] = ApiClient.convertToType(data['informationRatio'], 'Number');
            }
            if (data.hasOwnProperty('sharpeRatio')) {
                obj['sharpeRatio'] = ApiClient.convertToType(data['sharpeRatio'], 'Number');
            }
            if (data.hasOwnProperty('treynorRatio')) {
                obj['treynorRatio'] = ApiClient.convertToType(data['treynorRatio'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * This ratio expresses the level of active return (i.e., portfolio return in excess of the benchmark) per unit of risk within the active return (i.e., standard deviation of the active returns: see tracking error). The information ratio is a common proxy for inferring manager skill in that it provides insight into the consistency of active return.
 * @member {Number} informationRatio
 */
ResultsModelAnalyticsRatios.prototype['informationRatio'] = undefined;

/**
 * The Sharpe ratio is a measure of excess return, per unit of total risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of risk being taken (standard deviation of portfolio returns).
 * @member {Number} sharpeRatio
 */
ResultsModelAnalyticsRatios.prototype['sharpeRatio'] = undefined;

/**
 * This metric measures excess return per unit of systematic risk. It provides insight into the price being paid (portfolio return in excess of the risk free rate) per unit of systematic risk being taken (portfolio beta).
 * @member {Number} treynorRatio
 */
ResultsModelAnalyticsRatios.prototype['treynorRatio'] = undefined;






export default ResultsModelAnalyticsRatios;

