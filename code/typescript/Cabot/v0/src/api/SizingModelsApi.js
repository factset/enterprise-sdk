/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTrimResponseRoot from '../model/AddTrimResponseRoot';
import Attributes from '../model/Attributes';
import ClientErrorResponse from '../model/ClientErrorResponse';
import RampDownResponseRoot from '../model/RampDownResponseRoot';
import RampUpResponseRoot from '../model/RampUpResponseRoot';
import Regions from '../model/Regions';
import Sectors from '../model/Sectors';

/**
* SizingModels service.
* @module api/SizingModelsApi
*/
export default class SizingModelsApi {

    /**
    * Constructs a new SizingModelsApi. 
    * @alias module:api/SizingModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cabot main path for Add Trim API
     * Cabot main path for Add Trim API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @param {String} period For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />
     * @param {Object} opts Optional parameters
     * @param {module:model/Attributes} opts.attribute The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />
     * @param {module:model/Sectors} opts.sector Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @param {module:model/Regions} opts.region Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddTrimResponseRoot} and HTTP response
     */
    getAddTrimModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountPath' is set
      if (accountPath === undefined || accountPath === null) {
        throw new Error("Missing the required parameter 'accountPath' when calling getAddTrimModelAnalytic");
      }
      // verify the required parameter 'benchmarkPath' is set
      if (benchmarkPath === undefined || benchmarkPath === null) {
        throw new Error("Missing the required parameter 'benchmarkPath' when calling getAddTrimModelAnalytic");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getAddTrimModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
        'accountPath': accountPath,
        'benchmarkPath': benchmarkPath,
        'period': period,
        'attribute': opts['attribute'],
        'sector': opts['sector'],
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = AddTrimResponseRoot;

      return this.apiClient.callApi(
        '/models/add-trim', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Add Trim API
     * Cabot main path for Add Trim API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @param {String} period For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />
     * @param {Object} opts Optional parameters
     * @param {module:model/Attributes} opts.attribute The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />
     * @param {module:model/Sectors} opts.sector Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @param {module:model/Regions} opts.region Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @return { Promise.< module:model/AddTrimResponseRoot > } a Promise, with data of type {@link module:model/AddTrimResponseRoot }
     */
    getAddTrimModelAnalytic(accountPath, benchmarkPath, period, opts) {
      return this.getAddTrimModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Ramp Down API
     * Cabot main path for Ramp Down API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @param {String} period For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />
     * @param {Object} opts Optional parameters
     * @param {module:model/Attributes} opts.attribute The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />
     * @param {module:model/Sectors} opts.sector Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @param {module:model/Regions} opts.region Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RampDownResponseRoot} and HTTP response
     */
    getRampDownModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountPath' is set
      if (accountPath === undefined || accountPath === null) {
        throw new Error("Missing the required parameter 'accountPath' when calling getRampDownModelAnalytic");
      }
      // verify the required parameter 'benchmarkPath' is set
      if (benchmarkPath === undefined || benchmarkPath === null) {
        throw new Error("Missing the required parameter 'benchmarkPath' when calling getRampDownModelAnalytic");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getRampDownModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
        'accountPath': accountPath,
        'benchmarkPath': benchmarkPath,
        'period': period,
        'attribute': opts['attribute'],
        'sector': opts['sector'],
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = RampDownResponseRoot;

      return this.apiClient.callApi(
        '/models/ramp-down', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Ramp Down API
     * Cabot main path for Ramp Down API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @param {String} period For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />
     * @param {Object} opts Optional parameters
     * @param {module:model/Attributes} opts.attribute The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />
     * @param {module:model/Sectors} opts.sector Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @param {module:model/Regions} opts.region Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @return { Promise.< module:model/RampDownResponseRoot > } a Promise, with data of type {@link module:model/RampDownResponseRoot }
     */
    getRampDownModelAnalytic(accountPath, benchmarkPath, period, opts) {
      return this.getRampDownModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Ramp Up API
     * Cabot main path for Ramp Up API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @param {String} period For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />
     * @param {Object} opts Optional parameters
     * @param {module:model/Attributes} opts.attribute The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />
     * @param {module:model/Sectors} opts.sector Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @param {module:model/Regions} opts.region Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RampUpResponseRoot} and HTTP response
     */
    getRampUpModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountPath' is set
      if (accountPath === undefined || accountPath === null) {
        throw new Error("Missing the required parameter 'accountPath' when calling getRampUpModelAnalytic");
      }
      // verify the required parameter 'benchmarkPath' is set
      if (benchmarkPath === undefined || benchmarkPath === null) {
        throw new Error("Missing the required parameter 'benchmarkPath' when calling getRampUpModelAnalytic");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getRampUpModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
        'accountPath': accountPath,
        'benchmarkPath': benchmarkPath,
        'period': period,
        'attribute': opts['attribute'],
        'sector': opts['sector'],
        'region': opts['region']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = RampUpResponseRoot;

      return this.apiClient.callApi(
        '/models/ramp-up', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Ramp Up API
     * Cabot main path for Ramp Up API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @param {String} period For which period you want to retrieve the data.<br />There are four options available as follows:<br /><br />1 -> YYYY (Repeating One Year)<br /><br />2 -> YYYY-YYYY (Repeating Three/Five/Ten Year)<br /><br />3 -> 1M_TRAILING, 3M_TRAILING, 1Y_TRAILING, 3Y_TRAILING, 5Y_TRAILING (Trailing Periods (If available for your portfolio))<br /><br />4 -> INCEPTION_TO_DATE<br /><br />You can only get the data for one period per request.<br /><br />
     * @param {Object} opts Optional parameters
     * @param {module:model/Attributes} opts.attribute The attribute represents the different factors.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />If provided, the API response will contain both \"LOW\" and \"HIGH\" values for it.<br /><br />
     * @param {module:model/Sectors} opts.sector Sector represents the sector based on the company's industry breakdown.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @param {module:model/Regions} opts.region Region of domicile represents the region based on the company's primary listing.<br />You can choose which of them (if any) you want to see analytics for.<br /><br />
     * @return { Promise.< module:model/RampUpResponseRoot > } a Promise, with data of type {@link module:model/RampUpResponseRoot }
     */
    getRampUpModelAnalytic(accountPath, benchmarkPath, period, opts) {
      return this.getRampUpModelAnalyticWithHttpInfo(accountPath, benchmarkPath, period, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





