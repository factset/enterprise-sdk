/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTrimRequestBodyRoot from '../model/AddTrimRequestBodyRoot';
import AddTrimResponseRoot from '../model/AddTrimResponseRoot';
import ClientErrorResponse from '../model/ClientErrorResponse';
import RampDownRequestBodyRoot from '../model/RampDownRequestBodyRoot';
import RampDownResponseRoot from '../model/RampDownResponseRoot';
import RampUpRequestBodyRoot from '../model/RampUpRequestBodyRoot';
import RampUpResponseRoot from '../model/RampUpResponseRoot';

/**
* SizingModels service.
* @module api/SizingModelsApi
*/
export default class SizingModelsApi {

    /**
    * Constructs a new SizingModelsApi. 
    * @alias module:api/SizingModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cabot main path for Add Trim API
     * Cabot main path for Add Trim API
     * @param {module:model/AddTrimRequestBodyRoot} addTrimRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddTrimResponseRoot} and HTTP response
     */
    getAddTrimModelAnalyticWithHttpInfo(addTrimRequestBodyRoot) {
      let postBody = addTrimRequestBodyRoot;
      // verify the required parameter 'addTrimRequestBodyRoot' is set
      if (addTrimRequestBodyRoot === undefined || addTrimRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'addTrimRequestBodyRoot' when calling getAddTrimModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = AddTrimResponseRoot;

      return this.apiClient.callApi(
        '/models/add-trim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Add Trim API
     * Cabot main path for Add Trim API
     * @param {module:model/AddTrimRequestBodyRoot} addTrimRequestBodyRoot 
     * @return { Promise.< module:model/AddTrimResponseRoot > } a Promise, with data of type {@link module:model/AddTrimResponseRoot }
     */
    getAddTrimModelAnalytic(addTrimRequestBodyRoot) {
      return this.getAddTrimModelAnalyticWithHttpInfo(addTrimRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Ramp Down API
     * Cabot main path for Ramp Down API
     * @param {module:model/RampDownRequestBodyRoot} rampDownRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RampDownResponseRoot} and HTTP response
     */
    getRampDownModelAnalyticWithHttpInfo(rampDownRequestBodyRoot) {
      let postBody = rampDownRequestBodyRoot;
      // verify the required parameter 'rampDownRequestBodyRoot' is set
      if (rampDownRequestBodyRoot === undefined || rampDownRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'rampDownRequestBodyRoot' when calling getRampDownModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = RampDownResponseRoot;

      return this.apiClient.callApi(
        '/models/ramp-down', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Ramp Down API
     * Cabot main path for Ramp Down API
     * @param {module:model/RampDownRequestBodyRoot} rampDownRequestBodyRoot 
     * @return { Promise.< module:model/RampDownResponseRoot > } a Promise, with data of type {@link module:model/RampDownResponseRoot }
     */
    getRampDownModelAnalytic(rampDownRequestBodyRoot) {
      return this.getRampDownModelAnalyticWithHttpInfo(rampDownRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Ramp Up API
     * Cabot main path for Ramp Up API
     * @param {module:model/RampUpRequestBodyRoot} rampUpRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RampUpResponseRoot} and HTTP response
     */
    getRampUpModelAnalyticWithHttpInfo(rampUpRequestBodyRoot) {
      let postBody = rampUpRequestBodyRoot;
      // verify the required parameter 'rampUpRequestBodyRoot' is set
      if (rampUpRequestBodyRoot === undefined || rampUpRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'rampUpRequestBodyRoot' when calling getRampUpModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = RampUpResponseRoot;

      return this.apiClient.callApi(
        '/models/ramp-up', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Ramp Up API
     * Cabot main path for Ramp Up API
     * @param {module:model/RampUpRequestBodyRoot} rampUpRequestBodyRoot 
     * @return { Promise.< module:model/RampUpResponseRoot > } a Promise, with data of type {@link module:model/RampUpResponseRoot }
     */
    getRampUpModelAnalytic(rampUpRequestBodyRoot) {
      return this.getRampUpModelAnalyticWithHttpInfo(rampUpRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





