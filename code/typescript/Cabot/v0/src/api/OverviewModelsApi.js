/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientErrorResponse from '../model/ClientErrorResponse';
import ConstructionRequestBodyRoot from '../model/ConstructionRequestBodyRoot';
import ConstructionResponseRoot from '../model/ConstructionResponseRoot';
import HitRateRequestBodyRoot from '../model/HitRateRequestBodyRoot';
import HitRateResponseRoot from '../model/HitRateResponseRoot';
import ResultsRequestBodyRoot from '../model/ResultsRequestBodyRoot';
import ResultsResponseRoot from '../model/ResultsResponseRoot';
import SkillsRequestBodyRoot from '../model/SkillsRequestBodyRoot';
import SkillsResponseRoot from '../model/SkillsResponseRoot';

/**
* OverviewModels service.
* @module api/OverviewModelsApi
*/
export default class OverviewModelsApi {

    /**
    * Constructs a new OverviewModelsApi. 
    * @alias module:api/OverviewModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cabot main path for Construction API
     * Cabot main path for Construction API
     * @param {module:model/ConstructionRequestBodyRoot} constructionRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConstructionResponseRoot} and HTTP response
     */
    getConstructionModelAnalyticWithHttpInfo(constructionRequestBodyRoot) {
      let postBody = constructionRequestBodyRoot;
      // verify the required parameter 'constructionRequestBodyRoot' is set
      if (constructionRequestBodyRoot === undefined || constructionRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'constructionRequestBodyRoot' when calling getConstructionModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ConstructionResponseRoot;

      return this.apiClient.callApi(
        '/models/construction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Construction API
     * Cabot main path for Construction API
     * @param {module:model/ConstructionRequestBodyRoot} constructionRequestBodyRoot 
     * @return { Promise.< module:model/ConstructionResponseRoot > } a Promise, with data of type {@link module:model/ConstructionResponseRoot }
     */
    getConstructionModelAnalytic(constructionRequestBodyRoot) {
      return this.getConstructionModelAnalyticWithHttpInfo(constructionRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Hit Rate API
     * Cabot main path for Hit Rate API
     * @param {module:model/HitRateRequestBodyRoot} hitRateRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HitRateResponseRoot} and HTTP response
     */
    getHitRateModelAnalyticWithHttpInfo(hitRateRequestBodyRoot) {
      let postBody = hitRateRequestBodyRoot;
      // verify the required parameter 'hitRateRequestBodyRoot' is set
      if (hitRateRequestBodyRoot === undefined || hitRateRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'hitRateRequestBodyRoot' when calling getHitRateModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = HitRateResponseRoot;

      return this.apiClient.callApi(
        '/models/hit-rate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Hit Rate API
     * Cabot main path for Hit Rate API
     * @param {module:model/HitRateRequestBodyRoot} hitRateRequestBodyRoot 
     * @return { Promise.< module:model/HitRateResponseRoot > } a Promise, with data of type {@link module:model/HitRateResponseRoot }
     */
    getHitRateModelAnalytic(hitRateRequestBodyRoot) {
      return this.getHitRateModelAnalyticWithHttpInfo(hitRateRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Results API
     * Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
     * @param {module:model/ResultsRequestBodyRoot} resultsRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResultsResponseRoot} and HTTP response
     */
    getResultsModelAnalyticWithHttpInfo(resultsRequestBodyRoot) {
      let postBody = resultsRequestBodyRoot;
      // verify the required parameter 'resultsRequestBodyRoot' is set
      if (resultsRequestBodyRoot === undefined || resultsRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'resultsRequestBodyRoot' when calling getResultsModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ResultsResponseRoot;

      return this.apiClient.callApi(
        '/models/results', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Results API
     * Cabot main path for Results API.     Describes portfolio returns in comparison to its benchmark. A positive value indicates excess returns while a negative value indicates underperformance.
     * @param {module:model/ResultsRequestBodyRoot} resultsRequestBodyRoot 
     * @return { Promise.< module:model/ResultsResponseRoot > } a Promise, with data of type {@link module:model/ResultsResponseRoot }
     */
    getResultsModelAnalytic(resultsRequestBodyRoot) {
      return this.getResultsModelAnalyticWithHttpInfo(resultsRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Skills API
     * Cabot main path for Skills API
     * @param {module:model/SkillsRequestBodyRoot} skillsRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SkillsResponseRoot} and HTTP response
     */
    getSkillsModelAnalyticWithHttpInfo(skillsRequestBodyRoot) {
      let postBody = skillsRequestBodyRoot;
      // verify the required parameter 'skillsRequestBodyRoot' is set
      if (skillsRequestBodyRoot === undefined || skillsRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'skillsRequestBodyRoot' when calling getSkillsModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SkillsResponseRoot;

      return this.apiClient.callApi(
        '/models/skills', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Skills API
     * Cabot main path for Skills API
     * @param {module:model/SkillsRequestBodyRoot} skillsRequestBodyRoot 
     * @return { Promise.< module:model/SkillsResponseRoot > } a Promise, with data of type {@link module:model/SkillsResponseRoot }
     */
    getSkillsModelAnalytic(skillsRequestBodyRoot) {
      return this.getSkillsModelAnalyticWithHttpInfo(skillsRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





