/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientErrorResponse from '../model/ClientErrorResponse';
import SellTimingRequestBodyRoot from '../model/SellTimingRequestBodyRoot';
import SellTimingResponseRoot from '../model/SellTimingResponseRoot';
import StopLossRequestBodyRoot from '../model/StopLossRequestBodyRoot';
import StopLossResponseRoot from '../model/StopLossResponseRoot';

/**
* SellingModels service.
* @module api/SellingModelsApi
*/
export default class SellingModelsApi {

    /**
    * Constructs a new SellingModelsApi. 
    * @alias module:api/SellingModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cabot main path for Sell Timing API
     * Cabot main path for Sell Timing API
     * @param {module:model/SellTimingRequestBodyRoot} sellTimingRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SellTimingResponseRoot} and HTTP response
     */
    getSellTimingModelAnalyticWithHttpInfo(sellTimingRequestBodyRoot) {
      let postBody = sellTimingRequestBodyRoot;
      // verify the required parameter 'sellTimingRequestBodyRoot' is set
      if (sellTimingRequestBodyRoot === undefined || sellTimingRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'sellTimingRequestBodyRoot' when calling getSellTimingModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SellTimingResponseRoot;

      return this.apiClient.callApi(
        '/models/sell-timing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Sell Timing API
     * Cabot main path for Sell Timing API
     * @param {module:model/SellTimingRequestBodyRoot} sellTimingRequestBodyRoot 
     * @return { Promise.< module:model/SellTimingResponseRoot > } a Promise, with data of type {@link module:model/SellTimingResponseRoot }
     */
    getSellTimingModelAnalytic(sellTimingRequestBodyRoot) {
      return this.getSellTimingModelAnalyticWithHttpInfo(sellTimingRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Stop Loss API
     * Cabot main path for Stop Loss API
     * @param {module:model/StopLossRequestBodyRoot} stopLossRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StopLossResponseRoot} and HTTP response
     */
    getStopLossModelAnalyticWithHttpInfo(stopLossRequestBodyRoot) {
      let postBody = stopLossRequestBodyRoot;
      // verify the required parameter 'stopLossRequestBodyRoot' is set
      if (stopLossRequestBodyRoot === undefined || stopLossRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'stopLossRequestBodyRoot' when calling getStopLossModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = StopLossResponseRoot;

      return this.apiClient.callApi(
        '/models/stop-loss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Stop Loss API
     * Cabot main path for Stop Loss API
     * @param {module:model/StopLossRequestBodyRoot} stopLossRequestBodyRoot 
     * @return { Promise.< module:model/StopLossResponseRoot > } a Promise, with data of type {@link module:model/StopLossResponseRoot }
     */
    getStopLossModelAnalytic(stopLossRequestBodyRoot) {
      return this.getStopLossModelAnalyticWithHttpInfo(stopLossRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





