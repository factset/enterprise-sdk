/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuyContextRequestBodyRoot from '../model/BuyContextRequestBodyRoot';
import BuyContextResponseRoot from '../model/BuyContextResponseRoot';
import BuyTimingRequestBodyRoot from '../model/BuyTimingRequestBodyRoot';
import BuyTimingResponseRoot from '../model/BuyTimingResponseRoot';
import ClientErrorResponse from '../model/ClientErrorResponse';

/**
* BuyingModels service.
* @module api/BuyingModelsApi
*/
export default class BuyingModelsApi {

    /**
    * Constructs a new BuyingModelsApi. 
    * @alias module:api/BuyingModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cabot main path for Buy Context API
     * Cabot main path for Buy Context API
     * @param {module:model/BuyContextRequestBodyRoot} buyContextRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BuyContextResponseRoot} and HTTP response
     */
    getBuyContextModelAnalyticWithHttpInfo(buyContextRequestBodyRoot) {
      let postBody = buyContextRequestBodyRoot;
      // verify the required parameter 'buyContextRequestBodyRoot' is set
      if (buyContextRequestBodyRoot === undefined || buyContextRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'buyContextRequestBodyRoot' when calling getBuyContextModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = BuyContextResponseRoot;

      return this.apiClient.callApi(
        '/models/buy-context', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Buy Context API
     * Cabot main path for Buy Context API
     * @param {module:model/BuyContextRequestBodyRoot} buyContextRequestBodyRoot 
     * @return { Promise.< module:model/BuyContextResponseRoot > } a Promise, with data of type {@link module:model/BuyContextResponseRoot }
     */
    getBuyContextModelAnalytic(buyContextRequestBodyRoot) {
      return this.getBuyContextModelAnalyticWithHttpInfo(buyContextRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cabot main path for Buy Timing API
     * Cabot main path for Buy Timing API.    Buy timing examines the timeliness of entry points and measures how quickly new buys contribute to results. This is done by delaying the buys by the specified number of days to see if buying into the position early would have benefited the portfolio.
     * @param {module:model/BuyTimingRequestBodyRoot} buyTimingRequestBodyRoot 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BuyTimingResponseRoot} and HTTP response
     */
    getBuyTimingModelAnalyticWithHttpInfo(buyTimingRequestBodyRoot) {
      let postBody = buyTimingRequestBodyRoot;
      // verify the required parameter 'buyTimingRequestBodyRoot' is set
      if (buyTimingRequestBodyRoot === undefined || buyTimingRequestBodyRoot === null) {
        throw new Error("Missing the required parameter 'buyTimingRequestBodyRoot' when calling getBuyTimingModelAnalytic");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = BuyTimingResponseRoot;

      return this.apiClient.callApi(
        '/models/buy-timing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Buy Timing API
     * Cabot main path for Buy Timing API.    Buy timing examines the timeliness of entry points and measures how quickly new buys contribute to results. This is done by delaying the buys by the specified number of days to see if buying into the position early would have benefited the portfolio.
     * @param {module:model/BuyTimingRequestBodyRoot} buyTimingRequestBodyRoot 
     * @return { Promise.< module:model/BuyTimingResponseRoot > } a Promise, with data of type {@link module:model/BuyTimingResponseRoot }
     */
    getBuyTimingModelAnalytic(buyTimingRequestBodyRoot) {
      return this.getBuyTimingModelAnalyticWithHttpInfo(buyTimingRequestBodyRoot)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





