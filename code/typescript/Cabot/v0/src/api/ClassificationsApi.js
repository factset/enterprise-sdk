/**
 * Cabot Models API
 * Cabot Models API
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClassificationsResponseRoot from '../model/ClassificationsResponseRoot';
import ClientErrorResponse from '../model/ClientErrorResponse';

/**
* Classifications service.
* @module api/ClassificationsApi
*/
export default class ClassificationsApi {

    /**
    * Constructs a new ClassificationsApi. 
    * @alias module:api/ClassificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cabot main path for Classifications API
     * Cabot main path for Classifications API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClassificationsResponseRoot} and HTTP response
     */
    getPortfolioClassificationsWithHttpInfo(accountPath, benchmarkPath) {
      let postBody = null;
      // verify the required parameter 'accountPath' is set
      if (accountPath === undefined || accountPath === null) {
        throw new Error("Missing the required parameter 'accountPath' when calling getPortfolioClassifications");
      }
      // verify the required parameter 'benchmarkPath' is set
      if (benchmarkPath === undefined || benchmarkPath === null) {
        throw new Error("Missing the required parameter 'benchmarkPath' when calling getPortfolioClassifications");
      }

      let pathParams = {
      };
      let queryParams = {
        'accountPath': accountPath,
        'benchmarkPath': benchmarkPath
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ClassificationsResponseRoot;

      return this.apiClient.callApi(
        '/classifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cabot main path for Classifications API
     * Cabot main path for Classifications API
     * @param {String} accountPath The account path of the portfolio you want to retrieve the data for.<br /><br />
     * @param {String} benchmarkPath The path of the benchmark you want to retrieve the data for.<br /><br />
     * @return { Promise.< module:model/ClassificationsResponseRoot > } a Promise, with data of type {@link module:model/ClassificationsResponseRoot }
     */
    getPortfolioClassifications(accountPath, benchmarkPath) {
      return this.getPortfolioClassificationsWithHttpInfo(accountPath, benchmarkPath)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





