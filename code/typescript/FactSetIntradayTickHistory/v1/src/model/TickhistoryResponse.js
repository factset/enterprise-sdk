/**
 * Tick History
 * <p>FactSetâ€™s Tick History provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 19 tick history fields. Asset types integrated include equities, futures, options, fixed income, mutual funds, ETFs, indices, commodities, and FX rates.</p><p>Tick History provides dynamic access to tick data for a specific security intra-day or historically via standard HTTPS protocol. History is available for all quotes and trades for a trailing 6 months or 1-year, respectively. Quotes and trade data for Options is available for 30 days. Tick History data is also available in a separate end-of-day feed.</p>   
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Fields from './Fields';

/**
 * The TickhistoryResponse model module.
 * @module model/TickhistoryResponse
 */
class TickhistoryResponse {
    /**
     * Constructs a new <code>TickhistoryResponse</code>.
     * response for tick history
     * @alias module:model/TickhistoryResponse
     */
    constructor() { 
        
        TickhistoryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TickhistoryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TickhistoryResponse} obj Optional instance to populate.
     * @return {module:model/TickhistoryResponse} The populated <code>TickhistoryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TickhistoryResponse();

            if (data.hasOwnProperty('Requested ID')) {
                obj['Requested ID'] = ApiClient.convertToType(data['Requested ID'], 'String');
            }
            if (data.hasOwnProperty('Requested Symbol')) {
                obj['Requested Symbol'] = ApiClient.convertToType(data['Requested Symbol'], 'String');
            }
            if (data.hasOwnProperty('Requested Fields')) {
                obj['Requested Fields'] = ApiClient.convertToType(data['Requested Fields'], [Fields]);
            }
            if (data.hasOwnProperty('Request Key')) {
                obj['Request Key'] = ApiClient.convertToType(data['Request Key'], 'String');
            }
            if (data.hasOwnProperty('Error Code')) {
                obj['Error Code'] = ApiClient.convertToType(data['Error Code'], 'String');
            }
            if (data.hasOwnProperty('Error Description')) {
                obj['Error Description'] = ApiClient.convertToType(data['Error Description'], 'String');
            }
            if (data.hasOwnProperty('Field Names')) {
                obj['Field Names'] = ApiClient.convertToType(data['Field Names'], 'String');
            }
            if (data.hasOwnProperty('Field IDs')) {
                obj['Field IDs'] = ApiClient.convertToType(data['Field IDs'], 'Number');
            }
            if (data.hasOwnProperty('Key')) {
                obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
            }
            if (data.hasOwnProperty('Values')) {
                obj['Values'] = ApiClient.convertToType(data['Values'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Request Identification String.
 * @member {String} Requested ID
 */
TickhistoryResponse.prototype['Requested ID'] = undefined;

/**
 * Single Requested Symbol or Security.
 * @member {String} Requested Symbol
 */
TickhistoryResponse.prototype['Requested Symbol'] = undefined;

/**
 * Array of requested fields 
 * @member {Array.<module:model/Fields>} Requested Fields
 */
TickhistoryResponse.prototype['Requested Fields'] = undefined;

/**
 * @member {String} Request Key
 */
TickhistoryResponse.prototype['Request Key'] = undefined;

/**
 * @member {String} Error Code
 */
TickhistoryResponse.prototype['Error Code'] = undefined;

/**
 * Brief description of error response. Blank if successful.
 * @member {String} Error Description
 */
TickhistoryResponse.prototype['Error Description'] = undefined;

/**
 * Requested Field Names
 * @member {String} Field Names
 */
TickhistoryResponse.prototype['Field Names'] = undefined;

/**
 * Requested Field ID numbers 'FID'. Found in Data Service Manual.
 * @member {Number} Field IDs
 */
TickhistoryResponse.prototype['Field IDs'] = undefined;

/**
 * Requested Symbol Key, where :D represented delayed data.
 * @member {String} Key
 */
TickhistoryResponse.prototype['Key'] = undefined;

/**
 * Array of field values. Each value is returned for requested interval query.
 * @member {Number} Values
 */
TickhistoryResponse.prototype['Values'] = undefined;






export default TickhistoryResponse;

