/**
 * Tick History
 * <p>FactSetâ€™s Tick History provides cost-effective access to real-time and delayed global exchange data. Proprietary technology normalizes over 200 global exchanges and 19 tick history fields. Asset types integrated include equities, futures, options, fixed income, mutual funds, ETFs, indices, commodities, and FX rates.</p><p>Tick History provides dynamic access to tick data for a specific security intra-day or historically via standard HTTPS protocol. History is available for all quotes and trades for a trailing 6 months or 1-year, respectively. Quotes and trade data for Options is available for 30 days. Tick History data is also available in a separate end-of-day feed.</p>   
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Specialfield model module.
 * @module model/Specialfield
 */
class Specialfield {
    /**
     * Constructs a new <code>Specialfield</code>.
     * @alias module:model/Specialfield
     */
    constructor() { 
        
        Specialfield.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Specialfield</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Specialfield} obj Optional instance to populate.
     * @return {module:model/Specialfield} The populated <code>Specialfield</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Specialfield();

            if (data.hasOwnProperty('NF')) {
                obj['NF'] = ApiClient.convertToType(data['NF'], 'String');
            }
            if (data.hasOwnProperty('NA')) {
                obj['NA'] = ApiClient.convertToType(data['NA'], Object);
            }
        }
        return obj;
    }


}

/**
 * **#NF#** - Not found. The requested symbol could not be found by the service.
 * @member {String} NF
 */
Specialfield.prototype['NF'] = undefined;

/**
 * **#NA#** - Not Applicable. The requested field could not be found for the requested symbol. This usually means that the field is not applicable for this type of record.
 * @member {Object} NA
 */
Specialfield.prototype['NA'] = undefined;






export default Specialfield;

