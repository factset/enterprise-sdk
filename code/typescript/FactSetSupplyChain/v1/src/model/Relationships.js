/**
 * FactSet Supply Chain API
 * Access the complex networks of key customer, suppliers, competitors and partners so that you can make insightful investment decisions. Relationship information is sourced from trusted primary sources and reverse-linked to non-disclosing parties, creating a comprehensive and consistent relationship graph. <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relationships model module.
 * @module model/Relationships
 */
class Relationships {
    /**
     * Constructs a new <code>Relationships</code>.
     * @alias module:model/Relationships
     */
    constructor() { 
        
        Relationships.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relationships</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relationships} obj Optional instance to populate.
     * @return {module:model/Relationships} The populated <code>Relationships</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relationships();

            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('overlappingProductCount')) {
                obj['overlappingProductCount'] = ApiClient.convertToType(data['overlappingProductCount'], 'String');
            }
            if (data.hasOwnProperty('overlapPercentage')) {
                obj['overlapPercentage'] = ApiClient.convertToType(data['overlapPercentage'], 'Number');
            }
            if (data.hasOwnProperty('relationshipDirection')) {
                obj['relationshipDirection'] = ApiClient.convertToType(data['relationshipDirection'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)
 * @member {String} entityId
 */
Relationships.prototype['entityId'] = undefined;

/**
 * Referring to the official name of a business entity.
 * @member {String} companyName
 */
Relationships.prototype['companyName'] = undefined;

/**
 * Number of Product Overlap is determined by how many sectors matches in named products (determined by Revere Hierarchy) there are in a given relationship between the source and target company.
 * @member {String} overlappingProductCount
 */
Relationships.prototype['overlappingProductCount'] = undefined;

/**
 * Product Overlap Percentage is the percent value of the preceding overlapping product count data item.
 * @member {Number} overlapPercentage
 */
Relationships.prototype['overlapPercentage'] = undefined;

/**
 * Direction of Relationship indicates which company (target or source) determined the relationship.
 * @member {module:model/Relationships.RelationshipDirectionEnum} relationshipDirection
 */
Relationships.prototype['relationshipDirection'] = undefined;

/**
 * Identifier used in `ids`.
 * @member {String} requestId
 */
Relationships.prototype['requestId'] = undefined;





/**
 * Allowed values for the <code>relationshipDirection</code> property.
 * @enum {String}
 * @readonly
 */
Relationships['RelationshipDirectionEnum'] = {

    /**
     * value: "Mutual"
     * @const
     */
    "Mutual": "Mutual",

    /**
     * value: "Direct"
     * @const
     */
    "Direct": "Direct",

    /**
     * value: "Reverse"
     * @const
     */
    "Reverse": "Reverse"
};



export default Relationships;

