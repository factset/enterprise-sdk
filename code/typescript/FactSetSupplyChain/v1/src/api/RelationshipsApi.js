/**
 * FactSet Supply Chain API
 * Access the complex networks of key customer, suppliers, competitors and partners so that you can make insightful investment decisions. Relationship information is sourced from trusted primary sources and reverse-linked to non-disclosing parties, creating a comprehensive and consistent relationship graph. <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import RelationshipsRequest from '../model/RelationshipsRequest';
import RelationshipsResponse from '../model/RelationshipsResponse';

/**
* Relationships service.
* @module api/RelationshipsApi
*/
export default class RelationshipsApi {

    /**
    * Constructs a new RelationshipsApi. 
    * @alias module:api/RelationshipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns Supply Chain Relationships Data.
     * Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
     * @param {Array.<String>} ids The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 
     * @param {module:model/String} relationshipType  The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** = An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \"Customer\" relationships.)   * **COMPETITORS** = An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** = An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \"Supplier\" relationships.)   * **PARTNERS** = An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.companyType Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (default to 'PUBLIC_COMPANIES_ONLY')
     * @param {module:model/String} opts.relationshipDirection Filters the list of available relationship directions -   * **ALL** = Include both direct and reverse relationships.   * **DIRECT** = Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** = Include only relationships where the target company identified and named the connection to the source company.  (default to 'ALL')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelationshipsResponse} and HTTP response
     */
    getRelationshipsWithHttpInfo(ids, relationshipType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getRelationships");
      }
      // verify the required parameter 'relationshipType' is set
      if (relationshipType === undefined || relationshipType === null) {
        throw new Error("Missing the required parameter 'relationshipType' when calling getRelationships");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi'),
        'relationshipType': relationshipType,
        'companyType': opts['companyType'],
        'relationshipDirection': opts['relationshipDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = RelationshipsResponse;

      return this.apiClient.callApi(
        '/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Supply Chain Relationships Data.
     * Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
     * @param {Array.<String>} ids The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 
     * @param {module:model/String} relationshipType  The category describing how the source company is connected to another organization. Use this parameter to filter results based on the business relationship type. Defined as:    * **SUPPLIERS** = An organization that provides goods or services to the source company. The source company acts as the buyer in this relationship. (inverse of \"Customer\" relationships.)   * **COMPETITORS** = An organization explicitly identified by the source company as a rival, usually operating in the same market or industry sector.   * **CUSTOMERS** = An organization that receives goods or services from the source company. The source company acts as the seller in this relationship. (Reverse of \"Supplier\" relationships.)   * **PARTNERS** = An organization in which the source company holds an ownership interest (i.e., the source company owns shares or equity in the partner). This is the counterpart to an investor relationship, where the external party has an ownership interest in the source company. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.companyType Specifies the category of companies to include when filtering results:   * **PUBLIC_COMPANIES_ONLY**: Include only relationships involving companies that are publicly traded.            * **PRIVATE_COMPANIES_ONLY**: Include only relationships involving companies that are privately held (not publicly traded).            * **ALL**: Include relationships involving both public and private companies.  (default to 'PUBLIC_COMPANIES_ONLY')
     * @param {module:model/String} opts.relationshipDirection Filters the list of available relationship directions -   * **ALL** = Include both direct and reverse relationships.   * **DIRECT** = Include only relationships where the source company identified and named the connection to the target company.   * **REVERSE** = Include only relationships where the target company identified and named the connection to the source company.  (default to 'ALL')
     * @return { Promise.< module:model/RelationshipsResponse > } a Promise, with data of type {@link module:model/RelationshipsResponse }
     */
    getRelationships(ids, relationshipType, opts) {
      return this.getRelationshipsWithHttpInfo(ids, relationshipType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns Supply Chain Relationships Data.
     * Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
     * @param {module:model/RelationshipsRequest} relationshipsRequest Request body to request a list of Supply Chain financials objects.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelationshipsResponse} and HTTP response
     */
    getRelationshipsForListWithHttpInfo(relationshipsRequest) {
      let postBody = relationshipsRequest;
      // verify the required parameter 'relationshipsRequest' is set
      if (relationshipsRequest === undefined || relationshipsRequest === null) {
        throw new Error("Missing the required parameter 'relationshipsRequest' when calling getRelationshipsForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = RelationshipsResponse;

      return this.apiClient.callApi(
        '/relationships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Supply Chain Relationships Data.
     * Retrieves Supply Chain Relationship data (current only). Results are first sorted by the number of overlapping products between companies, then by the percentage of overlap. 
     * @param {module:model/RelationshipsRequest} relationshipsRequest Request body to request a list of Supply Chain financials objects.
     * @return { Promise.< module:model/RelationshipsResponse > } a Promise, with data of type {@link module:model/RelationshipsResponse }
     */
    getRelationshipsForList(relationshipsRequest) {
      return this.getRelationshipsForListWithHttpInfo(relationshipsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





