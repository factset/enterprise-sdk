/**
 * FactSet Supply Chain API
 * Access the complex networks of key customer, suppliers, competitors and partners so that you can make insightful investment decisions. Relationship information is sourced from trusted primary sources and reverse-linked to non-disclosing parties, creating a comprehensive and consistent relationship graph. <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import RelationshipsRequest from '../model/RelationshipsRequest';
import RelationshipsResponse from '../model/RelationshipsResponse';

/**
* Relationships service.
* @module api/RelationshipsApi
*/
export default class RelationshipsApi {

    /**
    * Constructs a new RelationshipsApi. 
    * @alias module:api/RelationshipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns Supply Chain Relationships Data.
     * Returns Supply Chain Relationships Data. This data is sorted primarily by the number of overlapping products, followed by the overlap percentage. 
     * @param {Array.<String>} ids The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 
     * @param {module:model/String} relationshipType Specifies the type of relationship to filter the results  -   * **SUPPLIERS** = Entities from which the source company purchases goods or services; the opposite of “Customer” relationship.   * **COMPETITORS** = Entities disclosed by the source company as competitors.   * **CUSTOMERS** = Entities to which the source company sells products/services; the “opposite” of Supplier relationship.   * **PARTNERS** = Entities in which the source company owns an equity stake (“opposite” of an Investor relationship). 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.companyType Specifies the type of companies to filter by  -   * **PUBLIC_COMPANIES_ONLY** = Display public company relationships only.   * **PRIVATE_COMPANIES_ONLY** = Display private company relationships only.   * **ALL** = Display public and private company relationships.  (default to 'PUBLIC_COMPANIES_ONLY')
     * @param {module:model/String} opts.relationshipDirection Filters the list of available relationship directions -   * **ALL** = All relationship directions.   * **DIRECT** = Direct indicates that the source company named the relationship.   * **REVERSE** = Reverse indicates that the target company named the relationship.  (default to 'ALL')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelationshipsResponse} and HTTP response
     */
    getRelationshipsWithHttpInfo(ids, relationshipType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getRelationships");
      }
      // verify the required parameter 'relationshipType' is set
      if (relationshipType === undefined || relationshipType === null) {
        throw new Error("Missing the required parameter 'relationshipType' when calling getRelationships");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi'),
        'relationshipType': relationshipType,
        'companyType': opts['companyType'],
        'relationshipDirection': opts['relationshipDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = RelationshipsResponse;

      return this.apiClient.callApi(
        '/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Supply Chain Relationships Data.
     * Returns Supply Chain Relationships Data. This data is sorted primarily by the number of overlapping products, followed by the overlap percentage. 
     * @param {Array.<String>} ids The requested list of security identifiers. Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids. * Make Note - id limit of 500 
     * @param {module:model/String} relationshipType Specifies the type of relationship to filter the results  -   * **SUPPLIERS** = Entities from which the source company purchases goods or services; the opposite of “Customer” relationship.   * **COMPETITORS** = Entities disclosed by the source company as competitors.   * **CUSTOMERS** = Entities to which the source company sells products/services; the “opposite” of Supplier relationship.   * **PARTNERS** = Entities in which the source company owns an equity stake (“opposite” of an Investor relationship). 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.companyType Specifies the type of companies to filter by  -   * **PUBLIC_COMPANIES_ONLY** = Display public company relationships only.   * **PRIVATE_COMPANIES_ONLY** = Display private company relationships only.   * **ALL** = Display public and private company relationships.  (default to 'PUBLIC_COMPANIES_ONLY')
     * @param {module:model/String} opts.relationshipDirection Filters the list of available relationship directions -   * **ALL** = All relationship directions.   * **DIRECT** = Direct indicates that the source company named the relationship.   * **REVERSE** = Reverse indicates that the target company named the relationship.  (default to 'ALL')
     * @return { Promise.< module:model/RelationshipsResponse > } a Promise, with data of type {@link module:model/RelationshipsResponse }
     */
    getRelationships(ids, relationshipType, opts) {
      return this.getRelationshipsWithHttpInfo(ids, relationshipType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns Supply Chain Relationships Data.
     * Returns Supply Chain Relationships Data. This data is sorted primarily by the number of overlapping products, followed by the overlap percentage. 
     * @param {module:model/RelationshipsRequest} relationshipsRequest Request body to request a list of Supply Chain financials objects.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RelationshipsResponse} and HTTP response
     */
    getRelationshipsForListWithHttpInfo(relationshipsRequest) {
      let postBody = relationshipsRequest;
      // verify the required parameter 'relationshipsRequest' is set
      if (relationshipsRequest === undefined || relationshipsRequest === null) {
        throw new Error("Missing the required parameter 'relationshipsRequest' when calling getRelationshipsForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = RelationshipsResponse;

      return this.apiClient.callApi(
        '/relationships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Supply Chain Relationships Data.
     * Returns Supply Chain Relationships Data. This data is sorted primarily by the number of overlapping products, followed by the overlap percentage. 
     * @param {module:model/RelationshipsRequest} relationshipsRequest Request body to request a list of Supply Chain financials objects.
     * @return { Promise.< module:model/RelationshipsResponse > } a Promise, with data of type {@link module:model/RelationshipsResponse }
     */
    getRelationshipsForList(relationshipsRequest) {
      return this.getRelationshipsForListWithHttpInfo(relationshipsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





