/**
 * FactSet Quant Factor Library API
 * The FactSet FactSet Quant Factor Library (QFL) API helps to detect investment themes across global equity markets, incorporate ideas into your portfolio construction process, and transform raw data into actionable intelligence. Over 2000+ items spanning Factor Groups in-   * Classification and Reference Data - Asset Data, Country, Industry, and Size   * Market - Liquidity, Market Sensitivity, Momentum, Technical, Volatility   * Core Fundamentals - Efficiency, Growth, Management, Profitability, Quality, Solvency, Value   * Macro and Cross Asset - Commodity, FX Sensitivity, Debt, Economic   * Alternative - Analyst Sentiment, Corporate Governance, Crowding, Insider Activity. 
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import ErrorResponse from './model/ErrorResponse';
import ErrorResponseSubErrors from './model/ErrorResponseSubErrors';
import Factors from './model/Factors';
import FactorsRequest from './model/FactorsRequest';
import FactorsResponse from './model/FactorsResponse';
import Frequency from './model/Frequency';
import Library from './model/Library';
import LibraryRequest from './model/LibraryRequest';
import LibraryResponse from './model/LibraryResponse';

import FactorsApi from './api/FactorsApi';
import HelperApi from './api/HelperApi';


/**
* FactSet Quant Factor Library client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var factsetquantfactorlibrary = require('index'); // See note below*.
* var xxxSvc = new factsetquantfactorlibrary.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new factsetquantfactorlibrary.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new factsetquantfactorlibrary.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new factsetquantfactorlibrary.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The ErrorResponseSubErrors model constructor.
     * @property {module:model/ErrorResponseSubErrors}
     */
    ErrorResponseSubErrors,

    /**
     * The Factors model constructor.
     * @property {module:model/Factors}
     */
    Factors,

    /**
     * The FactorsRequest model constructor.
     * @property {module:model/FactorsRequest}
     */
    FactorsRequest,

    /**
     * The FactorsResponse model constructor.
     * @property {module:model/FactorsResponse}
     */
    FactorsResponse,

    /**
     * The Frequency model constructor.
     * @property {module:model/Frequency}
     */
    Frequency,

    /**
     * The Library model constructor.
     * @property {module:model/Library}
     */
    Library,

    /**
     * The LibraryRequest model constructor.
     * @property {module:model/LibraryRequest}
     */
    LibraryRequest,

    /**
     * The LibraryResponse model constructor.
     * @property {module:model/LibraryResponse}
     */
    LibraryResponse,

    /**
    * The FactorsApi service constructor.
    * @property {module:api/FactorsApi}
    */
    FactorsApi,

    /**
    * The HelperApi service constructor.
    * @property {module:api/HelperApi}
    */
    HelperApi,

};
