/**
 * FactSet Prices API
 * Gain access to comprehensive global coverage for Equities & Fixed Income. Perform quick analytics by controlling the date ranges, currencies, and rolling periods, or simply request Open, High, Low, and Close prices. Easily connect pricing data with other core company data or alternative content sets using FactSet's hub and spoke symbology. <p>Equity and Fund Security types include Common Stock, ADR, GDR, Preferred, Closed-ended Fund, Exchange Traded Fund, Unit, Open-ended Fund, Exchange Traded Fund UVI, Exchange Traded Fund NAV, Preferred Equity, Non-Voting Depositary Receipt/Certificate, Alien/Foreign, Structured Product, and Temporary Instruments. Reference over 180,000+ active and inactive securities.</p><p>Fixed Income Security Types include Corporate Bonds, Treasury and Agency bonds, Government Bonds, and Municipals.</p><p><b>Rate limit is set to 25 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchDataRequest from '../model/BatchDataRequest';
import BatchDataResponse from '../model/BatchDataResponse';
import BatchStatusRequest from '../model/BatchStatusRequest';
import BatchStatusResponse from '../model/BatchStatusResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* BatchProcessing service.
* @module api/BatchProcessingApi
*/
export default class BatchProcessingApi {

    /**
    * Constructs a new BatchProcessingApi. 
    * @alias module:api/BatchProcessingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the response for a Batch Request
     * Returns the response data for the underlying batch request that is specified by the id.
     * @param {String} id Batch Request identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDataResponse} and HTTP response
     */
    getBatchDataWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBatchData");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];

      let returnType = GetBatchDataResponseWrapperTypeMap;
      
      return this.apiClient.callApi(
        '/batch/v1/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the response for a Batch Request
     * Returns the response data for the underlying batch request that is specified by the id.
     * @param {String} id Batch Request identifier.
     * @return { Promise.< GetBatchDataResponseWrapper > } a Promise, with data of type {@link GetBatchDataResponseWrapper }
     */
    getBatchData(id) {
      return this.getBatchDataWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the response for a Batch Request
     * Return the response data for the underlying batch request that is specified by the id. 
     * @param {module:model/BatchDataRequest} batchDataRequest Batch Data Request Post Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchDataResponse} and HTTP response
     */
    getBatchDataWithPostWithHttpInfo(batchDataRequest) {
      let postBody = batchDataRequest;
      // verify the required parameter 'batchDataRequest' is set
      if (batchDataRequest === undefined || batchDataRequest === null) {
        throw new Error("Missing the required parameter 'batchDataRequest' when calling getBatchDataWithPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];

      let returnType = GetBatchDataWithPostResponseWrapperTypeMap;
      
      return this.apiClient.callApi(
        '/batch/v1/result', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the response for a Batch Request
     * Return the response data for the underlying batch request that is specified by the id. 
     * @param {module:model/BatchDataRequest} batchDataRequest Batch Data Request Post Body
     * @return { Promise.< GetBatchDataWithPostResponseWrapper > } a Promise, with data of type {@link GetBatchDataWithPostResponseWrapper }
     */
    getBatchDataWithPost(batchDataRequest) {
      return this.getBatchDataWithPostWithHttpInfo(batchDataRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the status for a Batch Request
     * Return the status for the underlying batch request that is specified by the id.
     * @param {String} id Batch Request identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchStatusResponse} and HTTP response
     */
    getBatchStatusWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBatchStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = BatchStatusResponse;

      return this.apiClient.callApi(
        '/batch/v1/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the status for a Batch Request
     * Return the status for the underlying batch request that is specified by the id.
     * @param {String} id Batch Request identifier.
     * @return { Promise.< module:model/BatchStatusResponse > } a Promise, with data of type {@link module:model/BatchStatusResponse }
     */
    getBatchStatus(id) {
      return this.getBatchStatusWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the status for a Batch Request
     * Return the status for the underlying batch request that is specified by the id. 
     * @param {module:model/BatchStatusRequest} batchStatusRequest Batch Status Request Post Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchStatusResponse} and HTTP response
     */
    getBatchStatusWithPostWithHttpInfo(batchStatusRequest) {
      let postBody = batchStatusRequest;
      // verify the required parameter 'batchStatusRequest' is set
      if (batchStatusRequest === undefined || batchStatusRequest === null) {
        throw new Error("Missing the required parameter 'batchStatusRequest' when calling getBatchStatusWithPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = BatchStatusResponse;

      return this.apiClient.callApi(
        '/batch/v1/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the status for a Batch Request
     * Return the status for the underlying batch request that is specified by the id. 
     * @param {module:model/BatchStatusRequest} batchStatusRequest Batch Status Request Post Body
     * @return { Promise.< module:model/BatchStatusResponse > } a Promise, with data of type {@link module:model/BatchStatusResponse }
     */
    getBatchStatusWithPost(batchStatusRequest) {
      return this.getBatchStatusWithPostWithHttpInfo(batchStatusRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}


const GetBatchDataResponseWrapperTypeMap = {
  200: BatchDataResponse,
  202: BatchStatusResponse,
  404: ErrorResponse,

  _createResponseWrapper(statusCode, response) {
    return new GetBatchDataResponseWrapper(statusCode, response);
  }
};

const GetBatchDataWithPostResponseWrapperTypeMap = {
  200: BatchDataResponse,
  202: BatchStatusResponse,
  404: ErrorResponse,

  _createResponseWrapper(statusCode, response) {
    return new GetBatchDataWithPostResponseWrapper(statusCode, response);
  }
};



/**
 * Wrapper to support GET /batch/v1/result returning different types
 * per status code.
 *
 * <p>
 * Responses:
 * <ul>
 *   <li>200 : {@code BatchDataResponse }<br>Request Response Object when batch request has completed and response is created</li>
 * 
 *   <li>202 : {@code BatchStatusResponse }<br>Batch Request has not finished and the result has NOT been created.</li>
 * </ul>
 *
 * </p>
 * Example:
 * <pre>{@code
 * const response = ...;
 * switch (response.statusCode) {
 *   case 200:
 *     BatchDataResponse data200 = response.getResponse200();
 *     break;
 *   case 202:
 *     BatchStatusResponse data202 = response.getResponse202();
 *     break;
 *  }
 * }</pre>
 *
 * @alias module:GetBatchDataResponseWrapper
 * @class
 */
export class GetBatchDataResponseWrapper {

  /**
   * @param {number} statusCode
   * @param {*} response
   */
  constructor(statusCode, response) {
    /**
     * @type {number}
     */
    this.statusCode = statusCode;

    /**
     * @type {*}
     */
    this.response = response;
  }

  
  /**
   * @returns { BatchDataResponse }
   */
  getResponse200() {
    if (this.statusCode !== 200) {
      throw new Error("Invalid response getter called. getResponse200 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
  /**
   * @returns { BatchStatusResponse }
   */
  getResponse202() {
    if (this.statusCode !== 202) {
      throw new Error("Invalid response getter called. getResponse202 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
}

/**
 * Wrapper to support POST /batch/v1/result returning different types
 * per status code.
 *
 * <p>
 * Responses:
 * <ul>
 *   <li>200 : {@code BatchDataResponse }<br>Request Response Object when batch request has completed and response is created.</li>
 * 
 *   <li>202 : {@code BatchStatusResponse }<br>Batch Request has not finished and the result has NOT been created.</li>
 * </ul>
 *
 * </p>
 * Example:
 * <pre>{@code
 * const response = ...;
 * switch (response.statusCode) {
 *   case 200:
 *     BatchDataResponse data200 = response.getResponse200();
 *     break;
 *   case 202:
 *     BatchStatusResponse data202 = response.getResponse202();
 *     break;
 *  }
 * }</pre>
 *
 * @alias module:GetBatchDataWithPostResponseWrapper
 * @class
 */
export class GetBatchDataWithPostResponseWrapper {

  /**
   * @param {number} statusCode
   * @param {*} response
   */
  constructor(statusCode, response) {
    /**
     * @type {number}
     */
    this.statusCode = statusCode;

    /**
     * @type {*}
     */
    this.response = response;
  }

  
  /**
   * @returns { BatchDataResponse }
   */
  getResponse200() {
    if (this.statusCode !== 200) {
      throw new Error("Invalid response getter called. getResponse200 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
  /**
   * @returns { BatchStatusResponse }
   */
  getResponse202() {
    if (this.statusCode !== 202) {
      throw new Error("Invalid response getter called. getResponse202 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
}


