/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateStandardSymbolMetadataDto from '../model/CreateStandardSymbolMetadataDto';
import NewItemDto from '../model/NewItemDto';
import Operation from '../model/Operation';
import ProblemDetails from '../model/ProblemDetails';

/**
* HybridSymbols service.
* @module api/HybridSymbolsApi
*/
export default class HybridSymbolsApi {

    /**
    * Constructs a new HybridSymbolsApi. 
    * @alias module:api/HybridSymbolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create standard symbol metadata
     * Create standard symbol metadata
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateStandardSymbolMetadataDto} opts.createStandardSymbolMetadataDto createStandardSymbolMetadataDto object to save
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewItemDto} and HTTP response
     */
    createStandardSymbolMetadataWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createStandardSymbolMetadataDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = NewItemDto;

      return this.apiClient.callApi(
        '/custom-symbols/standard-symbol-metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create standard symbol metadata
     * Create standard symbol metadata
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateStandardSymbolMetadataDto} opts.createStandardSymbolMetadataDto createStandardSymbolMetadataDto object to save
     * @return { Promise.< module:model/NewItemDto > } a Promise, with data of type {@link module:model/NewItemDto }
     */
    createStandardSymbolMetadata(opts) {
      return this.createStandardSymbolMetadataWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all custom field and standard field details on a specific standard symbol
     * Get all custom field and standard field details on a specific standard symbol
     * @param {String} standardSymbol Standard symbol to get associated customSymbolId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    getStandardSymbolMetadataGuidWithHttpInfo(standardSymbol) {
      let postBody = null;
      // verify the required parameter 'standardSymbol' is set
      if (standardSymbol === undefined || standardSymbol === null) {
        throw new Error("Missing the required parameter 'standardSymbol' when calling getStandardSymbolMetadataGuid");
      }

      let pathParams = {
        'standardSymbol': standardSymbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = 'String';

      return this.apiClient.callApi(
        '/custom-symbols/standard-symbol-metadata/{standardSymbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all custom field and standard field details on a specific standard symbol
     * Get all custom field and standard field details on a specific standard symbol
     * @param {String} standardSymbol Standard symbol to get associated customSymbolId
     * @return { Promise.< String > } a Promise, with data of type {@link String }
     */
    getStandardSymbolMetadataGuid(standardSymbol) {
      return this.getStandardSymbolMetadataGuidWithHttpInfo(standardSymbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a standard symbol’s standard field and custom field data
     * Edit a standard symbol’s standard field and custom field data
     * @param {String} standardSymbolId standardSymbolId to update associated standard symbol
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation updateCustomSymbolDto object to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchStandardSymbolWithHttpInfo(standardSymbolId, opts) {
      opts = opts || {};
      let postBody = opts['operation'];
      // verify the required parameter 'standardSymbolId' is set
      if (standardSymbolId === undefined || standardSymbolId === null) {
        throw new Error("Missing the required parameter 'standardSymbolId' when calling patchStandardSymbol");
      }

      let pathParams = {
        'standardSymbolId': standardSymbolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/custom-symbols/standard-symbol-metadata/{standardSymbolId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a standard symbol’s standard field and custom field data
     * Edit a standard symbol’s standard field and custom field data
     * @param {String} standardSymbolId standardSymbolId to update associated standard symbol
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation updateCustomSymbolDto object to update
     * @return { Promise } a Promise
     */
    patchStandardSymbol(standardSymbolId, opts) {
      return this.patchStandardSymbolWithHttpInfo(standardSymbolId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





