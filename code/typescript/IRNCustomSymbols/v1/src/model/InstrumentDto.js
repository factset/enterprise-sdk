/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InstrumentDto model module.
 * @module model/InstrumentDto
 */
class InstrumentDto {
    /**
     * Constructs a new <code>InstrumentDto</code>.
     * @alias module:model/InstrumentDto
     */
    constructor() { 
        
        InstrumentDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstrumentDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstrumentDto} obj Optional instance to populate.
     * @return {module:model/InstrumentDto} The populated <code>InstrumentDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstrumentDto();

            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('tickerRegion')) {
                obj['tickerRegion'] = ApiClient.convertToType(data['tickerRegion'], 'String');
            }
            if (data.hasOwnProperty('tickerExchange')) {
                obj['tickerExchange'] = ApiClient.convertToType(data['tickerExchange'], 'String');
            }
            if (data.hasOwnProperty('sedol')) {
                obj['sedol'] = ApiClient.convertToType(data['sedol'], 'String');
            }
            if (data.hasOwnProperty('cusip')) {
                obj['cusip'] = ApiClient.convertToType(data['cusip'], 'String');
            }
            if (data.hasOwnProperty('isin')) {
                obj['isin'] = ApiClient.convertToType(data['isin'], 'String');
            }
            if (data.hasOwnProperty('instrumentName')) {
                obj['instrumentName'] = ApiClient.convertToType(data['instrumentName'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} symbol
 */
InstrumentDto.prototype['symbol'] = undefined;

/**
 * @member {String} tickerRegion
 */
InstrumentDto.prototype['tickerRegion'] = undefined;

/**
 * @member {String} tickerExchange
 */
InstrumentDto.prototype['tickerExchange'] = undefined;

/**
 * @member {String} sedol
 */
InstrumentDto.prototype['sedol'] = undefined;

/**
 * @member {String} cusip
 */
InstrumentDto.prototype['cusip'] = undefined;

/**
 * @member {String} isin
 */
InstrumentDto.prototype['isin'] = undefined;

/**
 * @member {String} instrumentName
 */
InstrumentDto.prototype['instrumentName'] = undefined;

/**
 * @member {Array.<String>} identifiers
 */
InstrumentDto.prototype['identifiers'] = undefined;






export default InstrumentDto;

