/**
 * Investment Banking Office Refresh API
 * Service for refreshing models with refreshable FactSet objects (e.g., =FDS codes)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveJobStatusList from '../model/ActiveJobStatusList';
import Errors from '../model/Errors';

/**
* JobManagement service.
* @module api/JobManagementApi
*/
export default class JobManagementApi {

    /**
    * Constructs a new JobManagementApi. 
    * @alias module:api/JobManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel a job with the given resource ID
     * Cancel a specific job by the resource ID
     * @param {String} id Unique identifier for the job (resource ID returned from FactSet).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelActiveJobWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelActiveJob");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/jobs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a job with the given resource ID
     * Cancel a specific job by the resource ID
     * @param {String} id Unique identifier for the job (resource ID returned from FactSet).
     * @return { Promise } a Promise
     */
    cancelActiveJob(id) {
      return this.cancelActiveJobWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Cancel all active jobs
     * Cancel all active (on_hold, queued, executing) jobs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelAllActiveJobsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/jobs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel all active jobs
     * Cancel all active (on_hold, queued, executing) jobs
     * @return { Promise } a Promise
     */
    cancelAllActiveJobs() {
      return this.cancelAllActiveJobsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information on all active jobs
     * Get the ids and status of all active jobs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActiveJobStatusList} and HTTP response
     */
    getJobsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ActiveJobStatusList;

      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information on all active jobs
     * Get the ids and status of all active jobs
     * @return { Promise.< module:model/ActiveJobStatusList > } a Promise, with data of type {@link module:model/ActiveJobStatusList }
     */
    getJobs() {
      return this.getJobsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





