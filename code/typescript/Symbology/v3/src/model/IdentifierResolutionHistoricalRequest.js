/**
 * FactSet Symbology API
 * The FactSet Symbology API provides symbol resolution services, allowing clients to translate market identifiers into various symbology types such as, FactSet Permanent Identifiers, CUSIP, ISIN, SEDOL, Tickers, and LEIs. <p>Factset's Symbology API sits at the center of its hub-and-spoke data model, enabling you to quickly harmonize the expanding catalog of Content APIs.</p><p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p> 
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentifierResolutionHistoricalRequestBody from './IdentifierResolutionHistoricalRequestBody';

/**
 * The IdentifierResolutionHistoricalRequest model module.
 * @module model/IdentifierResolutionHistoricalRequest
 */
class IdentifierResolutionHistoricalRequest {
    /**
     * Constructs a new <code>IdentifierResolutionHistoricalRequest</code>.
     * Request object for Historical Identifier Resolution endpoint.
     * @alias module:model/IdentifierResolutionHistoricalRequest
     * @param data {module:model/IdentifierResolutionHistoricalRequestBody} 
     */
    constructor(data) { 
        
        IdentifierResolutionHistoricalRequest.initialize(this, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data) { 
        obj['data'] = data;
    }

    /**
     * Constructs a <code>IdentifierResolutionHistoricalRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentifierResolutionHistoricalRequest} obj Optional instance to populate.
     * @return {module:model/IdentifierResolutionHistoricalRequest} The populated <code>IdentifierResolutionHistoricalRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentifierResolutionHistoricalRequest();

            if (data.hasOwnProperty('data')) {
                obj['data'] = IdentifierResolutionHistoricalRequestBody.constructFromObject(data['data']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/IdentifierResolutionHistoricalRequestBody} data
 */
IdentifierResolutionHistoricalRequest.prototype['data'] = undefined;






export default IdentifierResolutionHistoricalRequest;

