/**
 * FactSet Symbology API
 * The FactSet Symbology API provides symbol resolution services, allowing clients to translate market identifiers into various symbology types such as, FactSet Permanent Identifiers, CUSIP, ISIN, SEDOL, Tickers, and Bloomberg FIGIs. <p>Factset's Symbology API sits at the center of its hub-and-spoke data model, enabling you to quickly harmonize the expanding catalog of Content APIs. Translate market IDs into CUSIP, SEDOL, ISIN, Tickers as of a point in time or for the entire history of the requested id allowing Data Management workflows to normalize ids over time.</p> 
 *
 * The version of the OpenAPI document: 2.1.3
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import IsinHistoryTranslationRequest from '../model/IsinHistoryTranslationRequest';
import IsinHistoryTranslationResponse from '../model/IsinHistoryTranslationResponse';
import IsinTranslationRequest from '../model/IsinTranslationRequest';
import IsinTranslationResponse from '../model/IsinTranslationResponse';

/**
* ISIN service.
* @module api/ISINApi
*/
export default class ISINApi {

    /**
    * Constructs a new ISINApi. 
    * @alias module:api/ISINApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Translate Market IDs into ISINS as of a specific date or receive the full history of changes.
     * Returns the full history of ISIN changes for a given security or as of a requested date. 
     * @param {module:model/IsinHistoryTranslationRequest} isinHistoryTranslationRequest Response Body for ISIN History
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IsinHistoryTranslationResponse} and HTTP response
     */
    batchIsinHistoryWithHttpInfo(isinHistoryTranslationRequest) {
      let postBody = isinHistoryTranslationRequest;
      // verify the required parameter 'isinHistoryTranslationRequest' is set
      if (isinHistoryTranslationRequest === undefined || isinHistoryTranslationRequest === null) {
        throw new Error("Missing the required parameter 'isinHistoryTranslationRequest' when calling batchIsinHistory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = IsinHistoryTranslationResponse;

      return this.apiClient.callApi(
        '/symbology/v2/isin-history', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate Market IDs into ISINS as of a specific date or receive the full history of changes.
     * Returns the full history of ISIN changes for a given security or as of a requested date. 
     * @param {module:model/IsinHistoryTranslationRequest} isinHistoryTranslationRequest Response Body for ISIN History
     * @return { Promise.< module:model/IsinHistoryTranslationResponse > } a Promise, with data of type {@link module:model/IsinHistoryTranslationResponse }
     */
    batchIsinHistory(isinHistoryTranslationRequest) {
      return this.batchIsinHistoryWithHttpInfo(isinHistoryTranslationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate market security symbols into ISIN. - Current Only
     * Translate market security symbols into ISIN and FactSet Permanent Identifiers. 
     * @param {module:model/IsinTranslationRequest} isinTranslationRequest Request Body for ISIN Symbology Translation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IsinTranslationResponse} and HTTP response
     */
    batchTranslateIsinWithHttpInfo(isinTranslationRequest) {
      let postBody = isinTranslationRequest;
      // verify the required parameter 'isinTranslationRequest' is set
      if (isinTranslationRequest === undefined || isinTranslationRequest === null) {
        throw new Error("Missing the required parameter 'isinTranslationRequest' when calling batchTranslateIsin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = IsinTranslationResponse;

      return this.apiClient.callApi(
        '/symbology/v2/isin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate market security symbols into ISIN. - Current Only
     * Translate market security symbols into ISIN and FactSet Permanent Identifiers. 
     * @param {module:model/IsinTranslationRequest} isinTranslationRequest Request Body for ISIN Symbology Translation
     * @return { Promise.< module:model/IsinTranslationResponse > } a Promise, with data of type {@link module:model/IsinTranslationResponse }
     */
    batchTranslateIsin(isinTranslationRequest) {
      return this.batchTranslateIsinWithHttpInfo(isinTranslationRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate Market IDs into ISINS as of a specific date or receive the full history of changes.
     * Returns the full history of ISIN changes for a given security or as of a requested date. 
     * @param {Array.<String>} ids Requested market securities or entities. Accepted identifiers include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. This request value is sent back in the response as, `requestId'. <p>***ids limit** =  3000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>*
     * @param {Object} opts Optional parameters
     * @param {String} opts.asOfDate As-Of date for historical symbol request in YYYY-MM-DD format. This is the date requested in the service. If no asOfDate was requested, the response will be null.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IsinHistoryTranslationResponse} and HTTP response
     */
    isinHistoryWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling isinHistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'asOfDate': opts['asOfDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = IsinHistoryTranslationResponse;

      return this.apiClient.callApi(
        '/symbology/v2/isin-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate Market IDs into ISINS as of a specific date or receive the full history of changes.
     * Returns the full history of ISIN changes for a given security or as of a requested date. 
     * @param {Array.<String>} ids Requested market securities or entities. Accepted identifiers include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. This request value is sent back in the response as, `requestId'. <p>***ids limit** =  3000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>*
     * @param {Object} opts Optional parameters
     * @param {String} opts.asOfDate As-Of date for historical symbol request in YYYY-MM-DD format. This is the date requested in the service. If no asOfDate was requested, the response will be null.
     * @return { Promise.< module:model/IsinHistoryTranslationResponse > } a Promise, with data of type {@link module:model/IsinHistoryTranslationResponse }
     */
    isinHistory(ids, opts) {
      return this.isinHistoryWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Translate market security symbols into ISIN. - Current Only
     * Translate market security symbols into ISIN and FactSet Permanent Identifiers. 
     * @param {Array.<String>} ids Requested market securities or entities. Accepted identifiers include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. This request value is sent back in the response as, `requestId'. <p>***ids limit** =  3000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IsinTranslationResponse} and HTTP response
     */
    translateIsinWithHttpInfo(ids) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling translateIsin");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = IsinTranslationResponse;

      return this.apiClient.callApi(
        '/symbology/v2/isin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Translate market security symbols into ISIN. - Current Only
     * Translate market security symbols into ISIN and FactSet Permanent Identifiers. 
     * @param {Array.<String>} ids Requested market securities or entities. Accepted identifiers include all FactSet Permanent Identifiers types, CUSIP, SEDOL, ISIN, and Tickers. This request value is sent back in the response as, `requestId'. <p>***ids limit** =  3000 per request*</p> *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids, which may lead to exceeding this request line limit of 8KB, its advised for any requests with large request lines to be requested through the respective \"POST\" method.</p>*
     * @return { Promise.< module:model/IsinTranslationResponse > } a Promise, with data of type {@link module:model/IsinTranslationResponse }
     */
    translateIsin(ids) {
      return this.translateIsinWithHttpInfo(ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





