/**
 * FactSet ESG API
 * FactSet ESG (powered by FactSet Truvalue) applies Natural Language Processing and Machine Learning to uncover risks and opportunities from companies' Environmental, Social and Governance (ESG) behavior, which are aggregated and categorized into continuously updated, material ESG scores. The service focuses on company ESG behavior from external sources and includes both positive and negative events that go beyond traditional sources of ESG risk data.<p> FactSet ESG extracts, analyzes, and generates scores from millions of documents each month collected from more than 200,000 data sources in over 38 languages. Sources include news, trade journals, NGOs, watchdog groups, trade blogs and industry reports. Products deliver investable insights by revealing value and risk factors from unstructured data at the speed of current events.</p> 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvalidIdErrorObject from './InvalidIdErrorObject';

/**
 * The Spotlights model module.
 * @module model/Spotlights
 */
class Spotlights {
    /**
     * Constructs a new <code>Spotlights</code>.
     * TVL Spotlights All Object
     * @alias module:model/Spotlights
     * @extends Object
     * @param factsetEntityId {String} FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
     * @param requestId {String} Identifier that was used for the request.
     */
    constructor(factsetEntityId, requestId) { 
        
        Spotlights.initialize(this, factsetEntityId, requestId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, factsetEntityId, requestId) { 
        obj['factsetEntityId'] = factsetEntityId;
        obj['requestId'] = requestId;
    }

    /**
     * Constructs a <code>Spotlights</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Spotlights} obj Optional instance to populate.
     * @return {module:model/Spotlights} The populated <code>Spotlights</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Spotlights();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('factsetEntityId')) {
                obj['factsetEntityId'] = ApiClient.convertToType(data['factsetEntityId'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('liveDate')) {
                obj['liveDate'] = ApiClient.convertToType(data['liveDate'], 'Date');
            }
            if (data.hasOwnProperty('pulseOnStartDate')) {
                obj['pulseOnStartDate'] = ApiClient.convertToType(data['pulseOnStartDate'], 'Number');
            }
            if (data.hasOwnProperty('finalArticleDate')) {
                obj['finalArticleDate'] = ApiClient.convertToType(data['finalArticleDate'], 'Date');
            }
            if (data.hasOwnProperty('tvGroupId')) {
                obj['tvGroupId'] = ApiClient.convertToType(data['tvGroupId'], 'String');
            }
            if (data.hasOwnProperty('primaryArticleUrl')) {
                obj['primaryArticleUrl'] = ApiClient.convertToType(data['primaryArticleUrl'], 'String');
            }
            if (data.hasOwnProperty('organizationVolumeThreshold')) {
                obj['organizationVolumeThreshold'] = ApiClient.convertToType(data['organizationVolumeThreshold'], 'Number');
            }
            if (data.hasOwnProperty('primaryArticleSource')) {
                obj['primaryArticleSource'] = ApiClient.convertToType(data['primaryArticleSource'], 'String');
            }
            if (data.hasOwnProperty('standoutLvlOnStartDate')) {
                obj['standoutLvlOnStartDate'] = ApiClient.convertToType(data['standoutLvlOnStartDate'], 'String');
            }
            if (data.hasOwnProperty('pulseOnFinalArticleDate')) {
                obj['pulseOnFinalArticleDate'] = ApiClient.convertToType(data['pulseOnFinalArticleDate'], 'Number');
            }
            if (data.hasOwnProperty('firstArticleDate')) {
                obj['firstArticleDate'] = ApiClient.convertToType(data['firstArticleDate'], 'Date');
            }
            if (data.hasOwnProperty('meanArtScoreStartDate')) {
                obj['meanArtScoreStartDate'] = ApiClient.convertToType(data['meanArtScoreStartDate'], 'Number');
            }
            if (data.hasOwnProperty('totalSpotlightVolume')) {
                obj['totalSpotlightVolume'] = ApiClient.convertToType(data['totalSpotlightVolume'], 'Number');
            }
            if (data.hasOwnProperty('primaryArticleBulletpoints')) {
                obj['primaryArticleBulletpoints'] = ApiClient.convertToType(data['primaryArticleBulletpoints'], 'String');
            }
            if (data.hasOwnProperty('tvOrgName')) {
                obj['tvOrgName'] = ApiClient.convertToType(data['tvOrgName'], 'String');
            }
            if (data.hasOwnProperty('startDateVolume')) {
                obj['startDateVolume'] = ApiClient.convertToType(data['startDateVolume'], 'Number');
            }
            if (data.hasOwnProperty('zScoreOnFinalDate')) {
                obj['zScoreOnFinalDate'] = ApiClient.convertToType(data['zScoreOnFinalDate'], 'Number');
            }
            if (data.hasOwnProperty('primaryArticleHeadline')) {
                obj['primaryArticleHeadline'] = ApiClient.convertToType(data['primaryArticleHeadline'], 'String');
            }
            if (data.hasOwnProperty('meanPulseScore')) {
                obj['meanPulseScore'] = ApiClient.convertToType(data['meanPulseScore'], 'Number');
            }
            if (data.hasOwnProperty('spotlightCategory')) {
                obj['spotlightCategory'] = ApiClient.convertToType(data['spotlightCategory'], 'String');
            }
            if (data.hasOwnProperty('zScoreOnStartDate')) {
                obj['zScoreOnStartDate'] = ApiClient.convertToType(data['zScoreOnStartDate'], 'Number');
            }
            if (data.hasOwnProperty('meanArtScoreFinalDate')) {
                obj['meanArtScoreFinalDate'] = ApiClient.convertToType(data['meanArtScoreFinalDate'], 'Number');
            }
            if (data.hasOwnProperty('primarySpotlight')) {
                obj['primarySpotlight'] = ApiClient.convertToType(data['primarySpotlight'], 'Boolean');
            }
            if (data.hasOwnProperty('tvSpotlightId')) {
                obj['tvSpotlightId'] = ApiClient.convertToType(data['tvSpotlightId'], 'String');
            }
            if (data.hasOwnProperty('removed')) {
                obj['removed'] = ApiClient.convertToType(data['removed'], 'Boolean');
            }
            if (data.hasOwnProperty('pulseBeforeFirstArticle')) {
                obj['pulseBeforeFirstArticle'] = ApiClient.convertToType(data['pulseBeforeFirstArticle'], 'Number');
            }
            if (data.hasOwnProperty('standoutLvlOnFinalDate')) {
                obj['standoutLvlOnFinalDate'] = ApiClient.convertToType(data['standoutLvlOnFinalDate'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('spotlightPillar')) {
                obj['spotlightPillar'] = ApiClient.convertToType(data['spotlightPillar'], 'String');
            }
            if (data.hasOwnProperty('spotlightDimension')) {
                obj['spotlightDimension'] = ApiClient.convertToType(data['spotlightDimension'], 'String');
            }
            if (data.hasOwnProperty('primaryArticleSourceLang')) {
                obj['primaryArticleSourceLang'] = ApiClient.convertToType(data['primaryArticleSourceLang'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = InvalidIdErrorObject.constructFromObject(data['error']);
            }
        }
        return obj;
    }


}

/**
 * FactSet Entity Identifier. Six alpha-numeric characters, excluding vowels, with a -E suffix (XXXXXX-E).
 * @member {String} factsetEntityId
 */
Spotlights.prototype['factsetEntityId'] = undefined;

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
Spotlights.prototype['requestId'] = undefined;

/**
 * Live date of the event.
 * @member {Date} liveDate
 */
Spotlights.prototype['liveDate'] = undefined;

/**
 * The pulse value on the start date.
 * @member {Number} pulseOnStartDate
 */
Spotlights.prototype['pulseOnStartDate'] = undefined;

/**
 * The date of the final article related to the entry.
 * @member {Date} finalArticleDate
 */
Spotlights.prototype['finalArticleDate'] = undefined;

/**
 * Television group ID for the organization.
 * @member {String} tvGroupId
 */
Spotlights.prototype['tvGroupId'] = undefined;

/**
 * URL of the primary article related to the entry.
 * @member {String} primaryArticleUrl
 */
Spotlights.prototype['primaryArticleUrl'] = undefined;

/**
 * The volume threshold for the organization.
 * @member {Number} organizationVolumeThreshold
 */
Spotlights.prototype['organizationVolumeThreshold'] = undefined;

/**
 * Source of the primary article.
 * @member {String} primaryArticleSource
 */
Spotlights.prototype['primaryArticleSource'] = undefined;

/**
 * The standout level on the start date.
 * @member {String} standoutLvlOnStartDate
 */
Spotlights.prototype['standoutLvlOnStartDate'] = undefined;

/**
 * The pulse score on the final article date.
 * @member {Number} pulseOnFinalArticleDate
 */
Spotlights.prototype['pulseOnFinalArticleDate'] = undefined;

/**
 * The date of the first article.
 * @member {Date} firstArticleDate
 */
Spotlights.prototype['firstArticleDate'] = undefined;

/**
 * The mean article score on the start date.
 * @member {Number} meanArtScoreStartDate
 */
Spotlights.prototype['meanArtScoreStartDate'] = undefined;

/**
 * Total spotlight volume.
 * @member {Number} totalSpotlightVolume
 */
Spotlights.prototype['totalSpotlightVolume'] = undefined;

/**
 * Bulletpoints from the primary article.
 * @member {String} primaryArticleBulletpoints
 */
Spotlights.prototype['primaryArticleBulletpoints'] = undefined;

/**
 * Name of the television organization.
 * @member {String} tvOrgName
 */
Spotlights.prototype['tvOrgName'] = undefined;

/**
 * Volume on the start date.
 * @member {Number} startDateVolume
 */
Spotlights.prototype['startDateVolume'] = undefined;

/**
 * Z-Score on the final date.
 * @member {Number} zScoreOnFinalDate
 */
Spotlights.prototype['zScoreOnFinalDate'] = undefined;

/**
 * Headline of the primary article.
 * @member {String} primaryArticleHeadline
 */
Spotlights.prototype['primaryArticleHeadline'] = undefined;

/**
 * Mean value of the pulse score.
 * @member {Number} meanPulseScore
 */
Spotlights.prototype['meanPulseScore'] = undefined;

/**
 * Category of the spotlight.
 * @member {String} spotlightCategory
 */
Spotlights.prototype['spotlightCategory'] = undefined;

/**
 * Z-Score on the start date.
 * @member {Number} zScoreOnStartDate
 */
Spotlights.prototype['zScoreOnStartDate'] = undefined;

/**
 * Mean article score on the final date.
 * @member {Number} meanArtScoreFinalDate
 */
Spotlights.prototype['meanArtScoreFinalDate'] = undefined;

/**
 * Flag to identify if it's a primary spotlight.
 * @member {Boolean} primarySpotlight
 */
Spotlights.prototype['primarySpotlight'] = undefined;

/**
 * Television spotlight Identifier.
 * @member {String} tvSpotlightId
 */
Spotlights.prototype['tvSpotlightId'] = undefined;

/**
 * Flag to identify if the entry has been removed.
 * @member {Boolean} removed
 */
Spotlights.prototype['removed'] = undefined;

/**
 * Pulse score before the first article.
 * @member {Number} pulseBeforeFirstArticle
 */
Spotlights.prototype['pulseBeforeFirstArticle'] = undefined;

/**
 * The standout level on the final date.
 * @member {String} standoutLvlOnFinalDate
 */
Spotlights.prototype['standoutLvlOnFinalDate'] = undefined;

/**
 * Start date of the event.
 * @member {Date} startDate
 */
Spotlights.prototype['startDate'] = undefined;

/**
 * Status of the event.
 * @member {String} status
 */
Spotlights.prototype['status'] = undefined;

/**
 * Pillar of the spotlight.
 * @member {String} spotlightPillar
 */
Spotlights.prototype['spotlightPillar'] = undefined;

/**
 * Dimension of the spotlight.
 * @member {String} spotlightDimension
 */
Spotlights.prototype['spotlightDimension'] = undefined;

/**
 * Language of the primary article source.
 * @member {String} primaryArticleSourceLang
 */
Spotlights.prototype['primaryArticleSourceLang'] = undefined;

/**
 * @member {module:model/InvalidIdErrorObject} error
 */
Spotlights.prototype['error'] = undefined;






export default Spotlights;

