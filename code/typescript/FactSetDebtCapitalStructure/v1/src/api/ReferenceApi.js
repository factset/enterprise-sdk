/**
 * FactSet Debt Capital Structure API
 * The FactSet Debt Capital Structure API offers insights into public and private company debt financing for 69,000+ entities globally. Analyze at the individual-instrument level through summary and detailed information of the debt structure with history available back through 2006. Instrument types covered include Revolving Credit, Term Loans, Notes, and Bonds.   **How to Programmatically Download API Specification file:**  Please use the below link to download the FactSet Debt Capital Structure API Specification file in .yaml. You must be authorized for this API to extract. This specification can then be used for Codegen to create your own SDKs. You can also access by selecting the \"Download Spec\" button to the right of the version below.  [https://api.factset.com/content/factset-dcs/v1/spec/swagger.yaml](https://api.factset.com/content/factset-dcs/v1/spec/swagger.yaml)  This API is rate-limited to 10 requests per second and 10 concurrent requests per user. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DetailsRequest from '../model/DetailsRequest';
import DetailsResponse from '../model/DetailsResponse';
import ErrorResponse from '../model/ErrorResponse';
import InterimDetailsRequest from '../model/InterimDetailsRequest';

/**
* Reference service.
* @module api/ReferenceApi
*/
export default class ReferenceApi {

    /**
    * Constructs a new ReferenceApi. 
    * @alias module:api/ReferenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns debt instruments for a list of companies.
     * Gets instruments of varying types such as Revolving Credit, Term Loans, ST Debt Total, Notes/Bonds, and Other. 
     * @param {module:model/DetailsRequest} detailsRequest Request object for `Details`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetailsResponse} and HTTP response
     */
    getDetailsListWithHttpInfo(detailsRequest) {
      let postBody = detailsRequest;
      // verify the required parameter 'detailsRequest' is set
      if (detailsRequest === undefined || detailsRequest === null) {
        throw new Error("Missing the required parameter 'detailsRequest' when calling getDetailsList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = DetailsResponse;

      return this.apiClient.callApi(
        '/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns debt instruments for a list of companies.
     * Gets instruments of varying types such as Revolving Credit, Term Loans, ST Debt Total, Notes/Bonds, and Other. 
     * @param {module:model/DetailsRequest} detailsRequest Request object for `Details`.
     * @return { Promise.< module:model/DetailsResponse > } a Promise, with data of type {@link module:model/DetailsResponse }
     */
    getDetailsList(detailsRequest) {
      return this.getDetailsListWithHttpInfo(detailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns most recently available debt instrument data for a list of companies.
     * Gets instruments of varying types such as Revolving Credit, Term Loans, ST Debt Total, Notes/Bonds, and Other. The data returned by this endpoint is for the interim period and only returns the most recently available value. 
     * @param {module:model/InterimDetailsRequest} interimDetailsRequest Request object for `Details`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetailsResponse} and HTTP response
     */
    getInterimDetailsListWithHttpInfo(interimDetailsRequest) {
      let postBody = interimDetailsRequest;
      // verify the required parameter 'interimDetailsRequest' is set
      if (interimDetailsRequest === undefined || interimDetailsRequest === null) {
        throw new Error("Missing the required parameter 'interimDetailsRequest' when calling getInterimDetailsList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = DetailsResponse;

      return this.apiClient.callApi(
        '/details-interim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns most recently available debt instrument data for a list of companies.
     * Gets instruments of varying types such as Revolving Credit, Term Loans, ST Debt Total, Notes/Bonds, and Other. The data returned by this endpoint is for the interim period and only returns the most recently available value. 
     * @param {module:model/InterimDetailsRequest} interimDetailsRequest Request object for `Details`.
     * @return { Promise.< module:model/DetailsResponse > } a Promise, with data of type {@link module:model/DetailsResponse }
     */
    getInterimDetailsList(interimDetailsRequest) {
      return this.getInterimDetailsListWithHttpInfo(interimDetailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





