/**
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DelimitedOptions model module.
 * @module model/DelimitedOptions
 */
class DelimitedOptions {
    /**
     * Constructs a new <code>DelimitedOptions</code>.
     * Options applied to delimited output.
     * @alias module:model/DelimitedOptions
     */
    constructor() { 
        
        DelimitedOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DelimitedOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DelimitedOptions} obj Optional instance to populate.
     * @return {module:model/DelimitedOptions} The populated <code>DelimitedOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DelimitedOptions();

            if (data.hasOwnProperty('isDatabase')) {
                obj['isDatabase'] = ApiClient.convertToType(data['isDatabase'], 'Boolean');
            }
            if (data.hasOwnProperty('delimiter')) {
                obj['delimiter'] = ApiClient.convertToType(data['delimiter'], 'String');
            }
            if (data.hasOwnProperty('hideHeaderRows')) {
                obj['hideHeaderRows'] = ApiClient.convertToType(data['hideHeaderRows'], 'Boolean');
            }
            if (data.hasOwnProperty('applyQuotedStrings')) {
                obj['applyQuotedStrings'] = ApiClient.convertToType(data['applyQuotedStrings'], 'Boolean');
            }
            if (data.hasOwnProperty('applySavedNAFormatting')) {
                obj['applySavedNAFormatting'] = ApiClient.convertToType(data['applySavedNAFormatting'], 'Boolean');
            }
            if (data.hasOwnProperty('applyFilters')) {
                obj['applyFilters'] = ApiClient.convertToType(data['applyFilters'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Output will be returned in a legacy database format.  Will be ignored if file type of \"text/csv\" is requested.  Default is false.  Additional access is required for this format.
 * @member {Boolean} isDatabase
 * @default false
 */
DelimitedOptions.prototype['isDatabase'] = false;

/**
 * Specifies the delimiter used between each data point.  A comma is the default delimiter; if this argument is not specified, a comma delimiter will be used.  If the file type of \"text/csv\" is requested, this field will be ignored and a comma will be used.
 * @member {String} delimiter
 * @default ','
 */
DelimitedOptions.prototype['delimiter'] = ',';

/**
 * Specifies whether column column headers should be included in the output. By default, the option is set to true.
 * @member {Boolean} hideHeaderRows
 * @default true
 */
DelimitedOptions.prototype['hideHeaderRows'] = true;

/**
 * Specifies whether textual data should have quotes around it (i.e., true will include quotes around textual values). By default, the option is set to true.
 * @member {Boolean} applyQuotedStrings
 * @default true
 */
DelimitedOptions.prototype['applyQuotedStrings'] = true;

/**
 * Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \"NA\" will be used to indicate the data that is not available.
 * @member {Boolean} applySavedNAFormatting
 * @default false
 */
DelimitedOptions.prototype['applySavedNAFormatting'] = false;

/**
 * Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
 * @member {Boolean} applyFilters
 * @default false
 */
DelimitedOptions.prototype['applyFilters'] = false;






export default DelimitedOptions;

