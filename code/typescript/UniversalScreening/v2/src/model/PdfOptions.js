/**
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PdfOptions model module.
 * @module model/PdfOptions
 */
class PdfOptions {
    /**
     * Constructs a new <code>PdfOptions</code>.
     * Options applied to PDF output.
     * @alias module:model/PdfOptions
     */
    constructor() { 
        
        PdfOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PdfOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PdfOptions} obj Optional instance to populate.
     * @return {module:model/PdfOptions} The populated <code>PdfOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PdfOptions();

            if (data.hasOwnProperty('applyAlternateRowShading')) {
                obj['applyAlternateRowShading'] = ApiClient.convertToType(data['applyAlternateRowShading'], 'Boolean');
            }
            if (data.hasOwnProperty('applyFilters')) {
                obj['applyFilters'] = ApiClient.convertToType(data['applyFilters'], 'Boolean');
            }
            if (data.hasOwnProperty('applyTextWrapping')) {
                obj['applyTextWrapping'] = ApiClient.convertToType(data['applyTextWrapping'], 'Boolean');
            }
            if (data.hasOwnProperty('orientationLandscape')) {
                obj['orientationLandscape'] = ApiClient.convertToType(data['orientationLandscape'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.
 * @member {Boolean} applyAlternateRowShading
 * @default false
 */
PdfOptions.prototype['applyAlternateRowShading'] = false;

/**
 * Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
 * @member {Boolean} applyFilters
 * @default false
 */
PdfOptions.prototype['applyFilters'] = false;

/**
 * Specifies that the text in cells be wrapped if there are more characters than can fit in the space available. By default, this option is set to true.
 * @member {Boolean} applyTextWrapping
 * @default true
 */
PdfOptions.prototype['applyTextWrapping'] = true;

/**
 * Specifies the page orientation of the downloaded file. Value true for Landscape, false for Portrait. By default this is set to false.
 * @member {Boolean} orientationLandscape
 * @default false
 */
PdfOptions.prototype['orientationLandscape'] = false;






export default PdfOptions;

