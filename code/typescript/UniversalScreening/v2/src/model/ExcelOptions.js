/**
 * Universal Screening API
 * Through the Universal Screening API, you can access the power of FactSet's Universal Screening Application. Calculate and return the results of your saved Universal Screens.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExcelOptions model module.
 * @module model/ExcelOptions
 */
class ExcelOptions {
    /**
     * Constructs a new <code>ExcelOptions</code>.
     * Options applied to Excel output.
     * @alias module:model/ExcelOptions
     */
    constructor() { 
        
        ExcelOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExcelOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExcelOptions} obj Optional instance to populate.
     * @return {module:model/ExcelOptions} The populated <code>ExcelOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExcelOptions();

            if (data.hasOwnProperty('isSummary')) {
                obj['isSummary'] = ApiClient.convertToType(data['isSummary'], 'Boolean');
            }
            if (data.hasOwnProperty('applySavedNAFormatting')) {
                obj['applySavedNAFormatting'] = ApiClient.convertToType(data['applySavedNAFormatting'], 'Boolean');
            }
            if (data.hasOwnProperty('applyFilters')) {
                obj['applyFilters'] = ApiClient.convertToType(data['applyFilters'], 'Boolean');
            }
            if (data.hasOwnProperty('applyAlternateRowShading')) {
                obj['applyAlternateRowShading'] = ApiClient.convertToType(data['applyAlternateRowShading'], 'Boolean');
            }
            if (data.hasOwnProperty('applyExcelOutlining')) {
                obj['applyExcelOutlining'] = ApiClient.convertToType(data['applyExcelOutlining'], 'Boolean');
            }
            if (data.hasOwnProperty('condenseTabsToOneSheet')) {
                obj['condenseTabsToOneSheet'] = ApiClient.convertToType(data['condenseTabsToOneSheet'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Specifies that a summary will be generated instead of the full results output. Only the \"applyFilters\" option will have any affect if this is true. By default this option is set to false.
 * @member {Boolean} isSummary
 * @default false
 */
ExcelOptions.prototype['isSummary'] = false;

/**
 * Specifies that the NA formatting specified in the column format menu will be used to indicate unavailable data in your output. By default, this option is set to false, which means \"NA\" will be used to indicate the data that is not available.
 * @member {Boolean} applySavedNAFormatting
 * @default false
 */
ExcelOptions.prototype['applySavedNAFormatting'] = false;

/**
 * Specifies whether the filters present in the screen should be applied to the output. By default, this option is set to false, which means that filters will not be applied and all securities passing the screen will be included in the output.
 * @member {Boolean} applyFilters
 * @default false
 */
ExcelOptions.prototype['applyFilters'] = false;

/**
 * Specifies whether every other row shading should be applied to the output. By default, this option is set to false, which means that every other row shading will not be included in the download.
 * @member {Boolean} applyAlternateRowShading
 * @default false
 */
ExcelOptions.prototype['applyAlternateRowShading'] = false;

/**
 * Specifies that the Download Outline feature will be used when putting the screen's groupings into an Excel spreadsheet. By default, this option is set to false.
 * @member {Boolean} applyExcelOutlining
 * @default false
 */
ExcelOptions.prototype['applyExcelOutlining'] = false;

/**
 * Specifies whether the report will be downloaded into a single spreadsheet, or into separate sheets following the tabs in the report. By default, this option is set to false.
 * @member {Boolean} condenseTabsToOneSheet
 * @default false
 */
ExcelOptions.prototype['condenseTabsToOneSheet'] = false;






export default ExcelOptions;

