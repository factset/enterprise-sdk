/**
 * ID Lookup API
 * The ID Lookup API is a fuzzy search service that allows users to resolve symbols but are unable to find them elsewhere. The ID Lookup API allows users to search for entities in a wide variety of ways including, but not limited to, tickers, CUSIPs, URLs, a companyâ€™s brands, names and descriptions. The API does not require a complete query and will return different lists of results with each additional character, which enables users to iterate and adjust queries to return the desired results. Each search query returns a list of suggestions that can include every entity type offered by the API based on a matching and ranking algorithm.   The API response returns multiple different symbols that map to both internal FactSet identifiers like security or entity IDs as well as external identifiers like exchange tickers, Morningstar symbols and ISINs. This gives users flexibility in mapping identifiers across the FactSet universe.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseDetailsUnderlying from './ResponseDetailsUnderlying';

/**
 * The ResponseDetails model module.
 * @module model/ResponseDetails
 */
class ResponseDetails {
    /**
     * Constructs a new <code>ResponseDetails</code>.
     * Response Details Object
     * @alias module:model/ResponseDetails
     * @param dataset {String} Type of dataset.
     * @param name {String} Name of the related dataset.
     */
    constructor(dataset, name) { 
        
        ResponseDetails.initialize(this, dataset, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataset, name) { 
        obj['dataset'] = dataset;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ResponseDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseDetails} obj Optional instance to populate.
     * @return {module:model/ResponseDetails} The populated <code>ResponseDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseDetails();

            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = ApiClient.convertToType(data['dataset'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('idType')) {
                obj['idType'] = ApiClient.convertToType(data['idType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('issuerName')) {
                obj['issuerName'] = ApiClient.convertToType(data['issuerName'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('underlying')) {
                obj['underlying'] = ResponseDetailsUnderlying.constructFromObject(data['underlying']);
            }
            if (data.hasOwnProperty('fsymRegionalId')) {
                obj['fsymRegionalId'] = ApiClient.convertToType(data['fsymRegionalId'], 'String');
            }
            if (data.hasOwnProperty('fsymListingId')) {
                obj['fsymListingId'] = ApiClient.convertToType(data['fsymListingId'], 'String');
            }
            if (data.hasOwnProperty('fsymUnderlyingId')) {
                obj['fsymUnderlyingId'] = ApiClient.convertToType(data['fsymUnderlyingId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Type of dataset.
 * @member {String} dataset
 */
ResponseDetails.prototype['dataset'] = undefined;

/**
 * Identifier of a market security pertaining to the dataset .
 * @member {String} id
 */
ResponseDetails.prototype['id'] = undefined;

/**
 * Type of the identifier. * `symbol`: The value in symbol is associated with the name of the related dataset. It is the only value that should be passed back to any FactSet services to retrieve data. Example: M-US.   * `tickerRegion`: FactSet region ticker symbol. For details on Global Region Codes, visit [Online Assistant Page #13258](https://oa.apps.factset.com/pages/13258). Example: MKSXX-US.   * `tickerExchange`: FactSet exchange ticker symbol. For definitions of Exchange Codes, visit [Online Assistant Page #12544](https://oa.apps.factset.com/pages/12544). Example: N3ZWW5.FI-CEP.    * `entityId`: FactSet Entity Identifier (-E). For more information on Entity Ids, visit [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881). Example: 000F9X-E. 
 * @member {module:model/ResponseDetails.IdTypeEnum} idType
 */
ResponseDetails.prototype['idType'] = undefined;

/**
 * Name of the related dataset.
 * @member {String} name
 */
ResponseDetails.prototype['name'] = undefined;

/**
 * Name of the issuer.
 * @member {String} issuerName
 */
ResponseDetails.prototype['issuerName'] = undefined;

/**
 * FactSet Entity Identifier (-E). For more information on Entity Ids, visit [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881). 
 * @member {String} entityId
 */
ResponseDetails.prototype['entityId'] = undefined;

/**
 * @member {module:model/ResponseDetailsUnderlying} underlying
 */
ResponseDetails.prototype['underlying'] = undefined;

/**
 * FactSet Regional Security Identifier. Six alpha-numeric characters, excluding vowels, with an -R suffix (XXXXXX-R). Identifies the security's best regional security data series per currency. For equities, all primary listings per region and currency are allocated a regional-level permanent identifier. The regional-level permanent identifier will be available once a SEDOL representing the region/currency has been allocated and the identifiers are on FactSet. [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881).
 * @member {String} fsymRegionalId
 */
ResponseDetails.prototype['fsymRegionalId'] = undefined;

/**
 * FactSet Listing Security Identifier. Six alpha-numeric characters, vowels excluded, with an -L suffix (XXXXXX-L). The listing-level permanent identifier will be available prior to the end of trading on the first day of trading.
 * @member {String} fsymListingId
 */
ResponseDetails.prototype['fsymListingId'] = undefined;

/**
 * FactSet Underlying Id
 * @member {String} fsymUnderlyingId
 */
ResponseDetails.prototype['fsymUnderlyingId'] = undefined;





/**
 * Allowed values for the <code>idType</code> property.
 * @enum {String}
 * @readonly
 */
ResponseDetails['IdTypeEnum'] = {

    /**
     * value: "symbol"
     * @const
     */
    "symbol": "symbol",

    /**
     * value: "entityId"
     * @const
     */
    "entityId": "entityId",

    /**
     * value: "tickerRegion"
     * @const
     */
    "tickerRegion": "tickerRegion",

    /**
     * value: "tickerExchange"
     * @const
     */
    "tickerExchange": "tickerExchange"
};



export default ResponseDetails;

