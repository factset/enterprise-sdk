/**
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InvestorSlidesResponse from '../model/InvestorSlidesResponse';
import ResponseType from '../model/ResponseType';
import TranscriptsCollection from '../model/TranscriptsCollection';
import TranscriptsIntelligenceResponse from '../model/TranscriptsIntelligenceResponse';
import TranscriptsRequest from '../model/TranscriptsRequest';
import TranscriptsResponse from '../model/TranscriptsResponse';

/**
* Transcripts service.
* @module api/TranscriptsApi
*/
export default class TranscriptsApi {

    /**
    * Constructs a new TranscriptsApi. 
    * @alias module:api/TranscriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the StreetAccount Transcript Intelligence documents and related metadata within FactSet coverage based on specific date range and various parameters.
     * Returns the StreetAccount Transcript Intelligence documents within FactSet coverage along with other response fields.  All StreetAccount Transcript Intelligence stories originate from StreetAccount 
     * @param {Array.<String>} ids Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Start Date (YYYY-MM-DD). 
     * @param {Date} opts.endDate End Date (YYYY-MM-DD). 
     * @param {Number} opts.startDateRelative The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* 
     * @param {Number} opts.endDateRelative The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* 
     * @param {Array.<String>} opts.categories Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  
     * @param {String} opts.timeZone Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones. (default to 'America/New_York')
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TranscriptsIntelligenceResponse} and HTTP response
     */
    getTranscriptsIntelligenceWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getTranscriptsIntelligence");
      }

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'startDateRelative': opts['startDateRelative'],
        'endDateRelative': opts['endDateRelative'],
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'multi'),
        'timeZone': opts['timeZone'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TranscriptsIntelligenceResponse;

      return this.apiClient.callApi(
        '/transcripts/intelligence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the StreetAccount Transcript Intelligence documents and related metadata within FactSet coverage based on specific date range and various parameters.
     * Returns the StreetAccount Transcript Intelligence documents within FactSet coverage along with other response fields.  All StreetAccount Transcript Intelligence stories originate from StreetAccount 
     * @param {Array.<String>} ids Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Start Date (YYYY-MM-DD). 
     * @param {Date} opts.endDate End Date (YYYY-MM-DD). 
     * @param {Number} opts.startDateRelative The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* 
     * @param {Number} opts.endDateRelative The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer (`0` for today, `-1` for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* 
     * @param {Array.<String>} opts.categories Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  
     * @param {String} opts.timeZone Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones. (default to 'America/New_York')
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return { Promise.< module:model/TranscriptsIntelligenceResponse > } a Promise, with data of type {@link module:model/TranscriptsIntelligenceResponse }
     */
    getTranscriptsIntelligence(ids, opts) {
      return this.getTranscriptsIntelligenceWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the investor slides in PDF format and related metadata within FactSet coverage based on specific date range and various parameters.
     * Returns the Factset Callstreet Investor Slides documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Investor Slides. 
     * @param {Array.<String>} ids Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
     * @param {Date} startDate Start Date. Format is YYYY-MM-DD    **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.** 
     * @param {Date} endDate End Date. Format is YYYY-MM-DD.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.eventIds Requests Event IDs. This is a list with a maximum limit of 1000.
     * @param {Array.<String>} opts.categories Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.    
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvestorSlidesResponse} and HTTP response
     */
    getTranscriptsInvestorSlidesWithHttpInfo(ids, startDate, endDate, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getTranscriptsInvestorSlides");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getTranscriptsInvestorSlides");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getTranscriptsInvestorSlides");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'startDate': startDate,
        'endDate': endDate,
        'eventIds': this.apiClient.buildCollectionParam(opts['eventIds'], 'csv'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'multi'),
        'searchText': opts['searchText'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InvestorSlidesResponse;

      return this.apiClient.callApi(
        '/transcripts/investor-slides', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the investor slides in PDF format and related metadata within FactSet coverage based on specific date range and various parameters.
     * Returns the Factset Callstreet Investor Slides documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Investor Slides. 
     * @param {Array.<String>} ids Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
     * @param {Date} startDate Start Date. Format is YYYY-MM-DD    **The API supports data from 1995 onwards. Ensure that the provided Date falls within this range for accurate results.** 
     * @param {Date} endDate End Date. Format is YYYY-MM-DD.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.eventIds Requests Event IDs. This is a list with a maximum limit of 1000.
     * @param {Array.<String>} opts.categories Code for categories to include. This is a list, which represents country, industry, and subject codes. Use the ```/meta/categories``` endpoint to get the list of available categories.  Default = All categories.  
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.    
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return { Promise.< module:model/InvestorSlidesResponse > } a Promise, with data of type {@link module:model/InvestorSlidesResponse }
     */
    getTranscriptsInvestorSlides(ids, startDate, endDate, opts) {
      return this.getTranscriptsInvestorSlidesWithHttpInfo(ids, startDate, endDate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the requested response type of transcript
     * Returns the Factset Callstreet documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Transcripts 
     * @param {Array.<String>} reportIds Requests Report IDs. This is a list with a maximum limit of 1000
     * @param {module:model/String} format The format of the output file. Allowed values:   - `XML`: Structured data format ideal for integrations and parsing.   - `PDF`: Printable document format preserving layout and design.   - `DocViewer`: Web-friendly format rendered in an in-browser document viewer.   - `ContentXML`: XML containing only the core content without layout or styling metadata. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseType} and HTTP response
     */
    getTranscriptsinXMLWithHttpInfo(reportIds, format, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportIds' is set
      if (reportIds === undefined || reportIds === null) {
        throw new Error("Missing the required parameter 'reportIds' when calling getTranscriptsinXML");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getTranscriptsinXML");
      }

      let pathParams = {
      };
      let queryParams = {
        'reportIds': this.apiClient.buildCollectionParam(reportIds, 'csv'),
        'format': format,
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];


      let returnType = ResponseType;

      return this.apiClient.callApi(
        '/transcripts/response-type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the requested response type of transcript
     * Returns the Factset Callstreet documents within FactSet coverage along with other response fields   All transcripts originate from Factset Callstreet Transcripts 
     * @param {Array.<String>} reportIds Requests Report IDs. This is a list with a maximum limit of 1000
     * @param {module:model/String} format The format of the output file. Allowed values:   - `XML`: Structured data format ideal for integrations and parsing.   - `PDF`: Printable document format preserving layout and design.   - `DocViewer`: Web-friendly format rendered in an in-browser document viewer.   - `ContentXML`: XML containing only the core content without layout or styling metadata. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return { Promise.< module:model/ResponseType > } a Promise, with data of type {@link module:model/ResponseType }
     */
    getTranscriptsinXML(reportIds, format, opts) {
      return this.getTranscriptsinXMLWithHttpInfo(reportIds, format, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns transcript documents and related metadata based on different search criteria.
     * Retrieves transcript documents in XML format and related metadata within FactSet coverage based on various criteria like date range, search text, specific IDs, or event details. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object.  All transcripts originate from Factset Callstreet Transcripts. 
     * @param {module:model/TranscriptsRequest} transcriptsRequest Criteria to search for transcripts. Select one mode of search.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TranscriptsResponse} and HTTP response
     */
    searchTranscriptsWithHttpInfo(transcriptsRequest) {
      let postBody = transcriptsRequest;
      // verify the required parameter 'transcriptsRequest' is set
      if (transcriptsRequest === undefined || transcriptsRequest === null) {
        throw new Error("Missing the required parameter 'transcriptsRequest' when calling searchTranscripts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = TranscriptsResponse;

      return this.apiClient.callApi(
        '/transcripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns transcript documents and related metadata based on different search criteria.
     * Retrieves transcript documents in XML format and related metadata within FactSet coverage based on various criteria like date range, search text, specific IDs, or event details. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object.  All transcripts originate from Factset Callstreet Transcripts. 
     * @param {module:model/TranscriptsRequest} transcriptsRequest Criteria to search for transcripts. Select one mode of search.
     * @return { Promise.< module:model/TranscriptsResponse > } a Promise, with data of type {@link module:model/TranscriptsResponse }
     */
    searchTranscripts(transcriptsRequest) {
      return this.searchTranscriptsWithHttpInfo(transcriptsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





