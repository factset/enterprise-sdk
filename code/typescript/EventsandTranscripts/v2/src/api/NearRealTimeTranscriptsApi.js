/**
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import IndexedNrtResponse from '../model/IndexedNrtResponse';
import NrtCallsRequest from '../model/NrtCallsRequest';
import NrtCallsResponse from '../model/NrtCallsResponse';
import NrtSpeakerIdsResponse from '../model/NrtSpeakerIdsResponse';

/**
* NearRealTimeTranscripts service.
* @module api/NearRealTimeTranscriptsApi
*/
export default class NearRealTimeTranscriptsApi {

    /**
    * Constructs a new NearRealTimeTranscriptsApi. 
    * @alias module:api/NearRealTimeTranscriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IndexedNrtResponse} and HTTP response
     */
    getIndexedNrtWithHttpInfo(audioSourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'audioSourceId' is set
      if (audioSourceId === undefined || audioSourceId === null) {
        throw new Error("Missing the required parameter 'audioSourceId' when calling getIndexedNrt");
      }

      let pathParams = {
      };
      let queryParams = {
        'audioSourceId': audioSourceId,
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = IndexedNrtResponse;

      return this.apiClient.callApi(
        '/nrt/indexed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * Returns the  indexed transcript data  in small increments throughout the duration of an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return { Promise.< module:model/IndexedNrtResponse > } a Promise, with data of type {@link module:model/IndexedNrtResponse }
     */
    getIndexedNrt(audioSourceId, opts) {
      return this.getIndexedNrtWithHttpInfo(audioSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the latest speakerIds with the confidence scores generated for an active call.
     * Returns the latest speakerIds with the confidence scores generated for an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on the start offset of the speaker. 
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NrtSpeakerIdsResponse} and HTTP response
     */
    getSpeakerIdsWithHttpInfo(audioSourceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'audioSourceId' is set
      if (audioSourceId === undefined || audioSourceId === null) {
        throw new Error("Missing the required parameter 'audioSourceId' when calling getSpeakerIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'audioSourceId': audioSourceId,
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = NrtSpeakerIdsResponse;

      return this.apiClient.callApi(
        '/nrt/speaker-ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the latest speakerIds with the confidence scores generated for an active call.
     * Returns the latest speakerIds with the confidence scores generated for an active call.
     * @param {Number} audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (dial-in or webcast). One ReportID can have multiple AudioSourceIDs.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on the start offset of the speaker. 
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of the next set of results. (default to 0)
     * @return { Promise.< module:model/NrtSpeakerIdsResponse > } a Promise, with data of type {@link module:model/NrtSpeakerIdsResponse }
     */
    getSpeakerIds(audioSourceId, opts) {
      return this.getSpeakerIdsWithHttpInfo(audioSourceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the active calls happening at the moment based on ticker/entity or specific IDs.
     * Retrieves active Near Real-Time (NRT) calls based on either ticker/entity/status criteria or specific audio source/report IDs. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object. 
     * @param {module:model/NrtCallsRequest} nrtCallsRequest Criteria to search for NRT calls. Select one mode of search.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NrtCallsResponse} and HTTP response
     */
    searchNrtCallsWithHttpInfo(nrtCallsRequest) {
      let postBody = nrtCallsRequest;
      // verify the required parameter 'nrtCallsRequest' is set
      if (nrtCallsRequest === undefined || nrtCallsRequest === null) {
        throw new Error("Missing the required parameter 'nrtCallsRequest' when calling searchNrtCalls");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = NrtCallsResponse;

      return this.apiClient.callApi(
        '/nrt/calls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the active calls happening at the moment based on ticker/entity or specific IDs.
     * Retrieves active Near Real-Time (NRT) calls based on either ticker/entity/status criteria or specific audio source/report IDs. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object. 
     * @param {module:model/NrtCallsRequest} nrtCallsRequest Criteria to search for NRT calls. Select one mode of search.
     * @return { Promise.< module:model/NrtCallsResponse > } a Promise, with data of type {@link module:model/NrtCallsResponse }
     */
    searchNrtCalls(nrtCallsRequest) {
      return this.searchNrtCallsWithHttpInfo(nrtCallsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





