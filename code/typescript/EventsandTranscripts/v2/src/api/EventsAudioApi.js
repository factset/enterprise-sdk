/**
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AudioRequest from '../model/AudioRequest';
import AudioResponse from '../model/AudioResponse';
import Error from '../model/Error';
import EventsAudioHistoryResponse from '../model/EventsAudioHistoryResponse';

/**
* EventsAudio service.
* @module api/EventsAudioApi
*/
export default class EventsAudioApi {

    /**
    * Constructs a new EventsAudioApi. 
    * @alias module:api/EventsAudioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve historical audio recordings and related metadata within FactSet coverage.
     *  This endpoint retrieves an object containing a pre-signed URL from which an archive of all audio data for a specified year can be downloaded.  * Returns **untrimmed** historical audio recordings, which include complete audio files such as intro music & non-speaking portions, and related metadata dating back from May 10, 2011 to Sep 30, 2024.  * Returns **trimmed** historical audio recordings, which are audio files with the non-speaking portions removed, and related metadata dating back from May 10, 2011 to Dec 31, 2024. 
     * @param {Number} year Specifies the year for which the historical audio recordings and related metadata are to be retrieved. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.trimmed Specifies if trimmed/untrimmed historical audio recordings should be returned. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsAudioHistoryResponse} and HTTP response
     */
    getAudioHistoryFilesWithHttpInfo(year, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getAudioHistoryFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'trimmed': opts['trimmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventsAudioHistoryResponse;

      return this.apiClient.callApi(
        '/audio/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve historical audio recordings and related metadata within FactSet coverage.
     *  This endpoint retrieves an object containing a pre-signed URL from which an archive of all audio data for a specified year can be downloaded.  * Returns **untrimmed** historical audio recordings, which include complete audio files such as intro music & non-speaking portions, and related metadata dating back from May 10, 2011 to Sep 30, 2024.  * Returns **trimmed** historical audio recordings, which are audio files with the non-speaking portions removed, and related metadata dating back from May 10, 2011 to Dec 31, 2024. 
     * @param {Number} year Specifies the year for which the historical audio recordings and related metadata are to be retrieved. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.trimmed Specifies if trimmed/untrimmed historical audio recordings should be returned. (default to false)
     * @return { Promise.< module:model/EventsAudioHistoryResponse > } a Promise, with data of type {@link module:model/EventsAudioHistoryResponse }
     */
    getAudioHistoryFiles(year, opts) {
      return this.getAudioHistoryFilesWithHttpInfo(year, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve latest audio recordings and related metadata based on different search criteria.
     * Retrieves the most recent audio recordings and their metadata based on various criteria like date range, upload time, file name, or specific IDs. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object. 
     * @param {module:model/AudioRequest} audioRequest Criteria to search for audio files. Select one mode of search.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AudioResponse} and HTTP response
     */
    searchEventsAudioWithHttpInfo(audioRequest) {
      let postBody = audioRequest;
      // verify the required parameter 'audioRequest' is set
      if (audioRequest === undefined || audioRequest === null) {
        throw new Error("Missing the required parameter 'audioRequest' when calling searchEventsAudio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = AudioResponse;

      return this.apiClient.callApi(
        '/audio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve latest audio recordings and related metadata based on different search criteria.
     * Retrieves the most recent audio recordings and their metadata based on various criteria like date range, upload time, file name, or specific IDs. Use the appropriate parameters within the `data` object of the request body to specify the search method. Pagination and sorting are controlled via the `meta` object. 
     * @param {module:model/AudioRequest} audioRequest Criteria to search for audio files. Select one mode of search.
     * @return { Promise.< module:model/AudioResponse > } a Promise, with data of type {@link module:model/AudioResponse }
     */
    searchEventsAudio(audioRequest) {
      return this.searchEventsAudioWithHttpInfo(audioRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





