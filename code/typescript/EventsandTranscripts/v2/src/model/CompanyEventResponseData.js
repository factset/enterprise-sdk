/**
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CompanyEventResponseData model module.
 * @module model/CompanyEventResponseData
 */
class CompanyEventResponseData {
    /**
     * Constructs a new <code>CompanyEventResponseData</code>.
     * @alias module:model/CompanyEventResponseData
     */
    constructor() { 
        
        CompanyEventResponseData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyEventResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyEventResponseData} obj Optional instance to populate.
     * @return {module:model/CompanyEventResponseData} The populated <code>CompanyEventResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyEventResponseData();

            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('entityName')) {
                obj['entityName'] = ApiClient.convertToType(data['entityName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventDateTime')) {
                obj['eventDateTime'] = ApiClient.convertToType(data['eventDateTime'], 'Date');
            }
            if (data.hasOwnProperty('marketTimeCode')) {
                obj['marketTimeCode'] = ApiClient.convertToType(data['marketTimeCode'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('webcastLink')) {
                obj['webcastLink'] = ApiClient.convertToType(data['webcastLink'], 'String');
            }
            if (data.hasOwnProperty('irLink')) {
                obj['irLink'] = ApiClient.convertToType(data['irLink'], 'String');
            }
            if (data.hasOwnProperty('fiscalYear')) {
                obj['fiscalYear'] = ApiClient.convertToType(data['fiscalYear'], 'String');
            }
            if (data.hasOwnProperty('fiscalPeriod')) {
                obj['fiscalPeriod'] = ApiClient.convertToType(data['fiscalPeriod'], 'String');
            }
            if (data.hasOwnProperty('contactEmail')) {
                obj['contactEmail'] = ApiClient.convertToType(data['contactEmail'], 'String');
            }
            if (data.hasOwnProperty('contactPhone')) {
                obj['contactPhone'] = ApiClient.convertToType(data['contactPhone'], 'String');
            }
            if (data.hasOwnProperty('contactName')) {
                obj['contactName'] = ApiClient.convertToType(data['contactName'], 'String');
            }
            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedDate')) {
                obj['lastModifiedDate'] = ApiClient.convertToType(data['lastModifiedDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * Ticker-region identifier of the entity hosting the event.
 * @member {String} identifier
 */
CompanyEventResponseData.prototype['identifier'] = undefined;

/**
 * The official name of the entity.
 * @member {String} entityName
 */
CompanyEventResponseData.prototype['entityName'] = undefined;

/**
 * Brief description of the event.
 * @member {String} description
 */
CompanyEventResponseData.prototype['description'] = undefined;

/**
 * Event start time as date/time string according to ISO 8601.
 * @member {Date} eventDateTime
 */
CompanyEventResponseData.prototype['eventDateTime'] = undefined;

/**
 * Timing code related to opening or closing of market.
 * @member {String} marketTimeCode
 */
CompanyEventResponseData.prototype['marketTimeCode'] = undefined;

/**
 * Refers to the various event types returned in the response:    * Earnings: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.    * SalesRevenueCall: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.    * GuidanceCall: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.    * AnalystsInvestorsMeeting: A company-hosted gathering for analysts and investors to discuss strategic updates and financial health.    * ShareholdersMeeting: A meeting where shareholders convene to discuss corporate developments and vote on important matters.    * SpecialSituation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.    * Conference: An event where individuals gather to discuss and share ideas on common interests, often including various formats such as panel discussions, workshops, and keynote presentations.    * ConfirmedEarningsRelease: Officially announced date when a company will publish its actual earnings results.    * ProjectedEarningsRelease:  Scheduled release date of a company’s estimated or forecasted earnings before actual results.    * SalesRevenueRelease: Disclosure of a company’s revenue figures, usually as part of earnings or performance updates.    * Split: Corporate action that multiplies share count and reduces share price proportionally, without affecting market cap.    * Dividend: Cash or stock distribution paid to shareholders, reflecting a share of company profits.
 * @member {module:model/CompanyEventResponseData.EventTypeEnum} eventType
 */
CompanyEventResponseData.prototype['eventType'] = undefined;

/**
 * Unique identifier for the event.
 * @member {String} eventId
 */
CompanyEventResponseData.prototype['eventId'] = undefined;

/**
 * Link to the webcast of the event.
 * @member {String} webcastLink
 */
CompanyEventResponseData.prototype['webcastLink'] = undefined;

/**
 * Link to the ir page of the company.
 * @member {String} irLink
 */
CompanyEventResponseData.prototype['irLink'] = undefined;

/**
 * The fiscal year of the company to which the event pertains.
 * @member {String} fiscalYear
 */
CompanyEventResponseData.prototype['fiscalYear'] = undefined;

/**
 * The fiscal period of the company to which the event pertains.
 * @member {String} fiscalPeriod
 */
CompanyEventResponseData.prototype['fiscalPeriod'] = undefined;

/**
 * Contact email for inquiries related to the event.
 * @member {String} contactEmail
 */
CompanyEventResponseData.prototype['contactEmail'] = undefined;

/**
 * Contact phone number for inquiries related to the event.
 * @member {String} contactPhone
 */
CompanyEventResponseData.prototype['contactPhone'] = undefined;

/**
 * Name of the contact person for queries related to the event.
 * @member {String} contactName
 */
CompanyEventResponseData.prototype['contactName'] = undefined;

/**
 * Unique identifier for the report.    **Note:** We do not have a reportId for split and dividend event types. 
 * @member {String} reportId
 */
CompanyEventResponseData.prototype['reportId'] = undefined;

/**
 * The date and time when the event was last modified.
 * @member {Date} lastModifiedDate
 */
CompanyEventResponseData.prototype['lastModifiedDate'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
CompanyEventResponseData['EventTypeEnum'] = {

    /**
     * value: "Earnings"
     * @const
     */
    "Earnings": "Earnings",

    /**
     * value: "SalesRevenueCall"
     * @const
     */
    "SalesRevenueCall": "SalesRevenueCall",

    /**
     * value: "GuidanceCall"
     * @const
     */
    "GuidanceCall": "GuidanceCall",

    /**
     * value: "AnalystsInvestorsMeeting"
     * @const
     */
    "AnalystsInvestorsMeeting": "AnalystsInvestorsMeeting",

    /**
     * value: "ShareholdersMeeting"
     * @const
     */
    "ShareholdersMeeting": "ShareholdersMeeting",

    /**
     * value: "SpecialSituation"
     * @const
     */
    "SpecialSituation": "SpecialSituation",

    /**
     * value: "Conference"
     * @const
     */
    "Conference": "Conference",

    /**
     * value: "ConfirmedEarningsRelease"
     * @const
     */
    "ConfirmedEarningsRelease": "ConfirmedEarningsRelease",

    /**
     * value: "SalesRevenueRelease"
     * @const
     */
    "SalesRevenueRelease": "SalesRevenueRelease",

    /**
     * value: "ProjectedEarningsRelease"
     * @const
     */
    "ProjectedEarningsRelease": "ProjectedEarningsRelease",

    /**
     * value: "Split"
     * @const
     */
    "Split": "Split",

    /**
     * value: "Dividend"
     * @const
     */
    "Dividend": "Dividend"
};



export default CompanyEventResponseData;

