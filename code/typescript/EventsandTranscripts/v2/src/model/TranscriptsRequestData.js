/**
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TranscriptsByDateRequest from './TranscriptsByDateRequest';
import TranscriptsByEventsRequest from './TranscriptsByEventsRequest';
import TranscriptsByIdsRequest from './TranscriptsByIdsRequest';
import TranscriptsBySearchRequest from './TranscriptsBySearchRequest';
import TranscriptsByTimesRequest from './TranscriptsByTimesRequest';

/**
 * The TranscriptsRequestData model module.
 * @module model/TranscriptsRequestData
 */
class TranscriptsRequestData {
    /**
     * Constructs a new <code>TranscriptsRequestData</code>.
     * @alias module:model/TranscriptsRequestData
     * @implements module:model/TranscriptsByDateRequest
     * @implements module:model/TranscriptsBySearchRequest
     * @implements module:model/TranscriptsByIdsRequest
     * @implements module:model/TranscriptsByEventsRequest
     * @implements module:model/TranscriptsByTimesRequest
     * @param ids {Array.<String>} Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
     */
    constructor(ids) { 
        TranscriptsByDateRequest.initialize(this);TranscriptsBySearchRequest.initialize(this);TranscriptsByIdsRequest.initialize(this, ids);TranscriptsByEventsRequest.initialize(this);TranscriptsByTimesRequest.initialize(this);
        TranscriptsRequestData.initialize(this, ids);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ids) { 
        obj['ids'] = ids;
    }

    /**
     * Constructs a <code>TranscriptsRequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TranscriptsRequestData} obj Optional instance to populate.
     * @return {module:model/TranscriptsRequestData} The populated <code>TranscriptsRequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        switch (data['Transcript']) {
            case 'object1':
              return TranscriptsByDateRequest.constructFromObject(data, obj);
            case 'object2':
              return TranscriptsBySearchRequest.constructFromObject(data, obj);
            case 'object3':
              return TranscriptsByIdsRequest.constructFromObject(data, obj);
            case 'object4':
              return TranscriptsByEventsRequest.constructFromObject(data, obj);
            case 'object5':
              return TranscriptsByTimesRequest.constructFromObject(data, obj);
        }
        return obj;
    }


}

/**
 * Start Date (YYYY-MM-DD). 
 * @member {Date} startDate
 */
TranscriptsRequestData.prototype['startDate'] = undefined;

/**
 * End Date (YYYY-MM-DD). 
 * @member {Date} endDate
 */
TranscriptsRequestData.prototype['endDate'] = undefined;

/**
 * Start date relative to today (0=today, -1=yesterday). *Either `startDate` or `startDateRelative` should be used.* 
 * @member {Number} startDateRelative
 */
TranscriptsRequestData.prototype['startDateRelative'] = undefined;

/**
 * End date relative to today (0=today, -1=yesterday). *Either `endDate` or `endDateRelative` should be used.* 
 * @member {Number} endDateRelative
 */
TranscriptsRequestData.prototype['endDateRelative'] = undefined;

/**
 * Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones.
 * @member {String} timeZone
 * @default 'America/New_York'
 */
TranscriptsRequestData.prototype['timeZone'] = 'America/New_York';

/**
 * Text to search for within the transcript document stories.
 * @member {String} searchText
 */
TranscriptsRequestData.prototype['searchText'] = undefined;

/**
 * If true, search only for documents where the provided `ids` are the primary identifiers. If false, search for any mention.
 * @member {Boolean} primaryId
 * @default false
 */
TranscriptsRequestData.prototype['primaryId'] = false;

/**
 * Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
 * @member {Array.<String>} ids
 */
TranscriptsRequestData.prototype['ids'] = undefined;

/**
 * List of report IDs (max 1000).
 * @member {Array.<String>} reportIds
 */
TranscriptsRequestData.prototype['reportIds'] = undefined;

/**
 * List of category codes (country, industry, subject). Use `/meta/categories` endpoint. Default is all.
 * @member {Array.<String>} categories
 */
TranscriptsRequestData.prototype['categories'] = undefined;

/**
 * List of event IDs (max 1000).
 * @member {Array.<String>} eventIds
 */
TranscriptsRequestData.prototype['eventIds'] = undefined;

/**
 * Specifies the type of event:  * Earnings: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * Guidance: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * Analyst, Investor & Shareholder Meeting: Gatherings hosted by companies for analysts, investors, and shareholders to discuss strategic updates, financial health, and corporate developments.  * ConferencePresentation: A structured delivery of information within a conference setting, where individuals gather to discuss shared interests through formats such as keynote speeches, panel discussions, workshops, seminars, or webinars.  * SalesRevenue: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * SpecialSituation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.
 * @member {module:model/TranscriptsRequestData.EventTypeEnum} eventType
 */
TranscriptsRequestData.prototype['eventType'] = undefined;

/**
 * The date from which data is required 
 * @member {Date} startDateTime
 */
TranscriptsRequestData.prototype['startDateTime'] = undefined;

/**
 * The date to which data is required 
 * @member {Date} endDateTime
 */
TranscriptsRequestData.prototype['endDateTime'] = undefined;


// Implement TranscriptsByDateRequest interface:
/**
 * Start Date (YYYY-MM-DD). Data available from April 21st, 1999 onwards. *Either `startDate` or `startDateRelative` should be used.* 
 * @member {Date} startDate
 */
TranscriptsByDateRequest.prototype['startDate'] = undefined;
/**
 * End Date (YYYY-MM-DD). *Either `endDate` or `endDateRelative` should be used.* 
 * @member {Date} endDate
 */
TranscriptsByDateRequest.prototype['endDate'] = undefined;
/**
 * Start date relative to today (0=today, -1=yesterday). *Either `startDate` or `startDateRelative` should be used.* 
 * @member {Number} startDateRelative
 */
TranscriptsByDateRequest.prototype['startDateRelative'] = undefined;
/**
 * End date relative to today (0=today, -1=yesterday). *Either `endDate` or `endDateRelative` should be used.* 
 * @member {Number} endDateRelative
 */
TranscriptsByDateRequest.prototype['endDateRelative'] = undefined;
/**
 * Time Zone for story dates/times (POSIX format from IANA timeZone registry).  Use the `/meta/time-zones` endpoint to get the list of available time zones.
 * @member {String} timeZone
 * @default 'America/New_York'
 */
TranscriptsByDateRequest.prototype['timeZone'] = 'America/New_York';
// Implement TranscriptsBySearchRequest interface:
/**
 * Text to search for within the transcript document stories.
 * @member {String} searchText
 */
TranscriptsBySearchRequest.prototype['searchText'] = undefined;
// Implement TranscriptsByIdsRequest interface:
/**
 * If true, search only for documents where the provided `ids` are the primary identifiers. If false, search for any mention.
 * @member {Boolean} primaryId
 * @default false
 */
TranscriptsByIdsRequest.prototype['primaryId'] = false;
/**
 * Requested symbols or securities. This is a list with a maximum limit of 1000. Each symbol can be a FactSet exchange symbol, CUSIP, SEDOL, ISIN, or Entity ID
 * @member {Array.<String>} ids
 */
TranscriptsByIdsRequest.prototype['ids'] = undefined;
/**
 * List of report IDs (max 1000).
 * @member {Array.<String>} reportIds
 */
TranscriptsByIdsRequest.prototype['reportIds'] = undefined;
/**
 * List of category codes (country, industry, subject). Use `/meta/categories` endpoint. Default is all.
 * @member {Array.<String>} categories
 */
TranscriptsByIdsRequest.prototype['categories'] = undefined;
/**
 * Start Date (YYYY-MM-DD). 
 * @member {Date} startDate
 */
TranscriptsByIdsRequest.prototype['startDate'] = undefined;
/**
 * End Date (YYYY-MM-DD). 
 * @member {Date} endDate
 */
TranscriptsByIdsRequest.prototype['endDate'] = undefined;
/**
 * Text to search for within the transcript document stories.
 * @member {String} searchText
 */
TranscriptsByIdsRequest.prototype['searchText'] = undefined;
// Implement TranscriptsByEventsRequest interface:
/**
 * List of event IDs (max 1000).
 * @member {Array.<String>} eventIds
 */
TranscriptsByEventsRequest.prototype['eventIds'] = undefined;
/**
 * Specifies the type of event:  * Earnings: Regular quarterly calls where companies provide insights into their latest earnings, sharing details on their financial performance, including revenue, profits, and earnings per share.  * Guidance: Calls where companies offer estimated financial information about future earnings or outline business outlooks before official earnings are released.  * Analyst, Investor & Shareholder Meeting: Gatherings hosted by companies for analysts, investors, and shareholders to discuss strategic updates, financial health, and corporate developments.  * ConferencePresentation: A structured delivery of information within a conference setting, where individuals gather to discuss shared interests through formats such as keynote speeches, panel discussions, workshops, seminars, or webinars.  * SalesRevenue: Conference calls focused on discussing comprehensive sales activity and revenue figures, typically held monthly or quarterly.  * SpecialSituation: Conference calls addressing situations that do not fit into standard categories, often concerning mergers, acquisitions, joint ventures, or significant business updates.
 * @member {module:model/TranscriptsByEventsRequest.EventTypeEnum} eventType
 */
TranscriptsByEventsRequest.prototype['eventType'] = undefined;
// Implement TranscriptsByTimesRequest interface:
/**
 * The date from which data is required 
 * @member {Date} startDateTime
 */
TranscriptsByTimesRequest.prototype['startDateTime'] = undefined;
/**
 * The date to which data is required 
 * @member {Date} endDateTime
 */
TranscriptsByTimesRequest.prototype['endDateTime'] = undefined;



/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
TranscriptsRequestData['EventTypeEnum'] = {

    /**
     * value: "Earnings"
     * @const
     */
    "Earnings": "Earnings",

    /**
     * value: "Guidance"
     * @const
     */
    "Guidance": "Guidance",

    /**
     * value: "AnalystsShareholdersMeeting"
     * @const
     */
    "AnalystsShareholdersMeeting": "AnalystsShareholdersMeeting",

    /**
     * value: "ConferencePresentation"
     * @const
     */
    "ConferencePresentation": "ConferencePresentation",

    /**
     * value: "SalesRevenue"
     * @const
     */
    "SalesRevenue": "SalesRevenue",

    /**
     * value: "SpecialSituation"
     * @const
     */
    "SpecialSituation": "SpecialSituation"
};



export default TranscriptsRequestData;

