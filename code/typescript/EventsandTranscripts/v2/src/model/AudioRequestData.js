/**
 * Events and Transcripts API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p> 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioByDateRequest from './AudioByDateRequest';
import AudioByFileNameRequest from './AudioByFileNameRequest';
import AudioByIdsRequest from './AudioByIdsRequest';
import AudioByUploadTimeRequest from './AudioByUploadTimeRequest';

/**
 * The AudioRequestData model module.
 * @module model/AudioRequestData
 */
class AudioRequestData {
    /**
     * Constructs a new <code>AudioRequestData</code>.
     * @alias module:model/AudioRequestData
     * @implements module:model/AudioByDateRequest
     * @implements module:model/AudioByUploadTimeRequest
     * @implements module:model/AudioByFileNameRequest
     * @implements module:model/AudioByIdsRequest
     */
    constructor() { 
        AudioByDateRequest.initialize(this);AudioByUploadTimeRequest.initialize(this);AudioByFileNameRequest.initialize(this);AudioByIdsRequest.initialize(this);
        AudioRequestData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioRequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioRequestData} obj Optional instance to populate.
     * @return {module:model/AudioRequestData} The populated <code>AudioRequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        switch (data['Audio']) {
            case 'object1':
              return AudioByDateRequest.constructFromObject(data, obj);
            case 'object2':
              return AudioByUploadTimeRequest.constructFromObject(data, obj);
            case 'object3':
              return AudioByFileNameRequest.constructFromObject(data, obj);
            case 'object4':
              return AudioByIdsRequest.constructFromObject(data, obj);
        }
        return obj;
    }


}

/**
 * The earliest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either `startDate` or `startDateRelative` should be used, but not both.* - Data available from 10th May 2011 onwards. 
 * @member {Date} startDate
 */
AudioRequestData.prototype['startDate'] = undefined;

/**
 * The latest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either `endDate` or `endDateRelative` should be used, but not both.* 
 * @member {Date} endDate
 */
AudioRequestData.prototype['endDate'] = undefined;

/**
 * The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer ('0' for today, '-1' for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* 
 * @member {Number} startDateRelative
 */
AudioRequestData.prototype['startDateRelative'] = undefined;

/**
 * The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer ('0' for today, '-1' for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* 
 * @member {Number} endDateRelative
 */
AudioRequestData.prototype['endDateRelative'] = undefined;

/**
 * Source of the Audio file: * Phone = Originated from phone call * Webcast = Originated from a webcast * Vendor = Received from vendor * WebcastReplay = Replay of a webcast * Flash = Identical to webcast; can merge with \"Webcast\" in the future * Replay = Phone replay          
 * @member {module:model/AudioRequestData.AudioSourceEnum} audioSource
 */
AudioRequestData.prototype['audioSource'] = undefined;

/**
 * Filter results based on ticker-region or Entity ID.
 * @member {Array.<String>} ids
 */
AudioRequestData.prototype['ids'] = undefined;

/**
 * Search for trimmed audio files.
 * @member {Boolean} trimmed
 * @default false
 */
AudioRequestData.prototype['trimmed'] = false;

/**
 * Filter data based on uploadTime relative to the current time, in hours (e.g., -15 for the last 15 hours). Minimum -1, Maximum -168. 
 * @member {Number} uploadTime
 */
AudioRequestData.prototype['uploadTime'] = undefined;

/**
 * The exact file name to search for.
 * @member {String} fileName
 */
AudioRequestData.prototype['fileName'] = undefined;

/**
 * Unique identifier for the event transcript/audio.
 * @member {Number} reportId
 */
AudioRequestData.prototype['reportId'] = undefined;

/**
 * Unique ID for the specific internal recording for the reportId.
 * @member {Number} audioSourceId
 */
AudioRequestData.prototype['audioSourceId'] = undefined;

/**
 * Search for latest audio file.
 * @member {Boolean} isLatest
 * @default false
 */
AudioRequestData.prototype['isLatest'] = false;


// Implement AudioByDateRequest interface:
/**
 * The earliest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either `startDate` or `startDateRelative` should be used, but not both.* - Data available from 10th May 2011 onwards. 
 * @member {Date} startDate
 */
AudioByDateRequest.prototype['startDate'] = undefined;
/**
 * The latest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). - *Either `endDate` or `endDateRelative` should be used, but not both.* 
 * @member {Date} endDate
 */
AudioByDateRequest.prototype['endDate'] = undefined;
/**
 * The earliest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer ('0' for today, '-1' for yesterday, etc.). - *Either `startDate` or `startDateRelative` should be used, but not both.* 
 * @member {Number} startDateRelative
 */
AudioByDateRequest.prototype['startDateRelative'] = undefined;
/**
 * The latest date of the feed file the API should fetch based on the file timestamp, relative to today. - Format: Integer ('0' for today, '-1' for yesterday, etc.). - *Either `endDate` or `endDateRelative` should be used, but not both.* 
 * @member {Number} endDateRelative
 */
AudioByDateRequest.prototype['endDateRelative'] = undefined;
/**
 * Source of the Audio file: * Phone = Originated from phone call * Webcast = Originated from a webcast * Vendor = Received from vendor * WebcastReplay = Replay of a webcast * Flash = Identical to webcast; can merge with \"Webcast\" in the future * Replay = Phone replay          
 * @member {module:model/AudioByDateRequest.AudioSourceEnum} audioSource
 */
AudioByDateRequest.prototype['audioSource'] = undefined;
/**
 * Filter results based on ticker-region or Entity ID.
 * @member {Array.<String>} ids
 */
AudioByDateRequest.prototype['ids'] = undefined;
/**
 * Search for trimmed audio files (non-speaking portions removed).
 * @member {Boolean} trimmed
 * @default false
 */
AudioByDateRequest.prototype['trimmed'] = false;
// Implement AudioByUploadTimeRequest interface:
/**
 * Filter data based on uploadTime relative to the current time, in hours (e.g., -15 for the last 15 hours). Minimum -1, Maximum -168. 
 * @member {Number} uploadTime
 */
AudioByUploadTimeRequest.prototype['uploadTime'] = undefined;
/**
 * Source of the Audio file: * Phone = Originated from phone call * Webcast = Originated from a webcast * Vendor = Received from vendor * WebcastReplay = Replay of a webcast * Flash = Identical to webcast; can merge with \"Webcast\" in the future * Replay = Phone replay          
 * @member {module:model/AudioByUploadTimeRequest.AudioSourceEnum} audioSource
 */
AudioByUploadTimeRequest.prototype['audioSource'] = undefined;
/**
 * Filter results based on ticker-region or Entity ID.
 * @member {Array.<String>} ids
 */
AudioByUploadTimeRequest.prototype['ids'] = undefined;
/**
 * Search for trimmed audio files (non-speaking portions removed).
 * @member {Boolean} trimmed
 * @default false
 */
AudioByUploadTimeRequest.prototype['trimmed'] = false;
// Implement AudioByFileNameRequest interface:
/**
 * The exact file name to search for.
 * @member {String} fileName
 */
AudioByFileNameRequest.prototype['fileName'] = undefined;
// Implement AudioByIdsRequest interface:
/**
 * Unique identifier for the event transcript/audio.
 * @member {Number} reportId
 */
AudioByIdsRequest.prototype['reportId'] = undefined;
/**
 * Unique ID for the specific internal recording for the reportId.
 * @member {Number} audioSourceId
 */
AudioByIdsRequest.prototype['audioSourceId'] = undefined;
/**
 * Search for latest audio file.
 * @member {Boolean} isLatest
 * @default false
 */
AudioByIdsRequest.prototype['isLatest'] = false;
/**
 * Search for trimmed audio files.
 * @member {Boolean} trimmed
 * @default false
 */
AudioByIdsRequest.prototype['trimmed'] = false;



/**
 * Allowed values for the <code>audioSource</code> property.
 * @enum {String}
 * @readonly
 */
AudioRequestData['AudioSourceEnum'] = {

    /**
     * value: "Phone"
     * @const
     */
    "Phone": "Phone",

    /**
     * value: "Webcast"
     * @const
     */
    "Webcast": "Webcast",

    /**
     * value: "Vendor"
     * @const
     */
    "Vendor": "Vendor",

    /**
     * value: "WebcastReplay"
     * @const
     */
    "WebcastReplay": "WebcastReplay",

    /**
     * value: "Flash"
     * @const
     */
    "Flash": "Flash",

    /**
     * value: "Replay"
     * @const
     */
    "Replay": "Replay"
};



export default AudioRequestData;

