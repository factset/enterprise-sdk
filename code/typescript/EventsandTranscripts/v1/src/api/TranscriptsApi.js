/**
 * EVENTS AND TRANSCRIPTS API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ResponseCategories from '../model/ResponseCategories';
import ResponseTime from '../model/ResponseTime';
import Transcripts from '../model/Transcripts';
import TranscriptsOne from '../model/TranscriptsOne';
import TranscriptsTimes from '../model/TranscriptsTimes';

/**
* Transcripts service.
* @module api/TranscriptsApi
*/
export default class TranscriptsApi {

    /**
    * Constructs a new TranscriptsApi. 
    * @alias module:api/TranscriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `timeZones`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseTime} and HTTP response
     */
    getTimezoneWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseTime;

      return this.apiClient.callApi(
        '/reference/time-zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the time zones.
     * Retrieves and delivers a comprehensive list of all available `timeZones`.
     * @return { Promise.< module:model/ResponseTime > } a Promise, with data of type {@link module:model/ResponseTime }
     */
    getTimezone() {
      return this.getTimezoneWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Transcripts} and HTTP response
     */
    getTranscriptsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchText': opts['searchText'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Transcripts;

      return this.apiClient.callApi(
        '/transcripts/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on search text.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchText Restricts the search to include only document stories which include the text searched.
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return { Promise.< module:model/Transcripts > } a Promise, with data of type {@link module:model/Transcripts }
     */
    getTranscripts(opts) {
      return this.getTranscriptsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.** 
     * @param {Date} opts.endDate End Date. Format is YYYY-MM-DD.
     * @param {Number} opts.startDateRelative The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `startDate` or `startDateRelative` should be used, but not both.* - *If both `startDate` and `startDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `startDate` or `startDateRelative`, the API will not return any data.* 
     * @param {Number} opts.endDateRelative The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `endDate` or `endDateRelative` should be used, but not both.* - *If both `endDate` and `endDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `endDate` or `endDateRelative`, the API will not return any data.* 
     * @param {String} opts.timeZone timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (default to 'America/New_York')
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Transcripts} and HTTP response
     */
    getTranscriptsDatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'startDateRelative': opts['startDateRelative'],
        'endDateRelative': opts['endDateRelative'],
        'timeZone': opts['timeZone'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Transcripts;

      return this.apiClient.callApi(
        '/transcripts/dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific date range and time zones.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Start Date. Format is YYYY-MM-DD    **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.** 
     * @param {Date} opts.endDate End Date. Format is YYYY-MM-DD.
     * @param {Number} opts.startDateRelative The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `startDate` or `startDateRelative` should be used, but not both.* - *If both `startDate` and `startDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `startDate` or `startDateRelative`, the API will not return any data.* 
     * @param {Number} opts.endDateRelative The latest date of the feed file the API should fetch for based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `endDate` or `endDateRelative` should be used, but not both.* - *If both `endDate` and `endDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `endDate` or `endDateRelative`, the API will not return any data.* 
     * @param {String} opts.timeZone timeZone to return story dates and times.Time zones, represented in POSIX format, are automatically adjusted for daylight savings. timeZone names are sourced from the IANA timezone registry. The time fields in the response will adhere to this specified timezone. (default to 'America/New_York')
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return { Promise.< module:model/Transcripts > } a Promise, with data of type {@link module:model/Transcripts }
     */
    getTranscriptsDates(opts) {
      return this.getTranscriptsDatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.eventIds Requests Event IDs. This is a comma-separated list with a maximum limit of 1000.
     * @param {module:model/String} opts.eventType Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition).
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Transcripts} and HTTP response
     */
    getTranscriptsEventsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eventIds': this.apiClient.buildCollectionParam(opts['eventIds'], 'csv'),
        'eventType': opts['eventType'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Transcripts;

      return this.apiClient.callApi(
        '/transcripts/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on eventIds and eventType.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.eventIds Requests Event IDs. This is a comma-separated list with a maximum limit of 1000.
     * @param {module:model/String} opts.eventType Specifies the type of event you want to retrieve.   Earnings - Denotes an Earnings event.   Guidance - Denotes a Guidance event.   AnalystsShareholdersMeeting - Denotes an Analysts and Shareholders Meeting event.   ConferencePresentation - Denotes a Conference Presentation event.   SalesRevenue - Denotes a Sales/Revenue event.   SpecialSituation - Denotes a Special Situation event (i.e. Merger/Acquisition).
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return { Promise.< module:model/Transcripts > } a Promise, with data of type {@link module:model/Transcripts }
     */
    getTranscriptsEvents(opts) {
      return this.getTranscriptsEventsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Boolean} opts.primaryId Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (default to false)
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @param {Array.<String>} opts.reportIds Requests Report IDs. This is a comma-separated list with a maximum limit of 1000
     * @param {Array.<String>} opts.categories Code for categories to include. This is a comma-separated list.which represents country, industry, and subject codes. Use the ```/reference/categories``` endpoint to get the list of available categories.  Default = All categories.
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TranscriptsOne} and HTTP response
     */
    getTranscriptsIdsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'primaryId': opts['primaryId'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'reportIds': this.apiClient.buildCollectionParam(opts['reportIds'], 'csv'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'csv'),
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TranscriptsOne;

      return this.apiClient.callApi(
        '/transcripts/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific IDs.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Boolean} opts.primaryId Type of identifier search * true - Returns headlines of stories that have the searched identifier(s) as the primary  identifier. * false - Returns headlines of stories that mentioned or referred to the  identifier. (default to false)
     * @param {Array.<String>} opts.ids Requested symbols or securities.  This is a comma-separated list with a maximum limit of 1000.  Each symbol can be a FactSet exchange symbol, CUSIP, or SEDOL.
     * @param {Array.<String>} opts.reportIds Requests Report IDs. This is a comma-separated list with a maximum limit of 1000
     * @param {Array.<String>} opts.categories Code for categories to include. This is a comma-separated list.which represents country, industry, and subject codes. Use the ```/reference/categories``` endpoint to get the list of available categories.  Default = All categories.
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return { Promise.< module:model/TranscriptsOne > } a Promise, with data of type {@link module:model/TranscriptsOne }
     */
    getTranscriptsIds(opts) {
      return this.getTranscriptsIdsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDateTime  **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**   
     * @param {Date} opts.endDateTime The date to which data is required
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TranscriptsTimes} and HTTP response
     */
    getTranscriptsTimeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDateTime': opts['startDateTime'],
        'endDateTime': opts['endDateTime'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = TranscriptsTimes;

      return this.apiClient.callApi(
        '/transcripts/times', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the transcript documents in XML format and related metadata within FactSet coverage based on specific time.
     * Returns the transcripts documents within FactSet coverage along with other response fields.   All transcripts originate from Factset Callstreet Transcripts. 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDateTime  **The API supports data from 1999 onwards. Ensure that the provided Date falls within this range for accurate results.**   
     * @param {Date} opts.endDateTime The date to which data is required
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on eventDate. 
     * @param {Number} opts.paginationLimit Number of results to return per page. Maximum value: 1000.  (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return { Promise.< module:model/TranscriptsTimes > } a Promise, with data of type {@link module:model/TranscriptsTimes }
     */
    getTranscriptsTime(opts) {
      return this.getTranscriptsTimeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseCategories} and HTTP response
     */
    getcategoriesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ResponseCategories;

      return this.apiClient.callApi(
        '/reference/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the categories.
     * Retrieves and delivers a comprehensive list of all available `categories`which are defined as country, industry, and subject codes. The data is returned as a comma-separated list.
     * @return { Promise.< module:model/ResponseCategories > } a Promise, with data of type {@link module:model/ResponseCategories }
     */
    getcategories() {
      return this.getcategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





