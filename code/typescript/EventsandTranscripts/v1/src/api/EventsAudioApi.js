/**
 * EVENTS AND TRANSCRIPTS API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import EventsAudioDaily from '../model/EventsAudioDaily';
import EventsAudioDailyFileName from '../model/EventsAudioDailyFileName';
import EventsAudioDailyIds from '../model/EventsAudioDailyIds';
import EventsAudioHistory from '../model/EventsAudioHistory';

/**
* EventsAudio service.
* @module api/EventsAudioApi
*/
export default class EventsAudioApi {

    /**
    * Constructs a new EventsAudioApi. 
    * @alias module:api/EventsAudioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve historical audio recordings and related metadata within FactSet coverage.
     *  This endpoint retrieves an object containing a pre-signed URL from which an archive of all audio data for a specified year can be downloaded.  * Returns **untrimmed** historical audio recordings, which include complete audio files such as intro music & non-speaking portions, and related metadata dating back from May 10, 2011 to Sep 30, 2022.  * Returns **trimmed** historical audio recordings, which are audio files with the non-speaking portions removed, and related metadata dating back from May 10, 2011 to Dec 31, 2022. 
     * @param {Number} year Specifies the year for which the historical audio recordings and related metadata are to be retrieved. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.trimmed Specifies if trimmed/untrimmed historical audio recordings should be returned. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsAudioHistory} and HTTP response
     */
    getDocsDistributorAudioV1HistoryFilesWithHttpInfo(year, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getDocsDistributorAudioV1HistoryFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'trimmed': opts['trimmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventsAudioHistory;

      return this.apiClient.callApi(
        '/audio/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve historical audio recordings and related metadata within FactSet coverage.
     *  This endpoint retrieves an object containing a pre-signed URL from which an archive of all audio data for a specified year can be downloaded.  * Returns **untrimmed** historical audio recordings, which include complete audio files such as intro music & non-speaking portions, and related metadata dating back from May 10, 2011 to Sep 30, 2022.  * Returns **trimmed** historical audio recordings, which are audio files with the non-speaking portions removed, and related metadata dating back from May 10, 2011 to Dec 31, 2022. 
     * @param {Number} year Specifies the year for which the historical audio recordings and related metadata are to be retrieved. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.trimmed Specifies if trimmed/untrimmed historical audio recordings should be returned. (default to false)
     * @return { Promise.< module:model/EventsAudioHistory > } a Promise, with data of type {@link module:model/EventsAudioHistory }
     */
    getDocsDistributorAudioV1HistoryFiles(year, opts) {
      return this.getDocsDistributorAudioV1HistoryFilesWithHttpInfo(year, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve latest audio recordings and related metadata within FactSet coverage based on a specific date ranges.
     * Retrieves the most recent audio recordings based on specified dates and allows filtering through both source code and Ids.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The earliest date of the audio file the API should fetch for.  - Format: Should be absolute (YYYY-MM-DD). 
     * @param {Date} opts.endDate The latest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). 
     * @param {Number} opts.startDateRelative The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `startDate` or `startDateRelative` should be used, but not both.* - *If both `startDate` and `startDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `startDate` or `startDateRelative`, the API will not return any data.* 
     * @param {Number} opts.endDateRelative The latest date of the feed file the API should fetch based on the file timestamp.   Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.  - Either `endDate` or `endDateRelative` should be used, but not both. - If both `endDate` and `endDateRelative` are provided in the same request, the API will return an error. - If users provide future dates in requests for `endDate` or `endDateRelative`, the API will not return any data. 
     * @param {module:model/String} opts.sourceCode This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * Phone = Originated from phone call * Webcast = Originated from a webcast * Vendor = Received from vendor * WebcastReplay = Replay of a webcast * Flash = Identical to webcast; can merge with \"Webcast\" in the future * Replay = Phone replay
     * @param {Array.<String>} opts.ids This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier. 
     * @param {Boolean} opts.trimmed This parameter helps to search for trimmed audio files, with the non-speaking portions removed, and related metadata. The data ranges from May 10, 2011 to Dec 31, 2022.  (default to false)
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on startDate. 
     * @param {Number} opts.paginationLimit Specifies the number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsAudioDaily} and HTTP response
     */
    getDocsDistributorAudioV1ListFilesDateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'startDateRelative': opts['startDateRelative'],
        'endDateRelative': opts['endDateRelative'],
        'sourceCode': opts['sourceCode'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'trimmed': opts['trimmed'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventsAudioDaily;

      return this.apiClient.callApi(
        '/audio/by-date', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve latest audio recordings and related metadata within FactSet coverage based on a specific date ranges.
     * Retrieves the most recent audio recordings based on specified dates and allows filtering through both source code and Ids.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate The earliest date of the audio file the API should fetch for.  - Format: Should be absolute (YYYY-MM-DD). 
     * @param {Date} opts.endDate The latest date of the audio file the API should fetch for. - Format: Should be absolute (YYYY-MM-DD). 
     * @param {Number} opts.startDateRelative The earliest date of the feed file the API should fetch based on the file timestamp.  - Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.   - *Either `startDate` or `startDateRelative` should be used, but not both.* - *If both `startDate` and `startDateRelative` are provided in the same request, the API will return an error.* - *If users provide future dates in requests for `startDate` or `startDateRelative`, the API will not return any data.* 
     * @param {Number} opts.endDateRelative The latest date of the feed file the API should fetch based on the file timestamp.   Format: Specify the date using a relative term as an integer: '0' for today, '-1' for yesterday, '-2' for two days ago, and so forth. Negative values are used to represent past dates.  - Either `endDate` or `endDateRelative` should be used, but not both. - If both `endDate` and `endDateRelative` are provided in the same request, the API will return an error. - If users provide future dates in requests for `endDate` or `endDateRelative`, the API will not return any data. 
     * @param {module:model/String} opts.sourceCode This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * Phone = Originated from phone call * Webcast = Originated from a webcast * Vendor = Received from vendor * WebcastReplay = Replay of a webcast * Flash = Identical to webcast; can merge with \"Webcast\" in the future * Replay = Phone replay
     * @param {Array.<String>} opts.ids This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier. 
     * @param {Boolean} opts.trimmed This parameter helps to search for trimmed audio files, with the non-speaking portions removed, and related metadata. The data ranges from May 10, 2011 to Dec 31, 2022.  (default to false)
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on startDate. 
     * @param {Number} opts.paginationLimit Specifies the number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return { Promise.< module:model/EventsAudioDaily > } a Promise, with data of type {@link module:model/EventsAudioDaily }
     */
    getDocsDistributorAudioV1ListFilesDate(opts) {
      return this.getDocsDistributorAudioV1ListFilesDateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve latest audio recordings and related metadata within FactSet coverage based on file name.
     * Retrieves the latest audio recordings corresponding to the provided file name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileName This parameter is used to filter the data on based on the file name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsAudioDailyFileName} and HTTP response
     */
    getDocsDistributorAudioV1ListFilesFileNameWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fileName': opts['fileName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventsAudioDailyFileName;

      return this.apiClient.callApi(
        '/audio/by-file-name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve latest audio recordings and related metadata within FactSet coverage based on file name.
     * Retrieves the latest audio recordings corresponding to the provided file name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileName This parameter is used to filter the data on based on the file name.
     * @return { Promise.< module:model/EventsAudioDailyFileName > } a Promise, with data of type {@link module:model/EventsAudioDailyFileName }
     */
    getDocsDistributorAudioV1ListFilesFileName(opts) {
      return this.getDocsDistributorAudioV1ListFilesFileNameWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the latest audio recordings along with their corresponding metadata from the FactSet coverage based on specific IDs.
     * Retrieves the latest audio recordings based on the provided report ID and audio source ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.reportId Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event. 
     * @param {Number} opts.audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (phone or webcast or vendor or replay). One ReportID can have multiple AudioSourceIDs. 
     * @param {Boolean} opts.trimmed This parameters helps to search trimmed audio files. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsAudioDailyIds} and HTTP response
     */
    getDocsDistributorAudioV1ListFilesIdsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'reportId': opts['reportId'],
        'audioSourceId': opts['audioSourceId'],
        'trimmed': opts['trimmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventsAudioDailyIds;

      return this.apiClient.callApi(
        '/audio/by-ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the latest audio recordings along with their corresponding metadata from the FactSet coverage based on specific IDs.
     * Retrieves the latest audio recordings based on the provided report ID and audio source ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.reportId Unique identifier for fetching the audio file for an event. The same ID is used for the transcript of the same event. 
     * @param {Number} opts.audioSourceId Unique ID for an Internal recording specific to reportID. For example, ReportID X would have multiple recordings from different source (phone or webcast or vendor or replay). One ReportID can have multiple AudioSourceIDs. 
     * @param {Boolean} opts.trimmed This parameters helps to search trimmed audio files. (default to false)
     * @return { Promise.< module:model/EventsAudioDailyIds > } a Promise, with data of type {@link module:model/EventsAudioDailyIds }
     */
    getDocsDistributorAudioV1ListFilesIds(opts) {
      return this.getDocsDistributorAudioV1ListFilesIdsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve latest audio recordings and related metadata within FactSet coverage based on upload time.
     * Returns the latest audio recordings based on upload time and allows filtering through both source code and Ids.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.uploadTime This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime = -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime= -1  Maximum is 1 week/168 hours i.e., uploadTime=-168
     * @param {module:model/String} opts.sourceCode This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * Phone = Originated from phone call * Webcast = Originated from a webcast * Vendor = Received from vendor * WebcastReplay = Replay of a webcast * Flash = Identical to webcast; can merge with \"Webcast\" in the future * Replay = Phone replay
     * @param {Array.<String>} opts.ids This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier. 
     * @param {Boolean} opts.trimmed This parameter helps to search for trimmed audio files, with the non-speaking portions removed, and related metadata. The data ranges from May 10, 2011 to Dec 31, 2022.  (default to false)
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on uploadTime. 
     * @param {Number} opts.paginationLimit Specifies the number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsAudioDaily} and HTTP response
     */
    getDocsDistributorAudioV1ListFilesUploadTimeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uploadTime': opts['uploadTime'],
        'sourceCode': opts['sourceCode'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'trimmed': opts['trimmed'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EventsAudioDaily;

      return this.apiClient.callApi(
        '/audio/by-upload-time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve latest audio recordings and related metadata within FactSet coverage based on upload time.
     * Returns the latest audio recordings based on upload time and allows filtering through both source code and Ids.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.uploadTime This parameter filters data based on uploadTime relative to the current time, in hours. For example:- uploadTime = -15 (fetches audio files between 15 hours ago and now)  Minimum is 1 hour i.e., uploadTime= -1  Maximum is 1 week/168 hours i.e., uploadTime=-168
     * @param {module:model/String} opts.sourceCode This parameter filters the results based on Source of the Audio file. Below are the descriptions for each Source Code - * Phone = Originated from phone call * Webcast = Originated from a webcast * Vendor = Received from vendor * WebcastReplay = Replay of a webcast * Flash = Identical to webcast; can merge with \"Webcast\" in the future * Replay = Phone replay
     * @param {Array.<String>} opts.ids This parameter filters the results based on ticker-region or Entity ID or the combination of both. A comma is used to separate each identifier. 
     * @param {Boolean} opts.trimmed This parameter helps to search for trimmed audio files, with the non-speaking portions removed, and related metadata. The data ranges from May 10, 2011 to Dec 31, 2022.  (default to false)
     * @param {Array.<module:model/String>} opts.sort Enables sorting data in ascending or descending chronological order based on uploadTime. 
     * @param {Number} opts.paginationLimit Specifies the number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return. (default to 0)
     * @return { Promise.< module:model/EventsAudioDaily > } a Promise, with data of type {@link module:model/EventsAudioDaily }
     */
    getDocsDistributorAudioV1ListFilesUploadTime(opts) {
      return this.getDocsDistributorAudioV1ListFilesUploadTimeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





