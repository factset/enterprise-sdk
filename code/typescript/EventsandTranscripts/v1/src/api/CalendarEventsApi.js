/**
 * EVENTS AND TRANSCRIPTS API
 * <p>The Calendar Events API provides access to FactSetâ€™s Event Calendar data alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to pull Event Calendar data based on specific filters.</p> <p>Events Audio API provides access to historical as well as the latest audio recordings of various company events covered by FactSet. The events include, but are not limited to: earnings calls, conferences, and investor days. This API also provides relevant metadata such as timestamps and identifiers around each audio file.</p> <p>The  Near Real-time Transcripts API enables access to Near Real-time Transcripts provided by CallStreet to time-sensitive clients. This API also provides the relevant speaker metadata along with their confidence scores. This data caters to quant clients interested in building machine learning models. Clients can leverage this API to perform sentiment analysis through natural language processing or machine learning. It can also be used to complement analysis using FactSet's transcripts service.</p> <p>Transcripts API provides conference call transcripts for companies' publicly held conference calls and a wealth of information regarding upcoming corporate events, such as conference call date and time, phone number and password, type of conference call, and important company investor relations contact information.</p>  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompanyEventRequest from '../model/CompanyEventRequest';
import CompanyEventResponse from '../model/CompanyEventResponse';
import Error from '../model/Error';

/**
* CalendarEvents service.
* @module api/CalendarEventsApi
*/
export default class CalendarEventsApi {

    /**
    * Constructs a new CalendarEventsApi. 
    * @alias module:api/CalendarEventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve Company Event data
     * This endpoint returns all company events with filters from the request.
     * @param {module:model/CompanyEventRequest} companyEventRequest Company Event request body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CompanyEventResponse} and HTTP response
     */
    getCompanyEventWithHttpInfo(companyEventRequest) {
      let postBody = companyEventRequest;
      // verify the required parameter 'companyEventRequest' is set
      if (companyEventRequest === undefined || companyEventRequest === null) {
        throw new Error("Missing the required parameter 'companyEventRequest' when calling getCompanyEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CompanyEventResponse;

      return this.apiClient.callApi(
        '/calendar/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Company Event data
     * This endpoint returns all company events with filters from the request.
     * @param {module:model/CompanyEventRequest} companyEventRequest Company Event request body
     * @return { Promise.< module:model/CompanyEventResponse > } a Promise, with data of type {@link module:model/CompanyEventResponse }
     */
    getCompanyEvent(companyEventRequest) {
      return this.getCompanyEventWithHttpInfo(companyEventRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





