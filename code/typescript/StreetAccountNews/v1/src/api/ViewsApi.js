/**
 * StreetAccount News API
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Categories (the equivalent of 'Subjects' within the Workstation), Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.   **StreetAccount Historical Stories:**  These endpoints provide access to historical StreetAccount (SA) news. The API delivers SA stories in XML format based on user-specified date input parameters. Output files are securely available to users through a URL. This API has three endpoints: Create, Status, and Get.  Please note that this API only supports adhoc requests for historical files and does not support real-time files. If real-time push is required, consider using other methods such as SFTP, QNT account, or Azure Storage. Both historical and real-time Street Account news can be delivered via SFTP, QNT account, or Azure Storage.  The files delivered contain both metadata and content body, eliminating the need for multiple requests through multiple services to retrieve all the information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrEditViewBody from '../model/CreateOrEditViewBody';
import CreateViewResponse from '../model/CreateViewResponse';
import DeleteViewBody from '../model/DeleteViewBody';
import Error from '../model/Error';
import QuickAlertsBody from '../model/QuickAlertsBody';
import QuickAlertsResponse from '../model/QuickAlertsResponse';
import Views from '../model/Views';

/**
* Views service.
* @module api/ViewsApi
*/
export default class ViewsApi {

    /**
    * Constructs a new ViewsApi. 
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a quick-alert for given saved view
     * This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuickAlertsResponse} and HTTP response
     */
    createQuickAlertForViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['quickAlertsBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = QuickAlertsResponse;

      return this.apiClient.callApi(
        '/quick-alert/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a quick-alert for given saved view
     * This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.  
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert
     * @return { Promise.< module:model/QuickAlertsResponse > } a Promise, with data of type {@link module:model/QuickAlertsResponse }
     */
    createQuickAlertForView(opts) {
      return this.createQuickAlertForViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates and saves a StreetAccount view
     * This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateViewResponse} and HTTP response
     */
    createStreetAccountViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createOrEditViewBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CreateViewResponse;

      return this.apiClient.callApi(
        '/views/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates and saves a StreetAccount view
     * This endpoint allows you to create a new StreetAccount view. Select watchlists/tickers and filters of your choice to create and save a view.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return { Promise.< module:model/CreateViewResponse > } a Promise, with data of type {@link module:model/CreateViewResponse }
     */
    createStreetAccountView(opts) {
      return this.createStreetAccountViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes an existing quick alert for a view.
     * This endpoint allows you to delete a quick alert from a previously saved view.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQuickalertViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['quickAlertsBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/quick-alert/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes an existing quick alert for a view.
     * This endpoint allows you to delete a quick alert from a previously saved view.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert
     * @return { Promise } a Promise
     */
    deleteQuickalertView(opts) {
      return this.deleteQuickalertViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes an existing StreetAccount view
     * This endpoint allows you to delete a previously saved StreetAccount view.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteViewBody} opts.deleteViewBody Delete View Body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteStreetAccountViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['deleteViewBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/views/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes an existing StreetAccount view
     * This endpoint allows you to delete a previously saved StreetAccount view.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteViewBody} opts.deleteViewBody Delete View Body which needs to be sent with request
     * @return { Promise } a Promise
     */
    deleteStreetAccountView(opts) {
      return this.deleteStreetAccountViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edits and saves an existing StreetAccount view
     * This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    editStreetAccountViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createOrEditViewBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/views/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edits and saves an existing StreetAccount view
     * This endpoint allows you to edit the criteria used for a previously saved StreetAccount view.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request
     * @return { Promise } a Promise
     */
    editStreetAccountView(opts) {
      return this.editStreetAccountViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves StreetAccount search views
     * This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Views} and HTTP response
     */
    getStreetAccountViewsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Views;

      return this.apiClient.callApi(
        '/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves StreetAccount search views
     * This endpoint allows you to pull the full list of StreetAccount views that have been previously saved.
     * @return { Promise.< module:model/Views > } a Promise, with data of type {@link module:model/Views }
     */
    getStreetAccountViews() {
      return this.getStreetAccountViewsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





