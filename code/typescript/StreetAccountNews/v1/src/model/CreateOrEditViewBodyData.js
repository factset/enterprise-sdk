/**
 * StreetAccount News API
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Categories (the equivalent of 'Subjects' within the Workstation), Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateOrEditViewTickers from './CreateOrEditViewTickers';

/**
 * The CreateOrEditViewBodyData model module.
 * @module model/CreateOrEditViewBodyData
 */
class CreateOrEditViewBodyData {
    /**
     * Constructs a new <code>CreateOrEditViewBodyData</code>.
     * @alias module:model/CreateOrEditViewBodyData
     */
    constructor() { 
        
        CreateOrEditViewBodyData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateOrEditViewBodyData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateOrEditViewBodyData} obj Optional instance to populate.
     * @return {module:model/CreateOrEditViewBodyData} The populated <code>CreateOrEditViewBodyData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateOrEditViewBodyData();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tickers')) {
                obj['tickers'] = ApiClient.convertToType(data['tickers'], [CreateOrEditViewTickers]);
            }
            if (data.hasOwnProperty('isPrimary')) {
                obj['isPrimary'] = ApiClient.convertToType(data['isPrimary'], 'Boolean');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], ['String']);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
            if (data.hasOwnProperty('sectors')) {
                obj['sectors'] = ApiClient.convertToType(data['sectors'], ['String']);
            }
            if (data.hasOwnProperty('quickAlert')) {
                obj['quickAlert'] = ApiClient.convertToType(data['quickAlert'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * The name of the view.
 * @member {String} name
 */
CreateOrEditViewBodyData.prototype['name'] = undefined;

/**
 * An array of ticker objects associated with the view.
 * @member {Array.<module:model/CreateOrEditViewTickers>} tickers
 */
CreateOrEditViewBodyData.prototype['tickers'] = undefined;

/**
 * If true, stories that match the provided ticker on which the ticker is a primary symbol will be returned. Additionally, stories that match the other filters specified such as topics or regions will also be returned.  
 * @member {Boolean} isPrimary
 */
CreateOrEditViewBodyData.prototype['isPrimary'] = undefined;

/**
 * @member {Array.<String>} categories
 */
CreateOrEditViewBodyData.prototype['categories'] = undefined;

/**
 * @member {Array.<String>} topics
 */
CreateOrEditViewBodyData.prototype['topics'] = undefined;

/**
 * @member {Array.<String>} regions
 */
CreateOrEditViewBodyData.prototype['regions'] = undefined;

/**
 * @member {Array.<String>} sectors
 */
CreateOrEditViewBodyData.prototype['sectors'] = undefined;

/**
 * Indicates whether quick alerts are enabled for the view. A value of 'true' means quick alerts are enabled, while 'false' means they are not. 
 * @member {Boolean} quickAlert
 */
CreateOrEditViewBodyData.prototype['quickAlert'] = undefined;






export default CreateOrEditViewBodyData;

