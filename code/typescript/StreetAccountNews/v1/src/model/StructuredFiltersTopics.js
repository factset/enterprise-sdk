/**
 * StreetAccount News API
 * The StreetAccount News API provides access to FactSet's proprietary news provider, StreetAccount. StreetAccount, is a premium real-time market intelligence news service that delivers comprehensive U.S., Canadian, and European coverage (and expanding Asia coverage). All possible sources for corporate news are scanned and key story facts are highlighted and presented in an easy-to-read format.  **StreetAccount Filters, Headlines, and Views:**  These endpoints allow for the retrieval of news headlines using filters such as Watchlists/Indices/Tickers, Categories (the equivalent of 'Subjects' within the Workstation), Market Topics, Regions, and Sectors.  Headlines can also be retrieved based on saved views within the Workstation.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StructuredFiltersTopicsObject from './StructuredFiltersTopicsObject';

/**
 * The StructuredFiltersTopics model module.
 * @module model/StructuredFiltersTopics
 */
class StructuredFiltersTopics {
    /**
     * Constructs a new <code>StructuredFiltersTopics</code>.
     * Structured Filters Topic Object
     * @alias module:model/StructuredFiltersTopics
     */
    constructor() { 
        
        StructuredFiltersTopics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StructuredFiltersTopics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StructuredFiltersTopics} obj Optional instance to populate.
     * @return {module:model/StructuredFiltersTopics} The populated <code>StructuredFiltersTopics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StructuredFiltersTopics();

            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [StructuredFiltersTopicsObject]);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/StructuredFiltersTopicsObject>} topics
 */
StructuredFiltersTopics.prototype['topics'] = undefined;






export default StructuredFiltersTopics;

