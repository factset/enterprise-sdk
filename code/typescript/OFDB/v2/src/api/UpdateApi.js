/**
 * OFDB API
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse202 from '../model/InlineResponse202';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse403 from '../model/InlineResponse403';
import SuccessPostResponse from '../model/SuccessPostResponse';
import UpdateDate from '../model/UpdateDate';
import UpdateDates from '../model/UpdateDates';
import UpdateSymbol from '../model/UpdateSymbol';
import UpdateSymbols from '../model/UpdateSymbols';

/**
* Update service.
* @module api/UpdateApi
*/
export default class UpdateApi {

    /**
    * Constructs a new UpdateApi. 
    * @alias module:api/UpdateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Updates an existing date field value for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/UpdateDate} updateDate Required data for updating date in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    updateDateWithHttpInfo(path, date, updateDate) {
      let postBody = updateDate;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling updateDate");
      }
      // verify the required parameter 'updateDate' is set
      if (updateDate === undefined || updateDate === null) {
        throw new Error("Missing the required parameter 'updateDate' when calling updateDate");
      }

      let pathParams = {
        'path': path,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/database/{path}/dates/{date}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing date field value for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {module:model/UpdateDate} updateDate Required data for updating date in the database
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    updateDate(path, date, updateDate) {
      return this.updateDateWithHttpInfo(path, date, updateDate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates existing dates for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {module:model/UpdateDates} updateDates Required data for updating date in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    updateDatesWithHttpInfo(path, updateDates) {
      let postBody = updateDates;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateDates");
      }
      // verify the required parameter 'updateDates' is set
      if (updateDates === undefined || updateDates === null) {
        throw new Error("Missing the required parameter 'updateDates' when calling updateDates");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/database/{path}/dates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates existing dates for single/multiple symbols or adds a new date/symbol within a date if not present in 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {module:model/UpdateDates} updateDates Required data for updating date in the database
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    updateDates(path, updateDates) {
      return this.updateDatesWithHttpInfo(path, updateDates)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing symbol field value for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/UpdateSymbol} updateSymbol Data for updating symbol in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    updateSymbolWithHttpInfo(path, symbol, updateSymbol) {
      let postBody = updateSymbol;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateSymbol");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling updateSymbol");
      }
      // verify the required parameter 'updateSymbol' is set
      if (updateSymbol === undefined || updateSymbol === null) {
        throw new Error("Missing the required parameter 'updateSymbol' when calling updateSymbol");
      }

      let pathParams = {
        'path': path,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/database/{path}/symbols/{symbol}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates an existing symbol field value for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {module:model/UpdateSymbol} updateSymbol Data for updating symbol in the database
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    updateSymbol(path, symbol, updateSymbol) {
      return this.updateSymbolWithHttpInfo(path, symbol, updateSymbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates existing symbols for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {module:model/UpdateSymbols} updateSymbols Data for updating symbol in the database
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    updateSymbolsWithHttpInfo(path, updateSymbols) {
      let postBody = updateSymbols;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling updateSymbols");
      }
      // verify the required parameter 'updateSymbols' is set
      if (updateSymbols === undefined || updateSymbols === null) {
        throw new Error("Missing the required parameter 'updateSymbols' when calling updateSymbols");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/database/{path}/symbols', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates existing symbols for single/multiple dates or adds a new symbol/date within a symbol if not present in 3d database(OFDB). Updates an existing symbol field value or adds a new symbol if not present in the 2d database(OFDB)
     * @param {String} path Encode database path
     * @param {module:model/UpdateSymbols} updateSymbols Data for updating symbol in the database
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    updateSymbols(path, updateSymbols) {
      return this.updateSymbolsWithHttpInfo(path, updateSymbols)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





