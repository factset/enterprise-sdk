/**
 * OFDB API
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDatabase from '../model/CreateDatabase';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse202 from '../model/InlineResponse202';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse403 from '../model/InlineResponse403';
import SuccessPostResponse from '../model/SuccessPostResponse';

/**
* LongRunning service.
* @module api/LongRunningApi
*/
export default class LongRunningApi {

    /**
    * Constructs a new LongRunningApi. 
    * @alias module:api/LongRunningApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    getResourceAuditWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceAudit");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceAudit");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/database/{path}/audit/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse200 > } a Promise, with data of type {@link module:model/InlineResponse200 }
     */
    getResourceAudit(path, id) {
      return this.getResourceAuditWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    getResourceBulkDeleteWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceBulkDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceBulkDelete");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/database/{path}/delete/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse2003 > } a Promise, with data of type {@link module:model/InlineResponse2003 }
     */
    getResourceBulkDelete(path, id) {
      return this.getResourceBulkDeleteWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    getResourceDataWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceData");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceData");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/database/{path}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse2006 > } a Promise, with data of type {@link module:model/InlineResponse2006 }
     */
    getResourceData(path, id) {
      return this.getResourceDataWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateDatabase} and HTTP response
     */
    getResourceDatabaseWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceDatabase");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceDatabase");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CreateDatabase;

      return this.apiClient.callApi(
        '/database/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/CreateDatabase > } a Promise, with data of type {@link module:model/CreateDatabase }
     */
    getResourceDatabase(path, id) {
      return this.getResourceDatabaseWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    getResourceDateWithHttpInfo(path, date, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getResourceDate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceDate");
      }

      let pathParams = {
        'path': path,
        'date': date,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/database/{path}/dates/{date}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    getResourceDate(path, date, id) {
      return this.getResourceDateWithHttpInfo(path, date, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    getResourceDatesWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceDates");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceDates");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/database/{path}/dates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse2005 > } a Promise, with data of type {@link module:model/InlineResponse2005 }
     */
    getResourceDates(path, id) {
      return this.getResourceDatesWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
     */
    getResourceFieldsWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceFields");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceFields");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/database/{path}/fields/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse2002 > } a Promise, with data of type {@link module:model/InlineResponse2002 }
     */
    getResourceFields(path, id) {
      return this.getResourceFieldsWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    getResourceStatsWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceStats");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceStats");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/database/{path}/stats/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse2001 > } a Promise, with data of type {@link module:model/InlineResponse2001 }
     */
    getResourceStats(path, id) {
      return this.getResourceStatsWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SuccessPostResponse} and HTTP response
     */
    getResourceSymbolWithHttpInfo(path, symbol, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceSymbol");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getResourceSymbol");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceSymbol");
      }

      let pathParams = {
        'path': path,
        'symbol': symbol,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SuccessPostResponse;

      return this.apiClient.callApi(
        '/database/{path}/symbols/{symbol}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/SuccessPostResponse > } a Promise, with data of type {@link module:model/SuccessPostResponse }
     */
    getResourceSymbol(path, symbol, id) {
      return this.getResourceSymbolWithHttpInfo(path, symbol, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    getResourceSymbolsWithHttpInfo(path, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceSymbols");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceSymbols");
      }

      let pathParams = {
        'path': path,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/database/{path}/symbols/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the end results of a long running request. The full URL is normally provided for you in the Location header of a finished long running response.
     * @param {String} path Encode database path
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse2004 > } a Promise, with data of type {@link module:model/InlineResponse2004 }
     */
    getResourceSymbols(path, id) {
      return this.getResourceSymbolsWithHttpInfo(path, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
    getStatusWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/database/jobs/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the current status of a long running request. The full URL is normally provided for you in the Location header of a long running response.
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse201 > } a Promise, with data of type {@link module:model/InlineResponse201 }
     */
    getStatus(id) {
      return this.getStatusWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





