/**
 * OFDB API
 * OFDB API
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkDelete from '../model/BulkDelete';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse202 from '../model/InlineResponse202';
import InlineResponse400 from '../model/InlineResponse400';
import InlineResponse403 from '../model/InlineResponse403';

/**
* Delete service.
* @module api/DeleteApi
*/
export default class DeleteApi {

    /**
    * Constructs a new DeleteApi. 
    * @alias module:api/DeleteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
     * @param {String} path Encode database path
     * @param {Object} opts Optional parameters
     * @param {module:model/BulkDelete} opts.bulkDelete 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    deleteBulkItemsWithHttpInfo(path, opts) {
      opts = opts || {};
      let postBody = opts['bulkDelete'];
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteBulkItems");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/database/{path}/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Allows users to delete various combinations of symbols, dates, and fields from the desired OFDB
     * @param {String} path Encode database path
     * @param {Object} opts Optional parameters
     * @param {module:model/BulkDelete} opts.bulkDelete 
     * @return { Promise.< module:model/InlineResponse2003 > } a Promise, with data of type {@link module:model/InlineResponse2003 }
     */
    deleteBulkItems(path, opts) {
      return this.deleteBulkItemsWithHttpInfo(path, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    deleteDateWithHttpInfo(path, date) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling deleteDate");
      }

      let pathParams = {
        'path': path,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/database/{path}/dates/{date}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes all data specific to the date in 3d database(OFDB). This includes all the symbols related to that date
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @return { Promise.< module:model/InlineResponse202 > } a Promise, with data of type {@link module:model/InlineResponse202 }
     */
    deleteDate(path, date) {
      return this.deleteDateWithHttpInfo(path, date)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    deleteDateFromSymbolWithHttpInfo(path, date, symbol) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteDateFromSymbol");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling deleteDateFromSymbol");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling deleteDateFromSymbol");
      }

      let pathParams = {
        'path': path,
        'date': date,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/database/{path}/dates/{date}/symbols/{symbol}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @return { Promise.< module:model/InlineResponse202 > } a Promise, with data of type {@link module:model/InlineResponse202 }
     */
    deleteDateFromSymbol(path, date, symbol) {
      return this.deleteDateFromSymbolWithHttpInfo(path, date, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    deleteSymbolWithHttpInfo(path, symbol) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteSymbol");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling deleteSymbol");
      }

      let pathParams = {
        'path': path,
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/database/{path}/symbols/{symbol}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes all data specific to the symbol in both 2d and 3d database(OFDB). This includes all the dates related to that symbols in 3d database(OFDB)
     * @param {String} path Encode database path
     * @param {String} symbol Symbol with in the ofdb
     * @return { Promise.< module:model/InlineResponse202 > } a Promise, with data of type {@link module:model/InlineResponse202 }
     */
    deleteSymbol(path, symbol) {
      return this.deleteSymbolWithHttpInfo(path, symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @param {String} id A unique pickup ID returned by the original request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse202} and HTTP response
     */
    getResourceDateFromSymbolWithHttpInfo(path, date, symbol, id) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getResourceDateFromSymbol");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getResourceDateFromSymbol");
      }
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getResourceDateFromSymbol");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceDateFromSymbol");
      }

      let pathParams = {
        'path': path,
        'date': date,
        'symbol': symbol,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse202;

      return this.apiClient.callApi(
        '/database/{path}/dates/{date}/symbols/{symbol}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes data specific to the symbol and date from a 3d database(OFDB).
     * @param {String} path Encode database path
     * @param {Number} date Date in YYYYMMDD format
     * @param {String} symbol Symbol with in the ofdb
     * @param {String} id A unique pickup ID returned by the original request
     * @return { Promise.< module:model/InlineResponse202 > } a Promise, with data of type {@link module:model/InlineResponse202 }
     */
    getResourceDateFromSymbol(path, date, symbol, id) {
      return this.getResourceDateFromSymbolWithHttpInfo(path, date, symbol, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





