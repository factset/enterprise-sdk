/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FederationResourceReference from './FederationResourceReference';
import LocationResourceReference from './LocationResourceReference';
import PendingProductOrder from './PendingProductOrder';
import ProductResourceReference from './ProductResourceReference';
import UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData from './UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData';

/**
 * The UserResourceUrnScimSchemasExtensionFactSetCore10User model module.
 * @module model/UserResourceUrnScimSchemasExtensionFactSetCore10User
 */
class UserResourceUrnScimSchemasExtensionFactSetCore10User {
    /**
     * Constructs a new <code>UserResourceUrnScimSchemasExtensionFactSetCore10User</code>.
     * @alias module:model/UserResourceUrnScimSchemasExtensionFactSetCore10User
     * @param username {String} A FactSet \"username\" is FactSet's logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.
     */
    constructor(username) { 
        
        UserResourceUrnScimSchemasExtensionFactSetCore10User.initialize(this, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, username) { 
        obj['username'] = username;
    }

    /**
     * Constructs a <code>UserResourceUrnScimSchemasExtensionFactSetCore10User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserResourceUrnScimSchemasExtensionFactSetCore10User} obj Optional instance to populate.
     * @return {module:model/UserResourceUrnScimSchemasExtensionFactSetCore10User} The populated <code>UserResourceUrnScimSchemasExtensionFactSetCore10User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserResourceUrnScimSchemasExtensionFactSetCore10User();

            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationResourceReference.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('userTaxonomyData')) {
                obj['userTaxonomyData'] = UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData.constructFromObject(data['userTaxonomyData']);
            }
            if (data.hasOwnProperty('roleName')) {
                obj['roleName'] = ApiClient.convertToType(data['roleName'], 'String');
            }
            if (data.hasOwnProperty('royaltyClass')) {
                obj['royaltyClass'] = ApiClient.convertToType(data['royaltyClass'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [ProductResourceReference]);
            }
            if (data.hasOwnProperty('pendingProductOrders')) {
                obj['pendingProductOrders'] = ApiClient.convertToType(data['pendingProductOrders'], [PendingProductOrder]);
            }
            if (data.hasOwnProperty('federations')) {
                obj['federations'] = ApiClient.convertToType(data['federations'], [FederationResourceReference]);
            }
            if (data.hasOwnProperty('invoiceId')) {
                obj['invoiceId'] = ApiClient.convertToType(data['invoiceId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A FactSet \"username\" is FactSet's logical structure for grouping serial numbers into like-groups based on roleName, geographical location or line of business.
 * @member {String} username
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['username'] = undefined;

/**
 * A serial number represents an individual's unique FactSet account identifier and base-workstation access. Serial numbers are allocated to an individual when a valid RoleName is present.
 * @member {String} serialNumber
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['serialNumber'] = undefined;

/**
 * User identifier from the legacy User Provisioning API.
 * @member {String} uniqueId
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['uniqueId'] = undefined;

/**
 * @member {module:model/LocationResourceReference} location
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['location'] = undefined;

/**
 * @member {module:model/UserResourceUrnScimSchemasExtensionFactSetCore10UserUserTaxonomyData} userTaxonomyData
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['userTaxonomyData'] = undefined;

/**
 * Predetermined role of specific individual. Issues individual a base FactSet workstation and serial number. If passed as NULL a base-FactSet workstation will be allocated to the individual granting the individual a FactSet SerialNumber
 * @member {String} roleName
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['roleName'] = undefined;

/**
 * Determines the type of client the individual and the royalty fee to be remitted to FactSet for the individual. Expected Royalty Class values will be provided to you by your FactSet account representative.
 * @member {String} royaltyClass
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['royaltyClass'] = undefined;

/**
 * An array of FactSet products to allocate/remove from an individual. Individual must have a FactSet serial number associated with them.
 * @member {Array.<module:model/ProductResourceReference>} products
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['products'] = undefined;

/**
 * An array of pending FactSet product orders.
 * @member {Array.<module:model/PendingProductOrder>} pendingProductOrders
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['pendingProductOrders'] = undefined;

/**
 * References to the federations in which the user has at least one assertion value.
 * @member {Array.<module:model/FederationResourceReference>} federations
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['federations'] = undefined;

/**
 * The identifier of the invoice that should be associated with a new user for billing purposes. Note once an invoice ID has been assigned to a user, it cannot be modified via this API. If invoice ID re-assignment is necessary, please contact your FactSet representative.
 * @member {String} invoiceId
 */
UserResourceUrnScimSchemasExtensionFactSetCore10User.prototype['invoiceId'] = undefined;






export default UserResourceUrnScimSchemasExtensionFactSetCore10User;

