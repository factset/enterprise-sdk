/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FederationResourceLocation from './FederationResourceLocation';
import FederationResourceUser from './FederationResourceUser';

/**
 * The FederationResource model module.
 * @module model/FederationResource
 */
class FederationResource {
    /**
     * Constructs a new <code>FederationResource</code>.
     * Represents an authentication relationship between FactSet and a client firm for web technologies that facilitate single sign-on (SSO) access to FactSet services, such as SAML.
     * @alias module:model/FederationResource
     * @param name {String} Name of federation.
     * @param entityId {String} The entity identifier of the corresponding identity provider.
     * @param singleSignOnServiceUrl {String} Destination client browsers are directed to, at the IdP, for Single Sign-on Protocol Message exchange.
     * @param requestBinding {String} Preferred HTTP method for IdP's singleSignOnServiceUrl destination.
     * @param certificates {Array.<Blob>} Public x509 certificate values the Service Provider can expect Single Sign-on messages to be signed with from the IdP.
     * @param location {module:model/FederationResourceLocation} 
     */
    constructor(name, entityId, singleSignOnServiceUrl, requestBinding, certificates, location) { 
        
        FederationResource.initialize(this, name, entityId, singleSignOnServiceUrl, requestBinding, certificates, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, entityId, singleSignOnServiceUrl, requestBinding, certificates, location) { 
        obj['name'] = name;
        obj['entityId'] = entityId;
        obj['singleSignOnServiceUrl'] = singleSignOnServiceUrl;
        obj['requestBinding'] = requestBinding;
        obj['certificates'] = certificates;
        obj['location'] = location;
    }

    /**
     * Constructs a <code>FederationResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FederationResource} obj Optional instance to populate.
     * @return {module:model/FederationResource} The populated <code>FederationResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FederationResource();

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('metadataUrl')) {
                obj['metadataUrl'] = ApiClient.convertToType(data['metadataUrl'], 'String');
            }
            if (data.hasOwnProperty('singleSignOnServiceUrl')) {
                obj['singleSignOnServiceUrl'] = ApiClient.convertToType(data['singleSignOnServiceUrl'], 'String');
            }
            if (data.hasOwnProperty('requestBinding')) {
                obj['requestBinding'] = ApiClient.convertToType(data['requestBinding'], 'String');
            }
            if (data.hasOwnProperty('certificates')) {
                obj['certificates'] = ApiClient.convertToType(data['certificates'], ['Blob']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = FederationResourceLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('autoSyncUsernames')) {
                obj['autoSyncUsernames'] = ApiClient.convertToType(data['autoSyncUsernames'], ['String']);
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [FederationResourceUser]);
            }
        }
        return obj;
    }


}

/**
 * A list of schema URIs in use by the resource.
 * @member {Array.<String>} schemas
 */
FederationResource.prototype['schemas'] = undefined;

/**
 * The Globally Unique Identifier (GUID) of the federation.
 * @member {String} id
 */
FederationResource.prototype['id'] = undefined;

/**
 * Name of federation.
 * @member {String} name
 */
FederationResource.prototype['name'] = undefined;

/**
 * The entity identifier of the corresponding identity provider.
 * @member {String} entityId
 */
FederationResource.prototype['entityId'] = undefined;

/**
 * Public link to the IdP's metadata.xml.
 * @member {String} metadataUrl
 */
FederationResource.prototype['metadataUrl'] = undefined;

/**
 * Destination client browsers are directed to, at the IdP, for Single Sign-on Protocol Message exchange.
 * @member {String} singleSignOnServiceUrl
 */
FederationResource.prototype['singleSignOnServiceUrl'] = undefined;

/**
 * Preferred HTTP method for IdP's singleSignOnServiceUrl destination.
 * @member {String} requestBinding
 */
FederationResource.prototype['requestBinding'] = undefined;

/**
 * Public x509 certificate values the Service Provider can expect Single Sign-on messages to be signed with from the IdP.
 * @member {Array.<Blob>} certificates
 */
FederationResource.prototype['certificates'] = undefined;

/**
 * @member {module:model/FederationResourceLocation} location
 */
FederationResource.prototype['location'] = undefined;

/**
 * List of FactSet usernames automatically mapped into the federation with email address expected as contents of 'nameID'.
 * @member {Array.<String>} autoSyncUsernames
 */
FederationResource.prototype['autoSyncUsernames'] = undefined;

/**
 * A list of mappings for users between their assertion value(s) as provided by this identity provider and their corresponding FactSet username-serial.
 * @member {Array.<module:model/FederationResourceUser>} users
 */
FederationResource.prototype['users'] = undefined;






export default FederationResource;

