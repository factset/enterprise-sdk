/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaAttribute from './SchemaAttribute';
import SchemaMeta from './SchemaMeta';

/**
 * The Schema model module.
 * @module model/Schema
 */
class Schema {
    /**
     * Constructs a new <code>Schema</code>.
     * @alias module:model/Schema
     * @param id {String} The unique URI of the schema. When applicable, service providers MUST specify the URI.
     * @param name {String} The schema's human-readable name.  When applicable, service providers MUST specify the name, e.g., 'User'.
     * @param attributes {Array.<module:model/SchemaAttribute>} A complex attribute that includes the attributes of a schema.
     */
    constructor(id, name, attributes) { 
        
        Schema.initialize(this, id, name, attributes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, attributes) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['attributes'] = attributes;
    }

    /**
     * Constructs a <code>Schema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schema} obj Optional instance to populate.
     * @return {module:model/Schema} The populated <code>Schema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schema();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [SchemaAttribute]);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = SchemaMeta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }


}

/**
 * The unique URI of the schema. When applicable, service providers MUST specify the URI.
 * @member {String} id
 */
Schema.prototype['id'] = undefined;

/**
 * The schema's human-readable name.  When applicable, service providers MUST specify the name, e.g., 'User'.
 * @member {String} name
 */
Schema.prototype['name'] = undefined;

/**
 * The schema's human-readable name.  When applicable, service providers MUST specify the name, e.g., 'User'.
 * @member {String} description
 */
Schema.prototype['description'] = undefined;

/**
 * A complex attribute that includes the attributes of a schema.
 * @member {Array.<module:model/SchemaAttribute>} attributes
 */
Schema.prototype['attributes'] = undefined;

/**
 * @member {module:model/SchemaMeta} meta
 */
Schema.prototype['meta'] = undefined;






export default Schema;

