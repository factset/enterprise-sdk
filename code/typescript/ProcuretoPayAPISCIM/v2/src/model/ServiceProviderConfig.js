/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationScheme from './AuthenticationScheme';
import ServiceProviderConfigBulk from './ServiceProviderConfigBulk';
import ServiceProviderConfigChangePassword from './ServiceProviderConfigChangePassword';
import ServiceProviderConfigEtag from './ServiceProviderConfigEtag';
import ServiceProviderConfigFilter from './ServiceProviderConfigFilter';
import ServiceProviderConfigPatch from './ServiceProviderConfigPatch';
import ServiceProviderConfigSort from './ServiceProviderConfigSort';

/**
 * The ServiceProviderConfig model module.
 * @module model/ServiceProviderConfig
 */
class ServiceProviderConfig {
    /**
     * Constructs a new <code>ServiceProviderConfig</code>.
     * @alias module:model/ServiceProviderConfig
     * @param patch {module:model/ServiceProviderConfigPatch} 
     * @param bulk {module:model/ServiceProviderConfigBulk} 
     * @param filter {module:model/ServiceProviderConfigFilter} 
     * @param changePassword {module:model/ServiceProviderConfigChangePassword} 
     * @param sort {module:model/ServiceProviderConfigSort} 
     * @param etag {module:model/ServiceProviderConfigEtag} 
     * @param authenticationSchemes {Array.<module:model/AuthenticationScheme>} A complex type that specifies supported authentication scheme properties.
     */
    constructor(patch, bulk, filter, changePassword, sort, etag, authenticationSchemes) { 
        
        ServiceProviderConfig.initialize(this, patch, bulk, filter, changePassword, sort, etag, authenticationSchemes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, patch, bulk, filter, changePassword, sort, etag, authenticationSchemes) { 
        obj['patch'] = patch;
        obj['bulk'] = bulk;
        obj['filter'] = filter;
        obj['changePassword'] = changePassword;
        obj['sort'] = sort;
        obj['etag'] = etag;
        obj['authenticationSchemes'] = authenticationSchemes;
    }

    /**
     * Constructs a <code>ServiceProviderConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProviderConfig} obj Optional instance to populate.
     * @return {module:model/ServiceProviderConfig} The populated <code>ServiceProviderConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProviderConfig();

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('documentationUri')) {
                obj['documentationUri'] = ApiClient.convertToType(data['documentationUri'], 'String');
            }
            if (data.hasOwnProperty('patch')) {
                obj['patch'] = ServiceProviderConfigPatch.constructFromObject(data['patch']);
            }
            if (data.hasOwnProperty('bulk')) {
                obj['bulk'] = ServiceProviderConfigBulk.constructFromObject(data['bulk']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ServiceProviderConfigFilter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('changePassword')) {
                obj['changePassword'] = ServiceProviderConfigChangePassword.constructFromObject(data['changePassword']);
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ServiceProviderConfigSort.constructFromObject(data['sort']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ServiceProviderConfigEtag.constructFromObject(data['etag']);
            }
            if (data.hasOwnProperty('authenticationSchemes')) {
                obj['authenticationSchemes'] = ApiClient.convertToType(data['authenticationSchemes'], [AuthenticationScheme]);
            }
        }
        return obj;
    }


}

/**
 * An array containing the standard schema URI used for identifying a service provider's configuration. See RFC 7643 section 5.
 * @member {Array.<module:model/ServiceProviderConfig.SchemasEnum>} schemas
 */
ServiceProviderConfig.prototype['schemas'] = undefined;

/**
 * An HTTP-addressable URL pointing to the service provider's human-consumable help documentation.
 * @member {String} documentationUri
 */
ServiceProviderConfig.prototype['documentationUri'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigPatch} patch
 */
ServiceProviderConfig.prototype['patch'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigBulk} bulk
 */
ServiceProviderConfig.prototype['bulk'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigFilter} filter
 */
ServiceProviderConfig.prototype['filter'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigChangePassword} changePassword
 */
ServiceProviderConfig.prototype['changePassword'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigSort} sort
 */
ServiceProviderConfig.prototype['sort'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigEtag} etag
 */
ServiceProviderConfig.prototype['etag'] = undefined;

/**
 * A complex type that specifies supported authentication scheme properties.
 * @member {Array.<module:model/AuthenticationScheme>} authenticationSchemes
 */
ServiceProviderConfig.prototype['authenticationSchemes'] = undefined;





/**
 * Allowed values for the <code>schemas</code> property.
 * @enum {String}
 * @readonly
 */
ServiceProviderConfig['SchemasEnum'] = {

    /**
     * value: "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
     * @const
     */
    "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig": "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
};



export default ServiceProviderConfig;

