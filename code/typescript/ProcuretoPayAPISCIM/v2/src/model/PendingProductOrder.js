/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductResourceReference from './ProductResourceReference';

/**
 * The PendingProductOrder model module.
 * @module model/PendingProductOrder
 */
class PendingProductOrder {
    /**
     * Constructs a new <code>PendingProductOrder</code>.
     * @alias module:model/PendingProductOrder
     * @param product {module:model/ProductResourceReference} 
     * @param type {module:model/PendingProductOrder.TypeEnum} Type of product order, e.g. 'Add' or 'Remove'.
     * @param status {module:model/PendingProductOrder.StatusEnum} Status of the pending product order.
     * @param transactionCode {String} A GUID that is the transaction code of the product order.
     * @param requested {Date} Date and time when product was ordered.
     */
    constructor(product, type, status, transactionCode, requested) { 
        
        PendingProductOrder.initialize(this, product, type, status, transactionCode, requested);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, product, type, status, transactionCode, requested) { 
        obj['product'] = product;
        obj['type'] = type;
        obj['status'] = status;
        obj['transactionCode'] = transactionCode;
        obj['requested'] = requested;
    }

    /**
     * Constructs a <code>PendingProductOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PendingProductOrder} obj Optional instance to populate.
     * @return {module:model/PendingProductOrder} The populated <code>PendingProductOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PendingProductOrder();

            if (data.hasOwnProperty('product')) {
                obj['product'] = ProductResourceReference.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transactionCode')) {
                obj['transactionCode'] = ApiClient.convertToType(data['transactionCode'], 'String');
            }
            if (data.hasOwnProperty('requested')) {
                obj['requested'] = ApiClient.convertToType(data['requested'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ProductResourceReference} product
 */
PendingProductOrder.prototype['product'] = undefined;

/**
 * Type of product order, e.g. 'Add' or 'Remove'.
 * @member {module:model/PendingProductOrder.TypeEnum} type
 */
PendingProductOrder.prototype['type'] = undefined;

/**
 * Status of the pending product order.
 * @member {module:model/PendingProductOrder.StatusEnum} status
 */
PendingProductOrder.prototype['status'] = undefined;

/**
 * A GUID that is the transaction code of the product order.
 * @member {String} transactionCode
 */
PendingProductOrder.prototype['transactionCode'] = undefined;

/**
 * Date and time when product was ordered.
 * @member {Date} requested
 */
PendingProductOrder.prototype['requested'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PendingProductOrder['TypeEnum'] = {

    /**
     * value: "Add"
     * @const
     */
    "Add": "Add",

    /**
     * value: "Remove"
     * @const
     */
    "Remove": "Remove"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PendingProductOrder['StatusEnum'] = {

    /**
     * value: "Processing"
     * @const
     */
    "Processing": "Processing",

    /**
     * value: "Queued"
     * @const
     */
    "Queued": "Queued"
};



export default PendingProductOrder;

