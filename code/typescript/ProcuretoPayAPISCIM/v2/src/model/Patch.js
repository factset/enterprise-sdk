/**
 * FactSet SCIM API
 * FactSet's SCIM API implementation.
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchOperation from './PatchOperation';

/**
 * The Patch model module.
 * @module model/Patch
 */
class Patch {
    /**
     * Constructs a new <code>Patch</code>.
     * The request body used for the HTTP PATCH server function (see RFC 7644 section 3.5.2.) This can be used to alter an individual SCIM resource.
     * @alias module:model/Patch
     */
    constructor() { 
        
        Patch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Patch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Patch} obj Optional instance to populate.
     * @return {module:model/Patch} The populated <code>Patch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Patch();

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('Operations')) {
                obj['Operations'] = ApiClient.convertToType(data['Operations'], [PatchOperation]);
            }
        }
        return obj;
    }


}

/**
 * An array containing the standard schema URI used for SCIM PATCH requests.
 * @member {Array.<module:model/Patch.SchemasEnum>} schemas
 */
Patch.prototype['schemas'] = undefined;

/**
 * The list of PATCH operations that should be applied for the PATCH request.
 * @member {Array.<module:model/PatchOperation>} Operations
 */
Patch.prototype['Operations'] = undefined;





/**
 * Allowed values for the <code>schemas</code> property.
 * @enum {String}
 * @readonly
 */
Patch['SchemasEnum'] = {

    /**
     * value: "urn:ietf:params:scim:api:messages:2.0:PatchOp"
     * @const
     */
    "urn:ietf:params:scim:api:messages:2.0:PatchOp": "urn:ietf:params:scim:api:messages:2.0:PatchOp"
};



export default Patch;

