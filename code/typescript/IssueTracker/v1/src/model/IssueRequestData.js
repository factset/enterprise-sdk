/**
 * Issue Tracker API
 * This API is used to file issues
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssueRequestData model module.
 * @module model/IssueRequestData
 */
class IssueRequestData {
    /**
     * Constructs a new <code>IssueRequestData</code>.
     * @alias module:model/IssueRequestData
     * @param subject {String} subject for new Issue Tracker issue
     * @param description {String} Comprehensive description of the issue, including any problems you've observed or any specific changes you'd like to request.
     * @param productId {String} Issue Tracker product 
     */
    constructor(subject, description, productId) { 
        
        IssueRequestData.initialize(this, subject, description, productId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subject, description, productId) { 
        obj['subject'] = subject;
        obj['description'] = description;
        obj['productId'] = productId;
    }

    /**
     * Constructs a <code>IssueRequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueRequestData} obj Optional instance to populate.
     * @return {module:model/IssueRequestData} The populated <code>IssueRequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueRequestData();

            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('isCritical')) {
                obj['isCritical'] = ApiClient.convertToType(data['isCritical'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * subject for new Issue Tracker issue
 * @member {String} subject
 */
IssueRequestData.prototype['subject'] = undefined;

/**
 * Comprehensive description of the issue, including any problems you've observed or any specific changes you'd like to request.
 * @member {String} description
 */
IssueRequestData.prototype['description'] = undefined;

/**
 * Issue Tracker product 
 * @member {String} productId
 */
IssueRequestData.prototype['productId'] = undefined;

/**
 * category of Factset Product. 
 * @member {String} categoryId
 */
IssueRequestData.prototype['categoryId'] = undefined;

/**
 * severity of issue tracker ticket is critical or not
 * @member {Boolean} isCritical
 */
IssueRequestData.prototype['isCritical'] = undefined;






export default IssueRequestData;

