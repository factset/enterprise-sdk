/**
 * Documents Distributor - Documents API
 * Documents APIs that provide filings such as Global Filings and XML files such as StreetAccount    Global Filings API provides the capability to search and download filings documents from various exchanges around the world. This API will provide access to the full history and the ability to search by date and dataset(source). It does not provide real-time updates to the filings documents. Filings providers currently include EDGAR       Note: The real-time updates to the filing documents will be available within week to ten days and per request able to query up to 8 days of data               StreetAccount XML API provides access to historical StreetAccount (SA) news. SA provides a summary for various corporate and market news written by journalist with background in financial markets.    The API delivers SA stories in XML format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files.      This API only supports adhoc requests to retrieve historical files and does not support real-time files and if require real-time push should consider the other three methods (pushed via SFTP, to QNT account, or users Azure Storage)   Both historical and real-time Street Account news is also delivered via SFTP, to users QNT account, or users Azure Storage.  Files delivered contain both metadata and content body in each file. This eliminates the need to make multiple requests through multiple services to get all the information.  News API provides access to historical news. This provides a summary for various corporate and market news written by journalist with background in financial markets.  The API delivers  stories in different format based on user-specified date input parameters. When the API request is completed, output files will be made available back to the users through a secure URL. This API has three endpoints (1) Request Files (2) Check Status (3) Get Files    
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FilingsFiles from '../model/FilingsFiles';
import Status from '../model/Status';

/**
* GlobalFilingsAPI service.
* @module api/GlobalFilingsAPIApi
*/
export default class GlobalFilingsAPIApi {

    /**
    * Constructs a new GlobalFilingsAPIApi. 
    * @alias module:api/GlobalFilingsAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve filings within FactSet coverage
     * Parameters can be used to get the filings
     * @param {module:model/String} dataset This parameter filters the results based on the dataset of the filings documents.
     * @param {Date} startDate The earliest date the API should fetch for. Dates can be YYYY-MM-DD format
     * @param {Date} endDate The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FilingsFiles>} and HTTP response
     */
    globalFilingsV1ListFilesGetWithHttpInfo(dataset, startDate, endDate) {
      let postBody = null;
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling globalFilingsV1ListFilesGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling globalFilingsV1ListFilesGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling globalFilingsV1ListFilesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'dataset': dataset,
        'startDate': startDate,
        'endDate': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [FilingsFiles];

      return this.apiClient.callApi(
        '/global-filings/v1/list-files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve filings within FactSet coverage
     * Parameters can be used to get the filings
     * @param {module:model/String} dataset This parameter filters the results based on the dataset of the filings documents.
     * @param {Date} startDate The earliest date the API should fetch for. Dates can be YYYY-MM-DD format
     * @param {Date} endDate The date after upto eight days of the earliest date given the API should fetch for. Dates can be YYYY-MM-DD format
     * @return { Promise.< Array.<module:model/FilingsFiles> > } a Promise, with data of type {@link Array.<module:model/FilingsFiles> }
     */
    globalFilingsV1ListFilesGet(dataset, startDate, endDate) {
      return this.globalFilingsV1ListFilesGetWithHttpInfo(dataset, startDate, endDate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





