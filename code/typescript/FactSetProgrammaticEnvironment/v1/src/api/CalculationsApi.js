/**
 * FPE API
 * FactSet Programmatic Environment (FPE) API is an API for users to interact with FPE programmatically, streamlining path from research to production.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Calculation from '../model/Calculation';
import CalculationStatus from '../model/CalculationStatus';

/**
* Calculations service.
* @module api/CalculationsApi
*/
export default class CalculationsApi {

    /**
    * Constructs a new CalculationsApi. 
    * @alias module:api/CalculationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Starts a new script calculation
     * This endpoint takes a python script and starts executing it within FPE
     * @param {Object} opts Optional parameters
     * @param {module:model/Calculation} opts.calculation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationStatus} and HTTP response
     */
    createCalculationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['calculation'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CalculationStatus;

      return this.apiClient.callApi(
        '/calculations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Starts a new script calculation
     * This endpoint takes a python script and starts executing it within FPE
     * @param {Object} opts Optional parameters
     * @param {module:model/Calculation} opts.calculation 
     * @return { Promise.< module:model/CalculationStatus > } a Promise, with data of type {@link module:model/CalculationStatus }
     */
    createCalculations(opts) {
      return this.createCalculationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get calculation status by id
     * This is the endpoint to check on the progress of a previous calculation request.
     * @param {String} id From url, provided by location header or response body in the calculation start endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CalculationStatus} and HTTP response
     */
    getCalculationsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CalculationStatus;

      return this.apiClient.callApi(
        '/calculations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get calculation status by id
     * This is the endpoint to check on the progress of a previous calculation request.
     * @param {String} id From url, provided by location header or response body in the calculation start endpoint
     * @return { Promise.< module:model/CalculationStatus > } a Promise, with data of type {@link module:model/CalculationStatus }
     */
    getCalculations(id) {
      return this.getCalculationsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get calculation log for a specific calculation
     * This endpoint returns the log from the calculation.
     * @param {String} id From url, provided by location header or response body in the calculation start endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getCalculationsLogWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationsLog");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['text/plain'];


      let returnType = File;

      return this.apiClient.callApi(
        '/calculations/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get calculation log for a specific calculation
     * This endpoint returns the log from the calculation.
     * @param {String} id From url, provided by location header or response body in the calculation start endpoint
     * @return { Promise.< File > } a Promise, with data of type {@link File }
     */
    getCalculationsLog(id) {
      return this.getCalculationsLogWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get calculation output for a specific calculation
     * This endpoint returns the specified output from the calculation.
     * @param {String} id From url, provided by location header or response body in the calculation start endpoint
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    getCalculationsOutputWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCalculationsOutput");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['*'];


      let returnType = File;

      return this.apiClient.callApi(
        '/calculations/{id}/output', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get calculation output for a specific calculation
     * This endpoint returns the specified output from the calculation.
     * @param {String} id From url, provided by location header or response body in the calculation start endpoint
     * @return { Promise.< File > } a Promise, with data of type {@link File }
     */
    getCalculationsOutput(id) {
      return this.getCalculationsOutputWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





