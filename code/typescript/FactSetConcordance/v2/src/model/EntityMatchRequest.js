/**
 * FactSet Concordance API
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request. With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityMatchRequestInput from './EntityMatchRequestInput';

/**
 * The EntityMatchRequest model module.
 * @module model/EntityMatchRequest
 */
class EntityMatchRequest {
    /**
     * Constructs a new <code>EntityMatchRequest</code>.
     * Request object for a requesting multiple Entity Matches.
     * @alias module:model/EntityMatchRequest
     * @param input {Array.<module:model/EntityMatchRequestInput>} 
     */
    constructor(input) { 
        
        EntityMatchRequest.initialize(this, input);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, input) { 
        obj['input'] = input;
    }

    /**
     * Constructs a <code>EntityMatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityMatchRequest} obj Optional instance to populate.
     * @return {module:model/EntityMatchRequest} The populated <code>EntityMatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityMatchRequest();

            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], [EntityMatchRequestInput]);
            }
            if (data.hasOwnProperty('includeEntityType')) {
                obj['includeEntityType'] = ApiClient.convertToType(data['includeEntityType'], ['String']);
            }
            if (data.hasOwnProperty('excludeEntityType')) {
                obj['excludeEntityType'] = ApiClient.convertToType(data['excludeEntityType'], ['String']);
            }
            if (data.hasOwnProperty('candidatesCount')) {
                obj['candidatesCount'] = ApiClient.convertToType(data['candidatesCount'], 'Number');
            }
            if (data.hasOwnProperty('includeEntitySubType')) {
                obj['includeEntitySubType'] = ApiClient.convertToType(data['includeEntitySubType'], ['String']);
            }
            if (data.hasOwnProperty('excludeEntitySubType')) {
                obj['excludeEntitySubType'] = ApiClient.convertToType(data['excludeEntitySubType'], ['String']);
            }
            if (data.hasOwnProperty('includeParent')) {
                obj['includeParent'] = ApiClient.convertToType(data['includeParent'], 'Boolean');
            }
            if (data.hasOwnProperty('universeId')) {
                obj['universeId'] = ApiClient.convertToType(data['universeId'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/EntityMatchRequestInput>} input
 */
EntityMatchRequest.prototype['input'] = undefined;

/**
 * Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |---|---|---|---|   |ABS|Asset-Backed|MED|Broadcast Call Sign|   |BAS|Business Association (JP)|MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting|MUE|Mutual Fd-ETF|   |CMD|Commodity|MUT|Mutual Fd-Open End|   |COL|College/University|NPO|Non-Profit Organization|   |CUR|Currency|OPD|Operating Division|   |ESP|Emp Stk Ownership Plan|OTH|Other|   |EXT|Extinct|PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)|PRO|Real Property|   |FND|Foundation/Endowment|PUB|Public Company|   |FNS|Financing Subsidiary/SPE|PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx|PVT|Private Company|   |GOV|Government|SOV|Sovereign Wealth Fund|   |HED|Hedge Fund|SUB|Subsidiary|   |HOL|Holding Company|TRU|Trust/Trustee|   |IDX|Index|UMB|Umbrella Fund|   |VEN|Venture Capital Fund|JVT|Joint Venture| 
 * @member {Array.<String>} includeEntityType
 */
EntityMatchRequest.prototype['includeEntityType'] = undefined;

/**
 * Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Candidates with an entity type specified will not be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Type Code|Entity Type Description|Entity Type Code|Entity Type Description|   |---|---|---|---|   |ABS|Asset-Backed|MED|Broadcast Call Sign|   |BAS|Business Association (JP)|MUC|Mutual Fd-Closed End|   |CAC|Consolidated Accounting|MUE|Mutual Fd-ETF|   |CMD|Commodity|MUT|Mutual Fd-Open End|   |COL|College/University|NPO|Non-Profit Organization|   |CUR|Currency|OPD|Operating Division|   |ESP|Emp Stk Ownership Plan|OTH|Other|   |EXT|Extinct|PEF|Pension Fund|   |FAF|Family of Fds (VC/Pvt EQ)|PRO|Real Property|   |FND|Foundation/Endowment|PUB|Public Company|   |FNS|Financing Subsidiary/SPE|PVF|Private Eq Fd/Alt Invt|   |FRX|ForEx|PVT|Private Company|   |GOV|Government|SOV|Sovereign Wealth Fund|   |HED|Hedge Fund|SUB|Subsidiary|   |HOL|Holding Company|TRU|Trust/Trustee|   |IDX|Index|UMB|Umbrella Fund|   |VEN|Venture Capital Fund|JVT|Joint Venture| 
 * @member {Array.<String>} excludeEntityType
 */
EntityMatchRequest.prototype['excludeEntityType'] = undefined;

/**
 * Maximum number of candidates to be returned. Parent entities, when includeParent is true, are not included in this count. 
 * @member {Number} candidatesCount
 * @default 20
 */
EntityMatchRequest.prototype['candidatesCount'] = 20;

/**
 * Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |---|---|---|---|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking| 
 * @member {Array.<String>} includeEntitySubType
 */
EntityMatchRequest.prototype['includeEntitySubType'] = undefined;

/**
 * Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will not be considered for the final match result. Multiple types can be entered separated by commas.   |Entity Subtype Code|Entity Subtype Description|Entity Subtype Code|Entity Subtype Description|   |---|---|---|---|   |AR|Arbitrage|IC|Investment Company|   |BM|Bank Investment Division|IN|Insurance Company|   |BR|Broker|MF|Mutual Fund Manager|   |CP|Corporate|ML|Master Ltd Part|   |CU|Custodial|MM|Market Maker|   |FF|Fund of Funds Manager|PB|Private Banking/Wealth Mgmt|   |FH|Fund of Hedge Funds Manager|PF|Pension Fund Manager|   |FO|Foundation/Endowment Manager|PP|Real Estate Manager|   |FS|Fund Distributor|RE|Research Firm|   |FU|Fund|SB|Subsidiary Branch|   |FY|Family Office|ST|Stock Borrowing/Lending|   |GV|Govt (Fed/Local/Agency)|SV|Sovereign Wealth Manager|   |HF|Hedge Fund Manager|VC|Venture Capital/Pvt Equity|   |IA|Investment Adviser|   |IB|Investment Banking| 
 * @member {Array.<String>} excludeEntitySubType
 */
EntityMatchRequest.prototype['excludeEntitySubType'] = undefined;

/**
 * Flag to include parent entities in the list of candidates. This parameter does not influence the match result. 
 * @member {Boolean} includeParent
 * @default false
 */
EntityMatchRequest.prototype['includeParent'] = false;

/**
 * The universeId to save this set of inputs to 
 * @member {Number} universeId
 */
EntityMatchRequest.prototype['universeId'] = undefined;






export default EntityMatchRequest;

