/**
 * FactSet Concordance API
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request. With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Universe model module.
 * @module model/Universe
 */
class Universe {
    /**
     * Constructs a new <code>Universe</code>.
     * Metadata about a single universe
     * @alias module:model/Universe
     */
    constructor() { 
        
        Universe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Universe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Universe} obj Optional instance to populate.
     * @return {module:model/Universe} The populated <code>Universe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Universe();

            if (data.hasOwnProperty('universeId')) {
                obj['universeId'] = ApiClient.convertToType(data['universeId'], 'Number');
            }
            if (data.hasOwnProperty('universeName')) {
                obj['universeName'] = ApiClient.convertToType(data['universeName'], 'String');
            }
            if (data.hasOwnProperty('universeDescription')) {
                obj['universeDescription'] = ApiClient.convertToType(data['universeDescription'], 'String');
            }
            if (data.hasOwnProperty('universeType')) {
                obj['universeType'] = ApiClient.convertToType(data['universeType'], 'String');
            }
            if (data.hasOwnProperty('selfManaged')) {
                obj['selfManaged'] = ApiClient.convertToType(data['selfManaged'], 'Boolean');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = ApiClient.convertToType(data['updatedBy'], 'String');
            }
            if (data.hasOwnProperty('updatedOn')) {
                obj['updatedOn'] = ApiClient.convertToType(data['updatedOn'], 'Date');
            }
            if (data.hasOwnProperty('autoRemap')) {
                obj['autoRemap'] = ApiClient.convertToType(data['autoRemap'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * The universe identifier
 * @member {Number} universeId
 */
Universe.prototype['universeId'] = undefined;

/**
 * The user specified universe name
 * @member {String} universeName
 */
Universe.prototype['universeName'] = undefined;

/**
 * The user specified universe description
 * @member {String} universeDescription
 */
Universe.prototype['universeDescription'] = undefined;

/**
 * The user specified universe entity.
 * @member {String} universeType
 */
Universe.prototype['universeType'] = undefined;

/**
 * False if the universe is managed by FactSet Managed Service, True otherwise
 * @member {Boolean} selfManaged
 */
Universe.prototype['selfManaged'] = undefined;

/**
 * The user who created the universe
 * @member {String} createdBy
 */
Universe.prototype['createdBy'] = undefined;

/**
 * When the universe was created
 * @member {Date} createdOn
 */
Universe.prototype['createdOn'] = undefined;

/**
 * The user who most recently updated the universe metadata
 * @member {String} updatedBy
 */
Universe.prototype['updatedBy'] = undefined;

/**
 * When the universe metadata was most recently updated
 * @member {Date} updatedOn
 */
Universe.prototype['updatedOn'] = undefined;

/**
 * When `true`, allows automatic re-evaluation and overwriting of existing mappings in the universe when new metadata is submitted.
 * @member {Boolean} autoRemap
 */
Universe.prototype['autoRemap'] = undefined;






export default Universe;

