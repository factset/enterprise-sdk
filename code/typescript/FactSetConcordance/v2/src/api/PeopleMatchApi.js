/**
 * FactSet Concordance API
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request. With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PeopleMatchRequest from '../model/PeopleMatchRequest';
import PeopleMatchesResponse from '../model/PeopleMatchesResponse';

/**
* PeopleMatch service.
* @module api/PeopleMatchApi
*/
export default class PeopleMatchApi {

    /**
    * Constructs a new PeopleMatchApi. 
    * @alias module:api/PeopleMatchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Find potential people matches given a person's name.People matches can be retrieved using person's name and other attributes like firstname, middlename and lastname.
     * Finds the best people candidates matching the given name. <p>**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \"People Match - Bulk\" workflow to submit larger universes of names to be concorded via a file.</p><p> 
     * @param {String} entity Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.personName Name of Person to match.
     * @param {String} opts.salutation Title in person's name. This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.firstName First name of person. This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.middleName Middle name of person.This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.lastName Last name of person. This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.suffix Suffix in person's name. This parameter should not be provided when the person name is provided as the input.
     * @param {Number} opts.candidatesCount Maximum number of candidates to be returned. Parent entities, when includeParent is true, are not included in this count. <p>*minimum - 20*</p> <p>*maximum - 100*</p>
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PeopleMatchesResponse} and HTTP response
     */
    getPeopleMatchWithHttpInfo(entity, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling getPeopleMatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'personName': opts['personName'],
        'salutation': opts['salutation'],
        'firstName': opts['firstName'],
        'middleName': opts['middleName'],
        'lastName': opts['lastName'],
        'suffix': opts['suffix'],
        'entity': entity,
        'candidatesCount': opts['candidatesCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8', 'application/json'];


      let returnType = PeopleMatchesResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/people-match', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find potential people matches given a person's name.People matches can be retrieved using person's name and other attributes like firstname, middlename and lastname.
     * Finds the best people candidates matching the given name. <p>**Max of 1 Name permitted in a single GET request.** Use the POST method for /people-match to fetch up to 25 names. Otherwise, use the \"People Match - Bulk\" workflow to submit larger universes of names to be concorded via a file.</p><p> 
     * @param {String} entity Entity the person is associated with. It is used to filter the candidates before taking a match decision. Can be entity ID or name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.personName Name of Person to match.
     * @param {String} opts.salutation Title in person's name. This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.firstName First name of person. This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.middleName Middle name of person.This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.lastName Last name of person. This parameter should not be provided when the person name is provided as the input.
     * @param {String} opts.suffix Suffix in person's name. This parameter should not be provided when the person name is provided as the input.
     * @param {Number} opts.candidatesCount Maximum number of candidates to be returned. Parent entities, when includeParent is true, are not included in this count. <p>*minimum - 20*</p> <p>*maximum - 100*</p>
     * @return { Promise.< module:model/PeopleMatchesResponse > } a Promise, with data of type {@link module:model/PeopleMatchesResponse }
     */
    getPeopleMatch(entity, opts) {
      return this.getPeopleMatchWithHttpInfo(entity, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find potential people matches given a person's name.
     * Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a `universeId` is provided, any match for an input including a `clientId` will be saved to that universe. 
     * @param {module:model/PeopleMatchRequest} peopleMatchRequest A request to People match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PeopleMatchesResponse} and HTTP response
     */
    getPeopleMatchForListWithHttpInfo(peopleMatchRequest) {
      let postBody = peopleMatchRequest;
      // verify the required parameter 'peopleMatchRequest' is set
      if (peopleMatchRequest === undefined || peopleMatchRequest === null) {
        throw new Error("Missing the required parameter 'peopleMatchRequest' when calling getPeopleMatchForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8', 'application/json'];


      let returnType = PeopleMatchesResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/people-match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find potential people matches given a person's name.
     * Finds the best candidate people matching the given people names. Additional attributes can be supplied to narrow the search. If a `universeId` is provided, any match for an input including a `clientId` will be saved to that universe. 
     * @param {module:model/PeopleMatchRequest} peopleMatchRequest A request to People match.
     * @return { Promise.< module:model/PeopleMatchesResponse > } a Promise, with data of type {@link module:model/PeopleMatchesResponse }
     */
    getPeopleMatchForList(peopleMatchRequest) {
      return this.getPeopleMatchForListWithHttpInfo(peopleMatchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





