/**
 * FactSet Concordance API
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityDecisionsResponse from '../model/EntityDecisionsResponse';
import EntityTaskResponse from '../model/EntityTaskResponse';
import EntityTaskStatusResponse from '../model/EntityTaskStatusResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* EntityMatchBulk service.
* @module api/EntityMatchBulkApi
*/
export default class EntityMatchBulkApi {

    /**
    * Constructs a new EntityMatchBulkApi. 
    * @alias module:api/EntityMatchBulkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get the decisions of matches for the requested taskId.
     * Retrieves the `Decision` objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the `universeId` specified in the input file. 
     * @param {Number} taskId Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Starting row for records to return or rows to skip. (default to 0)
     * @param {Number} opts.limit Limits the number of records in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityDecisionsResponse} and HTTP response
     */
    getEntityDecisionsWithHttpInfo(taskId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getEntityDecisions");
      }

      let pathParams = {
      };
      let queryParams = {
        'taskId': taskId,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8', 'application/json'];


      let returnType = EntityDecisionsResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/entity-decisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the decisions of matches for the requested taskId.
     * Retrieves the `Decision` objects for an Entity Task (taskId). The decisions do not include all candidates, but rather the results of concording the requested list of names included in the input file. Mapped entities will include a FactSet Entity Identifier (-E). Results will be saved to the `universeId` specified in the input file. 
     * @param {Number} taskId Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Starting row for records to return or rows to skip. (default to 0)
     * @param {Number} opts.limit Limits the number of records in the response.
     * @return { Promise.< module:model/EntityDecisionsResponse > } a Promise, with data of type {@link module:model/EntityDecisionsResponse }
     */
    getEntityDecisions(taskId, opts) {
      return this.getEntityDecisionsWithHttpInfo(taskId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Input a file with names and attributes, creating a taskId.
     * Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a `taskId`. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.<p>This is the first step in the overall \"Bulk\" workflow. Use the /entity-task-status endpoint to check the status.</p> <p> A universeId must be included in request. If you do not have a universe created, reference the `/universe` endpoint. 
     * @param {Number} universeId The id of the universe that entities should be mapped to. Reference the `/universe` endpoint to create a universe, or view available universes via `/universes`.
     * @param {String} taskName User defined name for the task that will be used to name the output files.
     * @param {File} inputFile The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. 
     * @param {String} clientIdColumn Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\"clientId\\\". This clientId can be used to create custom mappings or references. 
     * @param {String} nameColumn Header name of the column in the input file that contains the Entity Name to be matched. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.countryColumn Header Name of the column in the input file that contains the country's ISO Code. This is used to filter the candidates before taking a match decision. 
     * @param {String} opts.urlColumn Header Name of the column in the input file that contains the Entity's URL. URL corresponding to the entity name that is used when evaluating candidates for a match. 
     * @param {String} opts.stateColumn Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported. 
     * @param {String} opts.priorityColumn Header Name of the column in the inputfile that contains the priority for the client id. 
     * @param {String} opts.bbgFigiColumn Header Name of the column in the input file for the type `Bloomberg Listing/Regional/Security ID`.
     * @param {String} opts.bbgTickerColumn Header Name of the column in the input file for the type Bloomberg `Listing and Regional Ticker`.
     * @param {String} opts.bicColumn Header Name of the column in the input file for the type BICCode, `bank indentification code`. 
     * @param {String} opts.cikColumn Header Name of the column in the input file for the type CIK, `Edgar Central Index Keys`
     * @param {String} opts.crdColumn Header Name of the column in the input file for the type CRD, `Central Registration Depository`.
     * @param {String} opts.cusipColumn Header Name of the column in the input file for the type `CUSIP`
     * @param {String} opts.dunsColumn Header Name of the column in the input file for the type DUNS, `Dun&Bradstreet`.
     * @param {String} opts.einColumn Header Name of the column in the input file for the type EIN, `EmployerIdentificationNumber`.
     * @param {String} opts.factsetIdColumn Header Name of the column in the input file for the type FactSet Identifier - `FactSet -E,-S,-R, -L Permanent Identifier`.
     * @param {String} opts.fitchColumn Header Name of the column in the input file for the type FitchCreditRating, `Fitch Ratings Identifier`.
     * @param {String} opts.gvkeyColumn Header Name of the column in the input file for the type GVKEY - `Compustat Global Company Key`.
     * @param {String} opts.gvkeyIidColumn Header Name of the column in the input file for the type GVKEY+IID - `Compustat Global Company Key and Issue Identifier`.
     * @param {String} opts.isinColumn Header Name of the column in the input file for the type `ISIN`.
     * @param {String} opts.jcnColumn Header Name of the column in the input file for the type JCN - `Japanese Corporate Number`.
     * @param {String} opts.leiColumn Header Name of the column in the input file for the type LEI, `LegalEntityIdentifier`.
     * @param {String} opts.lxidColumn Header Name of the column in the input file for the type LXID - `Markit Syndicated Loan Identifier`.
     * @param {String} opts.mdColumn Header Name of the column in the input file for the type MoodysIssuer, `Moody's Ratings Identifier`.
     * @param {String} opts.redCodeColumn Header Name of the column in the input file for the type Red Code - `Markit Reference Entity Identifier`.
     * @param {String} opts.rssdColumn Header Name of the column in the input file for the type RSSD, `FederalReserveRSSDIdentifier`.
     * @param {String} opts.sedolColumn Header Name of the column in the input file for the type `SEDOL`.
     * @param {String} opts.sprColumn Header Name of the column in the input file for the type S&PRating, `S&P Ratings Identifier`.
     * @param {String} opts.tickerColumn Header Name of the column in the input file for the type `PriceTicker`.
     * @param {String} opts.tickerExchangeColumn Header Name of the column in the input file for the type `TickerExchange`.
     * @param {String} opts.tickerRegionColumn Header Name of the column in the input file for the type `TickerRegion`.
     * @param {String} opts.ukchColumn Header Name of the column in the input file for the type `UKCompanyHouse`.
     * @param {String} opts.valorenColumn Header Name of the column in the input file for the type VALOR, `Valoren (\\\"Valor\\\") Identification`.
     * @param {String} opts.wknColumn Header Name of the column in the input file for the type WKN, `German Securities Identification`.
     * @param {Array.<String>} opts.includeEntityType Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.excludeEntityType Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.includeEntitySubType Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.excludeEntitySubType Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.additionalContextColumns Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityTaskResponse} and HTTP response
     */
    getEntityTaskForListWithHttpInfo(universeId, taskName, inputFile, clientIdColumn, nameColumn, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'universeId' is set
      if (universeId === undefined || universeId === null) {
        throw new Error("Missing the required parameter 'universeId' when calling getEntityTaskForList");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling getEntityTaskForList");
      }
      // verify the required parameter 'inputFile' is set
      if (inputFile === undefined || inputFile === null) {
        throw new Error("Missing the required parameter 'inputFile' when calling getEntityTaskForList");
      }
      // verify the required parameter 'clientIdColumn' is set
      if (clientIdColumn === undefined || clientIdColumn === null) {
        throw new Error("Missing the required parameter 'clientIdColumn' when calling getEntityTaskForList");
      }
      // verify the required parameter 'nameColumn' is set
      if (nameColumn === undefined || nameColumn === null) {
        throw new Error("Missing the required parameter 'nameColumn' when calling getEntityTaskForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'universeId': universeId,
        'taskName': taskName,
        'inputFile': inputFile,
        'clientIdColumn': clientIdColumn,
        'nameColumn': nameColumn,
        'countryColumn': opts['countryColumn'],
        'urlColumn': opts['urlColumn'],
        'stateColumn': opts['stateColumn'],
        'priorityColumn': opts['priorityColumn'],
        'bbgFigiColumn': opts['bbgFigiColumn'],
        'bbgTickerColumn': opts['bbgTickerColumn'],
        'bicColumn': opts['bicColumn'],
        'cikColumn': opts['cikColumn'],
        'crdColumn': opts['crdColumn'],
        'cusipColumn': opts['cusipColumn'],
        'dunsColumn': opts['dunsColumn'],
        'einColumn': opts['einColumn'],
        'factsetIdColumn': opts['factsetIdColumn'],
        'fitchColumn': opts['fitchColumn'],
        'gvkeyColumn': opts['gvkeyColumn'],
        'gvkeyIidColumn': opts['gvkeyIidColumn'],
        'isinColumn': opts['isinColumn'],
        'jcnColumn': opts['jcnColumn'],
        'leiColumn': opts['leiColumn'],
        'lxidColumn': opts['lxidColumn'],
        'mdColumn': opts['mdColumn'],
        'redCodeColumn': opts['redCodeColumn'],
        'rssdColumn': opts['rssdColumn'],
        'sedolColumn': opts['sedolColumn'],
        'sprColumn': opts['sprColumn'],
        'tickerColumn': opts['tickerColumn'],
        'tickerExchangeColumn': opts['tickerExchangeColumn'],
        'tickerRegionColumn': opts['tickerRegionColumn'],
        'ukchColumn': opts['ukchColumn'],
        'valorenColumn': opts['valorenColumn'],
        'wknColumn': opts['wknColumn'],
        'includeEntityType': this.apiClient.buildCollectionParam(opts['includeEntityType'], 'csv'),
        'excludeEntityType': this.apiClient.buildCollectionParam(opts['excludeEntityType'], 'csv'),
        'includeEntitySubType': this.apiClient.buildCollectionParam(opts['includeEntitySubType'], 'csv'),
        'excludeEntitySubType': this.apiClient.buildCollectionParam(opts['excludeEntitySubType'], 'csv'),
        'additionalContextColumns': this.apiClient.buildCollectionParam(opts['additionalContextColumns'], 'csv')
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json;charset=utf-8', 'application/json'];


      let returnType = EntityTaskResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/entity-task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Input a file with names and attributes, creating a taskId.
     * Upload a Comma-Separated List file (.csv / UTF-8 encoding) with a list of names and attributes and receive a `taskId`. [Concordance Sample Template File](https://my.apps.factset.com/oa/cms/oaAttachment/57096850-3834-49fd-9d35-d02d72bdb142/27317). The taskId is then used for reference in the *_/entity-task-status* and *_/entity-decisions* endpoints to receive results once the task is successful.<p>This is the first step in the overall \"Bulk\" workflow. Use the /entity-task-status endpoint to check the status.</p> <p> A universeId must be included in request. If you do not have a universe created, reference the `/universe` endpoint. 
     * @param {Number} universeId The id of the universe that entities should be mapped to. Reference the `/universe` endpoint to create a universe, or view available universes via `/universes`.
     * @param {String} taskName User defined name for the task that will be used to name the output files.
     * @param {File} inputFile The UTF-8 encoded CSV File containing the entity names to be concorded to a FactSet Entity Identifier. The files first row **MUST** include headers as defined in the *Column parameters. Be mindful of casing and spacing in column headers. The input file is posted as a file object in the form. For this reason, the mime type of this post request must be multipart/form-data. 
     * @param {String} clientIdColumn Header Name of the column in the input file that contains a unique identifier supplied by the user referred to as a \\\"clientId\\\". This clientId can be used to create custom mappings or references. 
     * @param {String} nameColumn Header name of the column in the input file that contains the Entity Name to be matched. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.countryColumn Header Name of the column in the input file that contains the country's ISO Code. This is used to filter the candidates before taking a match decision. 
     * @param {String} opts.urlColumn Header Name of the column in the input file that contains the Entity's URL. URL corresponding to the entity name that is used when evaluating candidates for a match. 
     * @param {String} opts.stateColumn Header Name of the column in the input file that contains the two letter State Code of the state or province where the Entity is located. Currently, only US state codes are supported. 
     * @param {String} opts.priorityColumn Header Name of the column in the inputfile that contains the priority for the client id. 
     * @param {String} opts.bbgFigiColumn Header Name of the column in the input file for the type `Bloomberg Listing/Regional/Security ID`.
     * @param {String} opts.bbgTickerColumn Header Name of the column in the input file for the type Bloomberg `Listing and Regional Ticker`.
     * @param {String} opts.bicColumn Header Name of the column in the input file for the type BICCode, `bank indentification code`. 
     * @param {String} opts.cikColumn Header Name of the column in the input file for the type CIK, `Edgar Central Index Keys`
     * @param {String} opts.crdColumn Header Name of the column in the input file for the type CRD, `Central Registration Depository`.
     * @param {String} opts.cusipColumn Header Name of the column in the input file for the type `CUSIP`
     * @param {String} opts.dunsColumn Header Name of the column in the input file for the type DUNS, `Dun&Bradstreet`.
     * @param {String} opts.einColumn Header Name of the column in the input file for the type EIN, `EmployerIdentificationNumber`.
     * @param {String} opts.factsetIdColumn Header Name of the column in the input file for the type FactSet Identifier - `FactSet -E,-S,-R, -L Permanent Identifier`.
     * @param {String} opts.fitchColumn Header Name of the column in the input file for the type FitchCreditRating, `Fitch Ratings Identifier`.
     * @param {String} opts.gvkeyColumn Header Name of the column in the input file for the type GVKEY - `Compustat Global Company Key`.
     * @param {String} opts.gvkeyIidColumn Header Name of the column in the input file for the type GVKEY+IID - `Compustat Global Company Key and Issue Identifier`.
     * @param {String} opts.isinColumn Header Name of the column in the input file for the type `ISIN`.
     * @param {String} opts.jcnColumn Header Name of the column in the input file for the type JCN - `Japanese Corporate Number`.
     * @param {String} opts.leiColumn Header Name of the column in the input file for the type LEI, `LegalEntityIdentifier`.
     * @param {String} opts.lxidColumn Header Name of the column in the input file for the type LXID - `Markit Syndicated Loan Identifier`.
     * @param {String} opts.mdColumn Header Name of the column in the input file for the type MoodysIssuer, `Moody's Ratings Identifier`.
     * @param {String} opts.redCodeColumn Header Name of the column in the input file for the type Red Code - `Markit Reference Entity Identifier`.
     * @param {String} opts.rssdColumn Header Name of the column in the input file for the type RSSD, `FederalReserveRSSDIdentifier`.
     * @param {String} opts.sedolColumn Header Name of the column in the input file for the type `SEDOL`.
     * @param {String} opts.sprColumn Header Name of the column in the input file for the type S&PRating, `S&P Ratings Identifier`.
     * @param {String} opts.tickerColumn Header Name of the column in the input file for the type `PriceTicker`.
     * @param {String} opts.tickerExchangeColumn Header Name of the column in the input file for the type `TickerExchange`.
     * @param {String} opts.tickerRegionColumn Header Name of the column in the input file for the type `TickerRegion`.
     * @param {String} opts.ukchColumn Header Name of the column in the input file for the type `UKCompanyHouse`.
     * @param {String} opts.valorenColumn Header Name of the column in the input file for the type VALOR, `Valoren (\\\"Valor\\\") Identification`.
     * @param {String} opts.wknColumn Header Name of the column in the input file for the type WKN, `German Securities Identification`.
     * @param {Array.<String>} opts.includeEntityType Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Only candidates with an entity type specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.excludeEntityType Three-character FactSet entity type code used to filter candidates in order to determine the final match result. Entities with these types will be excluded from the decisions. It is a global option used to filter the candidates before taking a match decision. Candidates with an entity type specified will *not* be considered for the final match result. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.includeEntitySubType Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Only candidates with an entity subtype specified will be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.excludeEntitySubType Two-character FactSet entity subtype code used to filter candidates in order to determine the final match result. Candidates with an entity subtype specified will *not* be considered for the final match result. Multiple types can be entered separated by commas. **Do not include within `inputFile`.** 
     * @param {Array.<String>} opts.additionalContextColumns Comma separated list of any additional column names in the input file.  To be used by Managed Service for any unmapped records. 
     * @return { Promise.< module:model/EntityTaskResponse > } a Promise, with data of type {@link module:model/EntityTaskResponse }
     */
    getEntityTaskForList(universeId, taskName, inputFile, clientIdColumn, nameColumn, opts) {
      return this.getEntityTaskForListWithHttpInfo(universeId, taskName, inputFile, clientIdColumn, nameColumn, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the status of the requested taskId or all tasks for a User
     * Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.<p>Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.taskId Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.
     * @param {Number} opts.offset Starting row for records to return or rows to skip. (default to 0)
     * @param {Number} opts.limit Limits the number of records in the response.
     * @param {Array.<module:model/String>} opts.status Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityTaskStatusResponse} and HTTP response
     */
    getEntityTaskStatusWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'taskId': opts['taskId'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8', 'application/json'];


      let returnType = EntityTaskStatusResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/entity-task-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the status of the requested taskId or all tasks for a User
     * Pulls the **status** for ALL the Entity Tasks submitted by a client within the last 30 days, and related details such as task duration and decision rates. Specific Tasks can also be retrieved by using the _taskId_ parameter.<p>Status types include -   * PENDING - The task has not yet started.   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.taskId Name of the column for the type Concordance Task Identifier. The taskId is created in response from the /entity-task endpoint.
     * @param {Number} opts.offset Starting row for records to return or rows to skip. (default to 0)
     * @param {Number} opts.limit Limits the number of records in the response.
     * @param {Array.<module:model/String>} opts.status Filter on the status of the Concordance Tasks. Default is no filter.   * PENDING - The task has not yet started   * IN_PROGRESS - The task is submitted and decisions are in progress.   * SUCCESS - The task was successful! Move to the /entity-decisions endpoint to retrieve decisions.   * FAILURE - The task failed. Reach out to FactSet Support for assistance.   * BAD_REQUEST - The task creation was unsuccesfull. Typically occurs with an incorrect input file format or column headers.   * ABORTED - The task was aborted. 
     * @return { Promise.< module:model/EntityTaskStatusResponse > } a Promise, with data of type {@link module:model/EntityTaskStatusResponse }
     */
    getEntityTaskStatus(opts) {
      return this.getEntityTaskStatusWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





