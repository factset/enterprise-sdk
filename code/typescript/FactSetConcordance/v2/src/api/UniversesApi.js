/**
 * FactSet Concordance API
 *   The FactSet Concordance API enables Application Developers and Data Scientists to programmatically discover the FactSet Identifier for a specific Entity or Person based on attributes, such as name, URL, and location.FactSet Identifiers are mapped to industry-standard identifiers, as well as to a comprehensive set of reference data and unique content, to enhance the ability to quickly connect content sets.<p>     Using the submitted attributes, the FactSet Concordance API leverages FactSetâ€™s extensive Entity Master, People, and Symbology databases to return potential candidate matches and a proposed match. The result is a concorded FactSet Identifier that can then be used as input throughout FactSet's expanding catalog of Content using our Content APIs or Standard DataFeeds.</p>    <b>There are two types of workflows supported in the API:</b>    <b>Entity & People Match:</b> The first workflow follows traditional API conventions in that a request is accepted and a response is returned synchronously enabling the concordance of up to 25 names in a single request. The response returns a list of 20 candidates as well as a proposed match.    <b>Entity & People Match - Bulk:</b> The second workflow allows you to input a large list of names within a .CSV file in a single request. With this workflow, a task is created for uploading a set of queries. Once the task has completed, the client retrieves the concordance results through the /entity-decisions or /people-decisions endpoint. Note that in the Bulk workflow, only the matches for the records are returned. Candidates are not included.    Once the service has provided a list of concorded FactSet Identifiers, you can then use our Entity Mappings and People Mappings endpoints to further review the universe of mapped identifiers or modify existing records. </p><p><b>Rate limit is set to 10 requests per second</b>.</p>    Methodology Guide link:   [https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d](https://open.factset.com/api/public/media/download/products/documents/8ca33e81-a7da-4d77-a8cf-2b3a2e868b3d)    
 *
 * The version of the OpenAPI document: 2.10.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUniverseRequest from '../model/CreateUniverseRequest';
import EntityUniverseStatisticsResponse from '../model/EntityUniverseStatisticsResponse';
import ErrorResponse from '../model/ErrorResponse';
import UniverseMetaResponse from '../model/UniverseMetaResponse';
import UniverseStatisticsResponse from '../model/UniverseStatisticsResponse';
import UniversesResponse from '../model/UniversesResponse';
import UpdateUniverseRequest from '../model/UpdateUniverseRequest';

/**
* Universes service.
* @module api/UniversesApi
*/
export default class UniversesApi {

    /**
    * Constructs a new UniversesApi. 
    * @alias module:api/UniversesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get statistics on a given universe
     * Get the total number of mappings in a universe, as well as the number of mapped, unmapped and indeterminate mappings 
     * @param {Number} universeId Universe identifier. *To create a universe, use the `/universe' endpoint.*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityUniverseStatisticsResponse} and HTTP response
     */
    getEntityUniverseStatisticsWithHttpInfo(universeId) {
      let postBody = null;
      // verify the required parameter 'universeId' is set
      if (universeId === undefined || universeId === null) {
        throw new Error("Missing the required parameter 'universeId' when calling getEntityUniverseStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'universeId': universeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EntityUniverseStatisticsResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/entity-universe-statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get statistics on a given universe
     * Get the total number of mappings in a universe, as well as the number of mapped, unmapped and indeterminate mappings 
     * @param {Number} universeId Universe identifier. *To create a universe, use the `/universe' endpoint.*
     * @return { Promise.< module:model/EntityUniverseStatisticsResponse > } a Promise, with data of type {@link module:model/EntityUniverseStatisticsResponse }
     */
    getEntityUniverseStatistics(universeId) {
      return this.getEntityUniverseStatisticsWithHttpInfo(universeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new universe
     * Create a new universe that is distinct from any existing universe 
     * @param {module:model/CreateUniverseRequest} createUniverseRequest A request to create a user's universe
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UniverseMetaResponse} and HTTP response
     */
    getUniverseForListWithHttpInfo(createUniverseRequest) {
      let postBody = createUniverseRequest;
      // verify the required parameter 'createUniverseRequest' is set
      if (createUniverseRequest === undefined || createUniverseRequest === null) {
        throw new Error("Missing the required parameter 'createUniverseRequest' when calling getUniverseForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = UniverseMetaResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/universe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new universe
     * Create a new universe that is distinct from any existing universe 
     * @param {module:model/CreateUniverseRequest} createUniverseRequest A request to create a user's universe
     * @return { Promise.< module:model/UniverseMetaResponse > } a Promise, with data of type {@link module:model/UniverseMetaResponse }
     */
    getUniverseForList(createUniverseRequest) {
      return this.getUniverseForListWithHttpInfo(createUniverseRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get statistics on a given universe
     * Get the total number of mappings in a universe, as well as the number of mapped, unmapped and indeterminate mappings 
     * @param {Number} universeId Universe identifier. *To create a universe, use the `/universe' endpoint.*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UniverseStatisticsResponse} and HTTP response
     */
    getUniverseStatisticsWithHttpInfo(universeId) {
      let postBody = null;
      // verify the required parameter 'universeId' is set
      if (universeId === undefined || universeId === null) {
        throw new Error("Missing the required parameter 'universeId' when calling getUniverseStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'universeId': universeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = UniverseStatisticsResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/universe-statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get statistics on a given universe
     * Get the total number of mappings in a universe, as well as the number of mapped, unmapped and indeterminate mappings 
     * @param {Number} universeId Universe identifier. *To create a universe, use the `/universe' endpoint.*
     * @return { Promise.< module:model/UniverseStatisticsResponse > } a Promise, with data of type {@link module:model/UniverseStatisticsResponse }
     */
    getUniverseStatistics(universeId) {
      return this.getUniverseStatisticsWithHttpInfo(universeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch metadata for universes
     * Fetch information on active universes for the current user. Optionally filter for a specific universe given a `universeId` 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.universeId Universe identifier. *To create a universe, use the `/universe' endpoint.*
     * @param {module:model/String} opts.universeType Universe Type.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UniversesResponse} and HTTP response
     */
    getUniversesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'universeId': opts['universeId'],
        'universeType': opts['universeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = UniversesResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/universes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch metadata for universes
     * Fetch information on active universes for the current user. Optionally filter for a specific universe given a `universeId` 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.universeId Universe identifier. *To create a universe, use the `/universe' endpoint.*
     * @param {module:model/String} opts.universeType Universe Type.
     * @return { Promise.< module:model/UniversesResponse > } a Promise, with data of type {@link module:model/UniversesResponse }
     */
    getUniverses(opts) {
      return this.getUniversesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update metadata for an existing universe
     * Update metadata for an existing universe 
     * @param {module:model/UpdateUniverseRequest} updateUniverseRequest A request to update a user's universe
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UniverseMetaResponse} and HTTP response
     */
    getUpdateUniverseForListWithHttpInfo(updateUniverseRequest) {
      let postBody = updateUniverseRequest;
      // verify the required parameter 'updateUniverseRequest' is set
      if (updateUniverseRequest === undefined || updateUniverseRequest === null) {
        throw new Error("Missing the required parameter 'updateUniverseRequest' when calling getUpdateUniverseForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = UniverseMetaResponse;

      return this.apiClient.callApi(
        '/factset-concordance/v2/update-universe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update metadata for an existing universe
     * Update metadata for an existing universe 
     * @param {module:model/UpdateUniverseRequest} updateUniverseRequest A request to update a user's universe
     * @return { Promise.< module:model/UniverseMetaResponse > } a Promise, with data of type {@link module:model/UniverseMetaResponse }
     */
    getUpdateUniverseForList(updateUniverseRequest) {
      return this.getUpdateUniverseForListWithHttpInfo(updateUniverseRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





