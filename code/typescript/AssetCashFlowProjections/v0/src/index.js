/**
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import ClientErrorResponse from './model/ClientErrorResponse';
import ClientScenariosUpload from './model/ClientScenariosUpload';
import ClientScenariosUploadParameters from './model/ClientScenariosUploadParameters';
import ClientUploadResponse from './model/ClientUploadResponse';
import ClientUploadResponseParameters from './model/ClientUploadResponseParameters';
import ErrorSource from './model/ErrorSource';
import Errors from './model/Errors';
import UploadStatusResponse from './model/UploadStatusResponse';
import UploadStatusResponseParameters from './model/UploadStatusResponseParameters';

import ScenariosApi from './api/ScenariosApi';


/**
* Asset Cash Flow Projections client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var assetcashflowprojections = require('index'); // See note below*.
* var xxxSvc = new assetcashflowprojections.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new assetcashflowprojections.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new assetcashflowprojections.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new assetcashflowprojections.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ClientErrorResponse model constructor.
     * @property {module:model/ClientErrorResponse}
     */
    ClientErrorResponse,

    /**
     * The ClientScenariosUpload model constructor.
     * @property {module:model/ClientScenariosUpload}
     */
    ClientScenariosUpload,

    /**
     * The ClientScenariosUploadParameters model constructor.
     * @property {module:model/ClientScenariosUploadParameters}
     */
    ClientScenariosUploadParameters,

    /**
     * The ClientUploadResponse model constructor.
     * @property {module:model/ClientUploadResponse}
     */
    ClientUploadResponse,

    /**
     * The ClientUploadResponseParameters model constructor.
     * @property {module:model/ClientUploadResponseParameters}
     */
    ClientUploadResponseParameters,

    /**
     * The ErrorSource model constructor.
     * @property {module:model/ErrorSource}
     */
    ErrorSource,

    /**
     * The Errors model constructor.
     * @property {module:model/Errors}
     */
    Errors,

    /**
     * The UploadStatusResponse model constructor.
     * @property {module:model/UploadStatusResponse}
     */
    UploadStatusResponse,

    /**
     * The UploadStatusResponseParameters model constructor.
     * @property {module:model/UploadStatusResponseParameters}
     */
    UploadStatusResponseParameters,

    /**
    * The ScenariosApi service constructor.
    * @property {module:api/ScenariosApi}
    */
    ScenariosApi,

};
