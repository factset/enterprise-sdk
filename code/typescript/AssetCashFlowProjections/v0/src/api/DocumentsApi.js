/**
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientErrorResponse from '../model/ClientErrorResponse';
import CreateNewDocument from '../model/CreateNewDocument';
import UpdateNewDocument from '../model/UpdateNewDocument';

/**
* Documents service.
* @module api/DocumentsApi
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve a document
     * Provides information about the document settings.
     * @param {String} documentPath Enter the path to existing document name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateNewDocument} and HTTP response
     */
    getDocumentDetailsWithHttpInfo(documentPath) {
      let postBody = null;
      // verify the required parameter 'documentPath' is set
      if (documentPath === undefined || documentPath === null) {
        throw new Error("Missing the required parameter 'documentPath' when calling getDocumentDetails");
      }

      let pathParams = {
        'documentPath': documentPath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = UpdateNewDocument;

      return this.apiClient.callApi(
        '/documents/{documentPath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a document
     * Provides information about the document settings.
     * @param {String} documentPath Enter the path to existing document name
     * @return { Promise.< module:model/UpdateNewDocument > } a Promise, with data of type {@link module:model/UpdateNewDocument }
     */
    getDocumentDetails(documentPath) {
      return this.getDocumentDetailsWithHttpInfo(documentPath)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new document based on existing document - Save as
     * This will create a new document based on existing one.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNewDocument} opts.createNewDocument 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postDocumentWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createNewDocument'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new document based on existing document - Save as
     * This will create a new document based on existing one.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNewDocument} opts.createNewDocument 
     * @return { Promise } a Promise
     */
    postDocument(opts) {
      return this.postDocumentWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update existing document - Save
     * This will update existing document.
     * @param {String} documentPath Enter the path to existing document name
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNewDocument} opts.updateNewDocument 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putDocumentWithHttpInfo(documentPath, opts) {
      opts = opts || {};
      let postBody = opts['updateNewDocument'];
      // verify the required parameter 'documentPath' is set
      if (documentPath === undefined || documentPath === null) {
        throw new Error("Missing the required parameter 'documentPath' when calling putDocument");
      }

      let pathParams = {
        'documentPath': documentPath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/documents/{documentPath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update existing document - Save
     * This will update existing document.
     * @param {String} documentPath Enter the path to existing document name
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNewDocument} opts.updateNewDocument 
     * @return { Promise } a Promise
     */
    putDocument(documentPath, opts) {
      return this.putDocumentWithHttpInfo(documentPath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





