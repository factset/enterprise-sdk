/**
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientErrorResponse from '../model/ClientErrorResponse';
import ClientScenariosUpload from '../model/ClientScenariosUpload';
import ClientUploadResponse from '../model/ClientUploadResponse';
import UploadStatusResponse from '../model/UploadStatusResponse';

/**
* Scenarios service.
* @module api/ScenariosApi
*/
export default class ScenariosApi {

    /**
    * Constructs a new ScenariosApi. 
    * @alias module:api/ScenariosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get scenarios upload status
     * This endpoint is used for getting the status of a file
     * @param {String} uploadId Check the status for a particular file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadStatusResponse} and HTTP response
     */
    getUploadStatusWithHttpInfo(uploadId) {
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling getUploadStatus");
      }

      let pathParams = {
        'uploadId': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = UploadStatusResponse;

      return this.apiClient.callApi(
        '/scenarios/{uploadId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get scenarios upload status
     * This endpoint is used for getting the status of a file
     * @param {String} uploadId Check the status for a particular file
     * @return { Promise.< module:model/UploadStatusResponse > } a Promise, with data of type {@link module:model/UploadStatusResponse }
     */
    getUploadStatus(uploadId) {
      return this.getUploadStatusWithHttpInfo(uploadId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload actuarial scenarios
     * This endpoint is used for uploading asset cash flow scenarios
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientScenariosUpload} opts.clientScenariosUpload Request body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClientUploadResponse} and HTTP response
     */
    uploadScenariosWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['clientScenariosUpload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ClientUploadResponse;

      return this.apiClient.callApi(
        '/scenarios/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload actuarial scenarios
     * This endpoint is used for uploading asset cash flow scenarios
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientScenariosUpload} opts.clientScenariosUpload Request body
     * @return { Promise.< module:model/ClientUploadResponse > } a Promise, with data of type {@link module:model/ClientUploadResponse }
     */
    uploadScenarios(opts) {
      return this.uploadScenariosWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





