/**
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadStatusResponseParameters model module.
 * @module model/UploadStatusResponseParameters
 */
class UploadStatusResponseParameters {
    /**
     * Constructs a new <code>UploadStatusResponseParameters</code>.
     * Uploaded status response parameters
     * @alias module:model/UploadStatusResponseParameters
     */
    constructor() { 
        
        UploadStatusResponseParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadStatusResponseParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadStatusResponseParameters} obj Optional instance to populate.
     * @return {module:model/UploadStatusResponseParameters} The populated <code>UploadStatusResponseParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadStatusResponseParameters();

            if (data.hasOwnProperty('uploadId')) {
                obj['uploadId'] = ApiClient.convertToType(data['uploadId'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('asOfDate')) {
                obj['asOfDate'] = ApiClient.convertToType(data['asOfDate'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('acfpStatus')) {
                obj['acfpStatus'] = ApiClient.convertToType(data['acfpStatus'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('uploadDateTime')) {
                obj['uploadDateTime'] = ApiClient.convertToType(data['uploadDateTime'], 'Date');
            }
            if (data.hasOwnProperty('numberOfScenarios')) {
                obj['numberOfScenarios'] = ApiClient.convertToType(data['numberOfScenarios'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Unique Identifier for the file
 * @member {String} uploadId
 */
UploadStatusResponseParameters.prototype['uploadId'] = undefined;

/**
 * Actuarial Scenario file name
 * @member {String} fileName
 */
UploadStatusResponseParameters.prototype['fileName'] = undefined;

/**
 * Scenario As of Date
 * @member {Date} asOfDate
 */
UploadStatusResponseParameters.prototype['asOfDate'] = undefined;

/**
 * Actuarial Scenario File Type
 * @member {module:model/UploadStatusResponseParameters.TypeEnum} type
 */
UploadStatusResponseParameters.prototype['type'] = undefined;

/**
 * The ACFP status of the uploaded file, can be one of the following: - `pending`: File validation is pending. - `validating`:File is being validated. - `error`: File failed validation.  - `replicating`: File is being copied. - `good`: File is successfully validated. - `preparing`: File is being parsed.  - `uninitiated`: File upload is not initiated.
 * @member {module:model/UploadStatusResponseParameters.AcfpStatusEnum} acfpStatus
 */
UploadStatusResponseParameters.prototype['acfpStatus'] = undefined;

/**
 * The status of the uploaded file, can be one of the following:
 * @member {module:model/UploadStatusResponseParameters.StatusEnum} status
 */
UploadStatusResponseParameters.prototype['status'] = undefined;

/**
 * The time stamp when the file is uploaded
 * @member {Date} uploadDateTime
 */
UploadStatusResponseParameters.prototype['uploadDateTime'] = undefined;

/**
 * Number of scenarios that are within a scenario file
 * @member {Number} numberOfScenarios
 */
UploadStatusResponseParameters.prototype['numberOfScenarios'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
UploadStatusResponseParameters['TypeEnum'] = {

    /**
     * value: "Tillinghast Actuarial Software (TAS)"
     * @const
     */
    "Tillinghast Actuarial Software (TAS)": "Tillinghast Actuarial Software (TAS)",

    /**
     * value: "Milliman's MG-ALFA (ALFA)"
     * @const
     */
    "Milliman&#39;s MG-ALFA (ALFA)": "Milliman's MG-ALFA (ALFA)",

    /**
     * value: "Sungard iWorks Prophet"
     * @const
     */
    "Sungard iWorks Prophet": "Sungard iWorks Prophet",

    /**
     * value: "FactSet"
     * @const
     */
    "FactSet": "FactSet"
};


/**
 * Allowed values for the <code>acfpStatus</code> property.
 * @enum {String}
 * @readonly
 */
UploadStatusResponseParameters['AcfpStatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "validating"
     * @const
     */
    "validating": "validating",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "replicating"
     * @const
     */
    "replicating": "replicating",

    /**
     * value: "good"
     * @const
     */
    "good": "good",

    /**
     * value: "preparing"
     * @const
     */
    "preparing": "preparing",

    /**
     * value: "uninitiated"
     * @const
     */
    "uninitiated": "uninitiated"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UploadStatusResponseParameters['StatusEnum'] = {

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "executing"
     * @const
     */
    "executing": "executing",

    /**
     * value: "created"
     * @const
     */
    "created": "created"
};



export default UploadStatusResponseParameters;

