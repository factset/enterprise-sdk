/**
 * Asset Cash Flow Projections API
 * Allow clients to upload scenario files through APIs.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateNewDocumentRoot model module.
 * @module model/CreateNewDocumentRoot
 */
class CreateNewDocumentRoot {
    /**
     * Constructs a new <code>CreateNewDocumentRoot</code>.
     * @alias module:model/CreateNewDocumentRoot
     * @param existingDocumentName {String} Existing document name
     * @param newDocumentName {String} New document name
     */
    constructor(existingDocumentName, newDocumentName) { 
        
        CreateNewDocumentRoot.initialize(this, existingDocumentName, newDocumentName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, existingDocumentName, newDocumentName) { 
        obj['existingDocumentName'] = existingDocumentName;
        obj['newDocumentName'] = newDocumentName;
    }

    /**
     * Constructs a <code>CreateNewDocumentRoot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNewDocumentRoot} obj Optional instance to populate.
     * @return {module:model/CreateNewDocumentRoot} The populated <code>CreateNewDocumentRoot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateNewDocumentRoot();

            if (data.hasOwnProperty('asOfDate')) {
                obj['asOfDate'] = ApiClient.convertToType(data['asOfDate'], 'Date');
            }
            if (data.hasOwnProperty('existingDocumentName')) {
                obj['existingDocumentName'] = ApiClient.convertToType(data['existingDocumentName'], 'String');
            }
            if (data.hasOwnProperty('newDocumentName')) {
                obj['newDocumentName'] = ApiClient.convertToType(data['newDocumentName'], 'String');
            }
            if (data.hasOwnProperty('portfolios')) {
                obj['portfolios'] = ApiClient.convertToType(data['portfolios'], ['String']);
            }
            if (data.hasOwnProperty('scenarios')) {
                obj['scenarios'] = ApiClient.convertToType(data['scenarios'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * As of Date should be in YYYY-MM-DD format.
 * @member {Date} asOfDate
 */
CreateNewDocumentRoot.prototype['asOfDate'] = undefined;

/**
 * Existing document name
 * @member {String} existingDocumentName
 */
CreateNewDocumentRoot.prototype['existingDocumentName'] = undefined;

/**
 * New document name
 * @member {String} newDocumentName
 */
CreateNewDocumentRoot.prototype['newDocumentName'] = undefined;

/**
 * Portfolios
 * @member {Array.<String>} portfolios
 */
CreateNewDocumentRoot.prototype['portfolios'] = undefined;

/**
 * Scenarios - Actuarial Scenarios input requires extension whereas Fixed Income Scenario Editor Scenarios wonâ€™t have any extension 
 * @member {Array.<String>} scenarios
 */
CreateNewDocumentRoot.prototype['scenarios'] = undefined;






export default CreateNewDocumentRoot;

