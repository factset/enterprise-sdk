/**
 * FactSet Estimates
 * With global coverage since 1999, the FactSet Estimates API provides you with comprehensive estimates and statistics on a wide variety of financial statement items as well as industry-specific metrics. The universe is comprised of over 19,000 active companies across 90+ countries with the following types of data included:   - **Consensus** - **Detail** - **Ratings** - **Surprise** - **Segments** - **New Estimates and Ratings Reports Endpoints**  For clients seeking  curated and relevant financial data, the FactSet Estimates API now includes Estimates and Ratings Reports endpoints. These powerful endpoints are designed for easy integration and consumption, delivering a wide array of financial metrics, estimates, and critical statistics in a highly accessible format suitable for both mobile and web applications.   Whether you are an analyst, investor, or financial professional, the Estimates and Ratings Reports endpoints offer detailed and actionable financial insights that can support thorough analyses and strategic decision-making processes.   The Estimates and Ratings Reports endpoints are especially valuable for B2B2C  applications, empowering financial services firms, investment companies, and corporate finance teams to:   - **Elevate Client Engagement:** Enrich user experiences in client-facing applications with comprehensive and up-to-date financial metrics.  - **Build Custom Reporting Tools:** Create tailored dashboards and analytics tools that provide deep insights and foster better financial understanding.  By adopting the FactSet Estimates API with its enriched Estimates and Ratings Reports endpoints, businesses can streamline their financial data integration process, improve operational efficiency, and deliver superior financial insights to their clients and end-users.     <p>This API is rate-limited to 10 requests per second and 10 concurrent requests per user.</p>  **Download API Specification**        To programmatically download the FactSet Estimates API Specification file in .yaml format, utilize the link below. You must be authorized for this API to extract the specification. This specification can then be used for Codegen to create your own SDKs. You can also access it by selecting the \"Download Spec\" button beside the version information.      [https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml](https://api.factset.com/content/factset-estimates/v2/spec/swagger.yaml) 
 *
 * The version of the OpenAPI document: 2.6.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalystRatingResponse from '../model/AnalystRatingResponse';
import ErrorResponse from '../model/ErrorResponse';
import EstimateResponse from '../model/EstimateResponse';
import EstimateTypesResponse from '../model/EstimateTypesResponse';
import SurpriseHistoryResponse from '../model/SurpriseHistoryResponse';

/**
* EstimatesAndRatingsReports service.
* @module api/EstimatesAndRatingsReportsApi
*/
export default class EstimatesAndRatingsReportsApi {

    /**
    * Constructs a new EstimatesAndRatingsReportsApi. 
    * @alias module:api/EstimatesAndRatingsReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns a list of valid estimate types.
     * This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EstimateTypesResponse} and HTTP response
     */
    getEstimateTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EstimateTypesResponse;

      return this.apiClient.callApi(
        '/factset-estimates/v2/company-reports/estimate-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of valid estimate types.
     * This endpoint retrieves a list of valid estimate types that can be used in the /company-reports/forecast and /company-reports/surprise-history end points. 
     * @return { Promise.< module:model/EstimateTypesResponse > } a Promise, with data of type {@link module:model/EstimateTypesResponse }
     */
    getEstimateTypes() {
      return this.getEstimateTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns forecasted estimates.
     * This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day's closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
     * @param {String} id The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.
     * @param {String} estimateType The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.periodicity The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (default to 'ANN')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EstimateResponse} and HTTP response
     */
    getEstimatesWithHttpInfo(id, estimateType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEstimates");
      }
      // verify the required parameter 'estimateType' is set
      if (estimateType === undefined || estimateType === null) {
        throw new Error("Missing the required parameter 'estimateType' when calling getEstimates");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'estimateType': estimateType,
        'periodicity': opts['periodicity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EstimateResponse;

      return this.apiClient.callApi(
        '/factset-estimates/v2/company-reports/forecast', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns forecasted estimates.
     * This endpoint returns up to 4 years of forecasted consensus estimates made by analysts for various financial metrics such as EPS, Sales, and more.  **Note :**   Due to variations in methodology, with the workstation using intra-day prices and our API using the previous day's closing prices, there may be some minor differences in the values of FactSet Estimates Valuation Items. 
     * @param {String} id The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.
     * @param {String} estimateType The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.periodicity The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (default to 'ANN')
     * @return { Promise.< module:model/EstimateResponse > } a Promise, with data of type {@link module:model/EstimateResponse }
     */
    getEstimates(id, estimateType, opts) {
      return this.getEstimatesWithHttpInfo(id, estimateType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Surprise History
     * Returns surprise history for the given security
     * @param {String} id The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.
     * @param {String} estimateType The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.periodicity The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (default to 'ANN')
     * @param {Number} opts.paginationLimit Specifies the number of results to return per page. (default to 50)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurpriseHistoryResponse} and HTTP response
     */
    getSurpriseHistoryWithHttpInfo(id, estimateType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSurpriseHistory");
      }
      // verify the required parameter 'estimateType' is set
      if (estimateType === undefined || estimateType === null) {
        throw new Error("Missing the required parameter 'estimateType' when calling getSurpriseHistory");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'estimateType': estimateType,
        'periodicity': opts['periodicity'],
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SurpriseHistoryResponse;

      return this.apiClient.callApi(
        '/factset-estimates/v2/company-reports/surprise-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Surprise History
     * Returns surprise history for the given security
     * @param {String} id The requested security identifier. Accepted ID types include Market Ticker, SEDOL, ISIN, CUSIP, or FactSet Permanent Id.
     * @param {String} estimateType The requested estimate type. Please use /meta/estimate-types to find all allowed values for this parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.periodicity The periodicity for the estimates requested, allowing you to fetch Quarterly and Annual Estimates.   * **ANN** - Annual   * **QTR** - Quarterly  (default to 'ANN')
     * @param {Number} opts.paginationLimit Specifies the number of results to return per page. (default to 50)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @return { Promise.< module:model/SurpriseHistoryResponse > } a Promise, with data of type {@link module:model/SurpriseHistoryResponse }
     */
    getSurpriseHistory(id, estimateType, opts) {
      return this.getSurpriseHistoryWithHttpInfo(id, estimateType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





