/**
 * Security Explanation API
 * Allow clients to use Security Explanation through APIs.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientErrorResponse from '../model/ClientErrorResponse';
import ExplanationStatusRoot from '../model/ExplanationStatusRoot';
import SecurityExplanationResponseRoot from '../model/SecurityExplanationResponseRoot';

/**
* SecurityExplanation service.
* @module api/SecurityExplanationApi
*/
export default class SecurityExplanationApi {

    /**
    * Constructs a new SecurityExplanationApi. 
    * @alias module:api/SecurityExplanationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get explanation status by id
     * Use this endpoint to fetch the status of the given explanation ID.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExplanationStatusRoot} and HTTP response
     */
    checkExplanationStatusWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkExplanationStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ExplanationStatusRoot;

      return this.apiClient.callApi(
        '/explanation/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get explanation status by id
     * Use this endpoint to fetch the status of the given explanation ID.
     * @param {String} id id
     * @return { Promise.< module:model/ExplanationStatusRoot > } a Promise, with data of type {@link module:model/ExplanationStatusRoot }
     */
    checkExplanationStatus(id) {
      return this.checkExplanationStatusWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get explanation results by id
     * Use this endpoint to fetch the results of the given explanation ID.
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecurityExplanationResponseRoot} and HTTP response
     */
    fetchExplanationResultsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchExplanationResults");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];

      let returnType = FetchExplanationResultsResponseWrapperTypeMap;
      
      return this.apiClient.callApi(
        '/explanation/{id}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get explanation results by id
     * Use this endpoint to fetch the results of the given explanation ID.
     * @param {String} id id
     * @return { Promise.< FetchExplanationResultsResponseWrapper > } a Promise, with data of type {@link FetchExplanationResultsResponseWrapper }
     */
    fetchExplanationResults(id) {
      return this.fetchExplanationResultsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request explanation
     * Use this endpoint to initiate a request to the LLM based on the required query parameters.
     * @param {String} id Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.
     * @param {Date} startDate 
     * @param {Date} endDate 
     * @param {Object} opts Optional parameters
     * @param {module:model/Boolean} opts.enableLinks  (default to true)
     * @param {module:model/String} opts.explanationStyle  (default to 'short')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExplanationStatusRoot} and HTTP response
     */
    getExplanationWithHttpInfo(id, startDate, endDate, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExplanation");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getExplanation");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getExplanation");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'startDate': startDate,
        'endDate': endDate,
        'enableLinks': opts['enableLinks'],
        'explanationStyle': opts['explanationStyle']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ExplanationStatusRoot;

      return this.apiClient.callApi(
        '/explanation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request explanation
     * Use this endpoint to initiate a request to the LLM based on the required query parameters.
     * @param {String} id Accepted ID types include Market Tickers, SEDOL, ISINs, CUSIPs, or FactSet Permanent Ids.
     * @param {Date} startDate 
     * @param {Date} endDate 
     * @param {Object} opts Optional parameters
     * @param {module:model/Boolean} opts.enableLinks  (default to true)
     * @param {module:model/String} opts.explanationStyle  (default to 'short')
     * @return { Promise.< module:model/ExplanationStatusRoot > } a Promise, with data of type {@link module:model/ExplanationStatusRoot }
     */
    getExplanation(id, startDate, endDate, opts) {
      return this.getExplanationWithHttpInfo(id, startDate, endDate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}


const FetchExplanationResultsResponseWrapperTypeMap = {
  200: SecurityExplanationResponseRoot,
  202: ExplanationStatusRoot,
  400: ClientErrorResponse,
  404: ClientErrorResponse,

  _createResponseWrapper(statusCode, response) {
    return new FetchExplanationResultsResponseWrapper(statusCode, response);
  }
};



/**
 * Wrapper to support GET /explanation/{id}/result returning different types
 * per status code.
 *
 * <p>
 * Responses:
 * <ul>
 *   <li>200 : {@code SecurityExplanationResponseRoot }<br>Expected response if explanation is generated.</li>
 * 
 *   <li>202 : {@code ExplanationStatusRoot }<br>Expected response, returns the poll ID with status.</li>
 * </ul>
 *
 * </p>
 * Example:
 * <pre>{@code
 * const response = ...;
 * switch (response.statusCode) {
 *   case 200:
 *     SecurityExplanationResponseRoot data200 = response.getResponse200();
 *     break;
 *   case 202:
 *     ExplanationStatusRoot data202 = response.getResponse202();
 *     break;
 *  }
 * }</pre>
 *
 * @alias module:FetchExplanationResultsResponseWrapper
 * @class
 */
export class FetchExplanationResultsResponseWrapper {

  /**
   * @param {number} statusCode
   * @param {*} response
   */
  constructor(statusCode, response) {
    /**
     * @type {number}
     */
    this.statusCode = statusCode;

    /**
     * @type {*}
     */
    this.response = response;
  }

  
  /**
   * @returns { SecurityExplanationResponseRoot }
   */
  getResponse200() {
    if (this.statusCode !== 200) {
      throw new Error("Invalid response getter called. getResponse200 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
  /**
   * @returns { ExplanationStatusRoot }
   */
  getResponse202() {
    if (this.statusCode !== 202) {
      throw new Error("Invalid response getter called. getResponse202 can't return a " + this.statusCode + " response");
    }

    return this.response;
  }
  
}


