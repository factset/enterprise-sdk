/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactDto from '../model/ContactDto';
import ContactEventDto from '../model/ContactEventDto';
import ContactRelationshipDto from '../model/ContactRelationshipDto';
import ContactSaveDto from '../model/ContactSaveDto';
import ContactSummaryDto from '../model/ContactSummaryDto';
import NewItemDto from '../model/NewItemDto';
import Operation from '../model/Operation';
import ProblemDetails from '../model/ProblemDetails';
import RecordPreviewDto from '../model/RecordPreviewDto';

/**
* Contacts service.
* @module api/ContactsApi
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:api/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a contact
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactSaveDto} opts.contactSaveDto contactSaveDto object to save
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewItemDto} and HTTP response
     */
    createContactWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['contactSaveDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = NewItemDto;

      return this.apiClient.callApi(
        '/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a contact
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactSaveDto} opts.contactSaveDto contactSaveDto object to save
     * @return { Promise.< module:model/NewItemDto > } a Promise, with data of type {@link module:model/NewItemDto }
     */
    createContact(opts) {
      return this.createContactWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a contact
     * @param {String} contactId contactId to delete associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteContactWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling deleteContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/contacts/{contactId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a contact
     * @param {String} contactId contactId to delete associated record
     * @return { Promise } a Promise
     */
    deleteContact(contactId) {
      return this.deleteContactWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all custom field and standard field details on a specific contact
     * @param {String} contactId contactId to get associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ContactDto} and HTTP response
     */
    getContactWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ContactDto;

      return this.apiClient.callApi(
        '/contacts/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all custom field and standard field details on a specific contact
     * @param {String} contactId contactId to get associated record
     * @return { Promise.< module:model/ContactDto > } a Promise, with data of type {@link module:model/ContactDto }
     */
    getContact(contactId) {
      return this.getContactWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a contact’s audit history
     * @param {String} contactId contactId to get associated records
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContactEventDto>} and HTTP response
     */
    getContactEventsWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContactEvents");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [ContactEventDto];

      return this.apiClient.callApi(
        '/contacts/{contactId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a contact’s audit history
     * @param {String} contactId contactId to get associated records
     * @return { Promise.< Array.<module:model/ContactEventDto> > } a Promise, with data of type {@link Array.<module:model/ContactEventDto> }
     */
    getContactEvents(contactId) {
      return this.getContactEventsWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the About field content for a specific contact
     * @param {String} contactId contactId of associated record
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    getContactNotesWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContactNotes");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = 'String';

      return this.apiClient.callApi(
        '/contacts/{contactId}/about', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the About field content for a specific contact
     * @param {String} contactId contactId of associated record
     * @return { Promise.< String > } a Promise, with data of type {@link String }
     */
    getContactNotes(contactId) {
      return this.getContactNotesWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all notes and meetings where a specific contact was tagged
     * @param {String} contactId contactId to get associated records
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/RecordPreviewDto>} and HTTP response
     */
    getContactRecordsWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContactRecords");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [RecordPreviewDto];

      return this.apiClient.callApi(
        '/contacts/{contactId}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all notes and meetings where a specific contact was tagged
     * @param {String} contactId contactId to get associated records
     * @return { Promise.< Array.<module:model/RecordPreviewDto> > } a Promise, with data of type {@link Array.<module:model/RecordPreviewDto> }
     */
    getContactRecords(contactId) {
      return this.getContactRecordsWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of a contact’s relationships
     * @param {String} contactId contactId to get associated records
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContactRelationshipDto>} and HTTP response
     */
    getContactRelationshipsWithHttpInfo(contactId) {
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getContactRelationships");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [ContactRelationshipDto];

      return this.apiClient.callApi(
        '/contacts/{contactId}/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of a contact’s relationships
     * @param {String} contactId contactId to get associated records
     * @return { Promise.< Array.<module:model/ContactRelationshipDto> > } a Promise, with data of type {@link Array.<module:model/ContactRelationshipDto> }
     */
    getContactRelationships(contactId) {
      return this.getContactRelationshipsWithHttpInfo(contactId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of all contacts in your group along with some of their standard field data
     * @param {Object} opts Optional parameters
     * @param {String} opts.fullName Filter results on fullName
     * @param {String} opts.emailAddress Filter results on emailAddress
     * @param {String} opts.identifier Filter results on identifier
     * @param {String} opts.employerName Filter results on employerName
     * @param {Boolean} opts.customFieldValues Includes custom field values in response if true (default to false)
     * @param {String} opts.search Filter results on the combination of fullName, emailAddress, identifier and employerName
     * @param {String} opts.sort 
     * @param {Boolean} opts.includeLastMeetingDate If true, returns when they were last tagged as an attendee in an IRN meeting (default to false)
     * @param {Number} opts.limit Restrict number of records returned (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ContactSummaryDto>} and HTTP response
     */
    getContactsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fullName': opts['fullName'],
        'emailAddress': opts['emailAddress'],
        'identifier': opts['identifier'],
        'employerName': opts['employerName'],
        'customFieldValues': opts['customFieldValues'],
        'search': opts['search'],
        'sort': opts['sort'],
        'includeLastMeetingDate': opts['includeLastMeetingDate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [ContactSummaryDto];

      return this.apiClient.callApi(
        '/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get list of all contacts in your group along with some of their standard field data
     * @param {Object} opts Optional parameters
     * @param {String} opts.fullName Filter results on fullName
     * @param {String} opts.emailAddress Filter results on emailAddress
     * @param {String} opts.identifier Filter results on identifier
     * @param {String} opts.employerName Filter results on employerName
     * @param {Boolean} opts.customFieldValues Includes custom field values in response if true (default to false)
     * @param {String} opts.search Filter results on the combination of fullName, emailAddress, identifier and employerName
     * @param {String} opts.sort 
     * @param {Boolean} opts.includeLastMeetingDate If true, returns when they were last tagged as an attendee in an IRN meeting (default to false)
     * @param {Number} opts.limit Restrict number of records returned (default to 0)
     * @return { Promise.< Array.<module:model/ContactSummaryDto> > } a Promise, with data of type {@link Array.<module:model/ContactSummaryDto> }
     */
    getContacts(opts) {
      return this.getContactsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a contact’s standard field and custom field data
     * @param {String} contactId contactId to update associated record
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation contactSaveDtoPatch object to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchContactWithHttpInfo(contactId, opts) {
      opts = opts || {};
      let postBody = opts['operation'];
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling patchContact");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/contacts/{contactId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a contact’s standard field and custom field data
     * @param {String} contactId contactId to update associated record
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation contactSaveDtoPatch object to update
     * @return { Promise } a Promise
     */
    patchContact(contactId, opts) {
      return this.patchContactWithHttpInfo(contactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





