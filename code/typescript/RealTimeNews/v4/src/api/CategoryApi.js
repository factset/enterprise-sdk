/**
 * Real-Time News API
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20032 from '../model/InlineResponse20032';
import InlineResponse20033 from '../model/InlineResponse20033';
import InlineResponse20034 from '../model/InlineResponse20034';
import InlineResponse20035 from '../model/InlineResponse20035';
import InlineResponse20036 from '../model/InlineResponse20036';
import InlineResponse20037 from '../model/InlineResponse20037';
import InlineResponse20038 from '../model/InlineResponse20038';
import InlineResponse20039 from '../model/InlineResponse20039';
import InlineResponse20040 from '../model/InlineResponse20040';
import InlineResponse20041 from '../model/InlineResponse20041';
import InlineResponse20042 from '../model/InlineResponse20042';

/**
* Category service.
* @module api/CategoryApi
*/
export default class CategoryApi {

    /**
    * Constructs a new CategoryApi. 
    * @alias module:api/CategoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List of entitled category datasets.
     * List of entitled category datasets.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20036} and HTTP response
     */
    getCategoryDatasetListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20036;

      return this.apiClient.callApi(
        '/category/dataset/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled category datasets.
     * List of entitled category datasets.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20036 > } a Promise, with data of type {@link module:model/InlineResponse20036 }
     */
    getCategoryDatasetList(opts) {
      return this.getCategoryDatasetListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Details of a category.
     * Details of a category.
     * @param {Number} id Identifier of a category.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20032} and HTTP response
     */
    getCategoryGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/category/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Details of a category.
     * Details of a category.
     * @param {Number} id Identifier of a category.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20032 > } a Promise, with data of type {@link module:model/InlineResponse20032 }
     */
    getCategoryGet(id, opts) {
      return this.getCategoryGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of instruments where a specific dataset has assigned a given category.
     * List of instruments where a specific dataset has assigned a given category.
     * @param {Number} idCategory Identifier of a category.
     * @param {Number} idCategoryDataset Identifier of a category dataset.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20037} and HTTP response
     */
    getCategoryInstrumentListWithHttpInfo(idCategory, idCategoryDataset, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCategory' is set
      if (idCategory === undefined || idCategory === null) {
        throw new Error("Missing the required parameter 'idCategory' when calling getCategoryInstrumentList");
      }
      // verify the required parameter 'idCategoryDataset' is set
      if (idCategoryDataset === undefined || idCategoryDataset === null) {
        throw new Error("Missing the required parameter 'idCategoryDataset' when calling getCategoryInstrumentList");
      }

      let pathParams = {
      };
      let queryParams = {
        'idCategory': idCategory,
        'idCategoryDataset': idCategoryDataset,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20037;

      return this.apiClient.callApi(
        '/category/instrument/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of instruments where a specific dataset has assigned a given category.
     * List of instruments where a specific dataset has assigned a given category.
     * @param {Number} idCategory Identifier of a category.
     * @param {Number} idCategoryDataset Identifier of a category dataset.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return { Promise.< module:model/InlineResponse20037 > } a Promise, with data of type {@link module:model/InlineResponse20037 }
     */
    getCategoryInstrumentList(idCategory, idCategoryDataset, opts) {
      return this.getCategoryInstrumentListWithHttpInfo(idCategory, idCategoryDataset, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Details of a category level.
     * Details of a category level.
     * @param {Number} id Identifier of a category level. See attribute `levels` in endpoint `/category/system/get` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20038} and HTTP response
     */
    getCategoryLevelGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoryLevelGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20038;

      return this.apiClient.callApi(
        '/category/level/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Details of a category level.
     * Details of a category level.
     * @param {Number} id Identifier of a category level. See attribute `levels` in endpoint `/category/system/get` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20038 > } a Promise, with data of type {@link module:model/InlineResponse20038 }
     */
    getCategoryLevelGet(id, opts) {
      return this.getCategoryLevelGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of categories.
     * List of categories.
     * @param {Array.<Number>} ids List of categories belonging to the same category system.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20033} and HTTP response
     */
    getCategoryListWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getCategoryList");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/category/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of categories.
     * List of categories.
     * @param {Array.<Number>} ids List of categories belonging to the same category system.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20033 > } a Promise, with data of type {@link module:model/InlineResponse20033 }
     */
    getCategoryList(ids, opts) {
      return this.getCategoryListWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of categories assigned to a category level.
     * List of categories assigned to a category level.
     * @param {Number} id Identifier of a category level. See attribute `levels` in endpoint `/category/system/get` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20034} and HTTP response
     */
    getCategoryListByLevelWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoryListByLevel");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage'],
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20034;

      return this.apiClient.callApi(
        '/category/list-by-level', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of categories assigned to a category level.
     * List of categories assigned to a category level.
     * @param {Number} id Identifier of a category level. See attribute `levels` in endpoint `/category/system/get` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return { Promise.< module:model/InlineResponse20034 > } a Promise, with data of type {@link module:model/InlineResponse20034 }
     */
    getCategoryListByLevel(id, opts) {
      return this.getCategoryListByLevelWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of categories assigned to a category system.
     * List of categories assigned to a category system.
     * @param {Number} id Identifier of a category system. See endpoint `/category/system/list` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20035} and HTTP response
     */
    getCategoryListBySystemWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoryListBySystem");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage'],
        '_paginationOffset': opts['paginationOffset'],
        '_paginationLimit': opts['paginationLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20035;

      return this.apiClient.callApi(
        '/category/list-by-system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of categories assigned to a category system.
     * List of categories assigned to a category system.
     * @param {Number} id Identifier of a category system. See endpoint `/category/system/list` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip, or 0 (default). (default to 0)
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. (default to 20)
     * @return { Promise.< module:model/InlineResponse20035 > } a Promise, with data of type {@link module:model/InlineResponse20035 }
     */
    getCategoryListBySystem(id, opts) {
      return this.getCategoryListBySystemWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Path from the first level to the level of a specific category.
     * Path from the first level to the level of a specific category.
     * @param {Number} id Identifier of a category.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20039} and HTTP response
     */
    getCategoryPathGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoryPathGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20039;

      return this.apiClient.callApi(
        '/category/path/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Path from the first level to the level of a specific category.
     * Path from the first level to the level of a specific category.
     * @param {Number} id Identifier of a category.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20039 > } a Promise, with data of type {@link module:model/InlineResponse20039 }
     */
    getCategoryPathGet(id, opts) {
      return this.getCategoryPathGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Details of an entitled category system.
     * Details of an entitled category system.
     * @param {Number} id Identifier of a category system. See endpoint `/category/system/list` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20040} and HTTP response
     */
    getCategorySystemGetWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategorySystemGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/category/system/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Details of an entitled category system.
     * Details of an entitled category system.
     * @param {Number} id Identifier of a category system. See endpoint `/category/system/list` for valid values.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20040 > } a Promise, with data of type {@link module:model/InlineResponse20040 }
     */
    getCategorySystemGet(id, opts) {
      return this.getCategorySystemGetWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of entitled category systems.
     * List of entitled category systems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.idType Filter for a specific category system type. See endpoint `/category/system/type/list` for valid values.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20041} and HTTP response
     */
    getCategorySystemListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'idType': opts['idType'],
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20041;

      return this.apiClient.callApi(
        '/category/system/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of entitled category systems.
     * List of entitled category systems.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.idType Filter for a specific category system type. See endpoint `/category/system/type/list` for valid values.
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20041 > } a Promise, with data of type {@link module:model/InlineResponse20041 }
     */
    getCategorySystemList(opts) {
      return this.getCategorySystemListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of category system types.
     * List of category system types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20042} and HTTP response
     */
    getCategorySystemTypeListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv'),
        'metaLanguage': opts['metaLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = InlineResponse20042;

      return this.apiClient.callApi(
        '/category/system/type/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of category system types.
     * List of category system types.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.attributes Limit the attributes returned in the response to the specified set.
     * @param {String} opts.metaLanguage ISO 639-1 code of the language.
     * @return { Promise.< module:model/InlineResponse20042 > } a Promise, with data of type {@link module:model/InlineResponse20042 }
     */
    getCategorySystemTypeList(opts) {
      return this.getCategorySystemTypeListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





