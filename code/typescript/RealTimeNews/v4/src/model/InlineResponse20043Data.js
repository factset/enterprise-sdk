/**
 * Real-Time News API
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetNewsArticleGetDataCategoriesItems from './GetNewsArticleGetDataCategoriesItems';
import GetNewsArticleGetDataInstrumentsItems from './GetNewsArticleGetDataInstrumentsItems';
import GetNewsArticleGetDataMediaItems from './GetNewsArticleGetDataMediaItems';
import GetNewsArticleGetDataTypesItems from './GetNewsArticleGetDataTypesItems';
import InlineResponse20043DataDistributor from './InlineResponse20043DataDistributor';
import InlineResponse20043DataLanguage from './InlineResponse20043DataLanguage';
import InlineResponse20043DataPublisher from './InlineResponse20043DataPublisher';

/**
 * The InlineResponse20043Data model module.
 * @module model/InlineResponse20043Data
 */
class InlineResponse20043Data {
    /**
     * Constructs a new <code>InlineResponse20043Data</code>.
     * Content of the news article.
     * @alias module:model/InlineResponse20043Data
     */
    constructor() { 
        
        InlineResponse20043Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse20043Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse20043Data} obj Optional instance to populate.
     * @return {module:model/InlineResponse20043Data} The populated <code>InlineResponse20043Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse20043Data();

            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
            if (data.hasOwnProperty('headline')) {
                obj['headline'] = ApiClient.convertToType(data['headline'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], [GetNewsArticleGetDataTypesItems]);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = InlineResponse20043DataLanguage.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('distributor')) {
                obj['distributor'] = InlineResponse20043DataDistributor.constructFromObject(data['distributor']);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = InlineResponse20043DataPublisher.constructFromObject(data['publisher']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [GetNewsArticleGetDataCategoriesItems]);
            }
            if (data.hasOwnProperty('instruments')) {
                obj['instruments'] = ApiClient.convertToType(data['instruments'], [GetNewsArticleGetDataInstrumentsItems]);
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], [GetNewsArticleGetDataMediaItems]);
            }
        }
        return obj;
    }


}

/**
 * Date and time of the news article.
 * @member {Date} time
 */
InlineResponse20043Data.prototype['time'] = undefined;

/**
 * Headline of the news article represented as text with HTML entity encoding but without HTML tags.
 * @member {String} headline
 */
InlineResponse20043Data.prototype['headline'] = undefined;

/**
 * Textual summary of the body of the news article or `null` if no summary was provided by the news article distributor.
 * @member {String} summary
 */
InlineResponse20043Data.prototype['summary'] = undefined;

/**
 * Text body of the news article.
 * @member {String} body
 */
InlineResponse20043Data.prototype['body'] = undefined;

/**
 * Types of news article. See endpoint `/news/article/type/list` for possible values.
 * @member {Array.<module:model/GetNewsArticleGetDataTypesItems>} types
 */
InlineResponse20043Data.prototype['types'] = undefined;

/**
 * @member {module:model/InlineResponse20043DataLanguage} language
 */
InlineResponse20043Data.prototype['language'] = undefined;

/**
 * @member {module:model/InlineResponse20043DataDistributor} distributor
 */
InlineResponse20043Data.prototype['distributor'] = undefined;

/**
 * @member {module:model/InlineResponse20043DataPublisher} publisher
 */
InlineResponse20043Data.prototype['publisher'] = undefined;

/**
 * Categories related to the news article. See endpoint `/category/list` for possible values.
 * @member {Array.<module:model/GetNewsArticleGetDataCategoriesItems>} categories
 */
InlineResponse20043Data.prototype['categories'] = undefined;

/**
 * Set of stock instruments related to the article. The set is not updated in the course of corporate actions, e.g. when the related company obtains a new instrument after a spin-off.
 * @member {Array.<module:model/GetNewsArticleGetDataInstrumentsItems>} instruments
 */
InlineResponse20043Data.prototype['instruments'] = undefined;

/**
 * List of media elements of the news article.
 * @member {Array.<module:model/GetNewsArticleGetDataMediaItems>} media
 */
InlineResponse20043Data.prototype['media'] = undefined;






export default InlineResponse20043Data;

