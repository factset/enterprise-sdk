/**
 * Real-Time News API
 * Consume FactSetâ€™s StreetAccount news and 3rd party content through an API that seamlessly integrates with [quotes](https://developer.factset.com/api-catalog/real-time-quotes-api), [time series](https://developer.factset.com/api-catalog/real-time-time-series-api), [watchlists](https://developer.factset.com/api-catalog/watchlist-api-digital-portals), and other Functional APIs.  Search for news articles from various news distributors and publishers. Incorporate a multitude of search parameters such as region, category, source, article type and provider-specific meta data, to easily filter out the noise.  All search and list endpoints can be subscribed to receive streamed updates.  News providers include:  * APA * AWP  * Businesswire * Cercle Finance * Direkt News SE * Dow Jones News * dpa * dpa-AFX  * EUWAX * GlobenewsWire * Kauppalehti * MT Newswires * MoneyAM * newsaktuell * OMX * PR Newswire  * Ritzau Finans * StreetAccount News * TDN News        See the [Real-Time Quotes API](https://developer.factset.com/api-catalog/real-time-quotes-api) for access to detailed price and performance information, plus basic support for security identifier cross-reference. 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostNewsPublisherSearchByNameRequestDataFilter from './PostNewsPublisherSearchByNameRequestDataFilter';

/**
 * The PostNewsPublisherSearchByNameRequestData model module.
 * @module model/PostNewsPublisherSearchByNameRequestData
 */
class PostNewsPublisherSearchByNameRequestData {
    /**
     * Constructs a new <code>PostNewsPublisherSearchByNameRequestData</code>.
     * The data member contains the request&#39;s primary data.
     * @alias module:model/PostNewsPublisherSearchByNameRequestData
     * @param searchValue {String} Restricts the search to publishers, which match the search value. The comparison for a match is case sensitive.
     * @param matchType {module:model/PostNewsPublisherSearchByNameRequestData.MatchTypeEnum} The match type that is applied to the search. | Value | Description | | --- | --- | | begins | Publisher name must begin with the searchValue. | | ends | Publisher name must end with the searchValue. | | contains | Publisher name must begin, end, or contain the searchValue. |  
     */
    constructor(searchValue, matchType) { 
        
        PostNewsPublisherSearchByNameRequestData.initialize(this, searchValue, matchType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, searchValue, matchType) { 
        obj['searchValue'] = searchValue;
        obj['matchType'] = matchType;
    }

    /**
     * Constructs a <code>PostNewsPublisherSearchByNameRequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostNewsPublisherSearchByNameRequestData} obj Optional instance to populate.
     * @return {module:model/PostNewsPublisherSearchByNameRequestData} The populated <code>PostNewsPublisherSearchByNameRequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostNewsPublisherSearchByNameRequestData();

            if (data.hasOwnProperty('searchValue')) {
                obj['searchValue'] = ApiClient.convertToType(data['searchValue'], 'String');
            }
            if (data.hasOwnProperty('matchType')) {
                obj['matchType'] = ApiClient.convertToType(data['matchType'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = PostNewsPublisherSearchByNameRequestDataFilter.constructFromObject(data['filter']);
            }
        }
        return obj;
    }


}

/**
 * Restricts the search to publishers, which match the search value. The comparison for a match is case sensitive.
 * @member {String} searchValue
 */
PostNewsPublisherSearchByNameRequestData.prototype['searchValue'] = undefined;

/**
 * The match type that is applied to the search. | Value | Description | | --- | --- | | begins | Publisher name must begin with the searchValue. | | ends | Publisher name must end with the searchValue. | | contains | Publisher name must begin, end, or contain the searchValue. |  
 * @member {module:model/PostNewsPublisherSearchByNameRequestData.MatchTypeEnum} matchType
 */
PostNewsPublisherSearchByNameRequestData.prototype['matchType'] = undefined;

/**
 * @member {module:model/PostNewsPublisherSearchByNameRequestDataFilter} filter
 */
PostNewsPublisherSearchByNameRequestData.prototype['filter'] = undefined;





/**
 * Allowed values for the <code>matchType</code> property.
 * @enum {String}
 * @readonly
 */
PostNewsPublisherSearchByNameRequestData['MatchTypeEnum'] = {

    /**
     * value: "begins"
     * @const
     */
    "begins": "begins",

    /**
     * value: "ends"
     * @const
     */
    "ends": "ends",

    /**
     * value: "contains"
     * @const
     */
    "contains": "contains"
};



export default PostNewsPublisherSearchByNameRequestData;

