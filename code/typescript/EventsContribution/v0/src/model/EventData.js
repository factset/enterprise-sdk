/**
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocationData from './LocationData';
import ParticipantsData from './ParticipantsData';
import RegistrationInfoData from './RegistrationInfoData';
import SymbolData from './SymbolData';

/**
 * The EventData model module.
 * @module model/EventData
 */
class EventData {
    /**
     * Constructs a new <code>EventData</code>.
     * Event Data
     * @alias module:model/EventData
     * @param eventId {String} ID that corresponds to the event. This ID is vendor generated and should be unique in each vendor's content set.
     * @param title {String} Title of the event to be displayed
     * @param startDatetime {Date} Start date and time of the event
     * @param symbols {Array.<module:model/SymbolData>} 
     */
    constructor(eventId, title, startDatetime, symbols) { 
        
        EventData.initialize(this, eventId, title, startDatetime, symbols);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventId, title, startDatetime, symbols) { 
        obj['eventId'] = eventId;
        obj['title'] = title;
        obj['startDatetime'] = startDatetime;
        obj['symbols'] = symbols;
    }

    /**
     * Constructs a <code>EventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventData} obj Optional instance to populate.
     * @return {module:model/EventData} The populated <code>EventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventData();

            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('startDatetime')) {
                obj['startDatetime'] = ApiClient.convertToType(data['startDatetime'], 'Date');
            }
            if (data.hasOwnProperty('agendaUrl')) {
                obj['agendaUrl'] = ApiClient.convertToType(data['agendaUrl'], 'String');
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], [ParticipantsData]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationData.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('symbols')) {
                obj['symbols'] = ApiClient.convertToType(data['symbols'], [SymbolData]);
            }
            if (data.hasOwnProperty('registrationInfo')) {
                obj['registrationInfo'] = RegistrationInfoData.constructFromObject(data['registrationInfo']);
            }
        }
        return obj;
    }


}

/**
 * ID that corresponds to the event. This ID is vendor generated and should be unique in each vendor's content set.
 * @member {String} eventId
 */
EventData.prototype['eventId'] = undefined;

/**
 * Title of the event to be displayed
 * @member {String} title
 */
EventData.prototype['title'] = undefined;

/**
 * Start date and time of the event
 * @member {Date} startDatetime
 */
EventData.prototype['startDatetime'] = undefined;

/**
 * The meeting agenda which can be a document file or a webpage.
 * @member {String} agendaUrl
 */
EventData.prototype['agendaUrl'] = undefined;

/**
 * @member {Array.<module:model/ParticipantsData>} participants
 */
EventData.prototype['participants'] = undefined;

/**
 * @member {module:model/LocationData} location
 */
EventData.prototype['location'] = undefined;

/**
 * @member {Array.<module:model/SymbolData>} symbols
 */
EventData.prototype['symbols'] = undefined;

/**
 * @member {module:model/RegistrationInfoData} registrationInfo
 */
EventData.prototype['registrationInfo'] = undefined;






export default EventData;

