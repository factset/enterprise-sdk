/**
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SymbolData model module.
 * @module model/SymbolData
 */
class SymbolData {
    /**
     * Constructs a new <code>SymbolData</code>.
     * An identifier indicating which company the event belongs to
     * @alias module:model/SymbolData
     * @param value {String} Value of symbol
     * @param name {String} Name of symbol
     */
    constructor(value, name) { 
        
        SymbolData.initialize(this, value, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value, name) { 
        obj['value'] = value;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>SymbolData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SymbolData} obj Optional instance to populate.
     * @return {module:model/SymbolData} The populated <code>SymbolData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SymbolData();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Type of symbol
 * @member {module:model/SymbolData.TypeEnum} type
 */
SymbolData.prototype['type'] = undefined;

/**
 * Value of symbol
 * @member {String} value
 */
SymbolData.prototype['value'] = undefined;

/**
 * Name of symbol
 * @member {String} name
 */
SymbolData.prototype['name'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SymbolData['TypeEnum'] = {

    /**
     * value: "isin"
     * @const
     */
    "isin": "isin",

    /**
     * value: "ticker"
     * @const
     */
    "ticker": "ticker",

    /**
     * value: "entity"
     * @const
     */
    "entity": "entity",

    /**
     * value: "sedol"
     * @const
     */
    "sedol": "sedol"
};



export default SymbolData;

