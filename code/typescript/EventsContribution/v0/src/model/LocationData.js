/**
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationData model module.
 * @module model/LocationData
 */
class LocationData {
    /**
     * Constructs a new <code>LocationData</code>.
     * Location of the event
     * @alias module:model/LocationData
     */
    constructor() { 
        
        LocationData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationData} obj Optional instance to populate.
     * @return {module:model/LocationData} The populated <code>LocationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationData();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Country must be provided in ISO 3166 (alpha 2) format, i.e., two-letter country code
 * @member {String} country
 */
LocationData.prototype['country'] = undefined;

/**
 * State/province of the city where the event is taking place.
 * @member {String} state
 */
LocationData.prototype['state'] = undefined;

/**
 * City where the event is taking place.
 * @member {String} city
 */
LocationData.prototype['city'] = undefined;






export default LocationData;

