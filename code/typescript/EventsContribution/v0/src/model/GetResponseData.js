/**
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetResponseData model module.
 * @module model/GetResponseData
 */
class GetResponseData {
    /**
     * Constructs a new <code>GetResponseData</code>.
     * @alias module:model/GetResponseData
     */
    constructor() { 
        
        GetResponseData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetResponseData} obj Optional instance to populate.
     * @return {module:model/GetResponseData} The populated <code>GetResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetResponseData();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('contactName')) {
                obj['contactName'] = ApiClient.convertToType(data['contactName'], 'String');
            }
            if (data.hasOwnProperty('contactEmail')) {
                obj['contactEmail'] = ApiClient.convertToType(data['contactEmail'], 'String');
            }
            if (data.hasOwnProperty('agendaUrl')) {
                obj['agendaUrl'] = ApiClient.convertToType(data['agendaUrl'], 'String');
            }
            if (data.hasOwnProperty('additionalInfo')) {
                obj['additionalInfo'] = ApiClient.convertToType(data['additionalInfo'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('isoCountry')) {
                obj['isoCountry'] = ApiClient.convertToType(data['isoCountry'], 'String');
            }
        }
        return obj;
    }


}

/**
 * ID of event
 * @member {String} id
 */
GetResponseData.prototype['id'] = undefined;

/**
 * Date of event
 * @member {String} date
 */
GetResponseData.prototype['date'] = undefined;

/**
 * Description of event
 * @member {String} description
 */
GetResponseData.prototype['description'] = undefined;

/**
 * Contact for event
 * @member {String} contactName
 */
GetResponseData.prototype['contactName'] = undefined;

/**
 * Contact's email for event
 * @member {String} contactEmail
 */
GetResponseData.prototype['contactEmail'] = undefined;

/**
 * URL for event
 * @member {String} agendaUrl
 */
GetResponseData.prototype['agendaUrl'] = undefined;

/**
 * Additional info for the event
 * @member {String} additionalInfo
 */
GetResponseData.prototype['additionalInfo'] = undefined;

/**
 * City of the event
 * @member {String} city
 */
GetResponseData.prototype['city'] = undefined;

/**
 * State of the event
 * @member {String} state
 */
GetResponseData.prototype['state'] = undefined;

/**
 * Country of the event
 * @member {String} isoCountry
 */
GetResponseData.prototype['isoCountry'] = undefined;






export default GetResponseData;

