/**
 * Events Contribution API
 * The Events Contribution API provides the ability to add specific types of corporate events to FactSet’s own events calendar, for display within FactSet’s applications, as well as for off-platform re-distribution via FactSet’s Events Calendar API.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteResponse from '../model/DeleteResponse';
import ErrorResponse from '../model/ErrorResponse';
import InsertRequest from '../model/InsertRequest';
import InsertResponse from '../model/InsertResponse';
import UpdateRequest from '../model/UpdateRequest';
import UpdateResponse from '../model/UpdateResponse';

/**
* EventsContribution service.
* @module api/EventsContributionApi
*/
export default class EventsContributionApi {

    /**
    * Constructs a new EventsContributionApi. 
    * @alias module:api/EventsContributionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete Event data
     * This endpoint allows you to delete a previously inserted event with the corresponding event id.
     * @param {String} eventId Id of event to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteResponse} and HTTP response
     */
    deleteEventWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling deleteEvent");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = DeleteResponse;

      return this.apiClient.callApi(
        '/events/{eventId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Event data
     * This endpoint allows you to delete a previously inserted event with the corresponding event id.
     * @param {String} eventId Id of event to be deleted
     * @return { Promise.< module:model/DeleteResponse > } a Promise, with data of type {@link module:model/DeleteResponse }
     */
    deleteEvent(eventId) {
      return this.deleteEventWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Insert Event data
     * This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
     * @param {module:model/InsertRequest} insertRequest INSERT request body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InsertResponse} and HTTP response
     */
    insertEventWithHttpInfo(insertRequest) {
      let postBody = insertRequest;
      // verify the required parameter 'insertRequest' is set
      if (insertRequest === undefined || insertRequest === null) {
        throw new Error("Missing the required parameter 'insertRequest' when calling insertEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = InsertResponse;

      return this.apiClient.callApi(
        '/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Insert Event data
     * This endpoint inserts an event. Once the event is inserted, it will show up immediately among FactSet’s own event calendar apps, for display within FactSet’s applications.
     * @param {module:model/InsertRequest} insertRequest INSERT request body which needs to be sent with request
     * @return { Promise.< module:model/InsertResponse > } a Promise, with data of type {@link module:model/InsertResponse }
     */
    insertEvent(insertRequest) {
      return this.insertEventWithHttpInfo(insertRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Event data
     * This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
     * @param {String} eventId Id of event to be updated
     * @param {module:model/UpdateRequest} updateRequest UPDATE request body which needs to be sent with request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateResponse} and HTTP response
     */
    updateEventWithHttpInfo(eventId, updateRequest) {
      let postBody = updateRequest;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling updateEvent");
      }
      // verify the required parameter 'updateRequest' is set
      if (updateRequest === undefined || updateRequest === null) {
        throw new Error("Missing the required parameter 'updateRequest' when calling updateEvent");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = UpdateResponse;

      return this.apiClient.callApi(
        '/events/{eventId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Event data
     * This endpoint allows you to update a previously inserted event. Existing event will be replaced with the event data provided in the request body.
     * @param {String} eventId Id of event to be updated
     * @param {module:model/UpdateRequest} updateRequest UPDATE request body which needs to be sent with request
     * @return { Promise.< module:model/UpdateResponse > } a Promise, with data of type {@link module:model/UpdateResponse }
     */
    updateEvent(eventId, updateRequest) {
      return this.updateEventWithHttpInfo(eventId, updateRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





