/**
 * AFI Optimizer API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 3
 * Contact: analytics.api.support@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import AFIOptimizationParameters from './model/AFIOptimizationParameters';
import AFIOptimizationParametersRoot from './model/AFIOptimizationParametersRoot';
import AFIOptimizerStrategy from './model/AFIOptimizerStrategy';
import AFIOptimizerStrategyOverrides from './model/AFIOptimizerStrategyOverrides';
import CalculationInfo from './model/CalculationInfo';
import CalculationInfoRoot from './model/CalculationInfoRoot';
import ClientErrorResponse from './model/ClientErrorResponse';
import DocumentDirectories from './model/DocumentDirectories';
import DocumentDirectoriesRoot from './model/DocumentDirectoriesRoot';
import Error from './model/Error';
import ErrorSource from './model/ErrorSource';
import ObjectRoot from './model/ObjectRoot';
import OptimalPortfolio from './model/OptimalPortfolio';
import Optimization from './model/Optimization';
import OptimizerAccount from './model/OptimizerAccount';
import OptimizerAccountOverrides from './model/OptimizerAccountOverrides';
import OptimizerOptimalHoldings from './model/OptimizerOptimalHoldings';
import OptimizerOutputTypes from './model/OptimizerOutputTypes';
import OptimizerTradesList from './model/OptimizerTradesList';

import AFIOptimizerApi from './api/AFIOptimizerApi';
import PostAndOptimizeResponseWrapper from './api/AFIOptimizerApi';
import PutAndOptimizeResponseWrapper from './api/AFIOptimizerApi';
import StrategyDocumentsApi from './api/StrategyDocumentsApi';


/**
* Axioma Fixed Income Optimizer client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var axiomafixedincomeoptimizer = require('index'); // See note below*.
* var xxxSvc = new axiomafixedincomeoptimizer.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new axiomafixedincomeoptimizer.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new axiomafixedincomeoptimizer.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new axiomafixedincomeoptimizer.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AFIOptimizationParameters model constructor.
     * @property {module:model/AFIOptimizationParameters}
     */
    AFIOptimizationParameters,

    /**
     * The AFIOptimizationParametersRoot model constructor.
     * @property {module:model/AFIOptimizationParametersRoot}
     */
    AFIOptimizationParametersRoot,

    /**
     * The AFIOptimizerStrategy model constructor.
     * @property {module:model/AFIOptimizerStrategy}
     */
    AFIOptimizerStrategy,

    /**
     * The AFIOptimizerStrategyOverrides model constructor.
     * @property {module:model/AFIOptimizerStrategyOverrides}
     */
    AFIOptimizerStrategyOverrides,

    /**
     * The CalculationInfo model constructor.
     * @property {module:model/CalculationInfo}
     */
    CalculationInfo,

    /**
     * The CalculationInfoRoot model constructor.
     * @property {module:model/CalculationInfoRoot}
     */
    CalculationInfoRoot,

    /**
     * The ClientErrorResponse model constructor.
     * @property {module:model/ClientErrorResponse}
     */
    ClientErrorResponse,

    /**
     * The DocumentDirectories model constructor.
     * @property {module:model/DocumentDirectories}
     */
    DocumentDirectories,

    /**
     * The DocumentDirectoriesRoot model constructor.
     * @property {module:model/DocumentDirectoriesRoot}
     */
    DocumentDirectoriesRoot,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorSource model constructor.
     * @property {module:model/ErrorSource}
     */
    ErrorSource,

    /**
     * The ObjectRoot model constructor.
     * @property {module:model/ObjectRoot}
     */
    ObjectRoot,

    /**
     * The OptimalPortfolio model constructor.
     * @property {module:model/OptimalPortfolio}
     */
    OptimalPortfolio,

    /**
     * The Optimization model constructor.
     * @property {module:model/Optimization}
     */
    Optimization,

    /**
     * The OptimizerAccount model constructor.
     * @property {module:model/OptimizerAccount}
     */
    OptimizerAccount,

    /**
     * The OptimizerAccountOverrides model constructor.
     * @property {module:model/OptimizerAccountOverrides}
     */
    OptimizerAccountOverrides,

    /**
     * The OptimizerOptimalHoldings model constructor.
     * @property {module:model/OptimizerOptimalHoldings}
     */
    OptimizerOptimalHoldings,

    /**
     * The OptimizerOutputTypes model constructor.
     * @property {module:model/OptimizerOutputTypes}
     */
    OptimizerOutputTypes,

    /**
     * The OptimizerTradesList model constructor.
     * @property {module:model/OptimizerTradesList}
     */
    OptimizerTradesList,

    /**
    * The AFIOptimizerApi service constructor.
    * @property {module:api/AFIOptimizerApi}
    */
    AFIOptimizerApi,

    /**
    * The PostAndOptimize response wrapper.
    * @property {module:GetCalculationStatusByIdResponseWrapper}
    */
    PostAndOptimizeResponseWrapper,

    /**
    * The PutAndOptimize response wrapper.
    * @property {module:GetCalculationStatusByIdResponseWrapper}
    */
    PutAndOptimizeResponseWrapper,

    /**
    * The StrategyDocumentsApi service constructor.
    * @property {module:api/StrategyDocumentsApi}
    */
    StrategyDocumentsApi,

};
