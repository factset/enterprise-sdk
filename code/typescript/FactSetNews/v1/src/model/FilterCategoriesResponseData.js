/**
 * News API
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlattenedFiltersCategories from './FlattenedFiltersCategories';
import StructuredFiltersCategories from './StructuredFiltersCategories';

/**
 * The FilterCategoriesResponseData model module.
 * @module model/FilterCategoriesResponseData
 */
class FilterCategoriesResponseData {
    /**
     * Constructs a new <code>FilterCategoriesResponseData</code>.
     * @alias module:model/FilterCategoriesResponseData
     */
    constructor() { 
        
        FilterCategoriesResponseData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterCategoriesResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterCategoriesResponseData} obj Optional instance to populate.
     * @return {module:model/FilterCategoriesResponseData} The populated <code>FilterCategoriesResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterCategoriesResponseData();

            if (data.hasOwnProperty('structured')) {
                obj['structured'] = StructuredFiltersCategories.constructFromObject(data['structured']);
            }
            if (data.hasOwnProperty('flattened')) {
                obj['flattened'] = FlattenedFiltersCategories.constructFromObject(data['flattened']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/StructuredFiltersCategories} structured
 */
FilterCategoriesResponseData.prototype['structured'] = undefined;

/**
 * @member {module:model/FlattenedFiltersCategories} flattened
 */
FilterCategoriesResponseData.prototype['flattened'] = undefined;






export default FilterCategoriesResponseData;

