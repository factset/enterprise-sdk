/**
 * News API
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrEditViewBody from '../model/CreateOrEditViewBody';
import CreateViewResponse from '../model/CreateViewResponse';
import DeleteViewBody from '../model/DeleteViewBody';
import Error from '../model/Error';
import QuickAlertsBody from '../model/QuickAlertsBody';
import QuickAlertsResponse from '../model/QuickAlertsResponse';
import Views from '../model/Views';

/**
* Views service.
* @module api/ViewsApi
*/
export default class ViewsApi {

    /**
    * Constructs a new ViewsApi. 
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates and saves a FactSet News view
     * This endpoint allows you to create a new FactSet News view. Select watchlists/tickers and filters of your choice to create and save a view. Please refer to `/filters` endpoint to obtain the values.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateViewResponse} and HTTP response
     */
    createFactSetNewsViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createOrEditViewBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = CreateViewResponse;

      return this.apiClient.callApi(
        '/views/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates and saves a FactSet News view
     * This endpoint allows you to create a new FactSet News view. Select watchlists/tickers and filters of your choice to create and save a view. Please refer to `/filters` endpoint to obtain the values.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request.
     * @return { Promise.< module:model/CreateViewResponse > } a Promise, with data of type {@link module:model/CreateViewResponse }
     */
    createFactSetNewsView(opts) {
      return this.createFactSetNewsViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a quick-alert for given saved view
     * This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuickAlertsResponse} and HTTP response
     */
    createQuickAlertForViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['quickAlertsBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = QuickAlertsResponse;

      return this.apiClient.callApi(
        '/quick-alert/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a quick-alert for given saved view
     * This endpoint takes in a view name and provides realtime email updates on new stories coming in for the view. Only one quick alert can be enabled for a view at a time.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert.
     * @return { Promise.< module:model/QuickAlertsResponse > } a Promise, with data of type {@link module:model/QuickAlertsResponse }
     */
    createQuickAlertForView(opts) {
      return this.createQuickAlertForViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes an existing quick alert for a view.
     * This endpoint allows you to delete a quick alert from a previously saved view.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQuickalertViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['quickAlertsBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/quick-alert/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes an existing quick alert for a view.
     * This endpoint allows you to delete a quick alert from a previously saved view.
     * @param {Object} opts Optional parameters
     * @param {module:model/QuickAlertsBody} opts.quickAlertsBody View name to get an alert.
     * @return { Promise } a Promise
     */
    deleteQuickalertView(opts) {
      return this.deleteQuickalertViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes an existing App view
     * This endpoint allows you to delete a previously saved view.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteViewBody} opts.deleteViewBody Delete View Body which needs to be sent with request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['deleteViewBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/views/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes an existing App view
     * This endpoint allows you to delete a previously saved view.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteViewBody} opts.deleteViewBody Delete View Body which needs to be sent with request.
     * @return { Promise } a Promise
     */
    deleteView(opts) {
      return this.deleteViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit an existing FactSet News view with filters specified
     * This endpoint allows you to edit the criteria used for a previously saved FactSet News view.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    editFactSetNewsViewWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createOrEditViewBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/views/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit an existing FactSet News view with filters specified
     * This endpoint allows you to edit the criteria used for a previously saved FactSet News view.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrEditViewBody} opts.createOrEditViewBody Create or Edit View Body which needs to be sent with request.
     * @return { Promise } a Promise
     */
    editFactSetNewsView(opts) {
      return this.editFactSetNewsViewWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a list of search views created in News app
     * This endpoint allows you to pull the full list of app views that have been previously saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Views} and HTTP response
     */
    getFactSetNewsViewsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = Views;

      return this.apiClient.callApi(
        '/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of search views created in News app
     * This endpoint allows you to pull the full list of app views that have been previously saved.
     * @return { Promise.< module:model/Views > } a Promise, with data of type {@link module:model/Views }
     */
    getFactSetNewsViews() {
      return this.getFactSetNewsViewsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





