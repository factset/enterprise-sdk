/**
 * News API
 *  The FactSet News API provides access to FactSetâ€™s news alongside business logic that allows users to replicate views and functionality consistent with the experience provided by the Workstation. This API provides the ability to create views and pull news headlines based on specific filters. There are the filters available for News:  * Watchlists/Indices/Tickers * Sources * Company Filters * Market Topics * Countries * Regions      
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import FilterCategoriesResponse from '../model/FilterCategoriesResponse';
import FilterCountriesResponse from '../model/FilterCountriesResponse';
import FilterRegionsResponse from '../model/FilterRegionsResponse';
import FilterResponse from '../model/FilterResponse';
import FilterSourcesResponse from '../model/FilterSourcesResponse';
import FilterTopicResponse from '../model/FilterTopicResponse';
import FilterWatchlistsResponse from '../model/FilterWatchlistsResponse';

/**
* Filters service.
* @module api/FiltersApi
*/
export default class FiltersApi {

    /**
    * Constructs a new FiltersApi. 
    * @alias module:api/FiltersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve all FactSet News filters
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FilterResponse} and HTTP response
     */
    getFiltersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FilterResponse;

      return this.apiClient.callApi(
        '/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all FactSet News filters
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return { Promise.< module:model/FilterResponse > } a Promise, with data of type {@link module:model/FilterResponse }
     */
    getFilters(opts) {
      return this.getFiltersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all News filter categories
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter categories. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FilterCategoriesResponse} and HTTP response
     */
    getNewsFiltersCategoriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FilterCategoriesResponse;

      return this.apiClient.callApi(
        '/filters/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all News filter categories
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter categories. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return { Promise.< module:model/FilterCategoriesResponse > } a Promise, with data of type {@link module:model/FilterCategoriesResponse }
     */
    getNewsFiltersCategories(opts) {
      return this.getNewsFiltersCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all News filter countries
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter countries. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FilterCountriesResponse} and HTTP response
     */
    getNewsFiltersCountriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FilterCountriesResponse;

      return this.apiClient.callApi(
        '/filters/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all News filter countries
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter countries. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return { Promise.< module:model/FilterCountriesResponse > } a Promise, with data of type {@link module:model/FilterCountriesResponse }
     */
    getNewsFiltersCountries(opts) {
      return this.getNewsFiltersCountriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all News filter regions
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter regions. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FilterRegionsResponse} and HTTP response
     */
    getNewsFiltersRegionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FilterRegionsResponse;

      return this.apiClient.callApi(
        '/filters/regions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all News filter regions
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter regions. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return { Promise.< module:model/FilterRegionsResponse > } a Promise, with data of type {@link module:model/FilterRegionsResponse }
     */
    getNewsFiltersRegions(opts) {
      return this.getNewsFiltersRegionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all News filter sources
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter sources. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FilterSourcesResponse} and HTTP response
     */
    getNewsFiltersSourcesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FilterSourcesResponse;

      return this.apiClient.callApi(
        '/filters/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all News filter sources
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter sources. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return { Promise.< module:model/FilterSourcesResponse > } a Promise, with data of type {@link module:model/FilterSourcesResponse }
     */
    getNewsFiltersSources(opts) {
      return this.getNewsFiltersSourcesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all News filter topics
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter topics. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FilterTopicResponse} and HTTP response
     */
    getNewsFiltersTopicsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FilterTopicResponse;

      return this.apiClient.callApi(
        '/filters/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all News filter topics
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter topics. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return { Promise.< module:model/FilterTopicResponse > } a Promise, with data of type {@link module:model/FilterTopicResponse }
     */
    getNewsFiltersTopics(opts) {
      return this.getNewsFiltersTopicsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve all News filter watchlists
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FilterWatchlistsResponse} and HTTP response
     */
    getNewsFiltersWatchlistsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FilterWatchlistsResponse;

      return this.apiClient.callApi(
        '/filters/watchlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve all News filter watchlists
     * If structured flag is set, parent and child filter information will be returned. If flattened flag is set, flattened filters will be returned which can be used with the `/headlines` and `/views/create` endpoints. Both flags can be set to return both sets of filters.  If no params are provided it will return both.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.attributes Pass a list of filters to return the respective type of filter watchlists. Accepted list values are \"structured\" and/or \"flattened\". If no _attributes are specified, all filters will be returned in the response (this is the default response). 
     * @return { Promise.< module:model/FilterWatchlistsResponse > } a Promise, with data of type {@link module:model/FilterWatchlistsResponse }
     */
    getNewsFiltersWatchlists(opts) {
      return this.getNewsFiltersWatchlistsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





