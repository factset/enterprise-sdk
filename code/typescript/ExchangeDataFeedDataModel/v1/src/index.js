/**
 * FactSet Real-Time Data Model API
 * FactSetâ€™s Real-time market data products provide access to consolidated real-time and delayed global exchange data. Proprietary technology normalizes over 250 global venues, 18+ million instruments, and 150+ data fields. Asset types integrated include equities, futures, options, warrants, fixed income, mutual funds, ETFs, indices, commodities, and FX rates. Innovative technology ensures reliability and provides scalability that allows clients to make requests based on a symbol list or an exchange. Reduce development time by powering proprietary and third-party applications with exchange data from a unified data model. <p>The Real-time Data Model API provides mappings for enumerations used in our Real-Time DataFeed products and should be used in conjunction with the DataFeed Data Model documentation available for each product. <p>The initial version of this API is limited to include mapping tables for the product codes and exchanges only.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import ErrorDetail from './model/ErrorDetail';
import ErrorResponse from './model/ErrorResponse';
import ExchangeItem from './model/ExchangeItem';
import ExchangesResponse from './model/ExchangesResponse';
import ExchangesResponseData from './model/ExchangesResponseData';
import ProductItem from './model/ProductItem';
import ProductsResponse from './model/ProductsResponse';
import ProductsResponseData from './model/ProductsResponseData';

import ExchangeInformationApi from './api/ExchangeInformationApi';
import ProductCodesApi from './api/ProductCodesApi';


/**
* Exchange DataFeed Data Model client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var exchangedatafeeddatamodel = require('index'); // See note below*.
* var xxxSvc = new exchangedatafeeddatamodel.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new exchangedatafeeddatamodel.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new exchangedatafeeddatamodel.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new exchangedatafeeddatamodel.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ErrorDetail model constructor.
     * @property {module:model/ErrorDetail}
     */
    ErrorDetail,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The ExchangeItem model constructor.
     * @property {module:model/ExchangeItem}
     */
    ExchangeItem,

    /**
     * The ExchangesResponse model constructor.
     * @property {module:model/ExchangesResponse}
     */
    ExchangesResponse,

    /**
     * The ExchangesResponseData model constructor.
     * @property {module:model/ExchangesResponseData}
     */
    ExchangesResponseData,

    /**
     * The ProductItem model constructor.
     * @property {module:model/ProductItem}
     */
    ProductItem,

    /**
     * The ProductsResponse model constructor.
     * @property {module:model/ProductsResponse}
     */
    ProductsResponse,

    /**
     * The ProductsResponseData model constructor.
     * @property {module:model/ProductsResponseData}
     */
    ProductsResponseData,

    /**
    * The ExchangeInformationApi service constructor.
    * @property {module:api/ExchangeInformationApi}
    */
    ExchangeInformationApi,

    /**
    * The ProductCodesApi service constructor.
    * @property {module:api/ProductCodesApi}
    */
    ProductCodesApi,

};
