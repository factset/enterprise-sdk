/**
 * FactSet Ownership API
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InsiderTransactions model module.
 * @module model/InsiderTransactions
 */
class InsiderTransactions {
    /**
     * Constructs a new <code>InsiderTransactions</code>.
     * insiderTransactions response object
     * @alias module:model/InsiderTransactions
     */
    constructor() { 
        
        InsiderTransactions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InsiderTransactions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InsiderTransactions} obj Optional instance to populate.
     * @return {module:model/InsiderTransactions} The populated <code>InsiderTransactions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InsiderTransactions();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('holderName')) {
                obj['holderName'] = ApiClient.convertToType(data['holderName'], 'String');
            }
            if (data.hasOwnProperty('holderTitle')) {
                obj['holderTitle'] = ApiClient.convertToType(data['holderTitle'], 'String');
            }
            if (data.hasOwnProperty('holderId')) {
                obj['holderId'] = ApiClient.convertToType(data['holderId'], 'String');
            }
            if (data.hasOwnProperty('shares')) {
                obj['shares'] = ApiClient.convertToType(data['shares'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('netValueChange')) {
                obj['netValueChange'] = ApiClient.convertToType(data['netValueChange'], 'Number');
            }
            if (data.hasOwnProperty('filingDate')) {
                obj['filingDate'] = ApiClient.convertToType(data['filingDate'], 'String');
            }
            if (data.hasOwnProperty('isDerivative')) {
                obj['isDerivative'] = ApiClient.convertToType(data['isDerivative'], 'Boolean');
            }
            if (data.hasOwnProperty('isDirect')) {
                obj['isDirect'] = ApiClient.convertToType(data['isDirect'], 'Boolean');
            }
            if (data.hasOwnProperty('tradeType')) {
                obj['tradeType'] = ApiClient.convertToType(data['tradeType'], 'String');
            }
            if (data.hasOwnProperty('formType')) {
                obj['formType'] = ApiClient.convertToType(data['formType'], 'String');
            }
            if (data.hasOwnProperty('transactionDate')) {
                obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'String');
            }
            if (data.hasOwnProperty('sharesOwned')) {
                obj['sharesOwned'] = ApiClient.convertToType(data['sharesOwned'], 'Number');
            }
            if (data.hasOwnProperty('secRule10b51')) {
                obj['secRule10b51'] = ApiClient.convertToType(data['secRule10b51'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used in the request.
 * @member {String} requestId
 */
InsiderTransactions.prototype['requestId'] = undefined;

/**
 * FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.
 * @member {String} fsymId
 */
InsiderTransactions.prototype['fsymId'] = undefined;

/**
 * Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
 * @member {String} currency
 */
InsiderTransactions.prototype['currency'] = undefined;

/**
 * Returns the names of the insiders involved in the transactions that occurred between the specified start and end dates.
 * @member {String} holderName
 */
InsiderTransactions.prototype['holderName'] = undefined;

/**
 * Returns the titles of the insiders involved in the transactions that occurred between the specified start and end dates.
 * @member {String} holderTitle
 */
InsiderTransactions.prototype['holderTitle'] = undefined;

/**
 * Returns the holder IDs for the insiders involved in the transactions that occurred between the specified start and end dates.
 * @member {String} holderId
 */
InsiderTransactions.prototype['holderId'] = undefined;

/**
 * Returns the transaction shares for the transactions that occurred between the specified start and end dates.
 * @member {Number} shares
 */
InsiderTransactions.prototype['shares'] = undefined;

/**
 * Returns the transaction prices for the transactions that occurred between the specified start and end dates.
 * @member {Number} price
 */
InsiderTransactions.prototype['price'] = undefined;

/**
 * Returns the transaction values for the transactions that occurred between the specified start and end dates.
 * @member {Number} netValueChange
 */
InsiderTransactions.prototype['netValueChange'] = undefined;

/**
 * Returns the dates on which the transactions that occurred between the specified start and end dates were processed.
 * @member {String} filingDate
 */
InsiderTransactions.prototype['filingDate'] = undefined;

/**
 * Returns a Derivative/Non-Derivative flag for the transactions that occurred between the specified start and end dates. Returns true for Derivative and false for Non-Derivative.
 * @member {Boolean} isDerivative
 */
InsiderTransactions.prototype['isDerivative'] = undefined;

/**
 * Returns a direct/indirect flag for the transactions that occurred between the specified start and end dates.
 * @member {Boolean} isDirect
 */
InsiderTransactions.prototype['isDirect'] = undefined;

/**
 * Returns an acquisition/disposition flag for the transactions that occurred between the specified start and end dates.
 * @member {String} tradeType
 */
InsiderTransactions.prototype['tradeType'] = undefined;

/**
 * Returns the form types for the transactions that occurred between the specified start and end dates.
 * @member {String} formType
 */
InsiderTransactions.prototype['formType'] = undefined;

/**
 * Returns the transaction dates for the transactions that occurred between the specified start and end dates.
 * @member {String} transactionDate
 */
InsiderTransactions.prototype['transactionDate'] = undefined;

/**
 * Returns the shares owned data for the transactions that occurred between the specified start and end dates.
 * @member {Number} sharesOwned
 */
InsiderTransactions.prototype['sharesOwned'] = undefined;

/**
 * Returns rule 10b5-1 flags for the insiders involved in the transactions that occurred between the specified start and end dates.
 * @member {Boolean} secRule10b51
 */
InsiderTransactions.prototype['secRule10b51'] = undefined;






export default InsiderTransactions;

