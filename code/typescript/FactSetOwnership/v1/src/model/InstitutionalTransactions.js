/**
 * FactSet Ownership API
 * FactSet's Fund Ownership API gives access to both **Holdings**, **Holders**, and **Transactions** data.<p> Factset's Holdings endpoints gives access to all the underlying securities and their position details held within a given fund. Fund Types supported include Open-End Mutual Funds, Closed-end Mutual Funds, and Exchange Traded Funds. Security Holders information retrieves all \"holder types\" and their positions across institutions, funds, insiders, and stakeholders. FactSet also provides extensive insider and institutional transactions data for multiple countries including the United States, China, and Canada.</p><p>The FactSet Ownership and Mutual Funds database collects global equity ownership data for approximately 50,000 institutions, 60,000 unique Mutual Fund portfolios, and 400,000 Insider/Stakeholders from around 110 countries. For more details review our [Data Collection](https://my.apps.factset.com/oa/cms/oaAttachment/87e162be-f2d1-4f40-a85b-bfb1b020d270/20079) methodology. </p> 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InstitutionalTransactions model module.
 * @module model/InstitutionalTransactions
 */
class InstitutionalTransactions {
    /**
     * Constructs a new <code>InstitutionalTransactions</code>.
     * institutionalTransactions response object
     * @alias module:model/InstitutionalTransactions
     */
    constructor() { 
        
        InstitutionalTransactions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstitutionalTransactions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstitutionalTransactions} obj Optional instance to populate.
     * @return {module:model/InstitutionalTransactions} The populated <code>InstitutionalTransactions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstitutionalTransactions();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('holderName')) {
                obj['holderName'] = ApiClient.convertToType(data['holderName'], 'String');
            }
            if (data.hasOwnProperty('pctOS')) {
                obj['pctOS'] = ApiClient.convertToType(data['pctOS'], 'Number');
            }
            if (data.hasOwnProperty('pctChange')) {
                obj['pctChange'] = ApiClient.convertToType(data['pctChange'], 'Number');
            }
            if (data.hasOwnProperty('posChange')) {
                obj['posChange'] = ApiClient.convertToType(data['posChange'], 'Number');
            }
            if (data.hasOwnProperty('marketVal')) {
                obj['marketVal'] = ApiClient.convertToType(data['marketVal'], 'Number');
            }
            if (data.hasOwnProperty('reportDate')) {
                obj['reportDate'] = ApiClient.convertToType(data['reportDate'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used in the request.
 * @member {String} requestId
 */
InstitutionalTransactions.prototype['requestId'] = undefined;

/**
 * FactSet Security Identifier of Fund. Identifies the security level id of the Fund requested (not-representing the underlying holding). Six alpha-numeric characters, excluding vowels, with an -S suffix (XXXXXX-S). All equity and fixed income securities that exist on FactSet are allocated a security-level permanent identifier.
 * @member {String} fsymId
 */
InstitutionalTransactions.prototype['fsymId'] = undefined;

/**
 * Currency code. The service will default to the funds local currency. For a list of currency ISO codes, visit [Online Assistant Page #1470](https://oa.apps.factset.com/pages/1470).
 * @member {String} currency
 */
InstitutionalTransactions.prototype['currency'] = undefined;

/**
 * Returns the names of the institutions involved in the transactions that occurred between the specified start and end dates.
 * @member {String} holderName
 */
InstitutionalTransactions.prototype['holderName'] = undefined;

/**
 * Returns position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type.
 * @member {Number} pctOS
 */
InstitutionalTransactions.prototype['pctOS'] = undefined;

/**
 * Returns change in position held as a percentage of total outstanding data for the holders of the security whose ownership activity matches the specified change type.
 * @member {Number} pctChange
 */
InstitutionalTransactions.prototype['pctChange'] = undefined;

/**
 * Returns position change data for the holders of the security whose ownership activity matches the specified change type.
 * @member {Number} posChange
 */
InstitutionalTransactions.prototype['posChange'] = undefined;

/**
 * Returns market value data for the holders of the security whose ownership activity matches the specified change type.
 * @member {Number} marketVal
 */
InstitutionalTransactions.prototype['marketVal'] = undefined;

/**
 * Returns the report date for the transactions that occurred between the specified start and end dates.
 * @member {String} reportDate
 */
InstitutionalTransactions.prototype['reportDate'] = undefined;






export default InstitutionalTransactions;

