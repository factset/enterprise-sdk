/**
 * Open:FactSet Marketplace API
 * This API provides read-only access to marketplace products and partners.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PartnerSuccessResponse from '../model/PartnerSuccessResponse';
import PartnersSuccessResponse from '../model/PartnersSuccessResponse';

/**
* Partners service.
* @module api/PartnersApi
*/
export default class PartnersApi {

    /**
    * Constructs a new PartnersApi. 
    * @alias module:api/PartnersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a single FactSet Partner by ID.
     * @param {String} id ID of the product or partner
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PartnerSuccessResponse} and HTTP response
     */
    getPartnerByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPartnerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];


      let returnType = PartnerSuccessResponse;

      return this.apiClient.callApi(
        '/partner/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a single FactSet Partner by ID.
     * @param {String} id ID of the product or partner
     * @return { Promise.< module:model/PartnerSuccessResponse > } a Promise, with data of type {@link module:model/PartnerSuccessResponse }
     */
    getPartnerById(id) {
      return this.getPartnerByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all partners published on FactSet's Partner Catalog.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Limit for number of records returned per page (default to 10)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PartnersSuccessResponse} and HTTP response
     */
    getPartnersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];


      let returnType = PartnersSuccessResponse;

      return this.apiClient.callApi(
        '/partners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all partners published on FactSet's Partner Catalog.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Limit for number of records returned per page (default to 10)
     * @param {Number} opts.paginationOffset Specifies the starting point for pagination. This parameter is used to identify the beginning of next set of results. (default to 0)
     * @return { Promise.< module:model/PartnersSuccessResponse > } a Promise, with data of type {@link module:model/PartnersSuccessResponse }
     */
    getPartners(opts) {
      return this.getPartnersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





