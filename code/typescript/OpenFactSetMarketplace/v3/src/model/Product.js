/**
 * Open:FactSet Marketplace API
 * This API provides read-only access to marketplace products and partners.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributesGroupsItem from './AttributesGroupsItem';
import DocumentsItems from './DocumentsItems';
import ProductPartner from './ProductPartner';
import RelatedProducts from './RelatedProducts';
import ThirdPartyUrls from './ThirdPartyUrls';

/**
 * The Product model module.
 * @module model/Product
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * Product object
     * @alias module:model/Product
     * @param id {String} Product unique identifier
     * @param productPageUrl {String} URL of the product's page on the marketplace catalog.
     * @param title {String} Product title
     * @param description {String} Product description
     * @param createDate {Date} Product creation date
     * @param partner {module:model/ProductPartner} 
     * @param productStatus {module:model/Product.ProductStatusEnum} Product status pertaining to its availability on the Open:FactSet Marketplace
     * @param type {Array.<module:model/Product.TypeEnum>} Product type
     */
    constructor(id, productPageUrl, title, description, createDate, partner, productStatus, type) { 
        
        Product.initialize(this, id, productPageUrl, title, description, createDate, partner, productStatus, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, productPageUrl, title, description, createDate, partner, productStatus, type) { 
        obj['id'] = id;
        obj['productPageUrl'] = productPageUrl;
        obj['title'] = title;
        obj['description'] = description;
        obj['createDate'] = createDate;
        obj['partner'] = partner;
        obj['productStatus'] = productStatus;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('productPageUrl')) {
                obj['productPageUrl'] = ApiClient.convertToType(data['productPageUrl'], 'String');
            }
            if (data.hasOwnProperty('secondaryLink')) {
                obj['secondaryLink'] = ApiClient.convertToType(data['secondaryLink'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Date');
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = ProductPartner.constructFromObject(data['partner']);
            }
            if (data.hasOwnProperty('productStatus')) {
                obj['productStatus'] = ApiClient.convertToType(data['productStatus'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], ['String']);
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [DocumentsItems]);
            }
            if (data.hasOwnProperty('thirdPartyUrls')) {
                obj['thirdPartyUrls'] = ApiClient.convertToType(data['thirdPartyUrls'], [ThirdPartyUrls]);
            }
            if (data.hasOwnProperty('primaryLink')) {
                obj['primaryLink'] = ApiClient.convertToType(data['primaryLink'], 'String');
            }
            if (data.hasOwnProperty('previewLink')) {
                obj['previewLink'] = ApiClient.convertToType(data['previewLink'], 'String');
            }
            if (data.hasOwnProperty('relatedProducts')) {
                obj['relatedProducts'] = ApiClient.convertToType(data['relatedProducts'], [RelatedProducts]);
            }
            if (data.hasOwnProperty('coverageTable')) {
                obj['coverageTable'] = ApiClient.convertToType(data['coverageTable'], 'String');
            }
            if (data.hasOwnProperty('attributesGroups')) {
                obj['attributesGroups'] = ApiClient.convertToType(data['attributesGroups'], [AttributesGroupsItem]);
            }
            if (data.hasOwnProperty('videoUrl')) {
                obj['videoUrl'] = ApiClient.convertToType(data['videoUrl'], 'String');
            }
            if (data.hasOwnProperty('navigatorUrl')) {
                obj['navigatorUrl'] = ApiClient.convertToType(data['navigatorUrl'], 'String');
            }
            if (data.hasOwnProperty('updateFrequency')) {
                obj['updateFrequency'] = ApiClient.convertToType(data['updateFrequency'], 'String');
            }
            if (data.hasOwnProperty('deliveryFrequency')) {
                obj['deliveryFrequency'] = ApiClient.convertToType(data['deliveryFrequency'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Product unique identifier
 * @member {String} id
 */
Product.prototype['id'] = undefined;

/**
 * URL of the product's page on the marketplace catalog.
 * @member {String} productPageUrl
 */
Product.prototype['productPageUrl'] = undefined;

/**
 * Secondary link with additional information
 * @member {String} secondaryLink
 */
Product.prototype['secondaryLink'] = undefined;

/**
 * Product title
 * @member {String} title
 */
Product.prototype['title'] = undefined;

/**
 * Product description
 * @member {String} description
 */
Product.prototype['description'] = undefined;

/**
 * Product creation date
 * @member {Date} createDate
 */
Product.prototype['createDate'] = undefined;

/**
 * @member {module:model/ProductPartner} partner
 */
Product.prototype['partner'] = undefined;

/**
 * Product status pertaining to its availability on the Open:FactSet Marketplace
 * @member {module:model/Product.ProductStatusEnum} productStatus
 */
Product.prototype['productStatus'] = undefined;

/**
 * Product type
 * @member {Array.<module:model/Product.TypeEnum>} type
 */
Product.prototype['type'] = undefined;

/**
 * Product documents
 * @member {Array.<module:model/DocumentsItems>} documents
 */
Product.prototype['documents'] = undefined;

/**
 * Product third party URLs
 * @member {Array.<module:model/ThirdPartyUrls>} thirdPartyUrls
 */
Product.prototype['thirdPartyUrls'] = undefined;

/**
 * Link to primary product information, which is separate from the product's product page URL.
 * @member {String} primaryLink
 */
Product.prototype['primaryLink'] = undefined;

/**
 * Link to additional information on the product, which is separate from the product's product page URL.
 * @member {String} previewLink
 */
Product.prototype['previewLink'] = undefined;

/**
 * Related products
 * @member {Array.<module:model/RelatedProducts>} relatedProducts
 */
Product.prototype['relatedProducts'] = undefined;

/**
 * Product coverage table (HTML)
 * @member {String} coverageTable
 */
Product.prototype['coverageTable'] = undefined;

/**
 * Key-value pairs of product attributes that describe the product and its usage. These attributes groups are used to filter products on the marketplace catalog.
 * @member {Array.<module:model/AttributesGroupsItem>} attributesGroups
 */
Product.prototype['attributesGroups'] = undefined;

/**
 * Product video URL
 * @member {String} videoUrl
 */
Product.prototype['videoUrl'] = undefined;

/**
 * Product Data Navigator URL, on https://open.factset.com/navigator/
 * @member {String} navigatorUrl
 */
Product.prototype['navigatorUrl'] = undefined;

/**
 * Product update frequency, i.e. 'Daily', 'Weekly', etc.
 * @member {module:model/Product.UpdateFrequencyEnum} updateFrequency
 */
Product.prototype['updateFrequency'] = undefined;

/**
 * Product delivery frequency, i.e. 'Daily', 'Weekly', etc.
 * @member {module:model/Product.DeliveryFrequencyEnum} deliveryFrequency
 */
Product.prototype['deliveryFrequency'] = undefined;





/**
 * Allowed values for the <code>productStatus</code> property.
 * @enum {String}
 * @readonly
 */
Product['ProductStatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "candidate"
     * @const
     */
    "candidate": "candidate",

    /**
     * value: "comingSoon"
     * @const
     */
    "comingSoon": "comingSoon",

    /**
     * value: "developmentQueue"
     * @const
     */
    "developmentQueue": "developmentQueue",

    /**
     * value: "new"
     * @const
     */
    "new": "new",

    /**
     * value: "updated"
     * @const
     */
    "updated": "updated"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Product['TypeEnum'] = {

    /**
     * value: "dataFeed"
     * @const
     */
    "dataFeed": "dataFeed",

    /**
     * value: "api"
     * @const
     */
    "api": "api",

    /**
     * value: "platform"
     * @const
     */
    "platform": "platform"
};


/**
 * Allowed values for the <code>updateFrequency</code> property.
 * @enum {String}
 * @readonly
 */
Product['UpdateFrequencyEnum'] = {

    /**
     * value: "quarterly"
     * @const
     */
    "quarterly": "quarterly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "annual"
     * @const
     */
    "annual": "annual",

    /**
     * value: "event"
     * @const
     */
    "event": "event",

    /**
     * value: "intraday"
     * @const
     */
    "intraday": "intraday"
};


/**
 * Allowed values for the <code>deliveryFrequency</code> property.
 * @enum {String}
 * @readonly
 */
Product['DeliveryFrequencyEnum'] = {

    /**
     * value: "intradayDaily"
     * @const
     */
    "intradayDaily": "intradayDaily",

    /**
     * value: "quarterly"
     * @const
     */
    "quarterly": "quarterly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "intraday"
     * @const
     */
    "intraday": "intraday",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "annual"
     * @const
     */
    "annual": "annual",

    /**
     * value: "event"
     * @const
     */
    "event": "event"
};



export default Product;

