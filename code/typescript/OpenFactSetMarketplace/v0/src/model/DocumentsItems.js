/**
 * Open:FactSet Marketplace API
 * This API provides read-only access to marketplace products and partners.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentsItems model module.
 * @module model/DocumentsItems
 */
class DocumentsItems {
    /**
     * Constructs a new <code>DocumentsItems</code>.
     * Product documentation object
     * @alias module:model/DocumentsItems
     */
    constructor() { 
        
        DocumentsItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentsItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentsItems} obj Optional instance to populate.
     * @return {module:model/DocumentsItems} The populated <code>DocumentsItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentsItems();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('isFile')) {
                obj['isFile'] = ApiClient.convertToType(data['isFile'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Document name
 * @member {String} name
 */
DocumentsItems.prototype['name'] = undefined;

/**
 * String detailing which section of the product page this document should be displayed in, i.e. 'Documentation' or 'Sample Data'.
 * @member {String} section
 */
DocumentsItems.prototype['section'] = undefined;

/**
 * Boolean flag indicating whether the document is publicly accessible without authentication.
 * @member {Boolean} isPublic
 */
DocumentsItems.prototype['isPublic'] = undefined;

/**
 * Boolean flag indicating whether the document is a file for download or a URL.
 * @member {Boolean} isFile
 */
DocumentsItems.prototype['isFile'] = undefined;

/**
 * Document URL
 * @member {String} url
 */
DocumentsItems.prototype['url'] = undefined;

/**
 * Document file name, for file downloads.
 * @member {String} fileName
 */
DocumentsItems.prototype['fileName'] = undefined;






export default DocumentsItems;

