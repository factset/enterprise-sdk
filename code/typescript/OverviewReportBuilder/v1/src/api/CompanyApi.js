/**
 * FactSet Overview Report Builder API
 * Get relevant industry-specific data for high level analysis of public and private companies
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import KeyStatsResponse from '../model/KeyStatsResponse';
import PeerListResponse from '../model/PeerListResponse';
import ProfileResponse from '../model/ProfileResponse';
import StachTableResponse from '../model/StachTableResponse';

/**
* Company service.
* @module api/CompanyApi
*/
export default class CompanyApi {

    /**
    * Constructs a new CompanyApi. 
    * @alias module:api/CompanyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Current Capitalization
     * Get current capitalization data
     * @param {String} id Company ticker
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StachTableResponse} and HTTP response
     */
    getCurrentCapWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCurrentCap");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = StachTableResponse;

      return this.apiClient.callApi(
        '/current-cap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Current Capitalization
     * Get current capitalization data
     * @param {String} id Company ticker
     * @return { Promise.< module:model/StachTableResponse > } a Promise, with data of type {@link module:model/StachTableResponse }
     */
    getCurrentCap(id) {
      return this.getCurrentCapWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Financial / Estimate Highlights
     * Get financial highlights data
     * @param {String} id Company ticker
     * @param {Object} opts Optional parameters
     * @param {Number} opts.actual The number of actual data periods to be returned. Must be 0 or greater (default to 4)
     * @param {Number} opts.estimate The number of estimate data periods to be returned. Must be 0 or greater (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StachTableResponse} and HTTP response
     */
    getFinancialHighlightsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFinancialHighlights");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'actual': opts['actual'],
        'estimate': opts['estimate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = StachTableResponse;

      return this.apiClient.callApi(
        '/financial-highlights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Financial / Estimate Highlights
     * Get financial highlights data
     * @param {String} id Company ticker
     * @param {Object} opts Optional parameters
     * @param {Number} opts.actual The number of actual data periods to be returned. Must be 0 or greater (default to 4)
     * @param {Number} opts.estimate The number of estimate data periods to be returned. Must be 0 or greater (default to 1)
     * @return { Promise.< module:model/StachTableResponse > } a Promise, with data of type {@link module:model/StachTableResponse }
     */
    getFinancialHighlights(id, opts) {
      return this.getFinancialHighlightsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Key Stats
     * Get key stats data
     * @param {String} id Company ticker
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyStatsResponse} and HTTP response
     */
    getKeyStatsWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKeyStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = KeyStatsResponse;

      return this.apiClient.callApi(
        '/key-stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Key Stats
     * Get key stats data
     * @param {String} id Company ticker
     * @return { Promise.< module:model/KeyStatsResponse > } a Promise, with data of type {@link module:model/KeyStatsResponse }
     */
    getKeyStats(id) {
      return this.getKeyStatsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Peer List
     * Retrieve peers for the provided company
     * @param {String} id Company ticker
     * @param {Object} opts Optional parameters
     * @param {Number} opts.topn Limits the number of peers returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PeerListResponse} and HTTP response
     */
    getPeerlistWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPeerlist");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'topn': opts['topn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = PeerListResponse;

      return this.apiClient.callApi(
        '/peer-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Peer List
     * Retrieve peers for the provided company
     * @param {String} id Company ticker
     * @param {Object} opts Optional parameters
     * @param {Number} opts.topn Limits the number of peers returned.
     * @return { Promise.< module:model/PeerListResponse > } a Promise, with data of type {@link module:model/PeerListResponse }
     */
    getPeerlist(id, opts) {
      return this.getPeerlistWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Overview Profile
     * Retrieve all profile properties for the provided security
     * @param {String} id Company ticker
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProfileResponse} and HTTP response
     */
    getProfileProfileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProfileProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ProfileResponse;

      return this.apiClient.callApi(
        '/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Overview Profile
     * Retrieve all profile properties for the provided security
     * @param {String} id Company ticker
     * @return { Promise.< module:model/ProfileResponse > } a Promise, with data of type {@link module:model/ProfileResponse }
     */
    getProfileProfile(id) {
      return this.getProfileProfileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transactions
     * get transactions data
     * @param {String} id Company ticker
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.transactionType Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive.
     * @param {module:model/String} opts.financingType Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StachTableResponse} and HTTP response
     */
    getTrasactionsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrasactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'transactionType': opts['transactionType'],
        'financingType': opts['financingType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = StachTableResponse;

      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Transactions
     * get transactions data
     * @param {String} id Company ticker
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.transactionType Filters response to return only this type of transaction. If not specified, returns all transactions. Values are not case sensitive.
     * @param {module:model/String} opts.financingType Filters response to return transactions of this financing type. If not specified, returns all transactions. Values are not case sensitive
     * @return { Promise.< module:model/StachTableResponse > } a Promise, with data of type {@link module:model/StachTableResponse }
     */
    getTrasactions(id, opts) {
      return this.getTrasactionsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





