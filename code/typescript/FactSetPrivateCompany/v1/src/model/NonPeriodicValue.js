/**
 * FactSet Private Company API
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NonPeriodicValue model module.
 * @module model/NonPeriodicValue
 */
class NonPeriodicValue {
    /**
     * Constructs a new <code>NonPeriodicValue</code>.
     * Value of the data item requested. Note that the type of value is &#39;object&#39;, and depending on the item requested, the value could be an object representation of a string or double. 
     * @alias module:model/NonPeriodicValue
     */
    constructor() { 
        
        NonPeriodicValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NonPeriodicValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NonPeriodicValue} obj Optional instance to populate.
     * @return {module:model/NonPeriodicValue} The populated <code>NonPeriodicValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NonPeriodicValue();

            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
            if (data.hasOwnProperty('numberValue')) {
                obj['numberValue'] = ApiClient.convertToType(data['numberValue'], 'Number');
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Value of the requested metric
 * @member {String} stringValue
 */
NonPeriodicValue.prototype['stringValue'] = undefined;

/**
 * Value of the requested metric
 * @member {Number} numberValue
 */
NonPeriodicValue.prototype['numberValue'] = undefined;

/**
 * Indicated whether the value of the requested metric is a string or a number
 * @member {String} valueType
 */
NonPeriodicValue.prototype['valueType'] = undefined;






export default NonPeriodicValue;

