/**
 * FactSet Private Company API
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntityMatch model module.
 * @module model/EntityMatch
 */
class EntityMatch {
    /**
     * Constructs a new <code>EntityMatch</code>.
     * Entity Match object showing the decision reached for each Entity. 
     * @alias module:model/EntityMatch
     */
    constructor() { 
        
        EntityMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityMatch} obj Optional instance to populate.
     * @return {module:model/EntityMatch} The populated <code>EntityMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityMatch();

            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('entityName')) {
                obj['entityName'] = ApiClient.convertToType(data['entityName'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('entityTypeCode')) {
                obj['entityTypeCode'] = ApiClient.convertToType(data['entityTypeCode'], 'String');
            }
        }
        return obj;
    }


}

/**
 * FactSet Entity Identifier of the entity matched respective to the requested Name submitted. For more detail, visit [FactSet Permanent Security Identifier](https://oa.apps.factset.com/cms/oaAttachment/64c3213a-f415-4c27-a336-92c73a72deed/24881) 
 * @member {String} entityId
 */
EntityMatch.prototype['entityId'] = undefined;

/**
 * Full name corresponding to the matched entity.
 * @member {String} entityName
 */
EntityMatch.prototype['entityName'] = undefined;

/**
 * ISO2 country code corresponding to the location of the matched entity.
 * @member {String} countryCode
 */
EntityMatch.prototype['countryCode'] = undefined;

/**
 * Code representing the entity type of the matched entity. For more details, view Online Assistant page [OA16823](https://my.apps.factset.com/oa/pages/16823)
 * @member {String} entityTypeCode
 */
EntityMatch.prototype['entityTypeCode'] = undefined;






export default EntityMatch;

