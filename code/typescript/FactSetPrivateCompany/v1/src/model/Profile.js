/**
 * FactSet Private Company API
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Profile model module.
 * @module model/Profile
 */
class Profile {
    /**
     * Constructs a new <code>Profile</code>.
     * Profile object
     * @alias module:model/Profile
     */
    constructor() { 
        
        Profile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Profile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Profile} obj Optional instance to populate.
     * @return {module:model/Profile} The populated <code>Profile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Profile();

            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('ceo')) {
                obj['ceo'] = ApiClient.convertToType(data['ceo'], 'String');
            }
            if (data.hasOwnProperty('founders')) {
                obj['founders'] = ApiClient.convertToType(data['founders'], ['String']);
            }
            if (data.hasOwnProperty('chair')) {
                obj['chair'] = ApiClient.convertToType(data['chair'], 'String');
            }
            if (data.hasOwnProperty('peBackingCurrent')) {
                obj['peBackingCurrent'] = ApiClient.convertToType(data['peBackingCurrent'], 'Boolean');
            }
            if (data.hasOwnProperty('peBackingEver')) {
                obj['peBackingEver'] = ApiClient.convertToType(data['peBackingEver'], 'Boolean');
            }
            if (data.hasOwnProperty('vcBackingCurrent')) {
                obj['vcBackingCurrent'] = ApiClient.convertToType(data['vcBackingCurrent'], 'Boolean');
            }
            if (data.hasOwnProperty('vcBackingEver')) {
                obj['vcBackingEver'] = ApiClient.convertToType(data['vcBackingEver'], 'Boolean');
            }
            if (data.hasOwnProperty('totalInvestors')) {
                obj['totalInvestors'] = ApiClient.convertToType(data['totalInvestors'], 'Number');
            }
            if (data.hasOwnProperty('activeInvestors')) {
                obj['activeInvestors'] = ApiClient.convertToType(data['activeInvestors'], 'Number');
            }
            if (data.hasOwnProperty('activeInvestorsList')) {
                obj['activeInvestorsList'] = ApiClient.convertToType(data['activeInvestorsList'], ['String']);
            }
            if (data.hasOwnProperty('exitedInvestorsList')) {
                obj['exitedInvestorsList'] = ApiClient.convertToType(data['exitedInvestorsList'], ['String']);
            }
            if (data.hasOwnProperty('amountRaisedUSD')) {
                obj['amountRaisedUSD'] = ApiClient.convertToType(data['amountRaisedUSD'], 'Number');
            }
            if (data.hasOwnProperty('amountRaisedLocalCurrency')) {
                obj['amountRaisedLocalCurrency'] = ApiClient.convertToType(data['amountRaisedLocalCurrency'], 'Number');
            }
            if (data.hasOwnProperty('vcpeAmountRaisedUSD')) {
                obj['vcpeAmountRaisedUSD'] = ApiClient.convertToType(data['vcpeAmountRaisedUSD'], 'Number');
            }
            if (data.hasOwnProperty('vcpeAmountRaisedLocalCurrency')) {
                obj['vcpeAmountRaisedLocalCurrency'] = ApiClient.convertToType(data['vcpeAmountRaisedLocalCurrency'], 'Number');
            }
            if (data.hasOwnProperty('investmentStats')) {
                obj['investmentStats'] = ApiClient.convertToType(data['investmentStats'], 'Number');
            }
            if (data.hasOwnProperty('lastInvestmentDate')) {
                obj['lastInvestmentDate'] = ApiClient.convertToType(data['lastInvestmentDate'], 'Date');
            }
            if (data.hasOwnProperty('firstInvestmentDate')) {
                obj['firstInvestmentDate'] = ApiClient.convertToType(data['firstInvestmentDate'], 'Date');
            }
            if (data.hasOwnProperty('businessTags')) {
                obj['businessTags'] = ApiClient.convertToType(data['businessTags'], ['String']);
            }
            if (data.hasOwnProperty('latestPostMoneyValuation')) {
                obj['latestPostMoneyValuation'] = ApiClient.convertToType(data['latestPostMoneyValuation'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Identifier that was used for the request
 * @member {String} requestId
 */
Profile.prototype['requestId'] = undefined;

/**
 * Code representing the currency
 * @member {String} currency
 */
Profile.prototype['currency'] = undefined;

/**
 * Currently listed company CEO
 * @member {String} ceo
 */
Profile.prototype['ceo'] = undefined;

/**
 * Currently listed company founders
 * @member {Array.<String>} founders
 */
Profile.prototype['founders'] = undefined;

/**
 * Current chairperson
 * @member {String} chair
 */
Profile.prototype['chair'] = undefined;

/**
 * Flag for whether the specified company currently has PE backing
 * @member {Boolean} peBackingCurrent
 */
Profile.prototype['peBackingCurrent'] = undefined;

/**
 * Flag for whether the specified company has ever had PE backing
 * @member {Boolean} peBackingEver
 */
Profile.prototype['peBackingEver'] = undefined;

/**
 * Flag for whether the specified company currently has VC backing
 * @member {Boolean} vcBackingCurrent
 */
Profile.prototype['vcBackingCurrent'] = undefined;

/**
 * Flag for whether the specified company has ever had VC backing
 * @member {Boolean} vcBackingEver
 */
Profile.prototype['vcBackingEver'] = undefined;

/**
 * Total number of investment rounds for the portfolio company
 * @member {Number} totalInvestors
 */
Profile.prototype['totalInvestors'] = undefined;

/**
 * Number of active portfolio companies for the specified private equity firm
 * @member {Number} activeInvestors
 */
Profile.prototype['activeInvestors'] = undefined;

/**
 * List of investors that are active investors in the given portfolio company itemized by security
 * @member {Array.<String>} activeInvestorsList
 */
Profile.prototype['activeInvestorsList'] = undefined;

/**
 * List of investors that had previously invested in the given portfolio company itemized by security
 * @member {Array.<String>} exitedInvestorsList
 */
Profile.prototype['exitedInvestorsList'] = undefined;

/**
 * Current estimated total of venture capital raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed.  
 * @member {Number} amountRaisedUSD
 */
Profile.prototype['amountRaisedUSD'] = undefined;

/**
 * Current estimated total of venture capital raised in local currency.
 * @member {Number} amountRaisedLocalCurrency
 */
Profile.prototype['amountRaisedLocalCurrency'] = undefined;

/**
 * Current estimated total of venture capital and private equity raised in USD.  Each investment amount is currency converted on the day of the investment. Then all values are summed. 
 * @member {Number} vcpeAmountRaisedUSD
 */
Profile.prototype['vcpeAmountRaisedUSD'] = undefined;

/**
 * Current estimated total of venture capital raised in all rounds of the portfolio company. This item applies to venture capital raised rounds only.   
 * @member {Number} vcpeAmountRaisedLocalCurrency
 */
Profile.prototype['vcpeAmountRaisedLocalCurrency'] = undefined;

/**
 * Investment stats summary for the specified portfolio company. Always represented in USD.  
 * @member {Number} investmentStats
 */
Profile.prototype['investmentStats'] = undefined;

/**
 * The date that is associated with the most recent amount of money that was invested into the portfolio company
 * @member {Date} lastInvestmentDate
 */
Profile.prototype['lastInvestmentDate'] = undefined;

/**
 * The date that is associated with the amount of money that was first invested into the portfolio company.
 * @member {Date} firstInvestmentDate
 */
Profile.prototype['firstInvestmentDate'] = undefined;

/**
 * Tag(s) that describe what the company does based on the most common language (text snippets)  found on their website and/or social media sites. 
 * @member {Array.<String>} businessTags
 */
Profile.prototype['businessTags'] = undefined;

/**
 * The value of a company, post capital injection. This is the latest value and may not include  the most recent rounds of funding. Always represented in USD 
 * @member {Number} latestPostMoneyValuation
 */
Profile.prototype['latestPostMoneyValuation'] = undefined;






export default Profile;

