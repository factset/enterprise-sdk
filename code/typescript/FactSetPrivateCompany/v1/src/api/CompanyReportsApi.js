/**
 * FactSet Private Company API
 * FactSet Private Company API encompasses Private Company Financials and includes some Private Company non-periodic data. Additional Private Company firmographics can be found in the FactSet Entity API. <p><b>Rate limit is set to 10 requests per second and 10 concurrent requests per user</b>.</p> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import FinancialStatementsResponse from '../model/FinancialStatementsResponse';
import ProfileResponse from '../model/ProfileResponse';

/**
* CompanyReports service.
* @module api/CompanyReportsApi
*/
export default class CompanyReportsApi {

    /**
    * Constructs a new CompanyReportsApi. 
    * @alias module:api/CompanyReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns Private Company Financial Data
     * Returns financial data for specified private companies and statement type (income,  balance sheet, cash flow, and ratios) over an annual reporting period. <br/> Use the ```/universe``` endpoint to retrieve valid Private Company identifiers.<br/><br/> **Note:** Due to variations in calculation time of average exchange rates, there may be some minor differences in the values of company report financial statement attributes if you are requesting for  a currency other than local, when compared to workstation. 
     * @param {Array.<String>} ids The requested list of Factset Private Company identifiers in XXXXXX-E format <p>***ids limit** =  50 per request*</p> 
     * @param {module:model/String} statementType The type of financial statement being requested
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency Currency code for currency values. For a list of currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  Giving input as \"DOC\" would give the values in reporting currency for the requested ids.  (default to 'LOCAL')
     * @param {Number} opts.numberAnnualPeriods The number of annual periods for the returned data which will be displayed in descending order from most recent annual period for the number of annual periods specified. </br>Within range of 1 to 100. If not specified default will be 4.       (default to 4)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinancialStatementsResponse} and HTTP response
     */
    getFinancialsReportWithHttpInfo(ids, statementType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getFinancialsReport");
      }
      // verify the required parameter 'statementType' is set
      if (statementType === undefined || statementType === null) {
        throw new Error("Missing the required parameter 'statementType' when calling getFinancialsReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'statementType': statementType,
        'currency': opts['currency'],
        'numberAnnualPeriods': opts['numberAnnualPeriods']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FinancialStatementsResponse;

      return this.apiClient.callApi(
        '/company-reports/financial-statement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Private Company Financial Data
     * Returns financial data for specified private companies and statement type (income,  balance sheet, cash flow, and ratios) over an annual reporting period. <br/> Use the ```/universe``` endpoint to retrieve valid Private Company identifiers.<br/><br/> **Note:** Due to variations in calculation time of average exchange rates, there may be some minor differences in the values of company report financial statement attributes if you are requesting for  a currency other than local, when compared to workstation. 
     * @param {Array.<String>} ids The requested list of Factset Private Company identifiers in XXXXXX-E format <p>***ids limit** =  50 per request*</p> 
     * @param {module:model/String} statementType The type of financial statement being requested
     * @param {Object} opts Optional parameters
     * @param {String} opts.currency Currency code for currency values. For a list of currency ISO codes, visit Online Assistant Page [OA1470](https://my.apps.factset.com/oa/pages/1470).  Giving input as \"DOC\" would give the values in reporting currency for the requested ids.  (default to 'LOCAL')
     * @param {Number} opts.numberAnnualPeriods The number of annual periods for the returned data which will be displayed in descending order from most recent annual period for the number of annual periods specified. </br>Within range of 1 to 100. If not specified default will be 4.       (default to 4)
     * @return { Promise.< module:model/FinancialStatementsResponse > } a Promise, with data of type {@link module:model/FinancialStatementsResponse }
     */
    getFinancialsReport(ids, statementType, opts) {
      return this.getFinancialsReportWithHttpInfo(ids, statementType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns Private Company Non-Periodic Data
     * Retrieves a comprehensive overview of key non-periodic details and information for a  specified list of identifiers. All values provided in the response are absolute. <br/> Use the ```/universe``` endpoint to retrieve valid Private Company identifiers.<br/> 
     * @param {Array.<String>} ids The requested list of Factset Private Company identifiers in XXXXXX-E format <p>***ids limit** =  50 per request*</p> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProfileResponse} and HTTP response
     */
    getProfileReportWithHttpInfo(ids) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getProfileReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ProfileResponse;

      return this.apiClient.callApi(
        '/company-reports/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns Private Company Non-Periodic Data
     * Retrieves a comprehensive overview of key non-periodic details and information for a  specified list of identifiers. All values provided in the response are absolute. <br/> Use the ```/universe``` endpoint to retrieve valid Private Company identifiers.<br/> 
     * @param {Array.<String>} ids The requested list of Factset Private Company identifiers in XXXXXX-E format <p>***ids limit** =  50 per request*</p> 
     * @return { Promise.< module:model/ProfileResponse > } a Promise, with data of type {@link module:model/ProfileResponse }
     */
    getProfileReport(ids) {
      return this.getProfileReportWithHttpInfo(ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





