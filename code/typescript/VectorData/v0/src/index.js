/**
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import ChunkTextResponse from './model/ChunkTextResponse';
import ChunkTextResponseMeta from './model/ChunkTextResponseMeta';
import ChunkTextResponseMetaPagination from './model/ChunkTextResponseMetaPagination';
import ChunkTextResult from './model/ChunkTextResult';
import DocumentTypes from './model/DocumentTypes';
import DocumentTypesResponse from './model/DocumentTypesResponse';
import ErrorObject from './model/ErrorObject';
import ErrorResponse from './model/ErrorResponse';
import Meta from './model/Meta';
import Schemas from './model/Schemas';
import SchemasResponse from './model/SchemasResponse';
import Source from './model/Source';
import SourceResponse from './model/SourceResponse';
import Themes from './model/Themes';
import ThemesResponse from './model/ThemesResponse';
import VectorDataRequest from './model/VectorDataRequest';
import VectorDataRequestData from './model/VectorDataRequestData';
import VectorDataResponse from './model/VectorDataResponse';
import VectorDataResponseMeta from './model/VectorDataResponseMeta';
import VectorDataResult from './model/VectorDataResult';

import MetaApi from './api/MetaApi';
import VectorApi from './api/VectorApi';


/**
* Vector Data client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var vectordata = require('index'); // See note below*.
* var xxxSvc = new vectordata.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new vectordata.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new vectordata.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new vectordata.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ChunkTextResponse model constructor.
     * @property {module:model/ChunkTextResponse}
     */
    ChunkTextResponse,

    /**
     * The ChunkTextResponseMeta model constructor.
     * @property {module:model/ChunkTextResponseMeta}
     */
    ChunkTextResponseMeta,

    /**
     * The ChunkTextResponseMetaPagination model constructor.
     * @property {module:model/ChunkTextResponseMetaPagination}
     */
    ChunkTextResponseMetaPagination,

    /**
     * The ChunkTextResult model constructor.
     * @property {module:model/ChunkTextResult}
     */
    ChunkTextResult,

    /**
     * The DocumentTypes model constructor.
     * @property {module:model/DocumentTypes}
     */
    DocumentTypes,

    /**
     * The DocumentTypesResponse model constructor.
     * @property {module:model/DocumentTypesResponse}
     */
    DocumentTypesResponse,

    /**
     * The ErrorObject model constructor.
     * @property {module:model/ErrorObject}
     */
    ErrorObject,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta,

    /**
     * The Schemas model constructor.
     * @property {module:model/Schemas}
     */
    Schemas,

    /**
     * The SchemasResponse model constructor.
     * @property {module:model/SchemasResponse}
     */
    SchemasResponse,

    /**
     * The Source model constructor.
     * @property {module:model/Source}
     */
    Source,

    /**
     * The SourceResponse model constructor.
     * @property {module:model/SourceResponse}
     */
    SourceResponse,

    /**
     * The Themes model constructor.
     * @property {module:model/Themes}
     */
    Themes,

    /**
     * The ThemesResponse model constructor.
     * @property {module:model/ThemesResponse}
     */
    ThemesResponse,

    /**
     * The VectorDataRequest model constructor.
     * @property {module:model/VectorDataRequest}
     */
    VectorDataRequest,

    /**
     * The VectorDataRequestData model constructor.
     * @property {module:model/VectorDataRequestData}
     */
    VectorDataRequestData,

    /**
     * The VectorDataResponse model constructor.
     * @property {module:model/VectorDataResponse}
     */
    VectorDataResponse,

    /**
     * The VectorDataResponseMeta model constructor.
     * @property {module:model/VectorDataResponseMeta}
     */
    VectorDataResponseMeta,

    /**
     * The VectorDataResult model constructor.
     * @property {module:model/VectorDataResult}
     */
    VectorDataResult,

    /**
    * The MetaApi service constructor.
    * @property {module:api/MetaApi}
    */
    MetaApi,

    /**
    * The VectorApi service constructor.
    * @property {module:api/VectorApi}
    */
    VectorApi,

};
