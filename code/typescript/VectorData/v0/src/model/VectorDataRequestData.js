/**
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VectorDataRequestData model module.
 * @module model/VectorDataRequestData
 */
class VectorDataRequestData {
    /**
     * Constructs a new <code>VectorDataRequestData</code>.
     * Elements of vetctor data request.
     * @alias module:model/VectorDataRequestData
     * @param query {String} Search to include the query text.
     * @param startDate {Date} Start Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
     * @param endDate {Date} End Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
     * @param sources {Array.<String>} Code for document source to include. Currently EDGAR, StreetAccount and FactSet Callstreet Transcripts are available.
     */
    constructor(query, startDate, endDate, sources) { 
        
        VectorDataRequestData.initialize(this, query, startDate, endDate, sources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query, startDate, endDate, sources) { 
        obj['query'] = query;
        obj['startDate'] = startDate;
        obj['endDate'] = endDate;
        obj['sources'] = sources;
    }

    /**
     * Constructs a <code>VectorDataRequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VectorDataRequestData} obj Optional instance to populate.
     * @return {module:model/VectorDataRequestData} The populated <code>VectorDataRequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VectorDataRequestData();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('esgTheme')) {
                obj['esgTheme'] = ApiClient.convertToType(data['esgTheme'], ['String']);
            }
            if (data.hasOwnProperty('searchConcept')) {
                obj['searchConcept'] = ApiClient.convertToType(data['searchConcept'], ['String']);
            }
            if (data.hasOwnProperty('sentiment')) {
                obj['sentiment'] = ApiClient.convertToType(data['sentiment'], ['String']);
            }
            if (data.hasOwnProperty('documentTypes')) {
                obj['documentTypes'] = ApiClient.convertToType(data['documentTypes'], ['String']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Search to include the query text.
 * @member {String} query
 */
VectorDataRequestData.prototype['query'] = undefined;

/**
 * Start Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
 * @member {Date} startDate
 */
VectorDataRequestData.prototype['startDate'] = undefined;

/**
 * End Date. Format is YYYY-MM-DD or relative +/- days (0,-1,etc).
 * @member {Date} endDate
 */
VectorDataRequestData.prototype['endDate'] = undefined;

/**
 * The search to include any esg themes of given sources.
 * @member {Array.<String>} esgTheme
 */
VectorDataRequestData.prototype['esgTheme'] = undefined;

/**
 * The search to include any concept of given sources.
 * @member {Array.<String>} searchConcept
 */
VectorDataRequestData.prototype['searchConcept'] = undefined;

/**
 * The search to include any sentiment of given sources.
 * @member {Array.<String>} sentiment
 */
VectorDataRequestData.prototype['sentiment'] = undefined;

/**
 * The search to include any of the document type.
 * @member {Array.<String>} documentTypes
 */
VectorDataRequestData.prototype['documentTypes'] = undefined;

/**
 * Code for document source to include. Currently EDGAR, StreetAccount and FactSet Callstreet Transcripts are available.
 * @member {Array.<String>} sources
 */
VectorDataRequestData.prototype['sources'] = undefined;






export default VectorDataRequestData;

