/**
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChunkTextResponse from '../model/ChunkTextResponse';
import ErrorResponse from '../model/ErrorResponse';
import VectorDataRequest from '../model/VectorDataRequest';
import VectorDataResponse from '../model/VectorDataResponse';

/**
* Vector service.
* @module api/VectorApi
*/
export default class VectorApi {

    /**
    * Constructs a new VectorApi. 
    * @alias module:api/VectorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns chunked text for the given vectorId.
     * Returns content and link of provided vector id.
     * @param {Array.<String>} vectorId Unique identifier for a document
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return.  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChunkTextResponse} and HTTP response
     */
    getCountWithHttpInfo(vectorId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vectorId' is set
      if (vectorId === undefined || vectorId === null) {
        throw new Error("Missing the required parameter 'vectorId' when calling getCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'vectorId': this.apiClient.buildCollectionParam(vectorId, 'multi'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ChunkTextResponse;

      return this.apiClient.callApi(
        '/chunk-text', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns chunked text for the given vectorId.
     * Returns content and link of provided vector id.
     * @param {Array.<String>} vectorId Unique identifier for a document
     * @param {Object} opts Optional parameters
     * @param {Number} opts.paginationLimit Number of results to return per page. (default to 25)
     * @param {Number} opts.paginationOffset Page number of the results to return.  (default to 0)
     * @return { Promise.< module:model/ChunkTextResponse > } a Promise, with data of type {@link module:model/ChunkTextResponse }
     */
    getCount(vectorId, opts) {
      return this.getCountWithHttpInfo(vectorId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return vector information based on the input parameters below
     * Returns the vector information.
     * @param {Object} opts Optional parameters
     * @param {module:model/VectorDataRequest} opts.vectorDataRequest Input parameters for vector data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VectorDataResponse} and HTTP response
     */
    postVectorWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['vectorDataRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = VectorDataResponse;

      return this.apiClient.callApi(
        '/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return vector information based on the input parameters below
     * Returns the vector information.
     * @param {Object} opts Optional parameters
     * @param {module:model/VectorDataRequest} opts.vectorDataRequest Input parameters for vector data.
     * @return { Promise.< module:model/VectorDataResponse > } a Promise, with data of type {@link module:model/VectorDataResponse }
     */
    postVector(opts) {
      return this.postVectorWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





