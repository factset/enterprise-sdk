/**
 * Vector Data API
 * The Vector Data API provides streamlined access to vector data through its defined endpoints. It supports functionalities such as: Retrieving detailed vector data based on user-defined parameters. Efficiently processing associated text data for enhanced performance. This API is designed to enable developers to integrate vector data into their applications, ensuring flexibility and performance while leveraging the specified endpoint functionalities.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentTypesResponse from '../model/DocumentTypesResponse';
import ErrorResponse from '../model/ErrorResponse';
import SchemasResponse from '../model/SchemasResponse';
import SourceResponse from '../model/SourceResponse';
import ThemesResponse from '../model/ThemesResponse';

/**
* Meta service.
* @module api/MetaApi
*/
export default class MetaApi {

    /**
    * Constructs a new MetaApi. 
    * @alias module:api/MetaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the document types.
     * Retrieves and delivers a comprehensive list of all available `documentTypes`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentTypesResponse} and HTTP response
     */
    getDocumentTypesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = DocumentTypesResponse;

      return this.apiClient.callApi(
        '/meta/document-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the document types.
     * Retrieves and delivers a comprehensive list of all available `documentTypes`.
     * @return { Promise.< module:model/DocumentTypesResponse > } a Promise, with data of type {@link module:model/DocumentTypesResponse }
     */
    getDocumentTypes() {
      return this.getDocumentTypesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the sources.
     * Retrieves and delivers a comprehensive list of all available `sources`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceResponse} and HTTP response
     */
    getSourcesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SourceResponse;

      return this.apiClient.callApi(
        '/meta/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the sources.
     * Retrieves and delivers a comprehensive list of all available `sources`.
     * @return { Promise.< module:model/SourceResponse > } a Promise, with data of type {@link module:model/SourceResponse }
     */
    getSources() {
      return this.getSourcesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the themes.
     * Retrieves and delivers a comprehensive list of all available `themes`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ThemesResponse} and HTTP response
     */
    getThemesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ThemesResponse;

      return this.apiClient.callApi(
        '/meta/themes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the themes.
     * Retrieves and delivers a comprehensive list of all available `themes`.
     * @return { Promise.< module:model/ThemesResponse > } a Promise, with data of type {@link module:model/ThemesResponse }
     */
    getThemes() {
      return this.getThemesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the schemas.
     * Retrieves and delivers a comprehensive list of all available `schemas`.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sources Code for document source to include.  This is a comma-separated list. Use the `/meta/sources` endpoint to get the list of available sources.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SchemasResponse} and HTTP response
     */
    getschemasWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sources': this.apiClient.buildCollectionParam(opts['sources'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = SchemasResponse;

      return this.apiClient.callApi(
        '/meta/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the schemas.
     * Retrieves and delivers a comprehensive list of all available `schemas`.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sources Code for document source to include.  This is a comma-separated list. Use the `/meta/sources` endpoint to get the list of available sources.
     * @return { Promise.< module:model/SchemasResponse > } a Promise, with data of type {@link module:model/SchemasResponse }
     */
    getschemas(opts) {
      return this.getschemasWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





