/**
 * FactSet Mergers and Acquisitions API
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Participant from './Participant';
import Target from './Target';

/**
 * The DealCompany model module.
 * @module model/DealCompany
 */
class DealCompany {
    /**
     * Constructs a new <code>DealCompany</code>.
     * @alias module:model/DealCompany
     */
    constructor() { 
        
        DealCompany.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DealCompany</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DealCompany} obj Optional instance to populate.
     * @return {module:model/DealCompany} The populated <code>DealCompany</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DealCompany();

            if (data.hasOwnProperty('dealId')) {
                obj['dealId'] = ApiClient.convertToType(data['dealId'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = Target.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('buyers')) {
                obj['buyers'] = ApiClient.convertToType(data['buyers'], [Participant]);
            }
            if (data.hasOwnProperty('sellers')) {
                obj['sellers'] = ApiClient.convertToType(data['sellers'], [Participant]);
            }
            if (data.hasOwnProperty('dealType')) {
                obj['dealType'] = ApiClient.convertToType(data['dealType'], 'String');
            }
            if (data.hasOwnProperty('announceDate')) {
                obj['announceDate'] = ApiClient.convertToType(data['announceDate'], 'Date');
            }
            if (data.hasOwnProperty('closeDate')) {
                obj['closeDate'] = ApiClient.convertToType(data['closeDate'], 'Date');
            }
            if (data.hasOwnProperty('transactionValue')) {
                obj['transactionValue'] = ApiClient.convertToType(data['transactionValue'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Identifier for the deal.
 * @member {String} dealId
 */
DealCompany.prototype['dealId'] = undefined;

/**
 * @member {module:model/Target} target
 */
DealCompany.prototype['target'] = undefined;

/**
 * Array of participants in the deal who are buyers.
 * @member {Array.<module:model/Participant>} buyers
 */
DealCompany.prototype['buyers'] = undefined;

/**
 * Array of participants in the deal who are sellers.
 * @member {Array.<module:model/Participant>} sellers
 */
DealCompany.prototype['sellers'] = undefined;

/**
 * Type of deal.
 * @member {module:model/DealCompany.DealTypeEnum} dealType
 */
DealCompany.prototype['dealType'] = undefined;

/**
 * Date the deal was announced. If the deal has a status of `rumor` or `rumor cancelled`, then this may be the same as `rumorDate`.
 * @member {Date} announceDate
 */
DealCompany.prototype['announceDate'] = undefined;

/**
 * Date the deal was closed.
 * @member {Date} closeDate
 */
DealCompany.prototype['closeDate'] = undefined;

/**
 * Base Equity Value plus the value of the targetâ€™s outstanding net debt (where applicable). The target's outstanding net debt is defined as the total amount of short and long term interest-bearing debt less any cash and cash equivalents. The target's outstanding net debt will only be included in the Transaction Value calculation if a.) the acquirer is seeking to own 100% of the target, b.) the target is a non-financial company; and c.) the target's outstanding net debt is publicly disclosed (or the acquirer publicly states it is assuming a specific amount of liabilities). Otherwise, Transaction Value will be equal to the amount paid for the portion of the target acquired (Base Equity Value) and will exclude the target's outstanding net debt. Amounts returned are in USD.
 * @member {Number} transactionValue
 */
DealCompany.prototype['transactionValue'] = undefined;

/**
 * Status of the deal 
 * @member {module:model/DealCompany.StatusEnum} status
 */
DealCompany.prototype['status'] = undefined;

/**
 * Identifier that was used for the request.
 * @member {String} requestId
 */
DealCompany.prototype['requestId'] = undefined;





/**
 * Allowed values for the <code>dealType</code> property.
 * @enum {String}
 * @readonly
 */
DealCompany['DealTypeEnum'] = {

    /**
     * value: "Acquisition / Merger"
     * @const
     */
    "Acquisition / Merger": "Acquisition / Merger",

    /**
     * value: "Majority Stake"
     * @const
     */
    "Majority Stake": "Majority Stake",

    /**
     * value: "Minority Stake"
     * @const
     */
    "Minority Stake": "Minority Stake",

    /**
     * value: "Spinoff"
     * @const
     */
    "Spinoff": "Spinoff"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DealCompany['StatusEnum'] = {

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Complete"
     * @const
     */
    "Complete": "Complete",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Rumor"
     * @const
     */
    "Rumor": "Rumor",

    /**
     * value: "Rumor Cancelled"
     * @const
     */
    "Rumor Cancelled": "Rumor Cancelled"
};



export default DealCompany;

