/**
 * FactSet Mergers and Acquisitions API
 * The FactSet Mergers and Acquisitions API provides access to key transactions and pricing metrics on over 60,000 globally traded deals. Reference a Global Universe of Mergers and Acquisitions (M&A) transactions where the target of the deal is a Publicly traded Company. Review premiums, multiples and fundamental data to gather insights on deals and create predictive models based on different deal characteristics.    Monetary values returned by this API are converted and represented in USD.    This API is allows a limit of 10 requests per second and a maximum of 10 concurrent requests. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DealsPublicRequest from '../model/DealsPublicRequest';
import DealsPublicResponse from '../model/DealsPublicResponse';
import DealsRequest from '../model/DealsRequest';
import DealsResponse from '../model/DealsResponse';
import DetailsRequest from '../model/DetailsRequest';
import DetailsResponse from '../model/DetailsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* Deals service.
* @module api/DealsApi
*/
export default class DealsApi {

    /**
    * Constructs a new DealsApi. 
    * @alias module:api/DealsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns details for a list of companies.
     * Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes `dealId` which can be sent to the `/deals/details` endpoint for more information about the deal. 
     * @param {module:model/DealsRequest} dealsRequest Request object for `Deals`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DealsResponse} and HTTP response
     */
    getDealsByCompanyListWithHttpInfo(dealsRequest) {
      let postBody = dealsRequest;
      // verify the required parameter 'dealsRequest' is set
      if (dealsRequest === undefined || dealsRequest === null) {
        throw new Error("Missing the required parameter 'dealsRequest' when calling getDealsByCompanyList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = DealsResponse;

      return this.apiClient.callApi(
        '/deals/by-company', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns details for a list of companies.
     * Gets deals for a specified list of companies within a date range. Deals returned are any in which the requested company is involved as either the buyer, seller, or target. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes `dealId` which can be sent to the `/deals/details` endpoint for more information about the deal. 
     * @param {module:model/DealsRequest} dealsRequest Request object for `Deals`.
     * @return { Promise.< module:model/DealsResponse > } a Promise, with data of type {@link module:model/DealsResponse }
     */
    getDealsByCompanyList(dealsRequest) {
      return this.getDealsByCompanyListWithHttpInfo(dealsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns details for specified deals.
     * Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
     * @param {module:model/DetailsRequest} detailsRequest Request object for `Deal Details`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DetailsResponse} and HTTP response
     */
    getDealsDetailsListWithHttpInfo(detailsRequest) {
      let postBody = detailsRequest;
      // verify the required parameter 'detailsRequest' is set
      if (detailsRequest === undefined || detailsRequest === null) {
        throw new Error("Missing the required parameter 'detailsRequest' when calling getDealsDetailsList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = DetailsResponse;

      return this.apiClient.callApi(
        '/deals/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns details for specified deals.
     * Gets deal details for a specified list of FactSet deal identifiers. Monetary values returned by this API are converted and represented in USD. 
     * @param {module:model/DetailsRequest} detailsRequest Request object for `Deal Details`.
     * @return { Promise.< module:model/DetailsResponse > } a Promise, with data of type {@link module:model/DetailsResponse }
     */
    getDealsDetailsList(detailsRequest) {
      return this.getDealsDetailsListWithHttpInfo(detailsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of deals in which the target is a public company.
     * Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes `dealId` which can be sent to the `/deals/details` endpoint for more information about the deal. 
     * @param {module:model/DealsPublicRequest} dealsPublicRequest Request object for `Deals`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DealsPublicResponse} and HTTP response
     */
    getPublicTargetDealsListWithHttpInfo(dealsPublicRequest) {
      let postBody = dealsPublicRequest;
      // verify the required parameter 'dealsPublicRequest' is set
      if (dealsPublicRequest === undefined || dealsPublicRequest === null) {
        throw new Error("Missing the required parameter 'dealsPublicRequest' when calling getPublicTargetDealsList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = DealsPublicResponse;

      return this.apiClient.callApi(
        '/deals/public-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of deals in which the target is a public company.
     * Gets deals in which the target is a public company for a specified date range and status. The start and end date parameters will find deals based on their announcement date. The response of this endpoint includes `dealId` which can be sent to the `/deals/details` endpoint for more information about the deal. 
     * @param {module:model/DealsPublicRequest} dealsPublicRequest Request object for `Deals`.
     * @return { Promise.< module:model/DealsPublicResponse > } a Promise, with data of type {@link module:model/DealsPublicResponse }
     */
    getPublicTargetDealsList(dealsPublicRequest) {
      return this.getPublicTargetDealsListWithHttpInfo(dealsPublicRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





