/**
 * FactSet Benchmarks API
 * FactSet Benchmarks API gives access to Index Constituents, Prices, Returns, and Ratios. For a sample list of identifiers, use the /metrics endpoint. Equity Only - Fixed Income Benchmark support coming soon. 
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BenchmarkConstituentsRequest from '../model/BenchmarkConstituentsRequest';
import BenchmarkConstituentsResponse from '../model/BenchmarkConstituentsResponse';
import ErrorResponse from '../model/ErrorResponse';
import FixedIncomeBenchmarkConstituentsRequest from '../model/FixedIncomeBenchmarkConstituentsRequest';
import FixedIncomeBenchmarkConstituentsResponse from '../model/FixedIncomeBenchmarkConstituentsResponse';

/**
* BenchmarkConstituents service.
* @module api/BenchmarkConstituentsApi
*/
export default class BenchmarkConstituentsApi {

    /**
    * Constructs a new BenchmarkConstituentsApi. 
    * @alias module:api/BenchmarkConstituentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. Use the helper endpoint **_/id-list** for valid identifiers.   
     * @param {Array.<String>} ids Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the `ids` requested, otherwise you will receive an error. <p>***ids limit** =  1 per request*</p>
     * @param {Object} opts Optional parameters
     * @param {String} opts.date Date of holding expressed in YYYY-MM-DD format.
     * @param {String} opts.currency Currency for response.
     * @param {String} opts.calendar Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BenchmarkConstituentsResponse} and HTTP response
     */
    getBenchmarkConstituentsWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getBenchmarkConstituents");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'date': opts['date'],
        'currency': opts['currency'],
        'calendar': opts['calendar']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = BenchmarkConstituentsResponse;

      return this.apiClient.callApi(
        '/factset-benchmarks/v1/constituents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. Use the helper endpoint **_/id-list** for valid identifiers.   
     * @param {Array.<String>} ids Benchmark Identifiers. Reference the helper endpoint **_/id-list** to get a sample list of  valid identifiers. You must be authorized for the `ids` requested, otherwise you will receive an error. <p>***ids limit** =  1 per request*</p>
     * @param {Object} opts Optional parameters
     * @param {String} opts.date Date of holding expressed in YYYY-MM-DD format.
     * @param {String} opts.currency Currency for response.
     * @param {String} opts.calendar Calendar of data returned. The default value is FIVEDAY which displays Monday through Friday, regardless of whether there were trading holidays.
     * @return { Promise.< module:model/BenchmarkConstituentsResponse > } a Promise, with data of type {@link module:model/BenchmarkConstituentsResponse }
     */
    getBenchmarkConstituents(ids, opts) {
      return this.getBenchmarkConstituentsWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. Use the helper endpoint **_/id-list** for valid identifiers. 
     * @param {module:model/BenchmarkConstituentsRequest} benchmarkConstituentsRequest Requests Benchmark Constituents for the given identifier and date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BenchmarkConstituentsResponse} and HTTP response
     */
    getBenchmarkConstituentsForListWithHttpInfo(benchmarkConstituentsRequest) {
      let postBody = benchmarkConstituentsRequest;
      // verify the required parameter 'benchmarkConstituentsRequest' is set
      if (benchmarkConstituentsRequest === undefined || benchmarkConstituentsRequest === null) {
        throw new Error("Missing the required parameter 'benchmarkConstituentsRequest' when calling getBenchmarkConstituentsForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = BenchmarkConstituentsResponse;

      return this.apiClient.callApi(
        '/factset-benchmarks/v1/constituents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. Use the helper endpoint **_/id-list** for valid identifiers. 
     * @param {module:model/BenchmarkConstituentsRequest} benchmarkConstituentsRequest Requests Benchmark Constituents for the given identifier and date.
     * @return { Promise.< module:model/BenchmarkConstituentsResponse > } a Promise, with data of type {@link module:model/BenchmarkConstituentsResponse }
     */
    getBenchmarkConstituentsForList(benchmarkConstituentsRequest) {
      return this.getBenchmarkConstituentsForListWithHttpInfo(benchmarkConstituentsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. 
     * @param {Array.<String>} ids Fixed Income Benchmark Identifiers. You must be authorized for the `ids` requested, otherwise you will receive an error. <p>***ids limit** =  1 per request*</p>
     * @param {Object} opts Optional parameters
     * @param {String} opts.date Date of holding expressed in YYYY-MM-DD format.
     * @param {String} opts.currency Currency for response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FixedIncomeBenchmarkConstituentsResponse} and HTTP response
     */
    getFIBenchmarkConstituentsWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getFIBenchmarkConstituents");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'date': opts['date'],
        'currency': opts['currency']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = FixedIncomeBenchmarkConstituentsResponse;

      return this.apiClient.callApi(
        '/factset-benchmarks/v1/fixed-income-constituents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. 
     * @param {Array.<String>} ids Fixed Income Benchmark Identifiers. You must be authorized for the `ids` requested, otherwise you will receive an error. <p>***ids limit** =  1 per request*</p>
     * @param {Object} opts Optional parameters
     * @param {String} opts.date Date of holding expressed in YYYY-MM-DD format.
     * @param {String} opts.currency Currency for response.
     * @return { Promise.< module:model/FixedIncomeBenchmarkConstituentsResponse > } a Promise, with data of type {@link module:model/FixedIncomeBenchmarkConstituentsResponse }
     */
    getFIBenchmarkConstituents(ids, opts) {
      return this.getFIBenchmarkConstituentsWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. 
     * @param {module:model/FixedIncomeBenchmarkConstituentsRequest} fixedIncomeBenchmarkConstituentsRequest Requests Fixed Income Benchmark Constituents for the given identifier and date.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FixedIncomeBenchmarkConstituentsResponse} and HTTP response
     */
    getFIBenchmarkConstituentsForListWithHttpInfo(fixedIncomeBenchmarkConstituentsRequest) {
      let postBody = fixedIncomeBenchmarkConstituentsRequest;
      // verify the required parameter 'fixedIncomeBenchmarkConstituentsRequest' is set
      if (fixedIncomeBenchmarkConstituentsRequest === undefined || fixedIncomeBenchmarkConstituentsRequest === null) {
        throw new Error("Missing the required parameter 'fixedIncomeBenchmarkConstituentsRequest' when calling getFIBenchmarkConstituentsForList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = FixedIncomeBenchmarkConstituentsResponse;

      return this.apiClient.callApi(
        '/factset-benchmarks/v1/fixed-income-constituents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the requested Benchmark Constituents and respective Weights, Price and Market Value.
     * Returns the requested Fixed Income Benchmark Constituents and respective Weights, Price and Market Value. You must be authorized for the `ids` requested. 
     * @param {module:model/FixedIncomeBenchmarkConstituentsRequest} fixedIncomeBenchmarkConstituentsRequest Requests Fixed Income Benchmark Constituents for the given identifier and date.
     * @return { Promise.< module:model/FixedIncomeBenchmarkConstituentsResponse > } a Promise, with data of type {@link module:model/FixedIncomeBenchmarkConstituentsResponse }
     */
    getFIBenchmarkConstituentsForList(fixedIncomeBenchmarkConstituentsRequest) {
      return this.getFIBenchmarkConstituentsForListWithHttpInfo(fixedIncomeBenchmarkConstituentsRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





