/**
 * FactSet Benchmarks API
 * FactSet Benchmarks API gives access to Index Constituents, Prices, Returns, and Ratios. For a sample list of identifiers, use the /metrics endpoint. Equity Only - Fixed Income Benchmark support coming soon. 
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IndexHistory model module.
 * @module model/IndexHistory
 */
class IndexHistory {
    /**
     * Constructs a new <code>IndexHistory</code>.
     * @alias module:model/IndexHistory
     */
    constructor() { 
        
        IndexHistory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IndexHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexHistory} obj Optional instance to populate.
     * @return {module:model/IndexHistory} The populated <code>IndexHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexHistory();

            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('inceptionDate')) {
                obj['inceptionDate'] = ApiClient.convertToType(data['inceptionDate'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('constituentNumber')) {
                obj['constituentNumber'] = ApiClient.convertToType(data['constituentNumber'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('marketValue')) {
                obj['marketValue'] = ApiClient.convertToType(data['marketValue'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('priceReturnPercent')) {
                obj['priceReturnPercent'] = ApiClient.convertToType(data['priceReturnPercent'], 'Number');
            }
            if (data.hasOwnProperty('totalReturnLevel')) {
                obj['totalReturnLevel'] = ApiClient.convertToType(data['totalReturnLevel'], 'Number');
            }
            if (data.hasOwnProperty('totalReturnPercent')) {
                obj['totalReturnPercent'] = ApiClient.convertToType(data['totalReturnPercent'], 'Number');
            }
            if (data.hasOwnProperty('returnType')) {
                obj['returnType'] = ApiClient.convertToType(data['returnType'], 'String');
            }
            if (data.hasOwnProperty('hedgeType')) {
                obj['hedgeType'] = ApiClient.convertToType(data['hedgeType'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('observationDate')) {
                obj['observationDate'] = ApiClient.convertToType(data['observationDate'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Requested Identifier. Must be a valid Benchmark Identifier recognized by FactSet.
 * @member {String} fsymId
 */
IndexHistory.prototype['fsymId'] = undefined;

/**
 * The respective date for values as of the date requested in YYYY-MM-DD format.
 * @member {Date} date
 */
IndexHistory.prototype['date'] = undefined;

/**
 * The inception date of the requested index in YYYY-MM-DD format.
 * @member {Date} inceptionDate
 */
IndexHistory.prototype['inceptionDate'] = undefined;

/**
 * Proper Name of Index.
 * @member {String} name
 */
IndexHistory.prototype['name'] = undefined;

/**
 * The total number of constituents as of the date requested.
 * @member {Number} constituentNumber
 */
IndexHistory.prototype['constituentNumber'] = undefined;

/**
 * Currency Code used in adjustments. If no Currency was requested, the service will default to LOCAL ('LOC').
 * @member {String} currency
 */
IndexHistory.prototype['currency'] = undefined;

/**
 * Index Level Market Capitalization as of the date requested expressed in millions.
 * @member {Number} marketValue
 */
IndexHistory.prototype['marketValue'] = undefined;

/**
 * Index Level Price
 * @member {Number} price
 */
IndexHistory.prototype['price'] = undefined;

/**
 * Index Level Price Percent Change
 * @member {Number} priceReturnPercent
 */
IndexHistory.prototype['priceReturnPercent'] = undefined;

/**
 * Index Level Total Return Amount
 * @member {Number} totalReturnLevel
 */
IndexHistory.prototype['totalReturnLevel'] = undefined;

/**
 * Index Level Total Return Percent Change
 * @member {Number} totalReturnPercent
 */
IndexHistory.prototype['totalReturnPercent'] = undefined;

/**
 * The requested Return Type - GROSS or NET
 * @member {String} returnType
 */
IndexHistory.prototype['returnType'] = undefined;

/**
 * The requested Hedge Type - HEDGED or UNHEDGED
 * @member {String} hedgeType
 */
IndexHistory.prototype['hedgeType'] = undefined;

/**
 * Benchmark Identifier specified in the request
 * @member {String} requestId
 */
IndexHistory.prototype['requestId'] = undefined;

/**
 * This field will always return the date of the data that was actually returned.
 * @member {String} observationDate
 */
IndexHistory.prototype['observationDate'] = undefined;






export default IndexHistory;

