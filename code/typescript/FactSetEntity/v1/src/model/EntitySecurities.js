/**
 * FactSet Entity API
 * Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntitySecurities model module.
 * @module model/EntitySecurities
 */
class EntitySecurities {
    /**
     * Constructs a new <code>EntitySecurities</code>.
     * @alias module:model/EntitySecurities
     */
    constructor() { 
        
        EntitySecurities.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntitySecurities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntitySecurities} obj Optional instance to populate.
     * @return {module:model/EntitySecurities} The populated <code>EntitySecurities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntitySecurities();

            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('fsymSecurityId')) {
                obj['fsymSecurityId'] = ApiClient.convertToType(data['fsymSecurityId'], 'String');
            }
            if (data.hasOwnProperty('fsymListingId')) {
                obj['fsymListingId'] = ApiClient.convertToType(data['fsymListingId'], 'String');
            }
            if (data.hasOwnProperty('securityType')) {
                obj['securityType'] = ApiClient.convertToType(data['securityType'], 'String');
            }
            if (data.hasOwnProperty('listingExchange')) {
                obj['listingExchange'] = ApiClient.convertToType(data['listingExchange'], 'String');
            }
            if (data.hasOwnProperty('securityName')) {
                obj['securityName'] = ApiClient.convertToType(data['securityName'], 'String');
            }
            if (data.hasOwnProperty('fsymEntityId')) {
                obj['fsymEntityId'] = ApiClient.convertToType(data['fsymEntityId'], 'String');
            }
            if (data.hasOwnProperty('fsymTickerExchange')) {
                obj['fsymTickerExchange'] = ApiClient.convertToType(data['fsymTickerExchange'], 'String');
            }
            if (data.hasOwnProperty('fsymTickerRegion')) {
                obj['fsymTickerRegion'] = ApiClient.convertToType(data['fsymTickerRegion'], 'String');
            }
            if (data.hasOwnProperty('activeFlag')) {
                obj['activeFlag'] = ApiClient.convertToType(data['activeFlag'], 'Number');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * FactSet Ultimate Parent ID of the Requested Security ID
 * @member {String} fsymId
 */
EntitySecurities.prototype['fsymId'] = undefined;

/**
 * FactSet Security ID (-S).
 * @member {String} fsymSecurityId
 */
EntitySecurities.prototype['fsymSecurityId'] = undefined;

/**
 * FactSet Listing ID (-L). Corresponds to the listing exchange for the requested security. Not applicable for FI instruments.
 * @member {String} fsymListingId
 */
EntitySecurities.prototype['fsymListingId'] = undefined;

/**
 * The Security Type Code. Security Type Code details and mapping are described on Online Assistant Page 15776 for Equity and Page 16014 for Fixed Income.
 * @member {module:model/EntitySecurities.SecurityTypeEnum} securityType
 */
EntitySecurities.prototype['securityType'] = undefined;

/**
 * The securities primary listing exchange.
 * @member {String} listingExchange
 */
EntitySecurities.prototype['listingExchange'] = undefined;

/**
 * Security name
 * @member {String} securityName
 */
EntitySecurities.prototype['securityName'] = undefined;

/**
 * Unique FactSet-generated identifier representing an entity.
 * @member {String} fsymEntityId
 */
EntitySecurities.prototype['fsymEntityId'] = undefined;

/**
 * The security's ticker-exchange, representing the listing exchange symbol.
 * @member {String} fsymTickerExchange
 */
EntitySecurities.prototype['fsymTickerExchange'] = undefined;

/**
 * The security's regional ticker.
 * @member {String} fsymTickerRegion
 */
EntitySecurities.prototype['fsymTickerRegion'] = undefined;

/**
 * Indicates if security is active. 1 = Active; 0 = Inactive.
 * @member {module:model/EntitySecurities.ActiveFlagEnum} activeFlag
 */
EntitySecurities.prototype['activeFlag'] = undefined;

/**
 * Identifier used in `ids` parameter.  When list of identifiers used, they will be parsed and resolved individually.
 * @member {String} requestId
 */
EntitySecurities.prototype['requestId'] = undefined;





/**
 * Allowed values for the <code>securityType</code> property.
 * @enum {String}
 * @readonly
 */
EntitySecurities['SecurityTypeEnum'] = {

    /**
     * value: "SHARE"
     * @const
     */
    "SHARE": "SHARE",

    /**
     * value: "PREFEQ"
     * @const
     */
    "PREFEQ": "PREFEQ",

    /**
     * value: "MF_C"
     * @const
     */
    "MF_C": "MF_C",

    /**
     * value: "MF_O"
     * @const
     */
    "MF_O": "MF_O",

    /**
     * value: "ETF_ETF"
     * @const
     */
    "ETF_ETF": "ETF_ETF",

    /**
     * value: "ETF_UVI"
     * @const
     */
    "ETF_UVI": "ETF_UVI",

    /**
     * value: "ETF_NAV"
     * @const
     */
    "ETF_NAV": "ETF_NAV",

    /**
     * value: "ADR"
     * @const
     */
    "ADR": "ADR",

    /**
     * value: "GDR"
     * @const
     */
    "GDR": "GDR",

    /**
     * value: "NVDR"
     * @const
     */
    "NVDR": "NVDR",

    /**
     * value: "DR"
     * @const
     */
    "DR": "DR",

    /**
     * value: "ALIEN"
     * @const
     */
    "ALIEN": "ALIEN",

    /**
     * value: "PREF"
     * @const
     */
    "PREF": "PREF",

    /**
     * value: "WARRANT"
     * @const
     */
    "WARRANT": "WARRANT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",

    /**
     * value: "UNIT"
     * @const
     */
    "UNIT": "UNIT",

    /**
     * value: "STRUCT"
     * @const
     */
    "STRUCT": "STRUCT",

    /**
     * value: "TEMP"
     * @const
     */
    "TEMP": "TEMP",

    /**
     * value: "CONV"
     * @const
     */
    "CONV": "CONV",

    /**
     * value: "BDNT"
     * @const
     */
    "BDNT": "BDNT",

    /**
     * value: "PFD"
     * @const
     */
    "PFD": "PFD",

    /**
     * value: "PASS"
     * @const
     */
    "PASS": "PASS",

    /**
     * value: "MM"
     * @const
     */
    "MM": "MM",

    /**
     * value: "RMBS"
     * @const
     */
    "RMBS": "RMBS",

    /**
     * value: "ABS"
     * @const
     */
    "ABS": "ABS",

    /**
     * value: "COVR"
     * @const
     */
    "COVR": "COVR",

    /**
     * value: "LKS"
     * @const
     */
    "LKS": "LKS",

    /**
     * value: "LAUTH"
     * @const
     */
    "LAUTH": "LAUTH",

    /**
     * value: "BLDN"
     * @const
     */
    "BLDN": "BLDN",

    /**
     * value: "CMBS"
     * @const
     */
    "CMBS": "CMBS"
};


/**
 * Allowed values for the <code>activeFlag</code> property.
 * @enum {Number}
 * @readonly
 */
EntitySecurities['ActiveFlagEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default EntitySecurities;

