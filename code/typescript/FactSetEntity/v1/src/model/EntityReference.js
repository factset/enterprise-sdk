/**
 * FactSet Entity API
 * Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntityReference model module.
 * @module model/EntityReference
 */
class EntityReference {
    /**
     * Constructs a new <code>EntityReference</code>.
     * @alias module:model/EntityReference
     */
    constructor() { 
        
        EntityReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityReference} obj Optional instance to populate.
     * @return {module:model/EntityReference} The populated <code>EntityReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityReference();

            if (data.hasOwnProperty('fsymId')) {
                obj['fsymId'] = ApiClient.convertToType(data['fsymId'], 'String');
            }
            if (data.hasOwnProperty('entityProperName')) {
                obj['entityProperName'] = ApiClient.convertToType(data['entityProperName'], 'String');
            }
            if (data.hasOwnProperty('fsymEntityId')) {
                obj['fsymEntityId'] = ApiClient.convertToType(data['fsymEntityId'], 'String');
            }
            if (data.hasOwnProperty('ultimateParentId')) {
                obj['ultimateParentId'] = ApiClient.convertToType(data['ultimateParentId'], 'String');
            }
            if (data.hasOwnProperty('ultimateParentName')) {
                obj['ultimateParentName'] = ApiClient.convertToType(data['ultimateParentName'], 'String');
            }
            if (data.hasOwnProperty('creditParentId')) {
                obj['creditParentId'] = ApiClient.convertToType(data['creditParentId'], 'String');
            }
            if (data.hasOwnProperty('parentEquityId')) {
                obj['parentEquityId'] = ApiClient.convertToType(data['parentEquityId'], 'String');
            }
            if (data.hasOwnProperty('privateEntityFlag')) {
                obj['privateEntityFlag'] = ApiClient.convertToType(data['privateEntityFlag'], 'Number');
            }
            if (data.hasOwnProperty('publicEntityFlag')) {
                obj['publicEntityFlag'] = ApiClient.convertToType(data['publicEntityFlag'], 'Number');
            }
            if (data.hasOwnProperty('securityType')) {
                obj['securityType'] = ApiClient.convertToType(data['securityType'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('incorporationDate')) {
                obj['incorporationDate'] = ApiClient.convertToType(data['incorporationDate'], 'Date');
            }
            if (data.hasOwnProperty('countryOfRisk')) {
                obj['countryOfRisk'] = ApiClient.convertToType(data['countryOfRisk'], 'String');
            }
            if (data.hasOwnProperty('countryOfRiskGeoRev')) {
                obj['countryOfRiskGeoRev'] = ApiClient.convertToType(data['countryOfRiskGeoRev'], 'String');
            }
            if (data.hasOwnProperty('incorporationCountry')) {
                obj['incorporationCountry'] = ApiClient.convertToType(data['incorporationCountry'], 'String');
            }
            if (data.hasOwnProperty('businessDescription')) {
                obj['businessDescription'] = ApiClient.convertToType(data['businessDescription'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('headquartersStreet')) {
                obj['headquartersStreet'] = ApiClient.convertToType(data['headquartersStreet'], 'String');
            }
            if (data.hasOwnProperty('headquartersCity')) {
                obj['headquartersCity'] = ApiClient.convertToType(data['headquartersCity'], 'String');
            }
            if (data.hasOwnProperty('headquartersState')) {
                obj['headquartersState'] = ApiClient.convertToType(data['headquartersState'], 'String');
            }
            if (data.hasOwnProperty('headquartersZip')) {
                obj['headquartersZip'] = ApiClient.convertToType(data['headquartersZip'], 'String');
            }
            if (data.hasOwnProperty('headquartersCountry')) {
                obj['headquartersCountry'] = ApiClient.convertToType(data['headquartersCountry'], 'String');
            }
            if (data.hasOwnProperty('emailIR')) {
                obj['emailIR'] = ApiClient.convertToType(data['emailIR'], 'String');
            }
            if (data.hasOwnProperty('websiteIR')) {
                obj['websiteIR'] = ApiClient.convertToType(data['websiteIR'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique FactSet-generated identifier representing an entity for the current entity identifier (-E)
 * @member {String} fsymId
 */
EntityReference.prototype['fsymId'] = undefined;

/**
 * Name that the entity is commonly referred to as, normalized and in proper case.
 * @member {String} entityProperName
 */
EntityReference.prototype['entityProperName'] = undefined;

/**
 * Unique FactSet-generated identifier representing an entity
 * @member {String} fsymEntityId
 */
EntityReference.prototype['fsymEntityId'] = undefined;

/**
 * The ultimate parent id of the entity.
 * @member {String} ultimateParentId
 */
EntityReference.prototype['ultimateParentId'] = undefined;

/**
 * Name that the ultimate parent entity is commonly referred to as, normalized and in proper case.\"
 * @member {String} ultimateParentName
 */
EntityReference.prototype['ultimateParentName'] = undefined;

/**
 * The credit parent id in which issues debt instruments. The credit parent differs from the ultimate parent if the ultimate parent does not inherit the credit risk associated with an issuer's debt offerings. Credit Parent's are not Assigned to the Extinct Issues, Governments, Asset-Backed Securities, Trusts, Foundations, Private Equity, Venture Capital, Hedge Funds, or Mutual Funds. FactSet assigns credit parents based on the following methodology - * If an issuer (entity A) is considered a direct subsidiary of another entity (entity B), where the parent entity (entity B) has a 100% controlling interest in the issuer (entity A), then the parent entity (entity B) is considered the credit parent. * If an operating business is purchased as a portfolio company/operating company (entity A) by a group of private equity firms that establish a holding company (entity B) structure to reflect the collective ownership, and the portfolio company/operating company (entity A) issues debt as part of acquisition financing, then the portfolio company/operating company (entity A) is deemed to be the credit parent, not the holding company (entity B). * An issuer must have active debt. 
 * @member {String} creditParentId
 */
EntityReference.prototype['creditParentId'] = undefined;

/**
 * The regional parent equity listing id.
 * @member {String} parentEquityId
 */
EntityReference.prototype['parentEquityId'] = undefined;

/**
 * Returns 1 if the entity is a Private Company, otherwise, 0.
 * @member {Number} privateEntityFlag
 */
EntityReference.prototype['privateEntityFlag'] = undefined;

/**
 * Returns 1 if the entity is a Public Company, otherwise, 0.
 * @member {Number} publicEntityFlag
 */
EntityReference.prototype['publicEntityFlag'] = undefined;

/**
 * Security type of the identifier, For descriptions of the each security type, visit [OA 15776](https://my.apps.factset.com/oa/pages/15776)
 * @member {String} securityType
 */
EntityReference.prototype['securityType'] = undefined;

/**
 * Web page address for the entity
 * @member {String} website
 */
EntityReference.prototype['website'] = undefined;

/**
 * Year the entity was incorporated in YYYY-MM-DD format.
 * @member {Date} incorporationDate
 */
EntityReference.prototype['incorporationDate'] = undefined;

/**
 * Entity's Country of Risk. FactSet has a determined methodology for assigning a country of risk to public and private entities, based on the following - * Country of Headquarters * Country of Incorporation * Country of Primary Exchange (the country where most liquid equity listings trade) 
 * @member {String} countryOfRisk
 */
EntityReference.prototype['countryOfRisk'] = undefined;

/**
 * Entity's Country of Risk based on the Top Geograghic Revenue. 
 * @member {String} countryOfRiskGeoRev
 */
EntityReference.prototype['countryOfRiskGeoRev'] = undefined;

/**
 * ISO Country code where the entity is incorporated
 * @member {String} incorporationCountry
 */
EntityReference.prototype['incorporationCountry'] = undefined;

/**
 * Extended business description for the requested entity.
 * @member {String} businessDescription
 */
EntityReference.prototype['businessDescription'] = undefined;

/**
 * The entity's international phone number.
 * @member {String} phone
 */
EntityReference.prototype['phone'] = undefined;

/**
 * The entity's headquarters street address.
 * @member {String} headquartersStreet
 */
EntityReference.prototype['headquartersStreet'] = undefined;

/**
 * The entity's headquarters street address.
 * @member {String} headquartersCity
 */
EntityReference.prototype['headquartersCity'] = undefined;

/**
 * Abbreviated State of company headquarters.
 * @member {String} headquartersState
 */
EntityReference.prototype['headquartersState'] = undefined;

/**
 * Zip/Postal Code for entity's headquarters.
 * @member {String} headquartersZip
 */
EntityReference.prototype['headquartersZip'] = undefined;

/**
 * Abbreviated (ISO) Country of headquarters.
 * @member {String} headquartersCountry
 */
EntityReference.prototype['headquartersCountry'] = undefined;

/**
 * Email Address of the Investor Relations Contact
 * @member {String} emailIR
 */
EntityReference.prototype['emailIR'] = undefined;

/**
 * Website or Page for the Entity's Investor Relations team.
 * @member {String} websiteIR
 */
EntityReference.prototype['websiteIR'] = undefined;

/**
 * Identifier used in \"ids\" parameter.  When list of identifiers used, they will be parsed and resolved individually.
 * @member {String} requestId
 */
EntityReference.prototype['requestId'] = undefined;






export default EntityReference;

