/**
 * FactSet Entity API
 * Using an entity centric data model, FactSet's Entity API provides access to FactSet's complete security and entity level symbology, comprehensive entity reference data, and all of the necessary relationships and connections to create a foundation that tightly correlates disparate sources of information to a master entity identifier. Use this API to quickly understand the full entity structure and related securities.<p><b>Rate limit is set to 10 requests per second</b>.</p> 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityStructureRequest from '../model/EntityStructureRequest';
import EntityStructureResponse from '../model/EntityStructureResponse';
import ErrorResponse from '../model/ErrorResponse';
import UltimateEntityStructureRequest from '../model/UltimateEntityStructureRequest';
import UltimateEntityStructureResponse from '../model/UltimateEntityStructureResponse';

/**
* EntityStructure service.
* @module api/EntityStructureApi
*/
export default class EntityStructureApi {

    /**
    * Constructs a new EntityStructureApi. 
    * @alias module:api/EntityStructureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns all active or inactive entities and respective levels below the requested entity id.
     * Returns all active or inactive entities below the requested entity id. 
     * @param {Array.<String>} ids The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.<p>**Max Ids Limit set to 100 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.level Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (default to -1)
     * @param {Number} opts.active Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (default to -1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityStructureResponse} and HTTP response
     */
    getEntityStructureWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getEntityStructure");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'level': opts['level'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = EntityStructureResponse;

      return this.apiClient.callApi(
        '/factset-entity/v1/entity-structures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all active or inactive entities and respective levels below the requested entity id.
     * Returns all active or inactive entities below the requested entity id. 
     * @param {Array.<String>} ids The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.<p>**Max Ids Limit set to 100 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.level Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (default to -1)
     * @param {Number} opts.active Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (default to -1)
     * @return { Promise.< module:model/EntityStructureResponse > } a Promise, with data of type {@link module:model/EntityStructureResponse }
     */
    getEntityStructure(ids, opts) {
      return this.getEntityStructureWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities.
     * Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
     * @param {Array.<String>} ids The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.<p>**Max Ids Limit set to 100 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.level Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (default to -1)
     * @param {Number} opts.active Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (default to -1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UltimateEntityStructureResponse} and HTTP response
     */
    getUltimateEntityStructureWithHttpInfo(ids, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getUltimateEntityStructure");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'csv'),
        'level': opts['level'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = UltimateEntityStructureResponse;

      return this.apiClient.callApi(
        '/factset-entity/v1/ultimate-entity-structures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the full ultimate parent entity hiearachy. Control levels and active status of underlying entities.
     * Returns full ultimate entity structure including ultimate parent and all subordinates. Will accept entity from any level of entity structure or active vs. inactive status of entity. 
     * @param {Array.<String>} ids The requested Market Identifier. Accepted input identifiers include Ticker-Exchange, Ticker-Regions, CUSIPs, ISINs, SEDOLs, or FactSet Permanent Ids, such as -R, -L, or -E.<p>**Max Ids Limit set to 100 in a single request**</p>   *<p>Make note, GET Method URL request lines are also limited to a total length of 8192 bytes (8KB). In cases where the service allows for thousands of ids,       which may lead to exceeding this request line limit of 8KB, its       advised for any requests with large request lines to be requested through       the respective \\\"POST\\\" method.</p>* 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.level Controls the levels returned in the hierarchy. Use -1 to return all levels, or 1-n for a specific level. (default to -1)
     * @param {Number} opts.active Controls active or inactive securities returned in the hierarchy. Enter 1 to return only active entities, 0 for inactive entities, and -1 for all active and inactive. (default to -1)
     * @return { Promise.< module:model/UltimateEntityStructureResponse > } a Promise, with data of type {@link module:model/UltimateEntityStructureResponse }
     */
    getUltimateEntityStructure(ids, opts) {
      return this.getUltimateEntityStructureWithHttpInfo(ids, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all active or inactive entities below the requested entity id.
     * Returns all active or inactive entities and respective levels below the requested entity id. 
     * @param {module:model/EntityStructureRequest} entityStructureRequest Request Body to request a list of Entity Structure objects.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityStructureResponse} and HTTP response
     */
    postEntityStructureWithHttpInfo(entityStructureRequest) {
      let postBody = entityStructureRequest;
      // verify the required parameter 'entityStructureRequest' is set
      if (entityStructureRequest === undefined || entityStructureRequest === null) {
        throw new Error("Missing the required parameter 'entityStructureRequest' when calling postEntityStructure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = EntityStructureResponse;

      return this.apiClient.callApi(
        '/factset-entity/v1/entity-structures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all active or inactive entities below the requested entity id.
     * Returns all active or inactive entities and respective levels below the requested entity id. 
     * @param {module:model/EntityStructureRequest} entityStructureRequest Request Body to request a list of Entity Structure objects.
     * @return { Promise.< module:model/EntityStructureResponse > } a Promise, with data of type {@link module:model/EntityStructureResponse }
     */
    postEntityStructure(entityStructureRequest) {
      return this.postEntityStructureWithHttpInfo(entityStructureRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns all active or inactive entities and respective levels below the requested entity id.
     * Returns all active or inactive entities and respective levels below the requested entity id. 
     * @param {module:model/UltimateEntityStructureRequest} ultimateEntityStructureRequest Request Body to request a list of Ultimate Entity Structure objects.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UltimateEntityStructureResponse} and HTTP response
     */
    postUltimateEntityStructureWithHttpInfo(ultimateEntityStructureRequest) {
      let postBody = ultimateEntityStructureRequest;
      // verify the required parameter 'ultimateEntityStructureRequest' is set
      if (ultimateEntityStructureRequest === undefined || ultimateEntityStructureRequest === null) {
        throw new Error("Missing the required parameter 'ultimateEntityStructureRequest' when calling postUltimateEntityStructure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = UltimateEntityStructureResponse;

      return this.apiClient.callApi(
        '/factset-entity/v1/ultimate-entity-structures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns all active or inactive entities and respective levels below the requested entity id.
     * Returns all active or inactive entities and respective levels below the requested entity id. 
     * @param {module:model/UltimateEntityStructureRequest} ultimateEntityStructureRequest Request Body to request a list of Ultimate Entity Structure objects.
     * @return { Promise.< module:model/UltimateEntityStructureResponse > } a Promise, with data of type {@link module:model/UltimateEntityStructureResponse }
     */
    postUltimateEntityStructure(ultimateEntityStructureRequest) {
      return this.postUltimateEntityStructureWithHttpInfo(ultimateEntityStructureRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





