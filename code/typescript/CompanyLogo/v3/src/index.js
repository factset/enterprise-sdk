/**
 * Company Logo API
 * Consume FactSet collected Company Logos through an API that seamlessly integrates with company fundamentals and estimates data (listed equities data available via the stocks API), quotes, time series, and other Digital APIs.  The Logo API provides access to logos of US, CA and EU listed companies. The logos could be accessed by using national and international identifiers like ISIN, CUSIP, WKN, Valor, etc. and are a nice feature for comprehensive visualizations of equities on overview pages (factsheets).  Logos are reviewed/updated twice a year.  The Logo API for Digital Portals seamlessly integrates with the [Stocks API](https://developer.factset.com/api-catalog/stocks-api-digital-portals) for equities and estimates data and the [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals), allowing access to detailed price and performance information of listings. The [Quotes API](https://developer.factset.com/api-catalog/quotes-api-digital-portals) also supports basic security identifier cross-reference (see for example /notation/crossReference/getByFactSetMarketSymbol to retrieve an instrument id). For direct access to price histories for charting, please refer to the [Time Series API for Digital Portals](https://developer.factset.com/api-catalog/time-series-api-digital-portals). 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import CursorBasedPaginationOutputObject from './model/CursorBasedPaginationOutputObject';
import CursorBasedPaginationOutputObjectWithoutTotal from './model/CursorBasedPaginationOutputObjectWithoutTotal';
import ErrorMetaObject from './model/ErrorMetaObject';
import InlineResponse200 from './model/InlineResponse200';
import InlineResponse200Data from './model/InlineResponse200Data';
import InlineResponse200DataLarge from './model/InlineResponse200DataLarge';
import InlineResponse200DataMedium from './model/InlineResponse200DataMedium';
import InlineResponse200DataSmall from './model/InlineResponse200DataSmall';
import InlineResponse200DataVector from './model/InlineResponse200DataVector';
import InlineResponse200Meta from './model/InlineResponse200Meta';
import OffsetBasedPaginationOutputObject from './model/OffsetBasedPaginationOutputObject';
import OffsetBasedPaginationOutputObjectWithoutTotal from './model/OffsetBasedPaginationOutputObjectWithoutTotal';
import PartialOutputObject from './model/PartialOutputObject';
import StatusObject from './model/StatusObject';

import CompanyApi from './api/CompanyApi';


/**
* Company Logo client library for JavaScript.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var companylogo = require('index'); // See note below*.
* var xxxSvc = new companylogo.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new companylogo.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new companylogo.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new companylogo.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CursorBasedPaginationOutputObject model constructor.
     * @property {module:model/CursorBasedPaginationOutputObject}
     */
    CursorBasedPaginationOutputObject,

    /**
     * The CursorBasedPaginationOutputObjectWithoutTotal model constructor.
     * @property {module:model/CursorBasedPaginationOutputObjectWithoutTotal}
     */
    CursorBasedPaginationOutputObjectWithoutTotal,

    /**
     * The ErrorMetaObject model constructor.
     * @property {module:model/ErrorMetaObject}
     */
    ErrorMetaObject,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse200Data model constructor.
     * @property {module:model/InlineResponse200Data}
     */
    InlineResponse200Data,

    /**
     * The InlineResponse200DataLarge model constructor.
     * @property {module:model/InlineResponse200DataLarge}
     */
    InlineResponse200DataLarge,

    /**
     * The InlineResponse200DataMedium model constructor.
     * @property {module:model/InlineResponse200DataMedium}
     */
    InlineResponse200DataMedium,

    /**
     * The InlineResponse200DataSmall model constructor.
     * @property {module:model/InlineResponse200DataSmall}
     */
    InlineResponse200DataSmall,

    /**
     * The InlineResponse200DataVector model constructor.
     * @property {module:model/InlineResponse200DataVector}
     */
    InlineResponse200DataVector,

    /**
     * The InlineResponse200Meta model constructor.
     * @property {module:model/InlineResponse200Meta}
     */
    InlineResponse200Meta,

    /**
     * The OffsetBasedPaginationOutputObject model constructor.
     * @property {module:model/OffsetBasedPaginationOutputObject}
     */
    OffsetBasedPaginationOutputObject,

    /**
     * The OffsetBasedPaginationOutputObjectWithoutTotal model constructor.
     * @property {module:model/OffsetBasedPaginationOutputObjectWithoutTotal}
     */
    OffsetBasedPaginationOutputObjectWithoutTotal,

    /**
     * The PartialOutputObject model constructor.
     * @property {module:model/PartialOutputObject}
     */
    PartialOutputObject,

    /**
     * The StatusObject model constructor.
     * @property {module:model/StatusObject}
     */
    StatusObject,

    /**
    * The CompanyApi service constructor.
    * @property {module:api/CompanyApi}
    */
    CompanyApi,

};
