/**
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateScimUserJSONRequest from '../model/CreateScimUserJSONRequest';
import CreatedScimUserJSONResponse from '../model/CreatedScimUserJSONResponse';
import ScimError from '../model/ScimError';
import ScimGroup from '../model/ScimGroup';
import ScimGroupListResponse from '../model/ScimGroupListResponse';
import ScimGroupPatchRequestBody from '../model/ScimGroupPatchRequestBody';
import ScimUser from '../model/ScimUser';
import ScimUserListResponse from '../model/ScimUserListResponse';
import ScimUserPatchRequestBody from '../model/ScimUserPatchRequestBody';

/**
* SCIM service.
* @module api/SCIMApi
*/
export default class SCIMApi {

    /**
    * Constructs a new SCIMApi. 
    * @alias module:api/SCIMApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a role
     * Creates a VRS role
     * @param {module:model/ScimGroup} scimGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    createGroupWithHttpInfo(scimGroup) {
      let postBody = scimGroup;
      // verify the required parameter 'scimGroup' is set
      if (scimGroup === undefined || scimGroup === null) {
        throw new Error("Missing the required parameter 'scimGroup' when calling createGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];


      let returnType = ScimGroup;

      return this.apiClient.callApi(
        '/scim/v2/Groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a role
     * Creates a VRS role
     * @param {module:model/ScimGroup} scimGroup 
     * @return { Promise.< module:model/ScimGroup > } a Promise, with data of type {@link module:model/ScimGroup }
     */
    createGroup(scimGroup) {
      return this.createGroupWithHttpInfo(scimGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Creates a user
     * Creates a VRS user
     * @param {module:model/CreateScimUserJSONRequest} createScimUserJSONRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatedScimUserJSONResponse} and HTTP response
     */
    createUserWithHttpInfo(createScimUserJSONRequest) {
      let postBody = createScimUserJSONRequest;
      // verify the required parameter 'createScimUserJSONRequest' is set
      if (createScimUserJSONRequest === undefined || createScimUserJSONRequest === null) {
        throw new Error("Missing the required parameter 'createScimUserJSONRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];


      let returnType = CreatedScimUserJSONResponse;

      return this.apiClient.callApi(
        '/scim/v2/Users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a user
     * Creates a VRS user
     * @param {module:model/CreateScimUserJSONRequest} createScimUserJSONRequest 
     * @return { Promise.< module:model/CreatedScimUserJSONResponse > } a Promise, with data of type {@link module:model/CreatedScimUserJSONResponse }
     */
    createUser(createScimUserJSONRequest) {
      return this.createUserWithHttpInfo(createScimUserJSONRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a VRS role
     * Deletes a VRS role
     * @param {String} groupId The ID of the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteGroupByIdWithHttpInfo(groupId) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupById");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a VRS role
     * Deletes a VRS role
     * @param {String} groupId The ID of the group
     * @return { Promise } a Promise
     */
    deleteGroupById(groupId) {
      return this.deleteGroupByIdWithHttpInfo(groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a VRS user
     * Deletes a VRS user (this marks them as 'Deleted' in the database)
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserByIdWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserById");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a VRS user
     * Deletes a VRS user (this marks them as 'Deleted' in the database)
     * @param {String} userId The ID of the user
     * @return { Promise } a Promise
     */
    deleteUserById(userId) {
      return this.deleteUserByIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a list of VRS role
     * Retrieves VRS roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @param {String} opts.filter Acts as a filter for the retrieval process. if filter=tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter=tenant eq MASTER,DEMO
     * @param {Array.<String>} opts.sortBy The column to sort on. If parameter is not given, no sorting will be done
     * @param {Array.<String>} opts.sortOrder The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroupListResponse} and HTTP response
     */
    getAllGroupsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'startIndex': opts['startIndex'],
        'filter': opts['filter'],
        'sortBy': this.apiClient.buildCollectionParam(opts['sortBy'], 'csv'),
        'sortOrder': this.apiClient.buildCollectionParam(opts['sortOrder'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];


      let returnType = ScimGroupListResponse;

      return this.apiClient.callApi(
        '/scim/v2/Groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of VRS role
     * Retrieves VRS roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @param {String} opts.filter Acts as a filter for the retrieval process. if filter=tenant, filters the groups that match the given tenant code. Accepts multiple values separated by a comma, e.g. ?filter=tenant eq MASTER,DEMO
     * @param {Array.<String>} opts.sortBy The column to sort on. If parameter is not given, no sorting will be done
     * @param {Array.<String>} opts.sortOrder The order in which the sort is applied for the sort by parameter. If parameter is not given along with a sortBy, sorting will be done in ascending order
     * @return { Promise.< module:model/ScimGroupListResponse > } a Promise, with data of type {@link module:model/ScimGroupListResponse }
     */
    getAllGroups(opts) {
      return this.getAllGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a list of VRS users
     * Retrieves a list of VRS users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUserListResponse} and HTTP response
     */
    getAllUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'startIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];


      let returnType = ScimUserListResponse;

      return this.apiClient.callApi(
        '/scim/v2/Users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a list of VRS users
     * Retrieves a list of VRS users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count Non-negative maximum number of entries to return
     * @param {Number} opts.startIndex The 1-based index of the first query result
     * @return { Promise.< module:model/ScimUserListResponse > } a Promise, with data of type {@link module:model/ScimUserListResponse }
     */
    getAllUsers(opts) {
      return this.getAllUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a VRS role
     * Retrieves a VRS role based on the ID
     * @param {String} groupId The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    getGroupByIdWithHttpInfo(groupId) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupById");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];


      let returnType = ScimGroup;

      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a VRS role
     * Retrieves a VRS role based on the ID
     * @param {String} groupId The ID of the role
     * @return { Promise.< module:model/ScimGroup > } a Promise, with data of type {@link module:model/ScimGroup }
     */
    getGroupById(groupId) {
      return this.getGroupByIdWithHttpInfo(groupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a VRS User
     * Retrieves a VRS user based on their ID
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUser} and HTTP response
     */
    getUserByIdWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserById");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/scim+json'];


      let returnType = ScimUser;

      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a VRS User
     * Retrieves a VRS user based on their ID
     * @param {String} userId The ID of the user
     * @return { Promise.< module:model/ScimUser > } a Promise, with data of type {@link module:model/ScimUser }
     */
    getUserById(userId) {
      return this.getUserByIdWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or remove a user to/from a group
     * Adds or removes a VRS user to/from a VRS role
     * @param {String} groupId The ID of the role
     * @param {module:model/ScimGroupPatchRequestBody} scimGroupPatchRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    patchGroupByIdWithHttpInfo(groupId, scimGroupPatchRequestBody) {
      let postBody = scimGroupPatchRequestBody;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling patchGroupById");
      }
      // verify the required parameter 'scimGroupPatchRequestBody' is set
      if (scimGroupPatchRequestBody === undefined || scimGroupPatchRequestBody === null) {
        throw new Error("Missing the required parameter 'scimGroupPatchRequestBody' when calling patchGroupById");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];


      let returnType = ScimGroup;

      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add or remove a user to/from a group
     * Adds or removes a VRS user to/from a VRS role
     * @param {String} groupId The ID of the role
     * @param {module:model/ScimGroupPatchRequestBody} scimGroupPatchRequestBody 
     * @return { Promise.< module:model/ScimGroup > } a Promise, with data of type {@link module:model/ScimGroup }
     */
    patchGroupById(groupId, scimGroupPatchRequestBody) {
      return this.patchGroupByIdWithHttpInfo(groupId, scimGroupPatchRequestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or remove VRS user attributes
     * Adds or removes VRS user attributes based on the JSON properties
     * @param {String} userId The ID of the user
     * @param {module:model/ScimUserPatchRequestBody} scimUserPatchRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUser} and HTTP response
     */
    patchUserByIdWithHttpInfo(userId, scimUserPatchRequestBody) {
      let postBody = scimUserPatchRequestBody;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling patchUserById");
      }
      // verify the required parameter 'scimUserPatchRequestBody' is set
      if (scimUserPatchRequestBody === undefined || scimUserPatchRequestBody === null) {
        throw new Error("Missing the required parameter 'scimUserPatchRequestBody' when calling patchUserById");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];


      let returnType = ScimUser;

      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add or remove VRS user attributes
     * Adds or removes VRS user attributes based on the JSON properties
     * @param {String} userId The ID of the user
     * @param {module:model/ScimUserPatchRequestBody} scimUserPatchRequestBody 
     * @return { Promise.< module:model/ScimUser > } a Promise, with data of type {@link module:model/ScimUser }
     */
    patchUserById(userId, scimUserPatchRequestBody) {
      return this.patchUserByIdWithHttpInfo(userId, scimUserPatchRequestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a VRS Group
     * Updates (replaces) a VRS Group with the properties in the JSON
     * @param {String} groupId The ID of the group
     * @param {module:model/ScimGroup} scimGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimGroup} and HTTP response
     */
    updateGroupByIdWithHttpInfo(groupId, scimGroup) {
      let postBody = scimGroup;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateGroupById");
      }
      // verify the required parameter 'scimGroup' is set
      if (scimGroup === undefined || scimGroup === null) {
        throw new Error("Missing the required parameter 'scimGroup' when calling updateGroupById");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];


      let returnType = ScimGroup;

      return this.apiClient.callApi(
        '/scim/v2/Groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a VRS Group
     * Updates (replaces) a VRS Group with the properties in the JSON
     * @param {String} groupId The ID of the group
     * @param {module:model/ScimGroup} scimGroup 
     * @return { Promise.< module:model/ScimGroup > } a Promise, with data of type {@link module:model/ScimGroup }
     */
    updateGroupById(groupId, scimGroup) {
      return this.updateGroupByIdWithHttpInfo(groupId, scimGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates a VRS user
     * Updates (replaces) a VRS user with the properties in the JSON
     * @param {String} userId The ID of the user
     * @param {module:model/ScimUser} scimUser 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ScimUser} and HTTP response
     */
    updateUserByIdWithHttpInfo(userId, scimUser) {
      let postBody = scimUser;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserById");
      }
      // verify the required parameter 'scimUser' is set
      if (scimUser === undefined || scimUser === null) {
        throw new Error("Missing the required parameter 'scimUser' when calling updateUserById");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];


      let returnType = ScimUser;

      return this.apiClient.callApi(
        '/scim/v2/Users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates a VRS user
     * Updates (replaces) a VRS user with the properties in the JSON
     * @param {String} userId The ID of the user
     * @param {module:model/ScimUser} scimUser 
     * @return { Promise.< module:model/ScimUser > } a Promise, with data of type {@link module:model/ScimUser }
     */
    updateUserById(userId, scimUser) {
      return this.updateUserByIdWithHttpInfo(userId, scimUser)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





