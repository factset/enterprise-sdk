/**
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataSourceData from '../model/DataSourceData';
import DataSourceDataInstance from '../model/DataSourceDataInstance';
import DataSourceList from '../model/DataSourceList';
import ErrorList from '../model/ErrorList';

/**
* Datasource service.
* @module api/DatasourceApi
*/
export default class DatasourceApi {

    /**
    * Constructs a new DatasourceApi. 
    * @alias module:api/DatasourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Lists all datasources
     * List all datasources the user has permission to see
     * @param {String} tenant The code of the tenancy
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The column to sort on. Append - to sort in descending order. If parameter is not given, no sorting will be done
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. Default is 25 (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip. Default is 0 (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataSourceList} and HTTP response
     */
    getAllDataSourcesWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getAllDataSources");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = DataSourceList;

      return this.apiClient.callApi(
        '/v1/{tenant}/data-sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Lists all datasources
     * List all datasources the user has permission to see
     * @param {String} tenant The code of the tenancy
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort The column to sort on. Append - to sort in descending order. If parameter is not given, no sorting will be done
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. Default is 25 (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip. Default is 0 (default to 0)
     * @return { Promise.< module:model/DataSourceList > } a Promise, with data of type {@link module:model/DataSourceList }
     */
    getAllDataSources(tenant, opts) {
      return this.getAllDataSourcesWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a datasource
     * Gets a datasource based on the code passed
     * @param {String} tenant The code of the tenancy
     * @param {String} dataSourceCode The code of the datasource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataSourceData} and HTTP response
     */
    getDataSourceByCodeWithHttpInfo(tenant, dataSourceCode) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getDataSourceByCode");
      }
      // verify the required parameter 'dataSourceCode' is set
      if (dataSourceCode === undefined || dataSourceCode === null) {
        throw new Error("Missing the required parameter 'dataSourceCode' when calling getDataSourceByCode");
      }

      let pathParams = {
        'tenant': tenant,
        'dataSourceCode': dataSourceCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = DataSourceData;

      return this.apiClient.callApi(
        '/v1/{tenant}/data-sources/{dataSourceCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a datasource
     * Gets a datasource based on the code passed
     * @param {String} tenant The code of the tenancy
     * @param {String} dataSourceCode The code of the datasource
     * @return { Promise.< module:model/DataSourceData > } a Promise, with data of type {@link module:model/DataSourceData }
     */
    getDataSourceByCode(tenant, dataSourceCode) {
      return this.getDataSourceByCodeWithHttpInfo(tenant, dataSourceCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the data for the datasource
     * Gets the data for the datasource. There are optional query parameters to filter the data
     * @param {String} tenant The code of the tenancy
     * @param {String} dataSourceCode The code of the datasource
     * @param {Object} opts Optional parameters
     * @param {String} opts.entityCodes A series of query parameter used to filter the data for a datasource. This represents the entities for the datasource. E.g.: entityCodes=ACCOUNT&entityCodes=FUNDS
     * @param {String} opts.entityKeys A series of query parameter used to filter the data for a datasource. This is the entity key value for an entity selection. E.g.: entityKeys=1&entityKeys=Test2
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. Default is 25 (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip. Default is 0 (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DataSourceDataInstance} and HTTP response
     */
    getDataSourceDataWithHttpInfo(tenant, dataSourceCode, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getDataSourceData");
      }
      // verify the required parameter 'dataSourceCode' is set
      if (dataSourceCode === undefined || dataSourceCode === null) {
        throw new Error("Missing the required parameter 'dataSourceCode' when calling getDataSourceData");
      }

      let pathParams = {
        'tenant': tenant,
        'dataSourceCode': dataSourceCode
      };
      let queryParams = {
        'entityCodes': opts['entityCodes'],
        'entityKeys': opts['entityKeys'],
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = DataSourceDataInstance;

      return this.apiClient.callApi(
        '/v1/{tenant}/data-sources/{dataSourceCode}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the data for the datasource
     * Gets the data for the datasource. There are optional query parameters to filter the data
     * @param {String} tenant The code of the tenancy
     * @param {String} dataSourceCode The code of the datasource
     * @param {Object} opts Optional parameters
     * @param {String} opts.entityCodes A series of query parameter used to filter the data for a datasource. This represents the entities for the datasource. E.g.: entityCodes=ACCOUNT&entityCodes=FUNDS
     * @param {String} opts.entityKeys A series of query parameter used to filter the data for a datasource. This is the entity key value for an entity selection. E.g.: entityKeys=1&entityKeys=Test2
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return. Default is 25 (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip. Default is 0 (default to 0)
     * @return { Promise.< module:model/DataSourceDataInstance > } a Promise, with data of type {@link module:model/DataSourceDataInstance }
     */
    getDataSourceData(tenant, dataSourceCode, opts) {
      return this.getDataSourceDataWithHttpInfo(tenant, dataSourceCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





