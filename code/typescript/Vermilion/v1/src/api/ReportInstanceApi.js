/**
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorList from '../model/ErrorList';
import ReportGenerationRequestBody from '../model/ReportGenerationRequestBody';
import ReportInstanceData from '../model/ReportInstanceData';
import ReportInstanceDataResponse from '../model/ReportInstanceDataResponse';
import ReportInstanceList from '../model/ReportInstanceList';
import ReportInstanceLogList from '../model/ReportInstanceLogList';

/**
* ReportInstance service.
* @module api/ReportInstanceApi
*/
export default class ReportInstanceApi {

    /**
    * Constructs a new ReportInstanceApi. 
    * @alias module:api/ReportInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancels a report generation
     * Sends a request to cancel a report generation based on the report instance id passed
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId The id of the report instance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelReportGenerationWithHttpInfo(tenant, reportInstanceId) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling cancelReportGeneration");
      }
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling cancelReportGeneration");
      }

      let pathParams = {
        'tenant': tenant,
        'reportInstanceId': reportInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancels a report generation
     * Sends a request to cancel a report generation based on the report instance id passed
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId The id of the report instance
     * @return { Promise } a Promise
     */
    cancelReportGeneration(tenant, reportInstanceId) {
      return this.cancelReportGenerationWithHttpInfo(tenant, reportInstanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets the generated file
     * Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | ---------------- | ------------| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {String} reportFileName The report file name that has to be retrieved. report file name. E.g: xyz.pdf
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadReportFileWithHttpInfo(tenant, reportInstanceId, reportFileName) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling downloadReportFile");
      }
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling downloadReportFile");
      }
      // verify the required parameter 'reportFileName' is set
      if (reportFileName === undefined || reportFileName === null) {
        throw new Error("Missing the required parameter 'reportFileName' when calling downloadReportFile");
      }

      let pathParams = {
        'tenant': tenant,
        'reportInstanceId': reportInstanceId,
        'reportFileName': reportFileName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/msword', 'application/postscript', 'text/csv', 'text/html', 'application/xml', 'application/zip', 'application/json'];


      let returnType = File;

      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}/results/{reportFileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets the generated file
     * Get the generated file for a report instance. Users can fetch the generated report once the generation is finished. The report instance id and the report file name are passed in as path paramters. The following mapping defines the respective Content-Type for the outputFormat defined during report generation. | outputFormat | Content-Type | | ---------------- | ------------| |WORD     | application/msword | |WORD2010 |   application/vnd.openxmlformats-officedocument.wordprocessingml.document| |EXCEL    |   application/vnd.ms-excel| |EXCEL2010|   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet| |PPT      |   application/vnd.ms-powerpoint| |PPT2010  |   application/vnd.openxmlformats-officedocument.presentationml.presentation| |PDF      |   application/pdf| |CSV      |   text/csv| |XML      |   application/xml| |VXML     |   application/xml| |HTML     |   text/html| |PS       |   application/postscript|
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {String} reportFileName The report file name that has to be retrieved. report file name. E.g: xyz.pdf
     * @return { Promise.< File > } a Promise, with data of type {@link File }
     */
    downloadReportFile(tenant, reportInstanceId, reportFileName) {
      return this.downloadReportFileWithHttpInfo(tenant, reportInstanceId, reportFileName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of report instances
     * Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
     * @param {String} tenant The code of the tenancy
     * @param {Object} opts Optional parameters
     * @param {String} opts.reportDefinitionCode Acts as a filter for the retrieval process. Filters the report instances that match the report definition code
     * @param {String} opts.entityCodes A series of query parameters used to filter the report instances by entity code. E.g: entityCode=DATE&entityCode=SYSTEM_LANG
     * @param {String} opts.entityKeys A series of query parameters used to filter the report instances by entity keys. E.g: entityKey=en-gb
     * @param {String} opts.sectionFilter Acts as a filter for the retrieval process. Filters the report instances that match the section filter
     * @param {String} opts.outputFormat Acts as a filter for the retrieval process. Filters the report instances that match the output format
     * @param {Array.<String>} opts.sort The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportInstanceList} and HTTP response
     */
    getAllReportInstancesWithHttpInfo(tenant, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getAllReportInstances");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'reportDefinitionCode': opts['reportDefinitionCode'],
        'entityCodes': opts['entityCodes'],
        'entityKeys': opts['entityKeys'],
        'sectionFilter': opts['sectionFilter'],
        'outputFormat': opts['outputFormat'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ReportInstanceList;

      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of report instances
     * Gets a list of report instances. This can be filtered down further by including query parameters in the URL. For example, a report definition id can be added so the only report instances returned are the ones with a matching id
     * @param {String} tenant The code of the tenancy
     * @param {Object} opts Optional parameters
     * @param {String} opts.reportDefinitionCode Acts as a filter for the retrieval process. Filters the report instances that match the report definition code
     * @param {String} opts.entityCodes A series of query parameters used to filter the report instances by entity code. E.g: entityCode=DATE&entityCode=SYSTEM_LANG
     * @param {String} opts.entityKeys A series of query parameters used to filter the report instances by entity keys. E.g: entityKey=en-gb
     * @param {String} opts.sectionFilter Acts as a filter for the retrieval process. Filters the report instances that match the section filter
     * @param {String} opts.outputFormat Acts as a filter for the retrieval process. Filters the report instances that match the output format
     * @param {Array.<String>} opts.sort The column to sort on. Append - to sort in descending order. If parameter is not given, sorting will be based on the report instance id in descending order
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip (default to 0)
     * @return { Promise.< module:model/ReportInstanceList > } a Promise, with data of type {@link module:model/ReportInstanceList }
     */
    getAllReportInstances(tenant, opts) {
      return this.getAllReportInstancesWithHttpInfo(tenant, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a list of logs for the report instance generation
     * Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors & warnings'
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {Object} opts Optional parameters
     * @param {String} opts.errorsOnly If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly=true
     * @param {Array.<String>} opts.sort The column to sort on. Can add - to sort
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportInstanceLogList} and HTTP response
     */
    getReportGenerationLogsWithHttpInfo(tenant, reportInstanceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getReportGenerationLogs");
      }
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling getReportGenerationLogs");
      }

      let pathParams = {
        'tenant': tenant,
        'reportInstanceId': reportInstanceId
      };
      let queryParams = {
        'errorsOnly': opts['errorsOnly'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_paginationLimit': opts['paginationLimit'],
        '_paginationOffset': opts['paginationOffset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ReportInstanceLogList;

      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a list of logs for the report instance generation
     * Gets a list of logs for the generated report instance. Allows the user to sort on log message, type and date. Also allows for retrieving of just the errors & warnings'
     * @param {String} tenant The code of the tenancy
     * @param {String} reportInstanceId Used to validate that report file name belongs to the report instance passed
     * @param {Object} opts Optional parameters
     * @param {String} opts.errorsOnly If the parameter is set to true the endpoint should return just errors and warnings E.g: errorsOnly=true
     * @param {Array.<String>} opts.sort The column to sort on. Can add - to sort
     * @param {Number} opts.paginationLimit Non-negative maximum number of entries to return (default to 25)
     * @param {Number} opts.paginationOffset Non-negative number of entries to skip (default to 0)
     * @return { Promise.< module:model/ReportInstanceLogList > } a Promise, with data of type {@link module:model/ReportInstanceLogList }
     */
    getReportGenerationLogs(tenant, reportInstanceId, opts) {
      return this.getReportGenerationLogsWithHttpInfo(tenant, reportInstanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gets a report instance based on the ID
     * Gets a report instance object based on the ID passed
     * @param {String} reportInstanceId The ID of the report instance
     * @param {String} tenant The code of the tenancy
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportInstanceData} and HTTP response
     */
    getReportInstanceByIdWithHttpInfo(reportInstanceId, tenant) {
      let postBody = null;
      // verify the required parameter 'reportInstanceId' is set
      if (reportInstanceId === undefined || reportInstanceId === null) {
        throw new Error("Missing the required parameter 'reportInstanceId' when calling getReportInstanceById");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getReportInstanceById");
      }

      let pathParams = {
        'reportInstanceId': reportInstanceId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = ReportInstanceData;

      return this.apiClient.callApi(
        '/v1/{tenant}/report-instances/{reportInstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gets a report instance based on the ID
     * Gets a report instance object based on the ID passed
     * @param {String} reportInstanceId The ID of the report instance
     * @param {String} tenant The code of the tenancy
     * @return { Promise.< module:model/ReportInstanceData > } a Promise, with data of type {@link module:model/ReportInstanceData }
     */
    getReportInstanceById(reportInstanceId, tenant) {
      return this.getReportInstanceByIdWithHttpInfo(reportInstanceId, tenant)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generates a report
     * Generates a report using the specified ID and the JSON in the request body
     * @param {module:model/ReportGenerationRequestBody} reportGenerationRequestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReportInstanceDataResponse} and HTTP response
     */
    startReportGenerationWithHttpInfo(reportGenerationRequestBody) {
      let postBody = reportGenerationRequestBody;
      // verify the required parameter 'reportGenerationRequestBody' is set
      if (reportGenerationRequestBody === undefined || reportGenerationRequestBody === null) {
        throw new Error("Missing the required parameter 'reportGenerationRequestBody' when calling startReportGeneration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];


      let returnType = ReportInstanceDataResponse;

      return this.apiClient.callApi(
        '/v1/report-instances/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generates a report
     * Generates a report using the specified ID and the JSON in the request body
     * @param {module:model/ReportGenerationRequestBody} reportGenerationRequestBody 
     * @return { Promise.< module:model/ReportInstanceDataResponse > } a Promise, with data of type {@link module:model/ReportInstanceDataResponse }
     */
    startReportGeneration(reportGenerationRequestBody) {
      return this.startReportGenerationWithHttpInfo(reportGenerationRequestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





