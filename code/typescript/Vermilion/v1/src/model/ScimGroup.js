/**
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScimGroupMember from './ScimGroupMember';
import ScimMeta from './ScimMeta';

/**
 * The ScimGroup model module.
 * @module model/ScimGroup
 */
class ScimGroup {
    /**
     * Constructs a new <code>ScimGroup</code>.
     * Role details, defining permissions and access.
     * @alias module:model/ScimGroup
     */
    constructor() { 
        
        ScimGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScimGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScimGroup} obj Optional instance to populate.
     * @return {module:model/ScimGroup} The populated <code>ScimGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimGroup();

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], [ScimGroupMember]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'String');
            }
            if (data.hasOwnProperty('domainCode')) {
                obj['domainCode'] = ApiClient.convertToType(data['domainCode'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ScimMeta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }


}

/**
 * List of schema URIs for the group/role.
 * @member {Array.<String>} schemas
 */
ScimGroup.prototype['schemas'] = undefined;

/**
 * Unique identifier of the group/role.
 * @member {String} id
 */
ScimGroup.prototype['id'] = undefined;

/**
 * The display name of the group/role.
 * @member {String} displayName
 */
ScimGroup.prototype['displayName'] = undefined;

/**
 * A list of users assigned to the group/role.
 * @member {Array.<module:model/ScimGroupMember>} members
 */
ScimGroup.prototype['members'] = undefined;

/**
 * Tenant associated with the group/role.
 * @member {String} tenant
 */
ScimGroup.prototype['tenant'] = undefined;

/**
 * Domain code for the group.
 * @member {String} domainCode
 */
ScimGroup.prototype['domainCode'] = undefined;

/**
 * @member {module:model/ScimMeta} meta
 */
ScimGroup.prototype['meta'] = undefined;






export default ScimGroup;

