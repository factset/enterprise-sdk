/**
 * VRS API documentation
 * Documentation on all available end points in the VRSAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskPatchRequestBodyData model module.
 * @module model/TaskPatchRequestBodyData
 */
class TaskPatchRequestBodyData {
    /**
     * Constructs a new <code>TaskPatchRequestBodyData</code>.
     * Task data object.
     * @alias module:model/TaskPatchRequestBodyData
     */
    constructor() { 
        
        TaskPatchRequestBodyData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskPatchRequestBodyData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskPatchRequestBodyData} obj Optional instance to populate.
     * @return {module:model/TaskPatchRequestBodyData} The populated <code>TaskPatchRequestBodyData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskPatchRequestBodyData();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('expectedStartDate')) {
                obj['expectedStartDate'] = ApiClient.convertToType(data['expectedStartDate'], 'String');
            }
            if (data.hasOwnProperty('expectedEndDate')) {
                obj['expectedEndDate'] = ApiClient.convertToType(data['expectedEndDate'], 'String');
            }
            if (data.hasOwnProperty('actualStartDate')) {
                obj['actualStartDate'] = ApiClient.convertToType(data['actualStartDate'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Status of the task, status cannot be changed to IN_PROGRESS. It is case-sensitive and should be in upper case.
 * @member {module:model/TaskPatchRequestBodyData.StatusEnum} status
 */
TaskPatchRequestBodyData.prototype['status'] = undefined;

/**
 * Expected start date of task, date format should be 'd MMMMM yyyy HH:mm:ss' and will be converted to server time zone.
 * @member {String} expectedStartDate
 */
TaskPatchRequestBodyData.prototype['expectedStartDate'] = undefined;

/**
 * Expected end date of task, date format should be 'd MMMMM yyyy HH:mm:ss' and will be converted to server time zone.
 * @member {String} expectedEndDate
 */
TaskPatchRequestBodyData.prototype['expectedEndDate'] = undefined;

/**
 * Actual start date of task, date format should be 'd MMMMM yyyy HH:mm:ss' and will be converted to server time zone.
 * @member {String} actualStartDate
 */
TaskPatchRequestBodyData.prototype['actualStartDate'] = undefined;

/**
 * Notes for the task.
 * @member {String} notes
 */
TaskPatchRequestBodyData.prototype['notes'] = undefined;

/**
 * Role assigned to the task, It can't be null or empty.
 * @member {String} role
 */
TaskPatchRequestBodyData.prototype['role'] = undefined;

/**
 * User name assigned to the task.
 * @member {String} user
 */
TaskPatchRequestBodyData.prototype['user'] = undefined;

/**
 * task action to be performed, Approve and Reject are the possible values.
 * @member {String} action
 */
TaskPatchRequestBodyData.prototype['action'] = undefined;

/**
 * Reason code for rejection or approval, It will be validated against values from VRSReasonCodes.properties.
 * @member {String} reason
 */
TaskPatchRequestBodyData.prototype['reason'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TaskPatchRequestBodyData['StatusEnum'] = {

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "AWAITING_CORRECTION"
     * @const
     */
    "AWAITING_CORRECTION": "AWAITING_CORRECTION",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED",

    /**
     * value: "FAILED_REJECTED"
     * @const
     */
    "FAILED_REJECTED": "FAILED_REJECTED"
};



export default TaskPatchRequestBodyData;

