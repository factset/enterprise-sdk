/**
 * IRN API v1
 * Allows users to extract, create, update and configure IRN data.
 *
 * The version of the OpenAPI document: 1
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttachmentSummaryDto from '../model/AttachmentSummaryDto';
import CommentDto from '../model/CommentDto';
import CommentSummaryDto from '../model/CommentSummaryDto';
import CreateCommentDto from '../model/CreateCommentDto';
import NewItemDto from '../model/NewItemDto';
import Operation from '../model/Operation';
import ProblemDetails from '../model/ProblemDetails';

/**
* Comments service.
* @module api/CommentsApi
*/
export default class CommentsApi {

    /**
    * Constructs a new CommentsApi. 
    * @alias module:api/CommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a comment to a Note
     * @param {String} noteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCommentDto} opts.createCommentDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewItemDto} and HTTP response
     */
    createCommentWithHttpInfo(noteId, opts) {
      opts = opts || {};
      let postBody = opts['createCommentDto'];
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling createComment");
      }

      let pathParams = {
        'noteId': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = NewItemDto;

      return this.apiClient.callApi(
        '/notes/{noteId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a comment to a Note
     * @param {String} noteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCommentDto} opts.createCommentDto 
     * @return { Promise.< module:model/NewItemDto > } a Promise, with data of type {@link module:model/NewItemDto }
     */
    createComment(noteId, opts) {
      return this.createCommentWithHttpInfo(noteId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a comment attachment to a Note
     * @param {String} noteId 
     * @param {String} commentId 
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewItemDto} and HTTP response
     */
    createCommentAttachmentWithHttpInfo(noteId, commentId, file) {
      let postBody = null;
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling createCommentAttachment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling createCommentAttachment");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createCommentAttachment");
      }

      let pathParams = {
        'noteId': noteId,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];


      let returnType = NewItemDto;

      return this.apiClient.callApi(
        '/notes/{noteId}/comments/{commentId}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a comment attachment to a Note
     * @param {String} noteId 
     * @param {String} commentId 
     * @param {File} file 
     * @return { Promise.< module:model/NewItemDto > } a Promise, with data of type {@link module:model/NewItemDto }
     */
    createCommentAttachment(noteId, commentId, file) {
      return this.createCommentAttachmentWithHttpInfo(noteId, commentId, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Comment from a Note
     * @param {String} noteId 
     * @param {String} commentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCommentWithHttpInfo(noteId, commentId) {
      let postBody = null;
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteComment");
      }

      let pathParams = {
        'noteId': noteId,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/notes/{noteId}/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Comment from a Note
     * @param {String} noteId 
     * @param {String} commentId 
     * @return { Promise } a Promise
     */
    deleteComment(noteId, commentId) {
      return this.deleteCommentWithHttpInfo(noteId, commentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download single attachment detail of a comment belonging to a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @param {String} attachmentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadCommentAttachmentForCommentWithHttpInfo(noteId, commentId, attachmentId) {
      let postBody = null;
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling downloadCommentAttachmentForComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling downloadCommentAttachmentForComment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling downloadCommentAttachmentForComment");
      }

      let pathParams = {
        'noteId': noteId,
        'commentId': commentId,
        'attachmentId': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/notes/{noteId}/comments/{commentId}/attachments/{attachmentId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download single attachment detail of a comment belonging to a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @param {String} attachmentId 
     * @return { Promise } a Promise
     */
    downloadCommentAttachmentForComment(noteId, commentId, attachmentId) {
      return this.downloadCommentAttachmentForCommentWithHttpInfo(noteId, commentId, attachmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of a comment belonging to a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentDto} and HTTP response
     */
    getCommentWithHttpInfo(noteId, commentId) {
      let postBody = null;
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getComment");
      }

      let pathParams = {
        'noteId': noteId,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = CommentDto;

      return this.apiClient.callApi(
        '/notes/{noteId}/comments/{commentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details of a comment belonging to a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @return { Promise.< module:model/CommentDto > } a Promise, with data of type {@link module:model/CommentDto }
     */
    getComment(noteId, commentId) {
      return this.getCommentWithHttpInfo(noteId, commentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get attachments summary of a comment belonging to a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AttachmentSummaryDto>} and HTTP response
     */
    getCommentAttachmentsWithHttpInfo(noteId, commentId) {
      let postBody = null;
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getCommentAttachments");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getCommentAttachments");
      }

      let pathParams = {
        'noteId': noteId,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [AttachmentSummaryDto];

      return this.apiClient.callApi(
        '/notes/{noteId}/comments/{commentId}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get attachments summary of a comment belonging to a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @return { Promise.< Array.<module:model/AttachmentSummaryDto> > } a Promise, with data of type {@link Array.<module:model/AttachmentSummaryDto> }
     */
    getCommentAttachments(noteId, commentId) {
      return this.getCommentAttachmentsWithHttpInfo(noteId, commentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all comments for a note
     * @param {String} noteId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CommentSummaryDto>} and HTTP response
     */
    getCommentsWithHttpInfo(noteId) {
      let postBody = null;
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getComments");
      }

      let pathParams = {
        'noteId': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];


      let returnType = [CommentSummaryDto];

      return this.apiClient.callApi(
        '/notes/{noteId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all comments for a note
     * @param {String} noteId 
     * @return { Promise.< Array.<module:model/CommentSummaryDto> > } a Promise, with data of type {@link Array.<module:model/CommentSummaryDto> }
     */
    getComments(noteId) {
      return this.getCommentsWithHttpInfo(noteId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit a comment for a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchCommentWithHttpInfo(noteId, commentId, opts) {
      opts = opts || {};
      let postBody = opts['operation'];
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling patchComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling patchComment");
      }

      let pathParams = {
        'noteId': noteId,
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['FactSetApiKey', 'FactSetOAuth2'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['application/json'];


      let returnType = null;

      return this.apiClient.callApi(
        '/notes/{noteId}/comments/{commentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit a comment for a note
     * @param {String} noteId 
     * @param {String} commentId 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/Operation>} opts.operation 
     * @return { Promise } a Promise
     */
    patchComment(noteId, commentId, opts) {
      return this.patchCommentWithHttpInfo(noteId, commentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}





